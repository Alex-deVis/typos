// This file is code-genned by typos-dict-codegen
#![allow(clippy::unreadable_literal)]

pub static WORD_TRIE: dictgen::DictTrie<&'static [&'static str]> = dictgen::DictTrie {
    root: &WORD_NODE,
    unicode: &WORD_UNICODE_TABLE,
    range: 3..=19,
};

pub static WORD_UNICODE_TABLE: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("carnagie-mellon"),
        dictgen::InsensitiveStr::Ascii("carnigie-mellon"),
        dictgen::InsensitiveStr::Ascii("co-incided"),
        dictgen::InsensitiveStr::Ascii("coca cola"),
        dictgen::InsensitiveStr::Ascii("nightfa;;"),
        dictgen::InsensitiveStr::Ascii("p0enis"),
    ],
    values: &[
        &["carnegie-mellon"],
        &["carnegie-mellon"],
        &["coincided"],
        &["coca-cola"],
        &["nightfall"],
        &["penis"],
    ],
    range: 6..=15,
};

static WORD_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_CHILDREN),
    value: None,
};

static WORD_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    Some(&WORD_A_NODE),
    Some(&WORD_B_NODE),
    Some(&WORD_C_NODE),
    Some(&WORD_D_NODE),
    Some(&WORD_E_NODE),
    Some(&WORD_F_NODE),
    Some(&WORD_G_NODE),
    Some(&WORD_H_NODE),
    Some(&WORD_I_NODE),
    Some(&WORD_J_NODE),
    Some(&WORD_K_NODE),
    Some(&WORD_L_NODE),
    Some(&WORD_M_NODE),
    Some(&WORD_N_NODE),
    Some(&WORD_O_NODE),
    Some(&WORD_P_NODE),
    Some(&WORD_Q_NODE),
    Some(&WORD_R_NODE),
    Some(&WORD_S_NODE),
    Some(&WORD_T_NODE),
    Some(&WORD_U_NODE),
    Some(&WORD_V_NODE),
    Some(&WORD_W_NODE),
    Some(&WORD_X_NODE),
    Some(&WORD_Y_NODE),
    Some(&WORD_Z_NODE),
];

static WORD_Z_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_Z_CHILDREN),
    value: None,
};

pub static WORD_Z_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("aelots"),
        dictgen::InsensitiveStr::Ascii("ealotes"),
        dictgen::InsensitiveStr::Ascii("ealoths"),
        dictgen::InsensitiveStr::Ascii("ealotus"),
        dictgen::InsensitiveStr::Ascii("ealouts"),
        dictgen::InsensitiveStr::Ascii("ealtos"),
        dictgen::InsensitiveStr::Ascii("eebra"),
        dictgen::InsensitiveStr::Ascii("elaots"),
        dictgen::InsensitiveStr::Ascii("elaous"),
        dictgen::InsensitiveStr::Ascii("epplein"),
        dictgen::InsensitiveStr::Ascii("epplien"),
        dictgen::InsensitiveStr::Ascii("imbabe"),
        dictgen::InsensitiveStr::Ascii("imbabew"),
        dictgen::InsensitiveStr::Ascii("imbabwae"),
        dictgen::InsensitiveStr::Ascii("imbabwaen"),
        dictgen::InsensitiveStr::Ascii("imbawbe"),
        dictgen::InsensitiveStr::Ascii("inoists"),
        dictgen::InsensitiveStr::Ascii("ionisim"),
        dictgen::InsensitiveStr::Ascii("ionistas"),
        dictgen::InsensitiveStr::Ascii("ionistes"),
        dictgen::InsensitiveStr::Ascii("ionistisk"),
        dictgen::InsensitiveStr::Ascii("ionistm"),
        dictgen::InsensitiveStr::Ascii("ionsim"),
        dictgen::InsensitiveStr::Ascii("ionsit"),
        dictgen::InsensitiveStr::Ascii("ionsits"),
        dictgen::InsensitiveStr::Ascii("oinism"),
        dictgen::InsensitiveStr::Ascii("oinist"),
        dictgen::InsensitiveStr::Ascii("oinists"),
    ],
    values: &[
        &["zealots"],
        &["zealots"],
        &["zealots"],
        &["zealots"],
        &["zealous"],
        &["zealots"],
        &["zebra"],
        &["zealots"],
        &["zealous"],
        &["zeppelin"],
        &["zeppelin"],
        &["zimbabwe"],
        &["zimbabwe"],
        &["zimbabwe"],
        &["zimbabwe"],
        &["zimbabwe"],
        &["zionists"],
        &["zionism"],
        &["zionists"],
        &["zionists"],
        &["zionists"],
        &["zionism"],
        &["zionism"],
        &["zionist"],
        &["zionists"],
        &["zionism"],
        &["zionist"],
        &["zionists"],
    ],
    range: 5..=9,
};

static WORD_Y_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_Y_CHILDREN),
    value: None,
};

pub static WORD_Y_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("aching"),
        dictgen::InsensitiveStr::Ascii("aer"),
        dictgen::InsensitiveStr::Ascii("aerly"),
        dictgen::InsensitiveStr::Ascii("aers"),
        dictgen::InsensitiveStr::Ascii("atch"),
        dictgen::InsensitiveStr::Ascii("earm"),
        dictgen::InsensitiveStr::Ascii("easr"),
        dictgen::InsensitiveStr::Ascii("eild"),
        dictgen::InsensitiveStr::Ascii("eilding"),
        dictgen::InsensitiveStr::Ascii("ementite"),
        dictgen::InsensitiveStr::Ascii("era"),
        dictgen::InsensitiveStr::Ascii("eras"),
        dictgen::InsensitiveStr::Ascii("ersa"),
        dictgen::InsensitiveStr::Ascii("oesmite"),
        dictgen::InsensitiveStr::Ascii("orksher"),
        dictgen::InsensitiveStr::Ascii("orkshie"),
        dictgen::InsensitiveStr::Ascii("orkshrie"),
        dictgen::InsensitiveStr::Ascii("orskhire"),
        dictgen::InsensitiveStr::Ascii("osemeti"),
        dictgen::InsensitiveStr::Ascii("osemitie"),
        dictgen::InsensitiveStr::Ascii("osimete"),
        dictgen::InsensitiveStr::Ascii("otube"),
        dictgen::InsensitiveStr::Ascii("oungents"),
        dictgen::InsensitiveStr::Ascii("ounget"),
        dictgen::InsensitiveStr::Ascii("ourselfes"),
        dictgen::InsensitiveStr::Ascii("ourselvs"),
        dictgen::InsensitiveStr::Ascii("oursleves"),
        dictgen::InsensitiveStr::Ascii("ouseff"),
        dictgen::InsensitiveStr::Ascii("ouself"),
        dictgen::InsensitiveStr::Ascii("rea"),
        dictgen::InsensitiveStr::Ascii("tou"),
        dictgen::InsensitiveStr::Ascii("uo"),
    ],
    values: &[
        &["yachting"],
        &["year"],
        &["yearly"],
        &["years"],
        &["yacht"],
        &["year"],
        &["years"],
        &["yield"],
        &["yielding"],
        &["yemenite"],
        &["year"],
        &["years"],
        &["years"],
        &["yosemite"],
        &["yorkshire"],
        &["yorkshire"],
        &["yorkshire"],
        &["yorkshire"],
        &["yosemite"],
        &["yosemite"],
        &["yosemite"],
        &["youtube"],
        &["youngest"],
        &["youngest"],
        &["yourselves"],
        &["yourselves"],
        &["yourselves"],
        &["yousef"],
        &["yourself"],
        &["year"],
        &["you"],
        &["you"],
    ],
    range: 2..=9,
};

static WORD_X_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_X_CHILDREN),
    value: None,
};

pub static WORD_X_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("enbolade"),
        dictgen::InsensitiveStr::Ascii("enobalde"),
        dictgen::InsensitiveStr::Ascii("enohpobic"),
        dictgen::InsensitiveStr::Ascii("enophibia"),
        dictgen::InsensitiveStr::Ascii("enophibic"),
        dictgen::InsensitiveStr::Ascii("enophobical"),
        dictgen::InsensitiveStr::Ascii("enophoblic"),
        dictgen::InsensitiveStr::Ascii("enophoby"),
        dictgen::InsensitiveStr::Ascii("enophonic"),
        dictgen::InsensitiveStr::Ascii("enophopia"),
        dictgen::InsensitiveStr::Ascii("enophopic"),
        dictgen::InsensitiveStr::Ascii("eonblade"),
        dictgen::InsensitiveStr::Ascii("eonphobia"),
        dictgen::InsensitiveStr::Ascii("eonphobic"),
    ],
    values: &[
        &["xenoblade"],
        &["xenoblade"],
        &["xenophobic"],
        &["xenophobia"],
        &["xenophobic"],
        &["xenophobia"],
        &["xenophobic"],
        &["xenophobia"],
        &["xenophobic"],
        &["xenophobia"],
        &["xenophobic"],
        &["xenoblade"],
        &["xenophobia"],
        &["xenophobic"],
    ],
    range: 8..=11,
};

static WORD_W_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_W_CHILDREN),
    value: None,
};

static WORD_W_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    Some(&WORD_WA_NODE),
    None,
    None,
    None,
    Some(&WORD_WE_NODE),
    None,
    None,
    Some(&WORD_WH_NODE),
    Some(&WORD_WI_NODE),
    None,
    None,
    Some(&WORD_WL_NODE),
    None,
    Some(&WORD_WN_NODE),
    Some(&WORD_WO_NODE),
    None,
    None,
    Some(&WORD_WR_NODE),
    None,
    Some(&WORD_WT_NODE),
    Some(&WORD_WU_NODE),
    None,
    None,
    None,
    None,
    None,
];

static WORD_WU_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_WU_CHILDREN),
    value: None,
};

pub static WORD_WU_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("pport")],
    values: &[&["support"]],
    range: 5..=5,
};

static WORD_WT_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_WT_CHILDREN),
    value: None,
};

pub static WORD_WT_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("iches"),
        dictgen::InsensitiveStr::Ascii("ih"),
    ],
    values: &[&["witches"], &["with"]],
    range: 2..=5,
};

static WORD_WR_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_WR_CHILDREN),
    value: None,
};

pub static WORD_WR_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("anlger"),
        dictgen::InsensitiveStr::Ascii("eckign"),
        dictgen::InsensitiveStr::Ascii("ecthed"),
        dictgen::InsensitiveStr::Ascii("ekcing"),
        dictgen::InsensitiveStr::Ascii("eslte"),
        dictgen::InsensitiveStr::Ascii("eslter"),
        dictgen::InsensitiveStr::Ascii("esters"),
        dictgen::InsensitiveStr::Ascii("estlewar"),
        dictgen::InsensitiveStr::Ascii("iet"),
        dictgen::InsensitiveStr::Ascii("iten"),
        dictgen::InsensitiveStr::Ascii("itting"),
        dictgen::InsensitiveStr::Ascii("nagler"),
        dictgen::InsensitiveStr::Ascii("oet"),
        dictgen::InsensitiveStr::Ascii("ok"),
        dictgen::InsensitiveStr::Ascii("oking"),
        dictgen::InsensitiveStr::Ascii("teched"),
    ],
    values: &[
        &["wrangler"],
        &["wrecking"],
        &["wretched"],
        &["wrecking"],
        &["wrestle"],
        &["wrestler"],
        &["wrestlers"],
        &["wrestler"],
        &["write"],
        &["written"],
        &["writing"],
        &["wrangler"],
        &["wrote"],
        &["work"],
        &["working"],
        &["wretched"],
    ],
    range: 2..=8,
};

static WORD_WO_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_WO_CHILDREN),
    value: None,
};

pub static WORD_WO_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("hle"),
        dictgen::InsensitiveStr::Ascii("kr"),
        dictgen::InsensitiveStr::Ascii("kring"),
        dictgen::InsensitiveStr::Ascii("lrdview"),
        dictgen::InsensitiveStr::Ascii("lrdwide"),
        dictgen::InsensitiveStr::Ascii("nderes"),
        dictgen::InsensitiveStr::Ascii("nderfull"),
        dictgen::InsensitiveStr::Ascii("nderfullly"),
        dictgen::InsensitiveStr::Ascii("nderfuly"),
        dictgen::InsensitiveStr::Ascii("nderlad"),
        dictgen::InsensitiveStr::Ascii("nderus"),
        dictgen::InsensitiveStr::Ascii("nderwand"),
        dictgen::InsensitiveStr::Ascii("odowrking"),
        dictgen::InsensitiveStr::Ascii("odworkign"),
        dictgen::InsensitiveStr::Ascii("rdlview"),
        dictgen::InsensitiveStr::Ascii("rdlwide"),
        dictgen::InsensitiveStr::Ascii("rhsiping"),
        dictgen::InsensitiveStr::Ascii("rhsipping"),
        dictgen::InsensitiveStr::Ascii("rhtless"),
        dictgen::InsensitiveStr::Ascii("rkfore"),
        dictgen::InsensitiveStr::Ascii("rkfroce"),
        dictgen::InsensitiveStr::Ascii("rkingest"),
        dictgen::InsensitiveStr::Ascii("rkins"),
        dictgen::InsensitiveStr::Ascii("rkstaion"),
        dictgen::InsensitiveStr::Ascii("rkstaiton"),
        dictgen::InsensitiveStr::Ascii("rkstaton"),
        dictgen::InsensitiveStr::Ascii("rkststion"),
        dictgen::InsensitiveStr::Ascii("rldivew"),
        dictgen::InsensitiveStr::Ascii("rldveiw"),
        dictgen::InsensitiveStr::Ascii("rls"),
        dictgen::InsensitiveStr::Ascii("rshippig"),
        dictgen::InsensitiveStr::Ascii("rshippping"),
        dictgen::InsensitiveStr::Ascii("rshoping"),
        dictgen::InsensitiveStr::Ascii("rshopping"),
        dictgen::InsensitiveStr::Ascii("rstened"),
        dictgen::InsensitiveStr::Ascii("rthelss"),
        dictgen::InsensitiveStr::Ascii("udl"),
        dictgen::InsensitiveStr::Ascii("udlnt"),
        dictgen::InsensitiveStr::Ascii("udlve"),
        dictgen::InsensitiveStr::Ascii("uldnot"),
        dictgen::InsensitiveStr::Ascii("ulndt"),
    ],
    values: &[
        &["whole"],
        &["work"],
        &["working"],
        &["worldview"],
        &["worldwide"],
        &["wonders"],
        &["wonderful"],
        &["wonderfully"],
        &["wonderfully"],
        &["wonderland"],
        &["wonders"],
        &["wonderland"],
        &["woodworking"],
        &["woodworking"],
        &["worldview"],
        &["worldwide"],
        &["worshiping"],
        &["worshipping"],
        &["worthless"],
        &["workforce"],
        &["workforce"],
        &["workings"],
        &["workings"],
        &["workstation"],
        &["workstation"],
        &["workstation"],
        &["workstation"],
        &["worldview"],
        &["worldview"],
        &["world"],
        &["worshipping"],
        &["worshipping"],
        &["worshiping"],
        &["worshipping"],
        &["worsened"],
        &["worthless"],
        &["would"],
        &["wouldnt"],
        &["wouldve"],
        &["wouldnt"],
        &["wouldnt"],
    ],
    range: 2..=10,
};

static WORD_WN_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_WN_CHILDREN),
    value: None,
};

pub static WORD_WN_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("at"),
        dictgen::InsensitiveStr::Ascii("ated"),
        dictgen::InsensitiveStr::Ascii("ats"),
    ],
    values: &[&["want"], &["wanted"], &["wants"]],
    range: 2..=4,
};

static WORD_WL_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_WL_CHILDREN),
    value: None,
};

pub static WORD_WL_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("acott")],
    values: &[&["walcott"]],
    range: 5..=5,
};

static WORD_WI_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_WI_CHILDREN),
    value: None,
};

static WORD_WI_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    Some(&WORD_WIA_NODE),
    None,
    Some(&WORD_WIC_NODE),
    Some(&WORD_WID_NODE),
    Some(&WORD_WIE_NODE),
    None,
    Some(&WORD_WIG_NODE),
    Some(&WORD_WIH_NODE),
    None,
    None,
    Some(&WORD_WIK_NODE),
    Some(&WORD_WIL_NODE),
    None,
    Some(&WORD_WIN_NODE),
    None,
    None,
    None,
    Some(&WORD_WIR_NODE),
    Some(&WORD_WIS_NODE),
    Some(&WORD_WIT_NODE),
    Some(&WORD_WIU_NODE),
    None,
    None,
    None,
    None,
    None,
];

static WORD_WIU_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_WIU_CHILDREN),
    value: None,
};

pub static WORD_WIU_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("ll")],
    values: &[&["will"]],
    range: 2..=2,
};

static WORD_WIT_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_WIT_CHILDREN),
    value: None,
};

pub static WORD_WIT_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("hces"),
        dictgen::InsensitiveStr::Ascii("hdral"),
        dictgen::InsensitiveStr::Ascii("hdrawalls"),
        dictgen::InsensitiveStr::Ascii("hdrawan"),
        dictgen::InsensitiveStr::Ascii("hdrawel"),
        dictgen::InsensitiveStr::Ascii("hdrawels"),
        dictgen::InsensitiveStr::Ascii("hdrawin"),
        dictgen::InsensitiveStr::Ascii("hdrawl"),
        dictgen::InsensitiveStr::Ascii("hdrawles"),
        dictgen::InsensitiveStr::Ascii("hdrawling"),
        dictgen::InsensitiveStr::Ascii("hdrawning"),
        dictgen::InsensitiveStr::Ascii("held"),
        dictgen::InsensitiveStr::Ascii("helist"),
        dictgen::InsensitiveStr::Ascii("hh"),
        dictgen::InsensitiveStr::Ascii("hhelding"),
        dictgen::InsensitiveStr::Ascii("hholdng"),
        dictgen::InsensitiveStr::Ascii("hing"),
        dictgen::InsensitiveStr::Ascii("hold"),
        dictgen::InsensitiveStr::Ascii("hrdawal"),
        dictgen::InsensitiveStr::Ascii("hrdawing"),
        dictgen::InsensitiveStr::Ascii("ht"),
        dictgen::InsensitiveStr::Ascii("n"),
        dictgen::InsensitiveStr::Ascii("nesess"),
        dictgen::InsensitiveStr::Ascii("nesss"),
        dictgen::InsensitiveStr::Ascii("nesssing"),
        dictgen::InsensitiveStr::Ascii("nissing"),
    ],
    values: &[
        &["witches"],
        &["withdrawal"],
        &["withdrawals"],
        &["withdrawn"],
        &["withdrawal"],
        &["withdrawals"],
        &["withdrawn"],
        &["withdrawal"],
        &["withdrawals"],
        &["withdrawing"],
        &["withdrawing"],
        &["withheld"],
        &["whitelist"],
        &["with"],
        &["withholding"],
        &["withholding"],
        &["within"],
        &["withhold"],
        &["withdrawals"],
        &["withdrawing"],
        &["with"],
        &["with"],
        &["witnesses"],
        &["witnesses"],
        &["witnessing"],
        &["witnessing"],
    ],
    range: 1..=9,
};

static WORD_WIS_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_WIS_CHILDREN),
    value: None,
};

pub static WORD_WIS_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("conisn"),
        dictgen::InsensitiveStr::Ascii("consion"),
        dictgen::InsensitiveStr::Ascii("hlisht"),
        dictgen::InsensitiveStr::Ascii("hlsit"),
        dictgen::InsensitiveStr::Ascii("hpered"),
        dictgen::InsensitiveStr::Ascii("hpering"),
        dictgen::InsensitiveStr::Ascii("hpers"),
        dictgen::InsensitiveStr::Ascii("nton"),
    ],
    values: &[
        &["wisconsin"],
        &["wisconsin"],
        &["wishlist"],
        &["wishlist"],
        &["whispered"],
        &["whispering"],
        &["whispers"],
        &["winston"],
    ],
    range: 4..=7,
};

static WORD_WIR_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_WIR_CHILDREN),
    value: None,
};

pub static WORD_WIR_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("edest"),
        dictgen::InsensitiveStr::Ascii("ting"),
    ],
    values: &[&["weirdest"], &["writing"]],
    range: 4..=5,
};

static WORD_WIN_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_WIN_CHILDREN),
    value: None,
};

pub static WORD_WIN_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("cheseter"),
        dictgen::InsensitiveStr::Ascii("chestor"),
        dictgen::InsensitiveStr::Ascii("dhsield"),
        dictgen::InsensitiveStr::Ascii("dosr"),
        dictgen::InsensitiveStr::Ascii("dsheild"),
        dictgen::InsensitiveStr::Ascii("dsheilds"),
        dictgen::InsensitiveStr::Ascii("dshied"),
        dictgen::InsensitiveStr::Ascii("dshiled"),
        dictgen::InsensitiveStr::Ascii("dsoar"),
        dictgen::InsensitiveStr::Ascii("inpeg"),
        dictgen::InsensitiveStr::Ascii("nigns"),
        dictgen::InsensitiveStr::Ascii("nins"),
        dictgen::InsensitiveStr::Ascii("npieg"),
        dictgen::InsensitiveStr::Ascii("sdor"),
        dictgen::InsensitiveStr::Ascii("tesses"),
        dictgen::InsensitiveStr::Ascii("tson"),
    ],
    values: &[
        &["winchester"],
        &["winchester"],
        &["windshield"],
        &["windsor"],
        &["windshield"],
        &["windshield"],
        &["windshield"],
        &["windshield"],
        &["windsor"],
        &["winnipeg"],
        &["winnings"],
        &["winnings"],
        &["winnipeg"],
        &["windsor"],
        &["witnesses"],
        &["winston"],
    ],
    range: 4..=8,
};

static WORD_WIL_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_WIL_CHILDREN),
    value: None,
};

pub static WORD_WIL_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("derniss"),
        dictgen::InsensitiveStr::Ascii("dreness"),
        dictgen::InsensitiveStr::Ascii("laims"),
        dictgen::InsensitiveStr::Ascii("le"),
        dictgen::InsensitiveStr::Ascii("lfullly"),
        dictgen::InsensitiveStr::Ascii("lfuly"),
        dictgen::InsensitiveStr::Ascii("limas"),
        dictgen::InsensitiveStr::Ascii("lingless"),
        dictgen::InsensitiveStr::Ascii("lk"),
    ],
    values: &[
        &["wilderness"],
        &["wilderness"],
        &["williams"],
        &["will"],
        &["willfully"],
        &["willfully"],
        &["williams"],
        &["willingness"],
        &["will"],
    ],
    range: 2..=8,
};

static WORD_WIK_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_WIK_CHILDREN),
    value: None,
};

pub static WORD_WIK_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ileakers"),
        dictgen::InsensitiveStr::Ascii("ileakes"),
    ],
    values: &[&["wikileaks"], &["wikileaks"]],
    range: 7..=8,
};

static WORD_WIH_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_WIH_CHILDREN),
    value: Some(&["with"]),
};

pub static WORD_WIH_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("t")],
    values: &[&["with"]],
    range: 1..=1,
};

static WORD_WIG_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_WIG_CHILDREN),
    value: None,
};

pub static WORD_WIG_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("dets")],
    values: &[&["widgets"]],
    range: 4..=4,
};

static WORD_WIE_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_WIE_CHILDREN),
    value: None,
};

pub static WORD_WIE_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("f"),
        dictgen::InsensitiveStr::Ascii("ghted"),
        dictgen::InsensitiveStr::Ascii("ghtlifting"),
        dictgen::InsensitiveStr::Ascii("ghts"),
        dictgen::InsensitiveStr::Ascii("rd"),
        dictgen::InsensitiveStr::Ascii("w"),
    ],
    values: &[
        &["wife"],
        &["weighted"],
        &["weightlifting"],
        &["weights"],
        &["weird"],
        &["view"],
    ],
    range: 1..=10,
};

static WORD_WID_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_WID_CHILDREN),
    value: None,
};

pub static WORD_WID_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("epsread"),
        dictgen::InsensitiveStr::Ascii("espred"),
        dictgen::InsensitiveStr::Ascii("esread"),
        dictgen::InsensitiveStr::Ascii("gest"),
        dictgen::InsensitiveStr::Ascii("getas"),
    ],
    values: &[
        &["widespread"],
        &["widespread"],
        &["widespread"],
        &["widgets"],
        &["widgets"],
    ],
    range: 4..=7,
};

static WORD_WIC_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_WIC_CHILDREN),
    value: None,
};

pub static WORD_WIC_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("h")],
    values: &[&["which"]],
    range: 1..=1,
};

static WORD_WIA_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_WIA_CHILDREN),
    value: None,
};

pub static WORD_WIA_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ters"),
        dictgen::InsensitiveStr::Ascii("vers"),
    ],
    values: &[&["waiters"], &["waivers"]],
    range: 4..=4,
};

static WORD_WH_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_WH_CHILDREN),
    value: None,
};

pub static WORD_WH_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("aeton"),
        dictgen::InsensitiveStr::Ascii("ant"),
        dictgen::InsensitiveStr::Ascii("ants"),
        dictgen::InsensitiveStr::Ascii("atosever"),
        dictgen::InsensitiveStr::Ascii("atseover"),
        dictgen::InsensitiveStr::Ascii("cih"),
        dictgen::InsensitiveStr::Ascii("eras"),
        dictgen::InsensitiveStr::Ascii("erease"),
        dictgen::InsensitiveStr::Ascii("ereever"),
        dictgen::InsensitiveStr::Ascii("eter"),
        dictgen::InsensitiveStr::Ascii("ic"),
        dictgen::InsensitiveStr::Ascii("ietlist"),
        dictgen::InsensitiveStr::Ascii("ihc"),
        dictgen::InsensitiveStr::Ascii("ilrwind"),
        dictgen::InsensitiveStr::Ascii("ilsting"),
        dictgen::InsensitiveStr::Ascii("ipser"),
        dictgen::InsensitiveStr::Ascii("ipsered"),
        dictgen::InsensitiveStr::Ascii("ipsering"),
        dictgen::InsensitiveStr::Ascii("ipsers"),
        dictgen::InsensitiveStr::Ascii("islist"),
        dictgen::InsensitiveStr::Ascii("islte"),
        dictgen::InsensitiveStr::Ascii("isltes"),
        dictgen::InsensitiveStr::Ascii("islting"),
        dictgen::InsensitiveStr::Ascii("isperd"),
        dictgen::InsensitiveStr::Ascii("isperered"),
        dictgen::InsensitiveStr::Ascii("isperes"),
        dictgen::InsensitiveStr::Ascii("istel"),
        dictgen::InsensitiveStr::Ascii("istels"),
        dictgen::InsensitiveStr::Ascii("itelsit"),
        dictgen::InsensitiveStr::Ascii("ith"),
        dictgen::InsensitiveStr::Ascii("itholding"),
        dictgen::InsensitiveStr::Ascii("itleist"),
        dictgen::InsensitiveStr::Ascii("itsle"),
        dictgen::InsensitiveStr::Ascii("itsles"),
        dictgen::InsensitiveStr::Ascii("itsling"),
        dictgen::InsensitiveStr::Ascii("lch"),
        dictgen::InsensitiveStr::Ascii("n"),
        dictgen::InsensitiveStr::Ascii("oleheartadly"),
        dictgen::InsensitiveStr::Ascii("oleheartdly"),
        dictgen::InsensitiveStr::Ascii("oleheartedy"),
        dictgen::InsensitiveStr::Ascii("oleheartely"),
        dictgen::InsensitiveStr::Ascii("oleheartidly"),
        dictgen::InsensitiveStr::Ascii("oley"),
        dictgen::InsensitiveStr::Ascii("oly"),
        dictgen::InsensitiveStr::Ascii("rilwind"),
        dictgen::InsensitiveStr::Ascii("siper"),
        dictgen::InsensitiveStr::Ascii("sipered"),
        dictgen::InsensitiveStr::Ascii("sipering"),
        dictgen::InsensitiveStr::Ascii("sipers"),
        dictgen::InsensitiveStr::Ascii("ta"),
        dictgen::InsensitiveStr::Ascii("ther"),
        dictgen::InsensitiveStr::Ascii("tielist"),
    ],
    values: &[
        &["wheaton"],
        &["want"],
        &["wants"],
        &["whatsoever"],
        &["whatsoever"],
        &["which"],
        &["whereas"],
        &["whereas"],
        &["wherever"],
        &["whether"],
        &["which"],
        &["whitelist"],
        &["which"],
        &["whirlwind"],
        &["whistling"],
        &["whisper"],
        &["whispered"],
        &["whispering"],
        &["whispers"],
        &["wishlist"],
        &["whistle"],
        &["whistles"],
        &["whistling"],
        &["whispered"],
        &["whispered"],
        &["whispers"],
        &["whistle"],
        &["whistles"],
        &["whitelist"],
        &["with"],
        &["withholding"],
        &["whitelist"],
        &["whistle"],
        &["whistles"],
        &["whistling"],
        &["which"],
        &["when"],
        &["wholeheartedly"],
        &["wholeheartedly"],
        &["wholeheartedly"],
        &["wholeheartedly"],
        &["wholeheartedly"],
        &["wholly"],
        &["wholly"],
        &["whirlwind"],
        &["whisper"],
        &["whispered"],
        &["whispering"],
        &["whispers"],
        &["what"],
        &["whether"],
        &["whitelist"],
    ],
    range: 1..=12,
};

static WORD_WE_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_WE_CHILDREN),
    value: None,
};

static WORD_WE_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    Some(&WORD_WEA_NODE),
    Some(&WORD_WEB_NODE),
    None,
    Some(&WORD_WED_NODE),
    None,
    None,
    None,
    Some(&WORD_WEH_NODE),
    Some(&WORD_WEI_NODE),
    None,
    None,
    Some(&WORD_WEL_NODE),
    None,
    Some(&WORD_WEN_NODE),
    None,
    Some(&WORD_WEP_NODE),
    None,
    Some(&WORD_WER_NODE),
    Some(&WORD_WES_NODE),
    None,
    None,
    None,
    None,
    None,
    None,
    None,
];

static WORD_WES_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_WES_CHILDREN),
    value: None,
};

pub static WORD_WES_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("bite"),
        dictgen::InsensitiveStr::Ascii("bites"),
        dictgen::InsensitiveStr::Ascii("btrook"),
        dictgen::InsensitiveStr::Ascii("tbrok"),
        dictgen::InsensitiveStr::Ascii("tbroook"),
        dictgen::InsensitiveStr::Ascii("ternerns"),
        dictgen::InsensitiveStr::Ascii("ternes"),
        dictgen::InsensitiveStr::Ascii("ternese"),
        dictgen::InsensitiveStr::Ascii("terness"),
        dictgen::InsensitiveStr::Ascii("terse"),
        dictgen::InsensitiveStr::Ascii("tminser"),
        dictgen::InsensitiveStr::Ascii("tminter"),
        dictgen::InsensitiveStr::Ascii("tmisnter"),
        dictgen::InsensitiveStr::Ascii("tmnister"),
        dictgen::InsensitiveStr::Ascii("tmonster"),
        dictgen::InsensitiveStr::Ascii("trbook"),
    ],
    values: &[
        &["website"],
        &["websites"],
        &["westbrook"],
        &["westbrook"],
        &["westbrook"],
        &["westerners"],
        &["westerners"],
        &["westerners"],
        &["westerners"],
        &["westerners"],
        &["westminster"],
        &["westminster"],
        &["westminster"],
        &["westminster"],
        &["westminster"],
        &["westbrook"],
    ],
    range: 4..=8,
};

static WORD_WER_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_WER_CHILDREN),
    value: None,
};

pub static WORD_WER_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("eabouts"),
        dictgen::InsensitiveStr::Ascii("idest"),
        dictgen::InsensitiveStr::Ascii("idly"),
        dictgen::InsensitiveStr::Ascii("idos"),
        dictgen::InsensitiveStr::Ascii("stle"),
        dictgen::InsensitiveStr::Ascii("stler"),
    ],
    values: &[
        &["whereabouts"],
        &["weirdest"],
        &["weirdly"],
        &["weirdos"],
        &["wrestle"],
        &["wrestler"],
    ],
    range: 4..=7,
};

static WORD_WEP_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_WEP_CHILDREN),
    value: None,
};

pub static WORD_WEP_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("bage")],
    values: &[&["webpage"]],
    range: 4..=4,
};

static WORD_WEN_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_WEN_CHILDREN),
    value: None,
};

pub static WORD_WEN_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("desday"),
        dictgen::InsensitiveStr::Ascii("desdays"),
        dictgen::InsensitiveStr::Ascii("dsay"),
        dictgen::InsensitiveStr::Ascii("sday"),
    ],
    values: &[
        &["wednesday"],
        &["wednesdays"],
        &["wednesday"],
        &["wednesday"],
    ],
    range: 4..=7,
};

static WORD_WEL_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_WEL_CHILDREN),
    value: None,
};

pub static WORD_WEL_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("athier"),
        dictgen::InsensitiveStr::Ascii("athiest"),
        dictgen::InsensitiveStr::Ascii("athy"),
        dictgen::InsensitiveStr::Ascii("lignton"),
        dictgen::InsensitiveStr::Ascii("lingotn"),
        dictgen::InsensitiveStr::Ascii("lingston"),
        dictgen::InsensitiveStr::Ascii("lingtion"),
    ],
    values: &[
        &["wealthier"],
        &["wealthiest"],
        &["wealthy"],
        &["wellington"],
        &["wellington"],
        &["wellington"],
        &["wellington"],
    ],
    range: 4..=8,
};

static WORD_WEI_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_WEI_CHILDREN),
    value: None,
};

pub static WORD_WEI_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ghtened"),
        dictgen::InsensitiveStr::Ascii("ghtlfiting"),
        dictgen::InsensitiveStr::Ascii("ghtlifing"),
        dictgen::InsensitiveStr::Ascii("ghtlifitng"),
        dictgen::InsensitiveStr::Ascii("ghtligting"),
        dictgen::InsensitiveStr::Ascii("gthed"),
        dictgen::InsensitiveStr::Ascii("gthlifting"),
        dictgen::InsensitiveStr::Ascii("gths"),
        dictgen::InsensitiveStr::Ascii("ld"),
        dictgen::InsensitiveStr::Ascii("lded"),
        dictgen::InsensitiveStr::Ascii("rldy"),
        dictgen::InsensitiveStr::Ascii("rods"),
    ],
    values: &[
        &["weighted"],
        &["weightlifting"],
        &["weightlifting"],
        &["weightlifting"],
        &["weightlifting"],
        &["weighted"],
        &["weightlifting"],
        &["weights"],
        &["wield"],
        &["wielded"],
        &["weirdly"],
        &["weirdos"],
    ],
    range: 2..=10,
};

static WORD_WEH_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_WEH_CHILDREN),
    value: None,
};

pub static WORD_WEH_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("n")],
    values: &[&["when"]],
    range: 1..=1,
};

static WORD_WED_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_WED_CHILDREN),
    value: None,
};

pub static WORD_WED_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ensday"),
        dictgen::InsensitiveStr::Ascii("ensdays"),
        dictgen::InsensitiveStr::Ascii("nesdsay"),
        dictgen::InsensitiveStr::Ascii("nesdsy"),
        dictgen::InsensitiveStr::Ascii("nesdy"),
        dictgen::InsensitiveStr::Ascii("nessay"),
        dictgen::InsensitiveStr::Ascii("nessday"),
        dictgen::InsensitiveStr::Ascii("nseday"),
        dictgen::InsensitiveStr::Ascii("nsedays"),
    ],
    values: &[
        &["wednesday"],
        &["wednesdays"],
        &["wednesdays"],
        &["wednesdays"],
        &["wednesdays"],
        &["wednesdays"],
        &["wednesdays"],
        &["wednesday"],
        &["wednesdays"],
    ],
    range: 5..=7,
};

static WORD_WEB_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_WEB_CHILDREN),
    value: None,
};

pub static WORD_WEB_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("apge"),
        dictgen::InsensitiveStr::Ascii("iste"),
        dictgen::InsensitiveStr::Ascii("istes"),
        dictgen::InsensitiveStr::Ascii("stie"),
        dictgen::InsensitiveStr::Ascii("sties"),
    ],
    values: &[
        &["webpage"],
        &["website"],
        &["websites"],
        &["website"],
        &["websites"],
    ],
    range: 4..=5,
};

static WORD_WEA_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_WEA_CHILDREN),
    value: None,
};

pub static WORD_WEA_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("kenend"),
        dictgen::InsensitiveStr::Ascii("kensses"),
        dictgen::InsensitiveStr::Ascii("kneses"),
        dictgen::InsensitiveStr::Ascii("knesess"),
        dictgen::InsensitiveStr::Ascii("knesss"),
        dictgen::InsensitiveStr::Ascii("knessses"),
        dictgen::InsensitiveStr::Ascii("ltheir"),
        dictgen::InsensitiveStr::Ascii("lthly"),
        dictgen::InsensitiveStr::Ascii("ponary"),
        dictgen::InsensitiveStr::Ascii("s"),
        dictgen::InsensitiveStr::Ascii("thliest"),
    ],
    values: &[
        &["weakened"],
        &["weaknesses"],
        &["weakness"],
        &["weaknesses"],
        &["weaknesses"],
        &["weaknesses"],
        &["wealthier"],
        &["wealthy"],
        &["weaponry"],
        &["was"],
        &["wealthiest"],
    ],
    range: 1..=8,
};

static WORD_WA_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_WA_CHILDREN),
    value: None,
};

pub static WORD_WA_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("clott"),
        dictgen::InsensitiveStr::Ascii("cther"),
        dictgen::InsensitiveStr::Ascii("ht"),
        dictgen::InsensitiveStr::Ascii("htever"),
        dictgen::InsensitiveStr::Ascii("itres"),
        dictgen::InsensitiveStr::Ascii("ktins"),
        dictgen::InsensitiveStr::Ascii("llpapaers"),
        dictgen::InsensitiveStr::Ascii("llpapes"),
        dictgen::InsensitiveStr::Ascii("llpappers"),
        dictgen::InsensitiveStr::Ascii("llpapr"),
        dictgen::InsensitiveStr::Ascii("rantee"),
        dictgen::InsensitiveStr::Ascii("rcarft"),
        dictgen::InsensitiveStr::Ascii("rcrat"),
        dictgen::InsensitiveStr::Ascii("rdobe"),
        dictgen::InsensitiveStr::Ascii("riwck"),
        dictgen::InsensitiveStr::Ascii("rrandyte"),
        dictgen::InsensitiveStr::Ascii("rrante"),
        dictgen::InsensitiveStr::Ascii("rrantles"),
        dictgen::InsensitiveStr::Ascii("rrantly"),
        dictgen::InsensitiveStr::Ascii("rrany"),
        dictgen::InsensitiveStr::Ascii("rrent"),
        dictgen::InsensitiveStr::Ascii("rrenties"),
        dictgen::InsensitiveStr::Ascii("rrios"),
        dictgen::InsensitiveStr::Ascii("rriros"),
        dictgen::InsensitiveStr::Ascii("rrriors"),
        dictgen::InsensitiveStr::Ascii("rwcik"),
        dictgen::InsensitiveStr::Ascii("shignton"),
        dictgen::InsensitiveStr::Ascii("shingtion"),
        dictgen::InsensitiveStr::Ascii("ss"),
        dictgen::InsensitiveStr::Ascii("tchemn"),
        dictgen::InsensitiveStr::Ascii("tchign"),
        dictgen::InsensitiveStr::Ascii("terlemon"),
        dictgen::InsensitiveStr::Ascii("termalon"),
        dictgen::InsensitiveStr::Ascii("termeleon"),
        dictgen::InsensitiveStr::Ascii("terproff"),
        dictgen::InsensitiveStr::Ascii("terprooof"),
        dictgen::InsensitiveStr::Ascii("thcer"),
        dictgen::InsensitiveStr::Ascii("thcing"),
        dictgen::InsensitiveStr::Ascii("thcmen"),
        dictgen::InsensitiveStr::Ascii("thever"),
        dictgen::InsensitiveStr::Ascii("tiers"),
        dictgen::InsensitiveStr::Ascii("tkings"),
        dictgen::InsensitiveStr::Ascii("tn"),
        dictgen::InsensitiveStr::Ascii("velegnth"),
        dictgen::InsensitiveStr::Ascii("velegnths"),
        dictgen::InsensitiveStr::Ascii("velengh"),
        dictgen::InsensitiveStr::Ascii("velenghs"),
        dictgen::InsensitiveStr::Ascii("velenght"),
        dictgen::InsensitiveStr::Ascii("velenghth"),
        dictgen::InsensitiveStr::Ascii("velenghts"),
        dictgen::InsensitiveStr::Ascii("viers"),
        dictgen::InsensitiveStr::Ascii("wrick"),
        dictgen::InsensitiveStr::Ascii("yword"),
    ],
    values: &[
        &["walcott"],
        &["watcher"],
        &["what"],
        &["whatever"],
        &["waiters"],
        &["watkins"],
        &["wallpapers"],
        &["wallpapers"],
        &["wallpapers"],
        &["wallpapers"],
        &["warranty"],
        &["warcraft"],
        &["warcraft"],
        &["wardrobe"],
        &["warwick"],
        &["warranty"],
        &["warranties"],
        &["warranties"],
        &["warranty"],
        &["warranty"],
        &["warrant"],
        &["warranties"],
        &["warriors"],
        &["warriors"],
        &["warriors"],
        &["warwick"],
        &["washington"],
        &["washington"],
        &["was"],
        &["watchmen"],
        &["watching"],
        &["watermelon"],
        &["watermelon"],
        &["watermelon"],
        &["waterproof"],
        &["waterproof"],
        &["watcher"],
        &["watching"],
        &["watchmen"],
        &["whatever"],
        &["waiters"],
        &["watkins"],
        &["want"],
        &["wavelength"],
        &["wavelength"],
        &["wavelength"],
        &["wavelength"],
        &["wavelength"],
        &["wavelength"],
        &["wavelength"],
        &["waivers"],
        &["warwick"],
        &["wayward"],
    ],
    range: 2..=9,
};

static WORD_V_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_V_CHILDREN),
    value: None,
};

static WORD_V_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    Some(&WORD_VA_NODE),
    None,
    None,
    None,
    Some(&WORD_VE_NODE),
    None,
    None,
    None,
    Some(&WORD_VI_NODE),
    None,
    None,
    None,
    None,
    None,
    Some(&WORD_VO_NODE),
    None,
    None,
    Some(&WORD_VR_NODE),
    None,
    None,
    Some(&WORD_VU_NODE),
    None,
    None,
    None,
    Some(&WORD_VY_NODE),
    None,
];

static WORD_VY_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_VY_CHILDREN),
    value: None,
};

pub static WORD_VY_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("er"),
        dictgen::InsensitiveStr::Ascii("re"),
    ],
    values: &[&["very"], &["very"]],
    range: 2..=2,
};

static WORD_VU_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_VU_CHILDREN),
    value: None,
};

pub static WORD_VU_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("lberability"),
        dictgen::InsensitiveStr::Ascii("lernabilities"),
        dictgen::InsensitiveStr::Ascii("lernability"),
        dictgen::InsensitiveStr::Ascii("lernable"),
        dictgen::InsensitiveStr::Ascii("lnarabilities"),
        dictgen::InsensitiveStr::Ascii("lnarability"),
        dictgen::InsensitiveStr::Ascii("lnarable"),
        dictgen::InsensitiveStr::Ascii("lnerabil"),
        dictgen::InsensitiveStr::Ascii("lnerabile"),
        dictgen::InsensitiveStr::Ascii("lnerabilites"),
        dictgen::InsensitiveStr::Ascii("lnerabillity"),
        dictgen::InsensitiveStr::Ascii("lnerabiltiy"),
        dictgen::InsensitiveStr::Ascii("lnerabilty"),
        dictgen::InsensitiveStr::Ascii("lnerablility"),
        dictgen::InsensitiveStr::Ascii("lnurabilities"),
        dictgen::InsensitiveStr::Ascii("lnurability"),
        dictgen::InsensitiveStr::Ascii("lnurable"),
        dictgen::InsensitiveStr::Ascii("nlerabilities"),
        dictgen::InsensitiveStr::Ascii("nlerability"),
        dictgen::InsensitiveStr::Ascii("nlerable"),
        dictgen::InsensitiveStr::Ascii("rnerabilities"),
        dictgen::InsensitiveStr::Ascii("rnerability"),
    ],
    values: &[
        &["vulnerability"],
        &["vulnerabilities"],
        &["vulnerability"],
        &["vulnerable"],
        &["vulnerabilities"],
        &["vulnerability"],
        &["vulnerable"],
        &["vulnerable"],
        &["vulnerable"],
        &["vulnerabilities"],
        &["vulnerability"],
        &["vulnerability"],
        &["vulnerability"],
        &["vulnerability"],
        &["vulnerabilities"],
        &["vulnerability"],
        &["vulnerable"],
        &["vulnerabilities"],
        &["vulnerability"],
        &["vulnerable"],
        &["vulnerabilities"],
        &["vulnerability"],
    ],
    range: 8..=13,
};

static WORD_VR_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_VR_CHILDREN),
    value: None,
};

pub static WORD_VR_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("eity"),
        dictgen::InsensitiveStr::Ascii("ey"),
        dictgen::InsensitiveStr::Ascii("iament"),
        dictgen::InsensitiveStr::Ascii("iety"),
        dictgen::InsensitiveStr::Ascii("iginity"),
        dictgen::InsensitiveStr::Ascii("igins"),
    ],
    values: &[
        &["variety"],
        &["very"],
        &["vraiment"],
        &["variety"],
        &["virginity"],
        &["virgins"],
    ],
    range: 2..=7,
};

static WORD_VO_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_VO_CHILDREN),
    value: None,
};

pub static WORD_VO_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("cabluary"),
        dictgen::InsensitiveStr::Ascii("cabularily"),
        dictgen::InsensitiveStr::Ascii("cabularity"),
        dictgen::InsensitiveStr::Ascii("cabularly"),
        dictgen::InsensitiveStr::Ascii("ciemail"),
        dictgen::InsensitiveStr::Ascii("icemal"),
        dictgen::InsensitiveStr::Ascii("ilates"),
        dictgen::InsensitiveStr::Ascii("ilating"),
        dictgen::InsensitiveStr::Ascii("ilation"),
        dictgen::InsensitiveStr::Ascii("ilently"),
        dictgen::InsensitiveStr::Ascii("latge"),
        dictgen::InsensitiveStr::Ascii("latiliy"),
        dictgen::InsensitiveStr::Ascii("latillity"),
        dictgen::InsensitiveStr::Ascii("latiltiy"),
        dictgen::InsensitiveStr::Ascii("latily"),
        dictgen::InsensitiveStr::Ascii("lativity"),
        dictgen::InsensitiveStr::Ascii("lcando"),
        dictgen::InsensitiveStr::Ascii("lcanoe"),
        dictgen::InsensitiveStr::Ascii("lcaron"),
        dictgen::InsensitiveStr::Ascii("leyball"),
        dictgen::InsensitiveStr::Ascii("litality"),
        dictgen::InsensitiveStr::Ascii("lleyboll"),
        dictgen::InsensitiveStr::Ascii("llyeball"),
        dictgen::InsensitiveStr::Ascii("lontary"),
        dictgen::InsensitiveStr::Ascii("lonteer"),
        dictgen::InsensitiveStr::Ascii("lonteered"),
        dictgen::InsensitiveStr::Ascii("lonteering"),
        dictgen::InsensitiveStr::Ascii("lonteers"),
        dictgen::InsensitiveStr::Ascii("lounteer"),
        dictgen::InsensitiveStr::Ascii("lounteered"),
        dictgen::InsensitiveStr::Ascii("lounteering"),
        dictgen::InsensitiveStr::Ascii("lounteers"),
        dictgen::InsensitiveStr::Ascii("lumne"),
        dictgen::InsensitiveStr::Ascii("lunatrily"),
        dictgen::InsensitiveStr::Ascii("lunatry"),
        dictgen::InsensitiveStr::Ascii("luntairly"),
        dictgen::InsensitiveStr::Ascii("luntairy"),
        dictgen::InsensitiveStr::Ascii("luntarilly"),
        dictgen::InsensitiveStr::Ascii("luntarly"),
        dictgen::InsensitiveStr::Ascii("luntears"),
        dictgen::InsensitiveStr::Ascii("lunteed"),
        dictgen::InsensitiveStr::Ascii("lunteeer"),
        dictgen::InsensitiveStr::Ascii("lunteeers"),
        dictgen::InsensitiveStr::Ascii("lunteerd"),
        dictgen::InsensitiveStr::Ascii("lunteraly"),
        dictgen::InsensitiveStr::Ascii("luntered"),
        dictgen::InsensitiveStr::Ascii("luntereed"),
        dictgen::InsensitiveStr::Ascii("lunterily"),
        dictgen::InsensitiveStr::Ascii("lunterring"),
        dictgen::InsensitiveStr::Ascii("tlage"),
    ],
    values: &[
        &["vocabulary"],
        &["vocabulary"],
        &["vocabulary"],
        &["vocabulary"],
        &["voicemail"],
        &["voicemail"],
        &["violates"],
        &["violating"],
        &["violation"],
        &["violently"],
        &["voltage"],
        &["volatility"],
        &["volatility"],
        &["volatility"],
        &["volatility"],
        &["volatility"],
        &["volcano"],
        &["volcano"],
        &["volcano"],
        &["volleyball"],
        &["volatility"],
        &["volleyball"],
        &["volleyball"],
        &["voluntary"],
        &["volunteer"],
        &["volunteered"],
        &["volunteering"],
        &["volunteers"],
        &["volunteer"],
        &["volunteered"],
        &["volunteering"],
        &["volunteers"],
        &["volume"],
        &["voluntarily"],
        &["voluntary"],
        &["voluntarily"],
        &["voluntarily"],
        &["voluntarily"],
        &["voluntary"],
        &["volunteers"],
        &["volunteered"],
        &["volunteers"],
        &["volunteers"],
        &["volunteered"],
        &["voluntarily"],
        &["volunteered"],
        &["volunteered"],
        &["voluntarily"],
        &["volunteering"],
        &["voltage"],
    ],
    range: 5..=11,
};

static WORD_VI_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_VI_CHILDREN),
    value: None,
};

static WORD_VI_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    Some(&WORD_VIA_NODE),
    Some(&WORD_VIB_NODE),
    Some(&WORD_VIC_NODE),
    Some(&WORD_VID_NODE),
    Some(&WORD_VIE_NODE),
    None,
    Some(&WORD_VIG_NODE),
    None,
    None,
    None,
    Some(&WORD_VIK_NODE),
    Some(&WORD_VIL_NODE),
    None,
    Some(&WORD_VIN_NODE),
    Some(&WORD_VIO_NODE),
    None,
    None,
    Some(&WORD_VIR_NODE),
    Some(&WORD_VIS_NODE),
    Some(&WORD_VIT_NODE),
    None,
    None,
    None,
    None,
    None,
    Some(&WORD_VIZ_NODE),
];

static WORD_VIZ_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_VIZ_CHILDREN),
    value: None,
};

pub static WORD_VIZ_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ualisations"),
        dictgen::InsensitiveStr::Ascii("ualization"),
    ],
    values: &[&["visualisation"], &["visualization"]],
    range: 10..=11,
};

static WORD_VIT_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_VIT_CHILDREN),
    value: None,
};

pub static WORD_VIT_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ailty"),
        dictgen::InsensitiveStr::Ascii("aliy"),
        dictgen::InsensitiveStr::Ascii("aminas"),
        dictgen::InsensitiveStr::Ascii("amines"),
        dictgen::InsensitiveStr::Ascii("amis"),
        dictgen::InsensitiveStr::Ascii("enam"),
        dictgen::InsensitiveStr::Ascii("enamese"),
        dictgen::InsensitiveStr::Ascii("imans"),
        dictgen::InsensitiveStr::Ascii("irol"),
        dictgen::InsensitiveStr::Ascii("main"),
        dictgen::InsensitiveStr::Ascii("mains"),
        dictgen::InsensitiveStr::Ascii("ories"),
        dictgen::InsensitiveStr::Ascii("roil"),
        dictgen::InsensitiveStr::Ascii("rual"),
        dictgen::InsensitiveStr::Ascii("rually"),
        dictgen::InsensitiveStr::Ascii("rues"),
        dictgen::InsensitiveStr::Ascii("ualization"),
    ],
    values: &[
        &["vitality"],
        &["vitality"],
        &["vitamins"],
        &["vitamins"],
        &["vitamins"],
        &["vietnam"],
        &["vietnamese"],
        &["vitamins"],
        &["vitriol"],
        &["vitamin"],
        &["vitamins"],
        &["victories"],
        &["vitriol"],
        &["virtual"],
        &["virtually"],
        &["virtues"],
        &["visualization"],
    ],
    range: 4..=10,
};

static WORD_VIS_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_VIS_CHILDREN),
    value: None,
};

pub static WORD_VIS_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("able"),
        dictgen::InsensitiveStr::Ascii("ably"),
        dictgen::InsensitiveStr::Ascii("bily"),
        dictgen::InsensitiveStr::Ascii("creal"),
        dictgen::InsensitiveStr::Ascii("ercal"),
        dictgen::InsensitiveStr::Ascii("ibiliy"),
        dictgen::InsensitiveStr::Ascii("ibillity"),
        dictgen::InsensitiveStr::Ascii("ibiltiy"),
        dictgen::InsensitiveStr::Ascii("ibily"),
        dictgen::InsensitiveStr::Ascii("ibley"),
        dictgen::InsensitiveStr::Ascii("iblly"),
        dictgen::InsensitiveStr::Ascii("ting"),
        dictgen::InsensitiveStr::Ascii("tors"),
        dictgen::InsensitiveStr::Ascii("ualizacion"),
        dictgen::InsensitiveStr::Ascii("ualizaiton"),
        dictgen::InsensitiveStr::Ascii("ualizating"),
        dictgen::InsensitiveStr::Ascii("ualizaton"),
    ],
    values: &[
        &["visible"],
        &["visibly"],
        &["visibly"],
        &["visceral"],
        &["visceral"],
        &["visibility"],
        &["visibility"],
        &["visibility"],
        &["visibility"],
        &["visibly"],
        &["visibly"],
        &["visiting"],
        &["visitors"],
        &["visualization"],
        &["visualization"],
        &["visualization"],
        &["visualization"],
    ],
    range: 4..=10,
};

static WORD_VIR_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_VIR_CHILDREN),
    value: None,
};

pub static WORD_VIR_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ament"),
        dictgen::InsensitiveStr::Ascii("bate"),
        dictgen::InsensitiveStr::Ascii("bation"),
        dictgen::InsensitiveStr::Ascii("bator"),
        dictgen::InsensitiveStr::Ascii("ginas"),
        dictgen::InsensitiveStr::Ascii("gines"),
        dictgen::InsensitiveStr::Ascii("gings"),
        dictgen::InsensitiveStr::Ascii("ginis"),
        dictgen::InsensitiveStr::Ascii("gintiy"),
        dictgen::InsensitiveStr::Ascii("ginus"),
        dictgen::InsensitiveStr::Ascii("ignity"),
        dictgen::InsensitiveStr::Ascii("igns"),
        dictgen::InsensitiveStr::Ascii("tiol"),
        dictgen::InsensitiveStr::Ascii("tualy"),
        dictgen::InsensitiveStr::Ascii("tuels"),
        dictgen::InsensitiveStr::Ascii("tuose"),
        dictgen::InsensitiveStr::Ascii("ualization"),
        dictgen::InsensitiveStr::Ascii("utal"),
        dictgen::InsensitiveStr::Ascii("utally"),
        dictgen::InsensitiveStr::Ascii("utes"),
    ],
    values: &[
        &["vraiment"],
        &["vibrate"],
        &["vibration"],
        &["vibrator"],
        &["virgins"],
        &["virgins"],
        &["virgins"],
        &["virgins"],
        &["virginity"],
        &["virgins"],
        &["virginity"],
        &["virgins"],
        &["vitriol"],
        &["virtually"],
        &["virtues"],
        &["virtues"],
        &["visualization"],
        &["virtual"],
        &["virtually"],
        &["virtues"],
    ],
    range: 4..=10,
};

static WORD_VIO_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_VIO_CHILDREN),
    value: None,
};

pub static WORD_VIO_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("alting"),
        dictgen::InsensitiveStr::Ascii("latin"),
        dictgen::InsensitiveStr::Ascii("lentce"),
        dictgen::InsensitiveStr::Ascii("lenty"),
        dictgen::InsensitiveStr::Ascii("letas"),
    ],
    values: &[
        &["violating"],
        &["violation"],
        &["violence"],
        &["violently"],
        &["violates"],
    ],
    range: 5..=6,
};

static WORD_VIN_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_VIN_CHILDREN),
    value: None,
};

pub static WORD_VIN_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("cinity"),
        dictgen::InsensitiveStr::Ascii("dicitve"),
        dictgen::InsensitiveStr::Ascii("dictave"),
        dictgen::InsensitiveStr::Ascii("dicte"),
        dictgen::InsensitiveStr::Ascii("icity"),
    ],
    values: &[
        &["vicinity"],
        &["vindictive"],
        &["vindictive"],
        &["vindictive"],
        &["vicinity"],
    ],
    range: 5..=7,
};

static WORD_VIL_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_VIL_CHILDREN),
    value: None,
};

pub static WORD_VIL_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("igant"),
        dictgen::InsensitiveStr::Ascii("igante"),
        dictgen::InsensitiveStr::Ascii("lageois"),
        dictgen::InsensitiveStr::Ascii("legas"),
        dictgen::InsensitiveStr::Ascii("lian"),
        dictgen::InsensitiveStr::Ascii("lification"),
        dictgen::InsensitiveStr::Ascii("lify"),
        dictgen::InsensitiveStr::Ascii("lin"),
        dictgen::InsensitiveStr::Ascii("oently"),
    ],
    values: &[
        &["vigilant"],
        &["vigilante"],
        &["villages"],
        &["villages"],
        &["villain"],
        &["vilification"],
        &["vilify"],
        &["villain"],
        &["violently"],
    ],
    range: 3..=10,
};

static WORD_VIK_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_VIK_CHILDREN),
    value: None,
};

pub static WORD_VIK_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("igns"),
        dictgen::InsensitiveStr::Ascii("ingos"),
    ],
    values: &[&["vikings"], &["vikings"]],
    range: 4..=5,
};

static WORD_VIG_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_VIG_CHILDREN),
    value: None,
};

pub static WORD_VIG_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("eur"),
        dictgen::InsensitiveStr::Ascii("ilane"),
        dictgen::InsensitiveStr::Ascii("ilantie"),
        dictgen::InsensitiveStr::Ascii("ilanties"),
        dictgen::InsensitiveStr::Ascii("ilence"),
        dictgen::InsensitiveStr::Ascii("liant"),
        dictgen::InsensitiveStr::Ascii("liante"),
        dictgen::InsensitiveStr::Ascii("oruosly"),
        dictgen::InsensitiveStr::Ascii("ourosly"),
        dictgen::InsensitiveStr::Ascii("ourous"),
        dictgen::InsensitiveStr::Ascii("rins"),
    ],
    values: &[
        &["vigueur"],
        &["vigilante"],
        &["vigilante"],
        &["vigilante"],
        &["vigilance"],
        &["vigilant"],
        &["vigilante"],
        &["vigorously"],
        &["vigorously"],
        &["vigorous"],
        &["virgins"],
    ],
    range: 3..=8,
};

static WORD_VIE_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_VIE_CHILDREN),
    value: None,
};

pub static WORD_VIE_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ntam"),
        dictgen::InsensitiveStr::Ascii("ntamese"),
        dictgen::InsensitiveStr::Ascii("tmanese"),
        dictgen::InsensitiveStr::Ascii("tnamees"),
        dictgen::InsensitiveStr::Ascii("tnameese"),
        dictgen::InsensitiveStr::Ascii("tnamesse"),
        dictgen::InsensitiveStr::Ascii("tnamiese"),
        dictgen::InsensitiveStr::Ascii("tnamnese"),
        dictgen::InsensitiveStr::Ascii("weres"),
        dictgen::InsensitiveStr::Ascii("wpiont"),
        dictgen::InsensitiveStr::Ascii("wpionts"),
        dictgen::InsensitiveStr::Ascii("wpoit"),
    ],
    values: &[
        &["vietnam"],
        &["vietnamese"],
        &["vietnamese"],
        &["vietnamese"],
        &["vietnamese"],
        &["vietnamese"],
        &["vietnamese"],
        &["vietnamese"],
        &["viewers"],
        &["viewpoint"],
        &["viewpoints"],
        &["viewpoints"],
    ],
    range: 4..=8,
};

static WORD_VID_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_VID_CHILDREN),
    value: None,
};

pub static WORD_VID_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("eogaem"),
        dictgen::InsensitiveStr::Ascii("eogaems"),
        dictgen::InsensitiveStr::Ascii("eogamemes"),
        dictgen::InsensitiveStr::Ascii("eogams"),
        dictgen::InsensitiveStr::Ascii("eojames"),
        dictgen::InsensitiveStr::Ascii("oegame"),
        dictgen::InsensitiveStr::Ascii("oegames"),
    ],
    values: &[
        &["videogame"],
        &["videogames"],
        &["videogames"],
        &["videogames"],
        &["videogames"],
        &["videogame"],
        &["videogames"],
    ],
    range: 6..=9,
};

static WORD_VIC_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_VIC_CHILDREN),
    value: None,
};

pub static WORD_VIC_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("intiy"),
        dictgen::InsensitiveStr::Ascii("itmized"),
        dictgen::InsensitiveStr::Ascii("itms"),
        dictgen::InsensitiveStr::Ascii("otrian"),
        dictgen::InsensitiveStr::Ascii("otries"),
        dictgen::InsensitiveStr::Ascii("otrious"),
        dictgen::InsensitiveStr::Ascii("seral"),
        dictgen::InsensitiveStr::Ascii("temized"),
        dictgen::InsensitiveStr::Ascii("timas"),
        dictgen::InsensitiveStr::Ascii("times"),
        dictgen::InsensitiveStr::Ascii("toires"),
        dictgen::InsensitiveStr::Ascii("tomized"),
        dictgen::InsensitiveStr::Ascii("torain"),
        dictgen::InsensitiveStr::Ascii("torieuse"),
        dictgen::InsensitiveStr::Ascii("torin"),
        dictgen::InsensitiveStr::Ascii("torina"),
        dictgen::InsensitiveStr::Ascii("torinos"),
        dictgen::InsensitiveStr::Ascii("torinus"),
        dictgen::InsensitiveStr::Ascii("torios"),
        dictgen::InsensitiveStr::Ascii("toriosa"),
        dictgen::InsensitiveStr::Ascii("torioso"),
        dictgen::InsensitiveStr::Ascii("toris"),
        dictgen::InsensitiveStr::Ascii("toriuos"),
        dictgen::InsensitiveStr::Ascii("toriuous"),
        dictgen::InsensitiveStr::Ascii("tumized"),
    ],
    values: &[
        &["vicinity"],
        &["victimized"],
        &["victims"],
        &["victorian"],
        &["victories"],
        &["victorious"],
        &["visceral"],
        &["victimized"],
        &["victims"],
        &["victims"],
        &["victories"],
        &["victimized"],
        &["victorian"],
        &["victories"],
        &["victorian"],
        &["victorian"],
        &["victorious"],
        &["victorious"],
        &["victorious"],
        &["victorious"],
        &["victorious"],
        &["victories"],
        &["victorious"],
        &["victorious"],
        &["victimized"],
    ],
    range: 4..=8,
};

static WORD_VIB_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_VIB_CHILDREN),
    value: None,
};

pub static WORD_VIB_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ratie"),
        dictgen::InsensitiveStr::Ascii("ratin"),
        dictgen::InsensitiveStr::Ascii("ratoare"),
        dictgen::InsensitiveStr::Ascii("ratr"),
    ],
    values: &[&["vibrate"], &["vibration"], &["vibrator"], &["vibrator"]],
    range: 4..=7,
};

static WORD_VIA_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_VIA_CHILDREN),
    value: None,
};

pub static WORD_VIA_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("biliy"),
        dictgen::InsensitiveStr::Ascii("tmin"),
        dictgen::InsensitiveStr::Ascii("tmins"),
    ],
    values: &[&["viability"], &["vitamin"], &["vitamins"]],
    range: 4..=5,
};

static WORD_VE_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_VE_CHILDREN),
    value: None,
};

static WORD_VE_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    None,
    None,
    Some(&WORD_VEC_NODE),
    None,
    None,
    None,
    Some(&WORD_VEG_NODE),
    Some(&WORD_VEH_NODE),
    Some(&WORD_VEI_NODE),
    None,
    None,
    Some(&WORD_VEL_NODE),
    None,
    Some(&WORD_VEN_NODE),
    None,
    None,
    None,
    Some(&WORD_VER_NODE),
    Some(&WORD_VES_NODE),
    Some(&WORD_VET_NODE),
    None,
    None,
    Some(&WORD_VEW_NODE),
    None,
    Some(&WORD_VEY_NODE),
    None,
];

static WORD_VEY_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_VEY_CHILDREN),
    value: None,
};

pub static WORD_VEY_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("r")],
    values: &[&["very"]],
    range: 1..=1,
};

static WORD_VEW_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_VEW_CHILDREN),
    value: None,
};

pub static WORD_VEW_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("iership")],
    values: &[&["viewership"]],
    range: 7..=7,
};

static WORD_VET_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_VET_CHILDREN),
    value: None,
};

pub static WORD_VET_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("ween")],
    values: &[&["between"]],
    range: 4..=4,
};

static WORD_VES_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_VES_CHILDREN),
    value: None,
};

pub static WORD_VES_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("seles"),
        dictgen::InsensitiveStr::Ascii("sells"),
        dictgen::InsensitiveStr::Ascii("sles"),
    ],
    values: &[&["vessels"], &["vessels"], &["vessels"]],
    range: 4..=5,
};

static WORD_VER_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_VER_CHILDREN),
    value: None,
};

pub static WORD_VER_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ablly"),
        dictgen::InsensitiveStr::Ascii("astility"),
        dictgen::InsensitiveStr::Ascii("baitm"),
        dictgen::InsensitiveStr::Ascii("baly"),
        dictgen::InsensitiveStr::Ascii("batium"),
        dictgen::InsensitiveStr::Ascii("fication"),
        dictgen::InsensitiveStr::Ascii("ficiation"),
        dictgen::InsensitiveStr::Ascii("fiying"),
        dictgen::InsensitiveStr::Ascii("ical"),
        dictgen::InsensitiveStr::Ascii("ificacion"),
        dictgen::InsensitiveStr::Ascii("ificaiton"),
        dictgen::InsensitiveStr::Ascii("ificato"),
        dictgen::InsensitiveStr::Ascii("ifikation"),
        dictgen::InsensitiveStr::Ascii("ifiyng"),
        dictgen::InsensitiveStr::Ascii("ifyable"),
        dictgen::InsensitiveStr::Ascii("ious"),
        dictgen::InsensitiveStr::Ascii("isions"),
        dictgen::InsensitiveStr::Ascii("ison"),
        dictgen::InsensitiveStr::Ascii("isons"),
        dictgen::InsensitiveStr::Ascii("itcally"),
        dictgen::InsensitiveStr::Ascii("itgo"),
        dictgen::InsensitiveStr::Ascii("itiable"),
        dictgen::InsensitiveStr::Ascii("naculaire"),
        dictgen::InsensitiveStr::Ascii("necular"),
        dictgen::InsensitiveStr::Ascii("nicular"),
        dictgen::InsensitiveStr::Ascii("salite"),
        dictgen::InsensitiveStr::Ascii("satality"),
        dictgen::InsensitiveStr::Ascii("satel"),
        dictgen::InsensitiveStr::Ascii("satiliy"),
        dictgen::InsensitiveStr::Ascii("satille"),
        dictgen::InsensitiveStr::Ascii("satillity"),
        dictgen::InsensitiveStr::Ascii("satilty"),
        dictgen::InsensitiveStr::Ascii("satily"),
        dictgen::InsensitiveStr::Ascii("siones"),
        dictgen::InsensitiveStr::Ascii("sitale"),
        dictgen::InsensitiveStr::Ascii("sitality"),
        dictgen::InsensitiveStr::Ascii("sitilaty"),
        dictgen::InsensitiveStr::Ascii("sitlity"),
        dictgen::InsensitiveStr::Ascii("soin"),
        dictgen::InsensitiveStr::Ascii("staile"),
        dictgen::InsensitiveStr::Ascii("tabim"),
        dictgen::InsensitiveStr::Ascii("tgio"),
        dictgen::InsensitiveStr::Ascii("ticallity"),
        dictgen::InsensitiveStr::Ascii("ticaly"),
        dictgen::InsensitiveStr::Ascii("tification"),
        dictgen::InsensitiveStr::Ascii("tigro"),
        dictgen::InsensitiveStr::Ascii("yifing"),
    ],
    values: &[
        &["verbally"],
        &["versatility"],
        &["verbatim"],
        &["verbally"],
        &["verbatim"],
        &["verification"],
        &["verification"],
        &["verifying"],
        &["vertical"],
        &["verification"],
        &["verification"],
        &["verification"],
        &["verification"],
        &["verifying"],
        &["verifiable"],
        &["various"],
        &["revisions"],
        &["version"],
        &["versions"],
        &["vertically"],
        &["vertigo"],
        &["verifiable"],
        &["vernacular"],
        &["vernacular"],
        &["vernacular"],
        &["versatile"],
        &["versatility"],
        &["versatile"],
        &["versatility"],
        &["versatile"],
        &["versatility"],
        &["versatility"],
        &["versatility"],
        &["versions"],
        &["versatile"],
        &["versatility"],
        &["versatility"],
        &["versatility"],
        &["version"],
        &["versatile"],
        &["verbatim"],
        &["vertigo"],
        &["vertically"],
        &["vertically"],
        &["certification"],
        &["vertigo"],
        &["verifying"],
    ],
    range: 4..=10,
};

static WORD_VEN_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_VEN_CHILDREN),
    value: None,
};

pub static WORD_VEN_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("deta"),
        dictgen::InsensitiveStr::Ascii("dettta"),
        dictgen::InsensitiveStr::Ascii("egance"),
        dictgen::InsensitiveStr::Ascii("elope"),
        dictgen::InsensitiveStr::Ascii("emous"),
        dictgen::InsensitiveStr::Ascii("euzela"),
        dictgen::InsensitiveStr::Ascii("ezeula"),
        dictgen::InsensitiveStr::Ascii("ezuelean"),
        dictgen::InsensitiveStr::Ascii("ezuelian"),
        dictgen::InsensitiveStr::Ascii("ezuella"),
        dictgen::InsensitiveStr::Ascii("ezulea"),
        dictgen::InsensitiveStr::Ascii("gaence"),
        dictgen::InsensitiveStr::Ascii("gance"),
        dictgen::InsensitiveStr::Ascii("genace"),
        dictgen::InsensitiveStr::Ascii("gence"),
        dictgen::InsensitiveStr::Ascii("talation"),
        dictgen::InsensitiveStr::Ascii("telation"),
        dictgen::InsensitiveStr::Ascii("tialtion"),
        dictgen::InsensitiveStr::Ascii("tilacion"),
        dictgen::InsensitiveStr::Ascii("tilato"),
    ],
    values: &[
        &["vendetta"],
        &["vendetta"],
        &["vengeance"],
        &["envelope"],
        &["venomous"],
        &["venezuela"],
        &["venezuela"],
        &["venezuela"],
        &["venezuela"],
        &["venezuela"],
        &["venezuela"],
        &["vengeance"],
        &["vengeance"],
        &["vengeance"],
        &["vengeance"],
        &["ventilation"],
        &["ventilation"],
        &["ventilation"],
        &["ventilation"],
        &["ventilation"],
    ],
    range: 4..=8,
};

static WORD_VEL_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_VEL_CHILDREN),
    value: None,
};

pub static WORD_VEL_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("antine"),
        dictgen::InsensitiveStr::Ascii("l"),
    ],
    values: &[&["valentine"], &["well"]],
    range: 1..=6,
};

static WORD_VEI_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_VEI_CHILDREN),
    value: None,
};

pub static WORD_VEI_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("chles"),
        dictgen::InsensitiveStr::Ascii("tnam"),
        dictgen::InsensitiveStr::Ascii("tnamese"),
        dictgen::InsensitiveStr::Ascii("wers"),
        dictgen::InsensitiveStr::Ascii("wership"),
        dictgen::InsensitiveStr::Ascii("wpoint"),
        dictgen::InsensitiveStr::Ascii("wpoints"),
    ],
    values: &[
        &["vehicles"],
        &["vietnam"],
        &["vietnamese"],
        &["viewers"],
        &["viewership"],
        &["viewpoint"],
        &["viewpoints"],
    ],
    range: 4..=7,
};

static WORD_VEH_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_VEH_CHILDREN),
    value: None,
};

pub static WORD_VEH_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ciles"),
        dictgen::InsensitiveStr::Ascii("emantly"),
        dictgen::InsensitiveStr::Ascii("ementely"),
        dictgen::InsensitiveStr::Ascii("ementy"),
        dictgen::InsensitiveStr::Ascii("emontly"),
        dictgen::InsensitiveStr::Ascii("icels"),
        dictgen::InsensitiveStr::Ascii("icule"),
    ],
    values: &[
        &["vehicles"],
        &["vehemently"],
        &["vehemently"],
        &["vehemently"],
        &["vehemently"],
        &["vehicles"],
        &["vehicle"],
    ],
    range: 5..=8,
};

static WORD_VEG_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_VEG_CHILDREN),
    value: None,
};

pub static WORD_VEG_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("anisim"),
        dictgen::InsensitiveStr::Ascii("ansim"),
        dictgen::InsensitiveStr::Ascii("atarian"),
        dictgen::InsensitiveStr::Ascii("aterian"),
        dictgen::InsensitiveStr::Ascii("aterians"),
        dictgen::InsensitiveStr::Ascii("eratian"),
        dictgen::InsensitiveStr::Ascii("etairan"),
        dictgen::InsensitiveStr::Ascii("etarain"),
        dictgen::InsensitiveStr::Ascii("etarianas"),
        dictgen::InsensitiveStr::Ascii("etarianos"),
        dictgen::InsensitiveStr::Ascii("etarien"),
        dictgen::InsensitiveStr::Ascii("etariens"),
        dictgen::InsensitiveStr::Ascii("etarin"),
        dictgen::InsensitiveStr::Ascii("etarion"),
        dictgen::InsensitiveStr::Ascii("etatian"),
        dictgen::InsensitiveStr::Ascii("etatians"),
        dictgen::InsensitiveStr::Ascii("eterian"),
        dictgen::InsensitiveStr::Ascii("eterians"),
        dictgen::InsensitiveStr::Ascii("itable"),
        dictgen::InsensitiveStr::Ascii("itables"),
        dictgen::InsensitiveStr::Ascii("table"),
    ],
    values: &[
        &["veganism"],
        &["veganism"],
        &["vegetarian"],
        &["vegetarian"],
        &["vegetarians"],
        &["vegetarians"],
        &["vegetarians"],
        &["vegetarians"],
        &["vegetarians"],
        &["vegetarians"],
        &["vegetarian"],
        &["vegetarians"],
        &["vegetarians"],
        &["vegetarian"],
        &["vegetarian"],
        &["vegetarians"],
        &["vegetarian"],
        &["vegetarians"],
        &["vegetable"],
        &["vegetables"],
        &["vegetable"],
    ],
    range: 5..=9,
};

static WORD_VEC_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_VEC_CHILDREN),
    value: None,
};

pub static WORD_VEC_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("hiles"),
        dictgen::InsensitiveStr::Ascii("otrs"),
        dictgen::InsensitiveStr::Ascii("tores"),
        dictgen::InsensitiveStr::Ascii("tros"),
    ],
    values: &[&["vehicles"], &["vectors"], &["vectors"], &["vectors"]],
    range: 4..=5,
};

static WORD_VA_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_VA_CHILDREN),
    value: None,
};

static WORD_VA_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    None,
    None,
    Some(&WORD_VAC_NODE),
    None,
    None,
    None,
    Some(&WORD_VAG_NODE),
    None,
    Some(&WORD_VAI_NODE),
    None,
    Some(&WORD_VAK_NODE),
    Some(&WORD_VAL_NODE),
    Some(&WORD_VAM_NODE),
    Some(&WORD_VAN_NODE),
    None,
    None,
    None,
    Some(&WORD_VAR_NODE),
    Some(&WORD_VAS_NODE),
    Some(&WORD_VAT_NODE),
    Some(&WORD_VAU_NODE),
    None,
    None,
    None,
    Some(&WORD_VAY_NODE),
    None,
];

static WORD_VAY_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_VAY_CHILDREN),
    value: None,
};

pub static WORD_VAY_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("lkrie")],
    values: &[&["valkyrie"]],
    range: 5..=5,
};

static WORD_VAU_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_VAU_CHILDREN),
    value: None,
};

pub static WORD_VAU_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("gely"),
        dictgen::InsensitiveStr::Ascii("lable"),
    ],
    values: &[&["vaguely"], &["valuable"]],
    range: 4..=5,
};

static WORD_VAT_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_VAT_CHILDREN),
    value: None,
};

pub static WORD_VAT_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("icaan"),
        dictgen::InsensitiveStr::Ascii("icina"),
    ],
    values: &[&["vatican"], &["vatican"]],
    range: 5..=5,
};

static WORD_VAS_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_VAS_CHILDREN),
    value: None,
};

pub static WORD_VAS_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("all"),
        dictgen::InsensitiveStr::Ascii("alls"),
        dictgen::InsensitiveStr::Ascii("cetomy"),
        dictgen::InsensitiveStr::Ascii("ectomey"),
        dictgen::InsensitiveStr::Ascii("sales"),
        dictgen::InsensitiveStr::Ascii("salls"),
        dictgen::InsensitiveStr::Ascii("salos"),
        dictgen::InsensitiveStr::Ascii("slas"),
        dictgen::InsensitiveStr::Ascii("tecomy"),
    ],
    values: &[
        &["vassal"],
        &["vassals"],
        &["vasectomy"],
        &["vasectomy"],
        &["vassals"],
        &["vassals"],
        &["vassals"],
        &["vassals"],
        &["vasectomy"],
    ],
    range: 3..=7,
};

static WORD_VAR_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_VAR_CHILDREN),
    value: None,
};

pub static WORD_VAR_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("aible"),
        dictgen::InsensitiveStr::Ascii("aibles"),
        dictgen::InsensitiveStr::Ascii("aint"),
        dictgen::InsensitiveStr::Ascii("aints"),
        dictgen::InsensitiveStr::Ascii("ations"),
        dictgen::InsensitiveStr::Ascii("eity"),
        dictgen::InsensitiveStr::Ascii("iabel"),
        dictgen::InsensitiveStr::Ascii("ians"),
        dictgen::InsensitiveStr::Ascii("iantes"),
        dictgen::InsensitiveStr::Ascii("ibale"),
        dictgen::InsensitiveStr::Ascii("ient"),
        dictgen::InsensitiveStr::Ascii("iey"),
        dictgen::InsensitiveStr::Ascii("ification"),
        dictgen::InsensitiveStr::Ascii("ing"),
        dictgen::InsensitiveStr::Ascii("isty"),
        dictgen::InsensitiveStr::Ascii("itey"),
        dictgen::InsensitiveStr::Ascii("ities"),
        dictgen::InsensitiveStr::Ascii("ity"),
        dictgen::InsensitiveStr::Ascii("stiy"),
    ],
    values: &[
        &["variable"],
        &["variables"],
        &["variant"],
        &["variants"],
        &["variations"],
        &["variety"],
        &["variable"],
        &["variants"],
        &["variants"],
        &["variable"],
        &["variant"],
        &["variety"],
        &["verification"],
        &["varying"],
        &["varsity"],
        &["variety"],
        &["varieties"],
        &["variety"],
        &["varsity"],
    ],
    range: 3..=9,
};

static WORD_VAN_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_VAN_CHILDREN),
    value: None,
};

pub static WORD_VAN_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("adlism"),
        dictgen::InsensitiveStr::Ascii("dalisim"),
        dictgen::InsensitiveStr::Ascii("dalsim"),
        dictgen::InsensitiveStr::Ascii("guad"),
        dictgen::InsensitiveStr::Ascii("gurad"),
        dictgen::InsensitiveStr::Ascii("illia"),
        dictgen::InsensitiveStr::Ascii("illla"),
        dictgen::InsensitiveStr::Ascii("ugard"),
    ],
    values: &[
        &["vandalism"],
        &["vandalism"],
        &["vandalism"],
        &["vanguard"],
        &["vanguard"],
        &["vanilla"],
        &["vanilla"],
        &["vanguard"],
    ],
    range: 4..=7,
};

static WORD_VAM_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_VAM_CHILDREN),
    value: None,
};

pub static WORD_VAM_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ipres"),
        dictgen::InsensitiveStr::Ascii("piers"),
        dictgen::InsensitiveStr::Ascii("pirs"),
        dictgen::InsensitiveStr::Ascii("pries"),
    ],
    values: &[&["vampires"], &["vampires"], &["vampires"], &["vampires"]],
    range: 4..=5,
};

static WORD_VAL_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_VAL_CHILDREN),
    value: None,
};

pub static WORD_VAL_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("diated"),
        dictgen::InsensitiveStr::Ascii("enca"),
        dictgen::InsensitiveStr::Ascii("enica"),
        dictgen::InsensitiveStr::Ascii("entein"),
        dictgen::InsensitiveStr::Ascii("entians"),
        dictgen::InsensitiveStr::Ascii("entie"),
        dictgen::InsensitiveStr::Ascii("entien"),
        dictgen::InsensitiveStr::Ascii("entiens"),
        dictgen::InsensitiveStr::Ascii("entimes"),
        dictgen::InsensitiveStr::Ascii("entinas"),
        dictgen::InsensitiveStr::Ascii("entinos"),
        dictgen::InsensitiveStr::Ascii("entins"),
        dictgen::InsensitiveStr::Ascii("entis"),
        dictgen::InsensitiveStr::Ascii("entones"),
        dictgen::InsensitiveStr::Ascii("etta"),
        dictgen::InsensitiveStr::Ascii("idade"),
        dictgen::InsensitiveStr::Ascii("iditity"),
        dictgen::InsensitiveStr::Ascii("iditiy"),
        dictgen::InsensitiveStr::Ascii("kirye"),
        dictgen::InsensitiveStr::Ascii("kiyre"),
        dictgen::InsensitiveStr::Ascii("kriye"),
        dictgen::InsensitiveStr::Ascii("kryie"),
        dictgen::InsensitiveStr::Ascii("kyire"),
        dictgen::InsensitiveStr::Ascii("kyre"),
        dictgen::InsensitiveStr::Ascii("necia"),
        dictgen::InsensitiveStr::Ascii("netines"),
        dictgen::InsensitiveStr::Ascii("uabe"),
        dictgen::InsensitiveStr::Ascii("ubale"),
        dictgen::InsensitiveStr::Ascii("uble"),
        dictgen::InsensitiveStr::Ascii("ueable"),
        dictgen::InsensitiveStr::Ascii("ykrie"),
    ],
    values: &[
        &["validated"],
        &["valencia"],
        &["valencia"],
        &["valentine"],
        &["valentines"],
        &["valentines"],
        &["valentine"],
        &["valentines"],
        &["valentines"],
        &["valentines"],
        &["valentines"],
        &["valentines"],
        &["valentines"],
        &["valentines"],
        &["valletta"],
        &["validated"],
        &["validity"],
        &["validity"],
        &["valkyrie"],
        &["valkyrie"],
        &["valkyrie"],
        &["valkyrie"],
        &["valkyrie"],
        &["valkyrie"],
        &["valencia"],
        &["valentines"],
        &["valuable"],
        &["valuable"],
        &["valuable"],
        &["valuable"],
        &["valkyrie"],
    ],
    range: 4..=7,
};

static WORD_VAK_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_VAK_CHILDREN),
    value: None,
};

pub static WORD_VAK_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("lyrie")],
    values: &[&["valkyrie"]],
    range: 5..=5,
};

static WORD_VAI_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_VAI_CHILDREN),
    value: None,
};

pub static WORD_VAI_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ation"),
        dictgen::InsensitiveStr::Ascii("bility"),
        dictgen::InsensitiveStr::Ascii("eties"),
        dictgen::InsensitiveStr::Ascii("ldated"),
        dictgen::InsensitiveStr::Ascii("lidty"),
        dictgen::InsensitiveStr::Ascii("rable"),
        dictgen::InsensitiveStr::Ascii("rables"),
        dictgen::InsensitiveStr::Ascii("rant"),
    ],
    values: &[
        &["aviation"],
        &["viability"],
        &["varieties"],
        &["validated"],
        &["validity"],
        &["variable"],
        &["variables"],
        &["variant"],
    ],
    range: 4..=6,
};

static WORD_VAG_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_VAG_CHILDREN),
    value: None,
};

pub static WORD_VAG_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("euly"),
        dictgen::InsensitiveStr::Ascii("uaries"),
        dictgen::InsensitiveStr::Ascii("uelly"),
        dictgen::InsensitiveStr::Ascii("uley"),
    ],
    values: &[&["vaguely"], &["vagaries"], &["vaguely"], &["vaguely"]],
    range: 4..=6,
};

static WORD_VAC_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_VAC_CHILDREN),
    value: None,
};

pub static WORD_VAC_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ciante"),
        dictgen::InsensitiveStr::Ascii("ciantion"),
        dictgen::InsensitiveStr::Ascii("cinae"),
        dictgen::InsensitiveStr::Ascii("cinatie"),
        dictgen::InsensitiveStr::Ascii("cinaties"),
        dictgen::InsensitiveStr::Ascii("cinato"),
        dictgen::InsensitiveStr::Ascii("cineras"),
        dictgen::InsensitiveStr::Ascii("ciners"),
        dictgen::InsensitiveStr::Ascii("cinet"),
        dictgen::InsensitiveStr::Ascii("cins"),
        dictgen::InsensitiveStr::Ascii("cum"),
        dictgen::InsensitiveStr::Ascii("cume"),
        dictgen::InsensitiveStr::Ascii("estomy"),
        dictgen::InsensitiveStr::Ascii("inity"),
    ],
    values: &[
        &["vaccinate"],
        &["vaccination"],
        &["vaccinated"],
        &["vaccinated"],
        &["vaccinate"],
        &["vaccination"],
        &["vaccines"],
        &["vaccines"],
        &["vaccinated"],
        &["vaccines"],
        &["vacuum"],
        &["vacuum"],
        &["vasectomy"],
        &["vicinity"],
    ],
    range: 3..=8,
};

static WORD_U_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_U_CHILDREN),
    value: None,
};

static WORD_U_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    None,
    Some(&WORD_UB_NODE),
    None,
    Some(&WORD_UD_NODE),
    Some(&WORD_UE_NODE),
    None,
    Some(&WORD_UG_NODE),
    None,
    Some(&WORD_UI_NODE),
    None,
    Some(&WORD_UK_NODE),
    Some(&WORD_UL_NODE),
    Some(&WORD_UM_NODE),
    Some(&WORD_UN_NODE),
    None,
    Some(&WORD_UP_NODE),
    None,
    Some(&WORD_UR_NODE),
    Some(&WORD_US_NODE),
    Some(&WORD_UT_NODE),
    None,
    None,
    None,
    None,
    None,
    None,
];

static WORD_UT_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_UT_CHILDREN),
    value: None,
};

pub static WORD_UT_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("iliatrian"),
        dictgen::InsensitiveStr::Ascii("ilitatian"),
        dictgen::InsensitiveStr::Ascii("iliterian"),
        dictgen::InsensitiveStr::Ascii("ilitiy"),
        dictgen::InsensitiveStr::Ascii("ilizacion"),
        dictgen::InsensitiveStr::Ascii("ilizaiton"),
        dictgen::InsensitiveStr::Ascii("ilizating"),
        dictgen::InsensitiveStr::Ascii("iltiarian"),
        dictgen::InsensitiveStr::Ascii("iltiy"),
        dictgen::InsensitiveStr::Ascii("limate"),
        dictgen::InsensitiveStr::Ascii("limately"),
        dictgen::InsensitiveStr::Ascii("limatum"),
        dictgen::InsensitiveStr::Ascii("lrasound"),
        dictgen::InsensitiveStr::Ascii("opain"),
        dictgen::InsensitiveStr::Ascii("poian"),
    ],
    values: &[
        &["utilitarian"],
        &["utilitarian"],
        &["utilitarian"],
        &["utility"],
        &["utilization"],
        &["utilization"],
        &["utilization"],
        &["utilitarian"],
        &["utility"],
        &["ultimate"],
        &["ultimately"],
        &["ultimatum"],
        &["ultrasound"],
        &["utopian"],
        &["utopian"],
    ],
    range: 5..=9,
};

static WORD_US_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_US_CHILDREN),
    value: None,
};

pub static WORD_US_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ally"),
        dictgen::InsensitiveStr::Ascii("eage"),
        dictgen::InsensitiveStr::Ascii("efull"),
        dictgen::InsensitiveStr::Ascii("efuly"),
        dictgen::InsensitiveStr::Ascii("eing"),
        dictgen::InsensitiveStr::Ascii("ualy"),
        dictgen::InsensitiveStr::Ascii("usally"),
    ],
    values: &[
        &["usually"],
        &["usage"],
        &["useful"],
        &["usefully"],
        &["using"],
        &["usually"],
        &["usually"],
    ],
    range: 4..=6,
};

static WORD_UR_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_UR_CHILDREN),
    value: None,
};

pub static WORD_UR_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ainum"),
        dictgen::InsensitiveStr::Ascii("anuim"),
        dictgen::InsensitiveStr::Ascii("ethrea"),
        dictgen::InsensitiveStr::Ascii("etrha"),
        dictgen::InsensitiveStr::Ascii("kaine"),
        dictgen::InsensitiveStr::Ascii("kainian"),
        dictgen::InsensitiveStr::Ascii("kainians"),
        dictgen::InsensitiveStr::Ascii("naium"),
        dictgen::InsensitiveStr::Ascii("ugauy"),
        dictgen::InsensitiveStr::Ascii("uguary"),
    ],
    values: &[
        &["uranium"],
        &["uranium"],
        &["urethra"],
        &["urethra"],
        &["ukraine"],
        &["ukrainian"],
        &["ukrainians"],
        &["uranium"],
        &["uruguay"],
        &["uruguay"],
    ],
    range: 5..=8,
};

static WORD_UP_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_UP_CHILDREN),
    value: None,
};

pub static WORD_UP_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("comming"),
        dictgen::InsensitiveStr::Ascii("garde"),
        dictgen::InsensitiveStr::Ascii("garded"),
        dictgen::InsensitiveStr::Ascii("gardes"),
        dictgen::InsensitiveStr::Ascii("garding"),
        dictgen::InsensitiveStr::Ascii("gradded"),
        dictgen::InsensitiveStr::Ascii("grads"),
        dictgen::InsensitiveStr::Ascii("laods"),
        dictgen::InsensitiveStr::Ascii("lfiting"),
        dictgen::InsensitiveStr::Ascii("lifitng"),
        dictgen::InsensitiveStr::Ascii("loades"),
        dictgen::InsensitiveStr::Ascii("staris"),
        dictgen::InsensitiveStr::Ascii("steam"),
        dictgen::InsensitiveStr::Ascii("stiars"),
    ],
    values: &[
        &["upcoming"],
        &["upgrade"],
        &["upgraded"],
        &["upgrades"],
        &["upgrading"],
        &["upgraded"],
        &["upgrades"],
        &["uploads"],
        &["uplifting"],
        &["uplifting"],
        &["uploads"],
        &["upstairs"],
        &["upstream"],
        &["upstairs"],
    ],
    range: 5..=7,
};

static WORD_UN_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_UN_CHILDREN),
    value: None,
};

static WORD_UN_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    Some(&WORD_UNA_NODE),
    Some(&WORD_UNB_NODE),
    Some(&WORD_UNC_NODE),
    Some(&WORD_UND_NODE),
    Some(&WORD_UNE_NODE),
    Some(&WORD_UNF_NODE),
    Some(&WORD_UNG_NODE),
    Some(&WORD_UNH_NODE),
    Some(&WORD_UNI_NODE),
    Some(&WORD_UNJ_NODE),
    Some(&WORD_UNK_NODE),
    Some(&WORD_UNL_NODE),
    Some(&WORD_UNM_NODE),
    Some(&WORD_UNN_NODE),
    Some(&WORD_UNO_NODE),
    Some(&WORD_UNP_NODE),
    Some(&WORD_UNQ_NODE),
    Some(&WORD_UNR_NODE),
    Some(&WORD_UNS_NODE),
    Some(&WORD_UNT_NODE),
    Some(&WORD_UNU_NODE),
    Some(&WORD_UNV_NODE),
    Some(&WORD_UNW_NODE),
    None,
    None,
    None,
];

static WORD_UNW_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_UNW_CHILDREN),
    value: None,
};

pub static WORD_UNW_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("arrented"),
        dictgen::InsensitiveStr::Ascii("eildly"),
        dictgen::InsensitiveStr::Ascii("ieldly"),
        dictgen::InsensitiveStr::Ascii("irtten"),
        dictgen::InsensitiveStr::Ascii("orhty"),
        dictgen::InsensitiveStr::Ascii("orthly"),
        dictgen::InsensitiveStr::Ascii("orty"),
        dictgen::InsensitiveStr::Ascii("rittern"),
    ],
    values: &[
        &["unwarranted"],
        &["unwieldy"],
        &["unwieldy"],
        &["unwritten"],
        &["unworthy"],
        &["unworthy"],
        &["unworthy"],
        &["unwritten"],
    ],
    range: 4..=8,
};

static WORD_UNV_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_UNV_CHILDREN),
    value: None,
};

pub static WORD_UNV_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("elievable"),
        dictgen::InsensitiveStr::Ascii("elievably"),
        dictgen::InsensitiveStr::Ascii("iersally"),
        dictgen::InsensitiveStr::Ascii("ierse"),
        dictgen::InsensitiveStr::Ascii("ierses"),
        dictgen::InsensitiveStr::Ascii("iersities"),
        dictgen::InsensitiveStr::Ascii("iersity"),
        dictgen::InsensitiveStr::Ascii("ulnerable"),
    ],
    values: &[
        &["unbelievable"],
        &["unbelievably"],
        &["universally"],
        &["universe"],
        &["universes"],
        &["universities"],
        &["university"],
        &["invulnerable"],
    ],
    range: 5..=9,
};

static WORD_UNU_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_UNU_CHILDREN),
    value: None,
};

pub static WORD_UNU_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("sabe"),
        dictgen::InsensitiveStr::Ascii("saully"),
        dictgen::InsensitiveStr::Ascii("seable"),
        dictgen::InsensitiveStr::Ascii("suable"),
        dictgen::InsensitiveStr::Ascii("sualy"),
    ],
    values: &[
        &["unusable"],
        &["unusually"],
        &["unusable"],
        &["unusable"],
        &["unusually"],
    ],
    range: 4..=6,
};

static WORD_UNT_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_UNT_CHILDREN),
    value: None,
};

pub static WORD_UNT_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ill"),
        dictgen::InsensitiveStr::Ascii("raind"),
        dictgen::InsensitiveStr::Ascii("ranslateable"),
        dictgen::InsensitiveStr::Ascii("rianed"),
    ],
    values: &[
        &["until"],
        &["untrained"],
        &["untranslatable"],
        &["untrained"],
    ],
    range: 3..=12,
};

static WORD_UNS_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_UNS_CHILDREN),
    value: None,
};

static WORD_UNS_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    None,
    None,
    None,
    None,
    Some(&WORD_UNSE_NODE),
    None,
    None,
    None,
    Some(&WORD_UNSI_NODE),
    None,
    None,
    None,
    None,
    None,
    Some(&WORD_UNSO_NODE),
    None,
    None,
    None,
    None,
    None,
    Some(&WORD_UNSU_NODE),
    None,
    None,
    None,
    None,
    None,
];

static WORD_UNSU_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_UNSU_CHILDREN),
    value: None,
};

pub static WORD_UNSU_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("able"),
        dictgen::InsensitiveStr::Ascii("bscibe"),
        dictgen::InsensitiveStr::Ascii("bscirbe"),
        dictgen::InsensitiveStr::Ascii("bscirbed"),
        dictgen::InsensitiveStr::Ascii("bscrbe"),
        dictgen::InsensitiveStr::Ascii("bscrbed"),
        dictgen::InsensitiveStr::Ascii("bscribade"),
        dictgen::InsensitiveStr::Ascii("bscribbed"),
        dictgen::InsensitiveStr::Ascii("bscrible"),
        dictgen::InsensitiveStr::Ascii("bscrided"),
        dictgen::InsensitiveStr::Ascii("bscried"),
        dictgen::InsensitiveStr::Ascii("bscripe"),
        dictgen::InsensitiveStr::Ascii("bscriped"),
        dictgen::InsensitiveStr::Ascii("bscrive"),
        dictgen::InsensitiveStr::Ascii("bscrube"),
        dictgen::InsensitiveStr::Ascii("bscrubed"),
        dictgen::InsensitiveStr::Ascii("bsrcibe"),
        dictgen::InsensitiveStr::Ascii("bsrcibed"),
        dictgen::InsensitiveStr::Ascii("bstanciated"),
        dictgen::InsensitiveStr::Ascii("bstansiated"),
        dictgen::InsensitiveStr::Ascii("bstantiaed"),
        dictgen::InsensitiveStr::Ascii("bstantianted"),
        dictgen::InsensitiveStr::Ascii("bstantiative"),
        dictgen::InsensitiveStr::Ascii("ccesful"),
        dictgen::InsensitiveStr::Ascii("ccesfully"),
        dictgen::InsensitiveStr::Ascii("ccessfull"),
        dictgen::InsensitiveStr::Ascii("ccessul"),
        dictgen::InsensitiveStr::Ascii("cesful"),
        dictgen::InsensitiveStr::Ascii("cesfuly"),
        dictgen::InsensitiveStr::Ascii("cessful"),
        dictgen::InsensitiveStr::Ascii("cessfull"),
        dictgen::InsensitiveStr::Ascii("cessfully"),
        dictgen::InsensitiveStr::Ascii("nscribe"),
        dictgen::InsensitiveStr::Ascii("nscribed"),
        dictgen::InsensitiveStr::Ascii("prised"),
        dictgen::InsensitiveStr::Ascii("prising"),
        dictgen::InsensitiveStr::Ascii("prisingly"),
        dictgen::InsensitiveStr::Ascii("prized"),
        dictgen::InsensitiveStr::Ascii("prizing"),
        dictgen::InsensitiveStr::Ascii("prizingly"),
        dictgen::InsensitiveStr::Ascii("rprized"),
        dictgen::InsensitiveStr::Ascii("rprizing"),
        dictgen::InsensitiveStr::Ascii("rprizingly"),
        dictgen::InsensitiveStr::Ascii("sbcribe"),
        dictgen::InsensitiveStr::Ascii("sbcribed"),
        dictgen::InsensitiveStr::Ascii("sbtantiated"),
        dictgen::InsensitiveStr::Ascii("stainble"),
        dictgen::InsensitiveStr::Ascii("stainible"),
        dictgen::InsensitiveStr::Ascii("stianable"),
    ],
    values: &[
        &["unusable"],
        &["unsubscribe"],
        &["unsubscribe"],
        &["unsubscribed"],
        &["unsubscribe"],
        &["unsubscribed"],
        &["unsubscribed"],
        &["unsubscribe"],
        &["unsubscribed"],
        &["unsubscribed"],
        &["unsubscribed"],
        &["unsubscribe"],
        &["unsubscribed"],
        &["unsubscribe"],
        &["unsubscribe"],
        &["unsubscribed"],
        &["unsubscribe"],
        &["unsubscribed"],
        &["unsubstantiated"],
        &["unsubstantiated"],
        &["unsubstantiated"],
        &["unsubstantiated"],
        &["unsubstantiated"],
        &["unsuccessful"],
        &["unsuccessfully"],
        &["unsuccessful"],
        &["unsuccessful"],
        &["unsuccessful"],
        &["unsuccessfully"],
        &["unsuccessful"],
        &["unsuccessful"],
        &["unsuccessfully"],
        &["unsubscribe"],
        &["unsubscribed"],
        &["unsurprised"],
        &["unsurprising"],
        &["unsurprisingly"],
        &["unsurprised"],
        &["unsurprising"],
        &["unsurprisingly"],
        &["unsurprised"],
        &["unsurprising"],
        &["unsurprisingly"],
        &["unsubscribe"],
        &["unsubscribed"],
        &["unsubstantiated"],
        &["unsustainable"],
        &["unsustainable"],
        &["unsustainable"],
    ],
    range: 4..=12,
};

static WORD_UNSO_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_UNSO_CHILDREN),
    value: None,
};

pub static WORD_UNSO_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("licated"),
        dictgen::InsensitiveStr::Ascii("liciated"),
        dictgen::InsensitiveStr::Ascii("licitied"),
        dictgen::InsensitiveStr::Ascii("licted"),
        dictgen::InsensitiveStr::Ascii("liticed"),
        dictgen::InsensitiveStr::Ascii("locited"),
    ],
    values: &[
        &["unsolicited"],
        &["unsolicited"],
        &["unsolicited"],
        &["unsolicited"],
        &["unsolicited"],
        &["unsolicited"],
    ],
    range: 6..=8,
};

static WORD_UNSI_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_UNSI_CHILDREN),
    value: None,
};

pub static WORD_UNSI_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("bscribed"),
        dictgen::InsensitiveStr::Ascii("bstantiated"),
        dictgen::InsensitiveStr::Ascii("ntalled"),
        dictgen::InsensitiveStr::Ascii("stainable"),
    ],
    values: &[
        &["unsubscribed"],
        &["unsubstantiated"],
        &["uninstalled"],
        &["unsustainable"],
    ],
    range: 7..=11,
};

static WORD_UNSE_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_UNSE_CHILDREN),
    value: None,
};

pub static WORD_UNSE_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ccessful"),
        dictgen::InsensitiveStr::Ascii("d"),
        dictgen::InsensitiveStr::Ascii("ncored"),
        dictgen::InsensitiveStr::Ascii("specting"),
        dictgen::InsensitiveStr::Ascii("tlling"),
        dictgen::InsensitiveStr::Ascii("ttleing"),
    ],
    values: &[
        &["unsuccessful"],
        &["used"],
        &["uncensored"],
        &["unsuspecting"],
        &["unsettling"],
        &["unsettling"],
    ],
    range: 1..=8,
};

static WORD_UNR_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_UNR_CHILDREN),
    value: None,
};

pub static WORD_UNR_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("akned"),
        dictgen::InsensitiveStr::Ascii("ankend"),
        dictgen::InsensitiveStr::Ascii("ealesed"),
        dictgen::InsensitiveStr::Ascii("ealible"),
        dictgen::InsensitiveStr::Ascii("ealisitc"),
        dictgen::InsensitiveStr::Ascii("ealisitic"),
        dictgen::InsensitiveStr::Ascii("ealistc"),
        dictgen::InsensitiveStr::Ascii("ealistisch"),
        dictgen::InsensitiveStr::Ascii("ealitic"),
        dictgen::InsensitiveStr::Ascii("ealsitic"),
        dictgen::InsensitiveStr::Ascii("eaponsive"),
        dictgen::InsensitiveStr::Ascii("easonablely"),
        dictgen::InsensitiveStr::Ascii("easonabley"),
        dictgen::InsensitiveStr::Ascii("easonablly"),
        dictgen::InsensitiveStr::Ascii("easonal"),
        dictgen::InsensitiveStr::Ascii("easonalby"),
        dictgen::InsensitiveStr::Ascii("easonbly"),
        dictgen::InsensitiveStr::Ascii("egluated"),
        dictgen::InsensitiveStr::Ascii("egualted"),
        dictgen::InsensitiveStr::Ascii("egulared"),
        dictgen::InsensitiveStr::Ascii("elaible"),
        dictgen::InsensitiveStr::Ascii("eleated"),
        dictgen::InsensitiveStr::Ascii("eliabe"),
        dictgen::InsensitiveStr::Ascii("elyable"),
        dictgen::InsensitiveStr::Ascii("epentent"),
        dictgen::InsensitiveStr::Ascii("epetant"),
        dictgen::InsensitiveStr::Ascii("epetent"),
        dictgen::InsensitiveStr::Ascii("epsonsive"),
        dictgen::InsensitiveStr::Ascii("esponcive"),
        dictgen::InsensitiveStr::Ascii("esponisve"),
        dictgen::InsensitiveStr::Ascii("esponive"),
        dictgen::InsensitiveStr::Ascii("esponse"),
        dictgen::InsensitiveStr::Ascii("esponsibe"),
        dictgen::InsensitiveStr::Ascii("esponsivness"),
        dictgen::InsensitiveStr::Ascii("estircted"),
        dictgen::InsensitiveStr::Ascii("estrcited"),
        dictgen::InsensitiveStr::Ascii("estriced"),
        dictgen::InsensitiveStr::Ascii("estrictred"),
        dictgen::InsensitiveStr::Ascii("istricted"),
        dictgen::InsensitiveStr::Ascii("naked"),
        dictgen::InsensitiveStr::Ascii("poven"),
        dictgen::InsensitiveStr::Ascii("witten"),
    ],
    values: &[
        &["unranked"],
        &["unranked"],
        &["unreleased"],
        &["unreliable"],
        &["unrealistic"],
        &["unrealistic"],
        &["unrealistic"],
        &["unrealistic"],
        &["unrealistic"],
        &["unrealistic"],
        &["unresponsive"],
        &["unreasonably"],
        &["unreasonably"],
        &["unreasonably"],
        &["unreasonably"],
        &["unreasonably"],
        &["unreasonably"],
        &["unregulated"],
        &["unregulated"],
        &["unregulated"],
        &["unreliable"],
        &["unreleased"],
        &["unreliable"],
        &["unreliable"],
        &["unrepentant"],
        &["unrepentant"],
        &["unrepentant"],
        &["unresponsive"],
        &["unresponsive"],
        &["unresponsive"],
        &["unresponsive"],
        &["unresponsive"],
        &["unresponsive"],
        &["unresponsive"],
        &["unrestricted"],
        &["unrestricted"],
        &["unrestricted"],
        &["unrestricted"],
        &["unrestricted"],
        &["unranked"],
        &["unproven"],
        &["unwritten"],
    ],
    range: 5..=12,
};

static WORD_UNQ_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_UNQ_CHILDREN),
    value: None,
};

pub static WORD_UNQ_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("aulified"),
        dictgen::InsensitiveStr::Ascii("iuely"),
        dictgen::InsensitiveStr::Ascii("iueness"),
        dictgen::InsensitiveStr::Ascii("ualifed"),
    ],
    values: &[
        &["unqualified"],
        &["uniquely"],
        &["uniqueness"],
        &["unqualified"],
    ],
    range: 5..=8,
};

static WORD_UNP_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_UNP_CHILDREN),
    value: None,
};

pub static WORD_UNP_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("lacable"),
        dictgen::InsensitiveStr::Ascii("layabe"),
        dictgen::InsensitiveStr::Ascii("laybale"),
        dictgen::InsensitiveStr::Ascii("layeble"),
        dictgen::InsensitiveStr::Ascii("leaseant"),
        dictgen::InsensitiveStr::Ascii("leasent"),
        dictgen::InsensitiveStr::Ascii("lesant"),
        dictgen::InsensitiveStr::Ascii("oened"),
        dictgen::InsensitiveStr::Ascii("opluar"),
        dictgen::InsensitiveStr::Ascii("opulair"),
        dictgen::InsensitiveStr::Ascii("ortected"),
        dictgen::InsensitiveStr::Ascii("recendented"),
        dictgen::InsensitiveStr::Ascii("recendeted"),
        dictgen::InsensitiveStr::Ascii("recidented"),
        dictgen::InsensitiveStr::Ascii("redecented"),
        dictgen::InsensitiveStr::Ascii("redicatble"),
        dictgen::InsensitiveStr::Ascii("redictabe"),
        dictgen::InsensitiveStr::Ascii("redictible"),
        dictgen::InsensitiveStr::Ascii("reductive"),
        dictgen::InsensitiveStr::Ascii("repaired"),
        dictgen::InsensitiveStr::Ascii("reparred"),
        dictgen::InsensitiveStr::Ascii("resedented"),
        dictgen::InsensitiveStr::Ascii("ridictable"),
        dictgen::InsensitiveStr::Ascii("roducive"),
        dictgen::InsensitiveStr::Ascii("roduktive"),
        dictgen::InsensitiveStr::Ascii("rofessinal"),
        dictgen::InsensitiveStr::Ascii("rofessionel"),
        dictgen::InsensitiveStr::Ascii("rofessionnal"),
        dictgen::InsensitiveStr::Ascii("rone"),
        dictgen::InsensitiveStr::Ascii("roteced"),
        dictgen::InsensitiveStr::Ascii("rotexted"),
    ],
    values: &[
        &["unplayable"],
        &["unplayable"],
        &["unplayable"],
        &["unplayable"],
        &["unpleasant"],
        &["unpleasant"],
        &["unpleasant"],
        &["unopened"],
        &["unpopular"],
        &["unpopular"],
        &["unprotected"],
        &["unprecedented"],
        &["unprecedented"],
        &["unprecedented"],
        &["unprecedented"],
        &["unpredictable"],
        &["unpredictable"],
        &["unpredictable"],
        &["unproductive"],
        &["unprepared"],
        &["unprepared"],
        &["unprecedented"],
        &["unpredictable"],
        &["unproductive"],
        &["unproductive"],
        &["unprofessional"],
        &["unprofessional"],
        &["unprofessional"],
        &["unproven"],
        &["unprotected"],
        &["unprotected"],
    ],
    range: 4..=12,
};

static WORD_UNO_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_UNO_CHILDREN),
    value: None,
};

pub static WORD_UNO_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("fficail"),
        dictgen::InsensitiveStr::Ascii("ffical"),
        dictgen::InsensitiveStr::Ascii("ffocial"),
        dictgen::InsensitiveStr::Ascii("pend"),
        dictgen::InsensitiveStr::Ascii("penend"),
        dictgen::InsensitiveStr::Ascii("perational"),
        dictgen::InsensitiveStr::Ascii("rginial"),
        dictgen::InsensitiveStr::Ascii("riginial"),
        dictgen::InsensitiveStr::Ascii("rigional"),
        dictgen::InsensitiveStr::Ascii("rignial"),
        dictgen::InsensitiveStr::Ascii("rigonal"),
        dictgen::InsensitiveStr::Ascii("ticeable"),
    ],
    values: &[
        &["unofficial"],
        &["unofficial"],
        &["unofficial"],
        &["unopened"],
        &["unopened"],
        &["nonoperational"],
        &["unoriginal"],
        &["unoriginal"],
        &["unoriginal"],
        &["unoriginal"],
        &["unoriginal"],
        &["unnoticeable"],
    ],
    range: 4..=10,
};

static WORD_UNN_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_UNN_CHILDREN),
    value: None,
};

pub static WORD_UNN_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ecassarily"),
        dictgen::InsensitiveStr::Ascii("ecassary"),
        dictgen::InsensitiveStr::Ascii("eccesarily"),
        dictgen::InsensitiveStr::Ascii("eccesary"),
        dictgen::InsensitiveStr::Ascii("eccessarily"),
        dictgen::InsensitiveStr::Ascii("eccessary"),
        dictgen::InsensitiveStr::Ascii("ecesarily"),
        dictgen::InsensitiveStr::Ascii("ecesary"),
        dictgen::InsensitiveStr::Ascii("ecessairly"),
        dictgen::InsensitiveStr::Ascii("ecessairy"),
        dictgen::InsensitiveStr::Ascii("ecessarely"),
        dictgen::InsensitiveStr::Ascii("ecessarilly"),
        dictgen::InsensitiveStr::Ascii("ecessarity"),
        dictgen::InsensitiveStr::Ascii("ecessarly"),
        dictgen::InsensitiveStr::Ascii("ecesserily"),
        dictgen::InsensitiveStr::Ascii("ecessery"),
        dictgen::InsensitiveStr::Ascii("ecissarily"),
        dictgen::InsensitiveStr::Ascii("ecissary"),
        dictgen::InsensitiveStr::Ascii("essecarily"),
        dictgen::InsensitiveStr::Ascii("essecary"),
        dictgen::InsensitiveStr::Ascii("istall"),
        dictgen::InsensitiveStr::Ascii("istalled"),
        dictgen::InsensitiveStr::Ascii("istalling"),
    ],
    values: &[
        &["unnecessarily"],
        &["unnecessary"],
        &["unnecessarily"],
        &["unnecessary"],
        &["unnecessarily"],
        &["unnecessary"],
        &["unnecessarily"],
        &["unnecessary"],
        &["unnecessarily"],
        &["unnecessarily"],
        &["unnecessarily"],
        &["unnecessarily"],
        &["unnecessarily"],
        &["unnecessarily"],
        &["unnecessarily"],
        &["unnecessary"],
        &["unnecessarily"],
        &["unnecessary"],
        &["unnecessarily"],
        &["unnecessary"],
        &["uninstall"],
        &["uninstalled"],
        &["uninstalling"],
    ],
    range: 6..=11,
};

static WORD_UNM_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_UNM_CHILDREN),
    value: None,
};

pub static WORD_UNM_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("anouverable")],
    values: &[&["unmaneuverable"]],
    range: 11..=11,
};

static WORD_UNL_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_UNL_CHILDREN),
    value: None,
};

pub static WORD_UNL_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("cean"),
        dictgen::InsensitiveStr::Ascii("coks"),
        dictgen::InsensitiveStr::Ascii("cuky"),
        dictgen::InsensitiveStr::Ascii("iaterally"),
        dictgen::InsensitiveStr::Ascii("ikey"),
        dictgen::InsensitiveStr::Ascii("ikley"),
        dictgen::InsensitiveStr::Ascii("ockes"),
        dictgen::InsensitiveStr::Ascii("uckly"),
    ],
    values: &[
        &["unclean"],
        &["unlocks"],
        &["unlucky"],
        &["unilaterally"],
        &["unlikely"],
        &["unlikely"],
        &["unlocks"],
        &["unlucky"],
    ],
    range: 4..=9,
};

static WORD_UNK_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_UNK_CHILDREN),
    value: None,
};

pub static WORD_UNK_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("nowingy"),
        dictgen::InsensitiveStr::Ascii("nowinlgy"),
        dictgen::InsensitiveStr::Ascii("nowinly"),
        dictgen::InsensitiveStr::Ascii("nwon"),
        dictgen::InsensitiveStr::Ascii("onwn"),
        dictgen::InsensitiveStr::Ascii("own"),
        dictgen::InsensitiveStr::Ascii("owningly"),
    ],
    values: &[
        &["unknowingly"],
        &["unknowingly"],
        &["unknowingly"],
        &["unknown"],
        &["unknown"],
        &["unknown"],
        &["unknowingly"],
    ],
    range: 3..=8,
};

static WORD_UNJ_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_UNJ_CHILDREN),
    value: None,
};

pub static WORD_UNJ_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ustifed"),
        dictgen::InsensitiveStr::Ascii("ustifyed"),
    ],
    values: &[&["unjustified"], &["unjustified"]],
    range: 7..=8,
};

static WORD_UNI_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_UNI_CHILDREN),
    value: None,
};

static WORD_UNI_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    None,
    None,
    Some(&WORD_UNIC_NODE),
    None,
    None,
    Some(&WORD_UNIF_NODE),
    None,
    Some(&WORD_UNIH_NODE),
    None,
    None,
    None,
    Some(&WORD_UNIL_NODE),
    Some(&WORD_UNIM_NODE),
    Some(&WORD_UNIN_NODE),
    None,
    None,
    Some(&WORD_UNIQ_NODE),
    None,
    Some(&WORD_UNIS_NODE),
    Some(&WORD_UNIT_NODE),
    None,
    Some(&WORD_UNIV_NODE),
    None,
    None,
    None,
    None,
];

static WORD_UNIV_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_UNIV_CHILDREN),
    value: None,
};

pub static WORD_UNIV_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("eral"),
        dictgen::InsensitiveStr::Ascii("ercity"),
        dictgen::InsensitiveStr::Ascii("erisites"),
        dictgen::InsensitiveStr::Ascii("eristies"),
        dictgen::InsensitiveStr::Ascii("eristy"),
        dictgen::InsensitiveStr::Ascii("erity"),
        dictgen::InsensitiveStr::Ascii("ersale"),
        dictgen::InsensitiveStr::Ascii("ersaly"),
        dictgen::InsensitiveStr::Ascii("ersella"),
        dictgen::InsensitiveStr::Ascii("ersels"),
        dictgen::InsensitiveStr::Ascii("ersets"),
        dictgen::InsensitiveStr::Ascii("ersite"),
        dictgen::InsensitiveStr::Ascii("ersites"),
        dictgen::InsensitiveStr::Ascii("ersitets"),
        dictgen::InsensitiveStr::Ascii("ersitites"),
        dictgen::InsensitiveStr::Ascii("ersse"),
        dictgen::InsensitiveStr::Ascii("erstiy"),
        dictgen::InsensitiveStr::Ascii("esities"),
        dictgen::InsensitiveStr::Ascii("esity"),
    ],
    values: &[
        &["universal"],
        &["university"],
        &["universities"],
        &["universities"],
        &["university"],
        &["university"],
        &["universe"],
        &["universally"],
        &["universally"],
        &["universes"],
        &["universes"],
        &["universities"],
        &["universities"],
        &["universities"],
        &["universities"],
        &["universes"],
        &["university"],
        &["universities"],
        &["university"],
    ],
    range: 4..=9,
};

static WORD_UNIT_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_UNIT_CHILDREN),
    value: None,
};

pub static WORD_UNIT_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("esstates")],
    values: &[&["unitedstates"]],
    range: 8..=8,
};

static WORD_UNIS_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_UNIS_CHILDREN),
    value: None,
};

pub static WORD_UNIS_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ntall"),
        dictgen::InsensitiveStr::Ascii("ntalled"),
        dictgen::InsensitiveStr::Ascii("ntalling"),
    ],
    values: &[&["uninstall"], &["uninstalled"], &["uninstalling"]],
    range: 5..=8,
};

static WORD_UNIQ_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_UNIQ_CHILDREN),
    value: None,
};

pub static WORD_UNIQ_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("uelly"),
        dictgen::InsensitiveStr::Ascii("uesness"),
        dictgen::InsensitiveStr::Ascii("uey"),
        dictgen::InsensitiveStr::Ascii("uiness"),
        dictgen::InsensitiveStr::Ascii("uley"),
    ],
    values: &[
        &["uniquely"],
        &["uniqueness"],
        &["uniquely"],
        &["uniqueness"],
        &["uniquely"],
    ],
    range: 3..=7,
};

static WORD_UNIN_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_UNIN_CHILDREN),
    value: None,
};

pub static WORD_UNIN_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("amous"),
        dictgen::InsensitiveStr::Ascii("italised"),
        dictgen::InsensitiveStr::Ascii("italizable"),
        dictgen::InsensitiveStr::Ascii("italized"),
        dictgen::InsensitiveStr::Ascii("sipred"),
        dictgen::InsensitiveStr::Ascii("spiried"),
        dictgen::InsensitiveStr::Ascii("spried"),
        dictgen::InsensitiveStr::Ascii("staled"),
        dictgen::InsensitiveStr::Ascii("staling"),
        dictgen::InsensitiveStr::Ascii("stallimg"),
        dictgen::InsensitiveStr::Ascii("stallled"),
        dictgen::InsensitiveStr::Ascii("stallling"),
        dictgen::InsensitiveStr::Ascii("stallng"),
        dictgen::InsensitiveStr::Ascii("tellegent"),
        dictgen::InsensitiveStr::Ascii("telligant"),
        dictgen::InsensitiveStr::Ascii("telligient"),
        dictgen::InsensitiveStr::Ascii("tensional"),
        dictgen::InsensitiveStr::Ascii("tensionally"),
        dictgen::InsensitiveStr::Ascii("tentinal"),
        dictgen::InsensitiveStr::Ascii("tentionaly"),
        dictgen::InsensitiveStr::Ascii("tentionnal"),
        dictgen::InsensitiveStr::Ascii("tentionnally"),
        dictgen::InsensitiveStr::Ascii("teresed"),
        dictgen::InsensitiveStr::Ascii("teresing"),
        dictgen::InsensitiveStr::Ascii("teristing"),
        dictgen::InsensitiveStr::Ascii("terneted"),
        dictgen::InsensitiveStr::Ascii("terruped"),
        dictgen::InsensitiveStr::Ascii("terupted"),
        dictgen::InsensitiveStr::Ascii("tuive"),
    ],
    values: &[
        &["unanimous"],
        &["uninitialised"],
        &["uninitializable"],
        &["uninitialized"],
        &["uninspired"],
        &["uninspired"],
        &["uninspired"],
        &["uninstalled"],
        &["uninstalling"],
        &["uninstalling"],
        &["uninstalled"],
        &["uninstalling"],
        &["uninstalling"],
        &["unintelligent"],
        &["unintelligent"],
        &["unintelligent"],
        &["unintentional"],
        &["unintentionally"],
        &["unintentional"],
        &["unintentionally"],
        &["unintentional"],
        &["unintentionally"],
        &["uninterested"],
        &["uninteresting"],
        &["uninteresting"],
        &["uninterested"],
        &["uninterrupted"],
        &["uninterrupted"],
        &["unintuitive"],
    ],
    range: 5..=12,
};

static WORD_UNIM_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_UNIM_CHILDREN),
    value: None,
};

pub static WORD_UNIM_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("porant"),
        dictgen::InsensitiveStr::Ascii("portent"),
        dictgen::InsensitiveStr::Ascii("presed"),
        dictgen::InsensitiveStr::Ascii("pressd"),
        dictgen::InsensitiveStr::Ascii("presssed"),
    ],
    values: &[
        &["unimportant"],
        &["unimportant"],
        &["unimpressed"],
        &["unimpressed"],
        &["unimpressed"],
    ],
    range: 6..=8,
};

static WORD_UNIL_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_UNIL_CHILDREN),
    value: None,
};

pub static WORD_UNIL_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("aterallly"),
        dictgen::InsensitiveStr::Ascii("ateraly"),
        dictgen::InsensitiveStr::Ascii("aterlly"),
        dictgen::InsensitiveStr::Ascii("atreal"),
        dictgen::InsensitiveStr::Ascii("atreally"),
        dictgen::InsensitiveStr::Ascii("iterally"),
    ],
    values: &[
        &["unilaterally"],
        &["unilaterally"],
        &["unilaterally"],
        &["unilateral"],
        &["unilaterally"],
        &["unilaterally"],
    ],
    range: 6..=9,
};

static WORD_UNIH_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_UNIH_CHILDREN),
    value: None,
};

pub static WORD_UNIH_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("abited")],
    values: &[&["uninhabited"]],
    range: 6..=6,
};

static WORD_UNIF_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_UNIF_CHILDREN),
    value: None,
};

pub static WORD_UNIF_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("nished"),
        dictgen::InsensitiveStr::Ascii("ormes"),
        dictgen::InsensitiveStr::Ascii("roms"),
    ],
    values: &[&["unfinished"], &["uniforms"], &["uniforms"]],
    range: 4..=6,
};

static WORD_UNIC_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_UNIC_CHILDREN),
    value: None,
};

pub static WORD_UNIC_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ornios"),
        dictgen::InsensitiveStr::Ascii("ornis"),
        dictgen::InsensitiveStr::Ascii("ornus"),
        dictgen::InsensitiveStr::Ascii("ors"),
        dictgen::InsensitiveStr::Ascii("rons"),
    ],
    values: &[
        &["unicorns"],
        &["unicorns"],
        &["unicorns"],
        &["unicorns"],
        &["unicorns"],
    ],
    range: 3..=6,
};

static WORD_UNH_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_UNH_CHILDREN),
    value: None,
};

pub static WORD_UNH_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("apppy"),
        dictgen::InsensitiveStr::Ascii("ealhty"),
        dictgen::InsensitiveStr::Ascii("ealthly"),
        dictgen::InsensitiveStr::Ascii("ealty"),
        dictgen::InsensitiveStr::Ascii("eathly"),
        dictgen::InsensitiveStr::Ascii("elathy"),
    ],
    values: &[
        &["unhappy"],
        &["unhealthy"],
        &["unhealthy"],
        &["unhealthy"],
        &["unhealthy"],
        &["unhealthy"],
    ],
    range: 5..=7,
};

static WORD_UNG_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_UNG_CHILDREN),
    value: None,
};

pub static WORD_UNG_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("odley"),
        dictgen::InsensitiveStr::Ascii("oldy"),
        dictgen::InsensitiveStr::Ascii("rapeful"),
        dictgen::InsensitiveStr::Ascii("reatful"),
        dictgen::InsensitiveStr::Ascii("reatfull"),
    ],
    values: &[
        &["ungodly"],
        &["ungodly"],
        &["ungrateful"],
        &["ungrateful"],
        &["ungrateful"],
    ],
    range: 4..=8,
};

static WORD_UNF_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_UNF_CHILDREN),
    value: None,
};

pub static WORD_UNF_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ailry"),
        dictgen::InsensitiveStr::Ascii("airy"),
        dictgen::InsensitiveStr::Ascii("amilair"),
        dictgen::InsensitiveStr::Ascii("amilier"),
        dictgen::InsensitiveStr::Ascii("amilliar"),
        dictgen::InsensitiveStr::Ascii("arily"),
        dictgen::InsensitiveStr::Ascii("insihed"),
        dictgen::InsensitiveStr::Ascii("irendly"),
        dictgen::InsensitiveStr::Ascii("omfortable"),
        dictgen::InsensitiveStr::Ascii("oretunately"),
        dictgen::InsensitiveStr::Ascii("orgetable"),
        dictgen::InsensitiveStr::Ascii("orgiveable"),
        dictgen::InsensitiveStr::Ascii("orgiveble"),
        dictgen::InsensitiveStr::Ascii("orgivible"),
        dictgen::InsensitiveStr::Ascii("orseen"),
        dictgen::InsensitiveStr::Ascii("ortuante"),
        dictgen::InsensitiveStr::Ascii("ortuantely"),
        dictgen::InsensitiveStr::Ascii("ortuate"),
        dictgen::InsensitiveStr::Ascii("ortunantly"),
        dictgen::InsensitiveStr::Ascii("ortunatelly"),
        dictgen::InsensitiveStr::Ascii("ortunatley"),
        dictgen::InsensitiveStr::Ascii("ortunatly"),
        dictgen::InsensitiveStr::Ascii("ortune"),
        dictgen::InsensitiveStr::Ascii("ortuneatly"),
        dictgen::InsensitiveStr::Ascii("ortunetely"),
        dictgen::InsensitiveStr::Ascii("ortunetly"),
        dictgen::InsensitiveStr::Ascii("ourtunately"),
        dictgen::InsensitiveStr::Ascii("reindly"),
        dictgen::InsensitiveStr::Ascii("riednly"),
        dictgen::InsensitiveStr::Ascii("riendy"),
        dictgen::InsensitiveStr::Ascii("riently"),
    ],
    values: &[
        &["unfairly"],
        &["unfairly"],
        &["unfamiliar"],
        &["unfamiliar"],
        &["unfamiliar"],
        &["unfairly"],
        &["unfinished"],
        &["unfriendly"],
        &["uncomfortable"],
        &["unfortunately"],
        &["unforgettable"],
        &["unforgivable"],
        &["unforgivable"],
        &["unforgivable"],
        &["unforeseen"],
        &["unfortunate"],
        &["unfortunately"],
        &["unfortunate"],
        &["unfortunately"],
        &["unfortunately"],
        &["unfortunately"],
        &["unfortunately"],
        &["unfortunate"],
        &["unfortunately"],
        &["unfortunately"],
        &["unfortunately"],
        &["unfortunately"],
        &["unfriendly"],
        &["unfriendly"],
        &["unfriendly"],
        &["unfriendly"],
    ],
    range: 4..=11,
};

static WORD_UNE_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_UNE_CHILDREN),
    value: None,
};

pub static WORD_UNE_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ccesary"),
        dictgen::InsensitiveStr::Ascii("cessary"),
        dictgen::InsensitiveStr::Ascii("dcuated"),
        dictgen::InsensitiveStr::Ascii("dicated"),
        dictgen::InsensitiveStr::Ascii("mployeed"),
        dictgen::InsensitiveStr::Ascii("mployemnt"),
        dictgen::InsensitiveStr::Ascii("mployent"),
        dictgen::InsensitiveStr::Ascii("mploymed"),
        dictgen::InsensitiveStr::Ascii("mplyoment"),
        dictgen::InsensitiveStr::Ascii("mpolyed"),
        dictgen::InsensitiveStr::Ascii("mpolyment"),
        dictgen::InsensitiveStr::Ascii("nployment"),
        dictgen::InsensitiveStr::Ascii("qualities"),
        dictgen::InsensitiveStr::Ascii("xpectadely"),
        dictgen::InsensitiveStr::Ascii("xpectadly"),
        dictgen::InsensitiveStr::Ascii("xpectdly"),
        dictgen::InsensitiveStr::Ascii("xpectely"),
        dictgen::InsensitiveStr::Ascii("xpectetly"),
        dictgen::InsensitiveStr::Ascii("xpectidly"),
        dictgen::InsensitiveStr::Ascii("xperience"),
        dictgen::InsensitiveStr::Ascii("xpextedly"),
        dictgen::InsensitiveStr::Ascii("xplaind"),
        dictgen::InsensitiveStr::Ascii("xplaned"),
        dictgen::InsensitiveStr::Ascii("xplicably"),
    ],
    values: &[
        &["unnecessary"],
        &["unnecessary"],
        &["uneducated"],
        &["uneducated"],
        &["unemployed"],
        &["unemployment"],
        &["unemployment"],
        &["unemployed"],
        &["unemployment"],
        &["unemployed"],
        &["unemployment"],
        &["unemployment"],
        &["inequalities"],
        &["unexpectedly"],
        &["unexpectedly"],
        &["unexpectedly"],
        &["unexpectedly"],
        &["unexpectedly"],
        &["unexpectedly"],
        &["inexperience"],
        &["unexpectedly"],
        &["unexplained"],
        &["unexplained"],
        &["inexplicably"],
    ],
    range: 7..=10,
};

static WORD_UND_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_UND_CHILDREN),
    value: None,
};

static WORD_UND_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    None,
    None,
    None,
    None,
    Some(&WORD_UNDE_NODE),
    None,
    None,
    None,
    Some(&WORD_UNDI_NODE),
    None,
    None,
    None,
    None,
    None,
    Some(&WORD_UNDO_NODE),
    None,
    None,
    Some(&WORD_UNDR_NODE),
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
];

static WORD_UNDR_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_UNDR_CHILDREN),
    value: None,
};

pub static WORD_UNDR_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("eground")],
    values: &[&["underground"]],
    range: 7..=7,
};

static WORD_UNDO_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_UNDO_CHILDREN),
    value: None,
};

pub static WORD_UNDO_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ctrinated"),
        dictgen::InsensitiveStr::Ascii("ubedtly"),
        dictgen::InsensitiveStr::Ascii("ubetdly"),
        dictgen::InsensitiveStr::Ascii("ubtadly"),
        dictgen::InsensitiveStr::Ascii("ubtebly"),
        dictgen::InsensitiveStr::Ascii("ubtedbly"),
        dictgen::InsensitiveStr::Ascii("ubtedy"),
        dictgen::InsensitiveStr::Ascii("ubtely"),
        dictgen::InsensitiveStr::Ascii("ubtetly"),
        dictgen::InsensitiveStr::Ascii("ubtley"),
    ],
    values: &[
        &["indoctrinated"],
        &["undoubtedly"],
        &["undoubtedly"],
        &["undoubtedly"],
        &["undoubtedly"],
        &["undoubtedly"],
        &["undoubtedly"],
        &["undoubtedly"],
        &["undoubtedly"],
        &["undoubtedly"],
    ],
    range: 6..=9,
};

static WORD_UNDI_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_UNDI_CHILDREN),
    value: None,
};

pub static WORD_UNDI_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("serable")],
    values: &[&["undesirable"]],
    range: 7..=7,
};

static WORD_UNDE_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_UNDE_CHILDREN),
    value: None,
};

static WORD_UNDE_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    None,
    Some(&WORD_UNDEB_NODE),
    Some(&WORD_UNDEC_NODE),
    None,
    None,
    Some(&WORD_UNDEF_NODE),
    None,
    None,
    Some(&WORD_UNDEI_NODE),
    None,
    None,
    None,
    None,
    Some(&WORD_UNDEN_NODE),
    None,
    None,
    None,
    Some(&WORD_UNDER_NODE),
    Some(&WORD_UNDES_NODE),
    Some(&WORD_UNDET_NODE),
    None,
    None,
    None,
    None,
    None,
    None,
];

static WORD_UNDET_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_UNDET_CHILDREN),
    value: None,
};

pub static WORD_UNDET_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("ecable")],
    values: &[&["undetectable"]],
    range: 6..=6,
};

static WORD_UNDES_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_UNDES_CHILDREN),
    value: None,
};

pub static WORD_UNDES_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("core"),
        dictgen::InsensitiveStr::Ascii("ireable"),
        dictgen::InsensitiveStr::Ascii("ireble"),
        dictgen::InsensitiveStr::Ascii("riable"),
        dictgen::InsensitiveStr::Ascii("rtand"),
        dictgen::InsensitiveStr::Ascii("tructible"),
    ],
    values: &[
        &["underscore"],
        &["undesirable"],
        &["undesirable"],
        &["undesirable"],
        &["understands"],
        &["indestructible"],
    ],
    range: 4..=9,
};

static WORD_UNDER_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_UNDER_CHILDREN),
    value: None,
};

static WORD_UNDER_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    Some(&WORD_UNDERA_NODE),
    Some(&WORD_UNDERB_NODE),
    Some(&WORD_UNDERC_NODE),
    Some(&WORD_UNDERD_NODE),
    Some(&WORD_UNDERE_NODE),
    Some(&WORD_UNDERF_NODE),
    Some(&WORD_UNDERG_NODE),
    Some(&WORD_UNDERH_NODE),
    None,
    None,
    None,
    None,
    Some(&WORD_UNDERM_NODE),
    Some(&WORD_UNDERN_NODE),
    Some(&WORD_UNDERO_NODE),
    Some(&WORD_UNDERP_NODE),
    None,
    Some(&WORD_UNDERR_NODE),
    Some(&WORD_UNDERS_NODE),
    Some(&WORD_UNDERT_NODE),
    None,
    None,
    Some(&WORD_UNDERW_NODE),
    None,
    Some(&WORD_UNDERY_NODE),
    None,
];

static WORD_UNDERY_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_UNDERY_CHILDREN),
    value: None,
};

pub static WORD_UNDERY_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("ling")],
    values: &[&["underlying"]],
    range: 4..=4,
};

static WORD_UNDERW_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_UNDERW_CHILDREN),
    value: None,
};

pub static WORD_UNDERW_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("aer"),
        dictgen::InsensitiveStr::Ascii("ager"),
        dictgen::InsensitiveStr::Ascii("ar"),
        dictgen::InsensitiveStr::Ascii("are"),
        dictgen::InsensitiveStr::Ascii("ares"),
        dictgen::InsensitiveStr::Ascii("arter"),
        dictgen::InsensitiveStr::Ascii("ealming"),
        dictgen::InsensitiveStr::Ascii("helimg"),
        dictgen::InsensitiveStr::Ascii("heling"),
        dictgen::InsensitiveStr::Ascii("hemling"),
        dictgen::InsensitiveStr::Ascii("hleming"),
        dictgen::InsensitiveStr::Ascii("ieght"),
        dictgen::InsensitiveStr::Ascii("olrd"),
        dictgen::InsensitiveStr::Ascii("oord"),
        dictgen::InsensitiveStr::Ascii("right"),
        dictgen::InsensitiveStr::Ascii("rold"),
    ],
    values: &[
        &["underwear"],
        &["underwater"],
        &["underwater"],
        &["underwear"],
        &["underwater"],
        &["underwater"],
        &["underwhelming"],
        &["underwhelming"],
        &["underwhelming"],
        &["underwhelming"],
        &["underwhelming"],
        &["underweight"],
        &["underworld"],
        &["underworld"],
        &["underweight"],
        &["underworld"],
    ],
    range: 2..=7,
};

static WORD_UNDERT_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_UNDERT_CHILDREN),
    value: None,
};

pub static WORD_UNDERT_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("acker"),
        dictgen::InsensitiveStr::Ascii("akeing"),
        dictgen::InsensitiveStr::Ascii("oe"),
        dictgen::InsensitiveStr::Ascii("oker"),
        dictgen::InsensitiveStr::Ascii("sand"),
        dictgen::InsensitiveStr::Ascii("unes"),
    ],
    values: &[
        &["undertaker"],
        &["undertaking"],
        &["undertones"],
        &["undertaker"],
        &["understands"],
        &["undertones"],
    ],
    range: 2..=6,
};

static WORD_UNDERS_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_UNDERS_CHILDREN),
    value: None,
};

pub static WORD_UNDERS_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("atnd"),
        dictgen::InsensitiveStr::Ascii("etimate"),
        dictgen::InsensitiveStr::Ascii("etimated"),
        dictgen::InsensitiveStr::Ascii("og"),
        dictgen::InsensitiveStr::Ascii("tad"),
        dictgen::InsensitiveStr::Ascii("tadn"),
        dictgen::InsensitiveStr::Ascii("tandablely"),
        dictgen::InsensitiveStr::Ascii("tandabley"),
        dictgen::InsensitiveStr::Ascii("tandble"),
        dictgen::InsensitiveStr::Ascii("tandbly"),
        dictgen::InsensitiveStr::Ascii("tandebly"),
        dictgen::InsensitiveStr::Ascii("tandible"),
        dictgen::InsensitiveStr::Ascii("tandibly"),
        dictgen::InsensitiveStr::Ascii("tannd"),
        dictgen::InsensitiveStr::Ascii("tans"),
        dictgen::InsensitiveStr::Ascii("tnad"),
        dictgen::InsensitiveStr::Ascii("toon"),
        dictgen::InsensitiveStr::Ascii("tsand"),
        dictgen::InsensitiveStr::Ascii("tsnd"),
    ],
    values: &[
        &["understands"],
        &["underestimate"],
        &["underestimated"],
        &["undergo"],
        &["understands"],
        &["understands"],
        &["understandably"],
        &["understandably"],
        &["understandable"],
        &["understandably"],
        &["understandably"],
        &["understandable"],
        &["understandably"],
        &["understands"],
        &["understands"],
        &["understands"],
        &["understood"],
        &["understands"],
        &["understands"],
    ],
    range: 2..=10,
};

static WORD_UNDERR_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_UNDERR_CHILDREN),
    value: None,
};

pub static WORD_UNDERR_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("aged"),
        dictgen::InsensitiveStr::Ascii("aker"),
        dictgen::InsensitiveStr::Ascii("ater"),
        dictgen::InsensitiveStr::Ascii("atted"),
    ],
    values: &[
        &["underrated"],
        &["undertaker"],
        &["undertaker"],
        &["underrated"],
    ],
    range: 4..=5,
};

static WORD_UNDERP_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_UNDERP_CHILDREN),
    value: None,
};

pub static WORD_UNDERP_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ining"),
        dictgen::InsensitiveStr::Ascii("owed"),
        dictgen::InsensitiveStr::Ascii("owerd"),
        dictgen::InsensitiveStr::Ascii("owererd"),
        dictgen::InsensitiveStr::Ascii("owred"),
    ],
    values: &[
        &["undermining"],
        &["underpowered"],
        &["underpowered"],
        &["underpowered"],
        &["underpowered"],
    ],
    range: 4..=7,
};

static WORD_UNDERO_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_UNDERO_CHILDREN),
    value: None,
};

pub static WORD_UNDERO_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("g")],
    values: &[&["undergo"]],
    range: 1..=1,
};

static WORD_UNDERN_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_UNDERN_CHILDREN),
    value: None,
};

pub static WORD_UNDERN_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("earth"),
        dictgen::InsensitiveStr::Ascii("eeth"),
        dictgen::InsensitiveStr::Ascii("eight"),
        dictgen::InsensitiveStr::Ascii("eith"),
        dictgen::InsensitiveStr::Ascii("ieth"),
    ],
    values: &[
        &["underneath"],
        &["underneath"],
        &["underweight"],
        &["underneath"],
        &["underneath"],
    ],
    range: 4..=5,
};

static WORD_UNDERM_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_UNDERM_CHILDREN),
    value: None,
};

pub static WORD_UNDERM_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("imes"),
        dictgen::InsensitiveStr::Ascii("iming"),
        dictgen::InsensitiveStr::Ascii("inde"),
        dictgen::InsensitiveStr::Ascii("indes"),
        dictgen::InsensitiveStr::Ascii("inding"),
        dictgen::InsensitiveStr::Ascii("ineing"),
        dictgen::InsensitiveStr::Ascii("ineras"),
        dictgen::InsensitiveStr::Ascii("ineres"),
        dictgen::InsensitiveStr::Ascii("ing"),
        dictgen::InsensitiveStr::Ascii("inging"),
        dictgen::InsensitiveStr::Ascii("inig"),
        dictgen::InsensitiveStr::Ascii("inining"),
        dictgen::InsensitiveStr::Ascii("inning"),
    ],
    values: &[
        &["undermines"],
        &["undermining"],
        &["undermines"],
        &["undermines"],
        &["undermining"],
        &["undermining"],
        &["undermines"],
        &["undermines"],
        &["undermining"],
        &["undermining"],
        &["undermining"],
        &["undermining"],
        &["undermining"],
    ],
    range: 3..=7,
};

static WORD_UNDERH_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_UNDERH_CHILDREN),
    value: None,
};

pub static WORD_UNDERH_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("eight"),
        dictgen::InsensitiveStr::Ascii("welming"),
        dictgen::InsensitiveStr::Ascii("wleming"),
    ],
    values: &[&["underweight"], &["underwhelming"], &["underwhelming"]],
    range: 5..=7,
};

static WORD_UNDERG_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_UNDERG_CHILDREN),
    value: None,
};

pub static WORD_UNDERG_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ard"),
        dictgen::InsensitiveStr::Ascii("ated"),
        dictgen::InsensitiveStr::Ascii("ating"),
        dictgen::InsensitiveStr::Ascii("lo"),
        dictgen::InsensitiveStr::Ascii("orund"),
        dictgen::InsensitiveStr::Ascii("radate"),
        dictgen::InsensitiveStr::Ascii("radute"),
        dictgen::InsensitiveStr::Ascii("rand"),
        dictgen::InsensitiveStr::Ascii("ratuate"),
        dictgen::InsensitiveStr::Ascii("roud"),
        dictgen::InsensitiveStr::Ascii("rund"),
    ],
    values: &[
        &["undergrad"],
        &["underrated"],
        &["undertaking"],
        &["undergo"],
        &["underground"],
        &["undergraduate"],
        &["undergraduate"],
        &["undergrad"],
        &["undergraduate"],
        &["underground"],
        &["underground"],
    ],
    range: 2..=7,
};

static WORD_UNDERF_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_UNDERF_CHILDREN),
    value: None,
};

pub static WORD_UNDERF_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("aker")],
    values: &[&["undertaker"]],
    range: 4..=4,
};

static WORD_UNDERE_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_UNDERE_CHILDREN),
    value: None,
};

pub static WORD_UNDERE_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("sitmate"),
        dictgen::InsensitiveStr::Ascii("stamate"),
        dictgen::InsensitiveStr::Ascii("stamated"),
        dictgen::InsensitiveStr::Ascii("stemate"),
        dictgen::InsensitiveStr::Ascii("stemated"),
        dictgen::InsensitiveStr::Ascii("stemating"),
        dictgen::InsensitiveStr::Ascii("stiamte"),
        dictgen::InsensitiveStr::Ascii("stimateing"),
        dictgen::InsensitiveStr::Ascii("stime"),
        dictgen::InsensitiveStr::Ascii("stimeted"),
    ],
    values: &[
        &["underestimated"],
        &["underestimate"],
        &["underestimated"],
        &["underestimate"],
        &["underestimated"],
        &["underestimating"],
        &["underestimated"],
        &["underestimating"],
        &["underestimate"],
        &["underestimated"],
    ],
    range: 5..=10,
};

static WORD_UNDERD_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_UNDERD_CHILDREN),
    value: None,
};

pub static WORD_UNDERD_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("ong")],
    values: &[&["underdog"]],
    range: 3..=3,
};

static WORD_UNDERC_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_UNDERC_CHILDREN),
    value: None,
};

pub static WORD_UNDERC_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ling"),
        dictgen::InsensitiveStr::Ascii("unt"),
    ],
    values: &[&["underlying"], &["undercut"]],
    range: 3..=4,
};

static WORD_UNDERB_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_UNDERB_CHILDREN),
    value: None,
};

pub static WORD_UNDERB_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("aker"),
        dictgen::InsensitiveStr::Ascii("og"),
    ],
    values: &[&["undertaker"], &["undergo"]],
    range: 2..=4,
};

static WORD_UNDERA_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_UNDERA_CHILDREN),
    value: None,
};

pub static WORD_UNDERA_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("stimate"),
        dictgen::InsensitiveStr::Ascii("stimated"),
        dictgen::InsensitiveStr::Ascii("stimating"),
    ],
    values: &[
        &["underestimate"],
        &["underestimated"],
        &["underestimating"],
    ],
    range: 7..=9,
};

static WORD_UNDEN_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_UNDEN_CHILDREN),
    value: None,
};

pub static WORD_UNDEN_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("aible"),
        dictgen::InsensitiveStr::Ascii("aibly"),
        dictgen::InsensitiveStr::Ascii("iabely"),
        dictgen::InsensitiveStr::Ascii("iablely"),
        dictgen::InsensitiveStr::Ascii("iabley"),
        dictgen::InsensitiveStr::Ascii("iablly"),
        dictgen::InsensitiveStr::Ascii("ialbly"),
        dictgen::InsensitiveStr::Ascii("yable"),
        dictgen::InsensitiveStr::Ascii("yably"),
    ],
    values: &[
        &["undeniable"],
        &["undeniably"],
        &["undeniably"],
        &["undeniably"],
        &["undeniably"],
        &["undeniably"],
        &["undeniably"],
        &["undeniable"],
        &["undeniably"],
    ],
    range: 5..=7,
};

static WORD_UNDEI_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_UNDEI_CHILDREN),
    value: None,
};

pub static WORD_UNDEI_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("nable"),
        dictgen::InsensitiveStr::Ascii("nably"),
    ],
    values: &[&["undeniable"], &["undeniably"]],
    range: 5..=5,
};

static WORD_UNDEF_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_UNDEF_CHILDREN),
    value: None,
};

pub static WORD_UNDEF_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("initely")],
    values: &[&["indefinitely"]],
    range: 7..=7,
};

static WORD_UNDEC_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_UNDEC_CHILDREN),
    value: None,
};

pub static WORD_UNDEC_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("ideable")],
    values: &[&["undecidable"]],
    range: 7..=7,
};

static WORD_UNDEB_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_UNDEB_CHILDREN),
    value: None,
};

pub static WORD_UNDEB_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("iably")],
    values: &[&["undeniably"]],
    range: 5..=5,
};

static WORD_UNC_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_UNC_CHILDREN),
    value: None,
};

static WORD_UNC_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    Some(&WORD_UNCA_NODE),
    None,
    None,
    None,
    Some(&WORD_UNCE_NODE),
    None,
    None,
    Some(&WORD_UNCH_NODE),
    None,
    None,
    None,
    None,
    None,
    None,
    Some(&WORD_UNCO_NODE),
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
];

static WORD_UNCO_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_UNCO_CHILDREN),
    value: None,
};

pub static WORD_UNCO_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("mfertable"),
        dictgen::InsensitiveStr::Ascii("mfertably"),
        dictgen::InsensitiveStr::Ascii("mfortabel"),
        dictgen::InsensitiveStr::Ascii("mfortablely"),
        dictgen::InsensitiveStr::Ascii("mfortabley"),
        dictgen::InsensitiveStr::Ascii("mfortablity"),
        dictgen::InsensitiveStr::Ascii("mfortablly"),
        dictgen::InsensitiveStr::Ascii("mforyable"),
        dictgen::InsensitiveStr::Ascii("mfrotable"),
        dictgen::InsensitiveStr::Ascii("mfrotably"),
        dictgen::InsensitiveStr::Ascii("mftorable"),
        dictgen::InsensitiveStr::Ascii("mftorably"),
        dictgen::InsensitiveStr::Ascii("mited"),
        dictgen::InsensitiveStr::Ascii("mitted"),
        dictgen::InsensitiveStr::Ascii("mmited"),
        dictgen::InsensitiveStr::Ascii("mpatible"),
        dictgen::InsensitiveStr::Ascii("mpetive"),
        dictgen::InsensitiveStr::Ascii("ncious"),
        dictgen::InsensitiveStr::Ascii("nciousness"),
        dictgen::InsensitiveStr::Ascii("ncsious"),
        dictgen::InsensitiveStr::Ascii("ncsiously"),
        dictgen::InsensitiveStr::Ascii("nditinal"),
        dictgen::InsensitiveStr::Ascii("nditionable"),
        dictgen::InsensitiveStr::Ascii("nditionaly"),
        dictgen::InsensitiveStr::Ascii("nditionnal"),
        dictgen::InsensitiveStr::Ascii("nditionnally"),
        dictgen::InsensitiveStr::Ascii("nfortability"),
        dictgen::InsensitiveStr::Ascii("nfortable"),
        dictgen::InsensitiveStr::Ascii("nfortably"),
        dictgen::InsensitiveStr::Ascii("nsciosly"),
        dictgen::InsensitiveStr::Ascii("nscioulsy"),
        dictgen::InsensitiveStr::Ascii("nsciouly"),
        dictgen::InsensitiveStr::Ascii("nsciouslly"),
        dictgen::InsensitiveStr::Ascii("nscous"),
        dictgen::InsensitiveStr::Ascii("nsicous"),
        dictgen::InsensitiveStr::Ascii("nsicously"),
        dictgen::InsensitiveStr::Ascii("nsiderate"),
        dictgen::InsensitiveStr::Ascii("nsistent"),
        dictgen::InsensitiveStr::Ascii("nstititional"),
        dictgen::InsensitiveStr::Ascii("nstituional"),
        dictgen::InsensitiveStr::Ascii("nstitutionnal"),
        dictgen::InsensitiveStr::Ascii("ntitutional"),
        dictgen::InsensitiveStr::Ascii("ntrallable"),
        dictgen::InsensitiveStr::Ascii("ntrallably"),
        dictgen::InsensitiveStr::Ascii("ntrolablly"),
        dictgen::InsensitiveStr::Ascii("ntrollabe"),
        dictgen::InsensitiveStr::Ascii("ntrollablely"),
        dictgen::InsensitiveStr::Ascii("ntrollabley"),
        dictgen::InsensitiveStr::Ascii("ntrollablly"),
        dictgen::InsensitiveStr::Ascii("ntrollaby"),
        dictgen::InsensitiveStr::Ascii("nvectional"),
        dictgen::InsensitiveStr::Ascii("nvencional"),
        dictgen::InsensitiveStr::Ascii("nvenient"),
        dictgen::InsensitiveStr::Ascii("nvensional"),
        dictgen::InsensitiveStr::Ascii("nvential"),
        dictgen::InsensitiveStr::Ascii("nventianal"),
        dictgen::InsensitiveStr::Ascii("nventinal"),
        dictgen::InsensitiveStr::Ascii("nventionnal"),
        dictgen::InsensitiveStr::Ascii("uncious"),
        dictgen::InsensitiveStr::Ascii("unciously"),
        dictgen::InsensitiveStr::Ascii("usciously"),
    ],
    values: &[
        &["uncomfortable"],
        &["uncomfortably"],
        &["uncomfortably"],
        &["uncomfortably"],
        &["uncomfortably"],
        &["uncomfortably"],
        &["uncomfortably"],
        &["uncomfortably"],
        &["uncomfortable"],
        &["uncomfortably"],
        &["uncomfortable"],
        &["uncomfortably"],
        &["uncommitted"],
        &["uncommitted"],
        &["uncommitted"],
        &["incompatible"],
        &["uncompetitive"],
        &["unconscious"],
        &["unconsciousness"],
        &["unconscious"],
        &["unconsciously"],
        &["unconditional"],
        &["unconditional"],
        &["unconditionally"],
        &["unconditional"],
        &["unconditionally"],
        &["discomfort"],
        &["uncomfortable"],
        &["uncomfortably"],
        &["unconsciously"],
        &["unconsciously"],
        &["unconsciously"],
        &["unconsciously"],
        &["unconscious"],
        &["unconscious"],
        &["unconsciously"],
        &["inconsiderate"],
        &["inconsistent"],
        &["unconstitutional"],
        &["unconstitutional"],
        &["unconstitutional"],
        &["unconstitutional"],
        &["uncontrollable"],
        &["uncontrollably"],
        &["uncontrollably"],
        &["uncontrollable"],
        &["uncontrollably"],
        &["uncontrollably"],
        &["uncontrollably"],
        &["uncontrollably"],
        &["unconventional"],
        &["unconventional"],
        &["inconvenient"],
        &["unconventional"],
        &["unconventional"],
        &["unconventional"],
        &["unconventional"],
        &["unconventional"],
        &["unconscious"],
        &["unconsciously"],
        &["unconsciously"],
    ],
    range: 5..=13,
};

static WORD_UNCH_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_UNCH_CHILDREN),
    value: None,
};

pub static WORD_UNCH_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("allengable"),
        dictgen::InsensitiveStr::Ascii("angable"),
    ],
    values: &[&["unchallengeable"], &["unchangeable"]],
    range: 7..=10,
};

static WORD_UNCE_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_UNCE_CHILDREN),
    value: None,
};

pub static WORD_UNCE_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ncored"),
        dictgen::InsensitiveStr::Ascii("nsered"),
        dictgen::InsensitiveStr::Ascii("nsord"),
        dictgen::InsensitiveStr::Ascii("nsorred"),
        dictgen::InsensitiveStr::Ascii("rsored"),
        dictgen::InsensitiveStr::Ascii("rtaincy"),
        dictgen::InsensitiveStr::Ascii("rtainity"),
        dictgen::InsensitiveStr::Ascii("rtaintity"),
        dictgen::InsensitiveStr::Ascii("rtaintly"),
        dictgen::InsensitiveStr::Ascii("rtainy"),
        dictgen::InsensitiveStr::Ascii("rtanity"),
        dictgen::InsensitiveStr::Ascii("rtanty"),
        dictgen::InsensitiveStr::Ascii("rtianty"),
        dictgen::InsensitiveStr::Ascii("snored"),
    ],
    values: &[
        &["uncensored"],
        &["uncensored"],
        &["uncensored"],
        &["uncensored"],
        &["uncensored"],
        &["uncertainty"],
        &["uncertainty"],
        &["uncertainty"],
        &["uncertainty"],
        &["uncertainty"],
        &["uncertainty"],
        &["uncertainty"],
        &["uncertainty"],
        &["uncensored"],
    ],
    range: 5..=9,
};

static WORD_UNCA_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_UNCA_CHILDREN),
    value: None,
};

pub static WORD_UNCA_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("nney"),
        dictgen::InsensitiveStr::Ascii("nnny"),
        dictgen::InsensitiveStr::Ascii("talogued"),
    ],
    values: &[&["uncanny"], &["uncanny"], &["uncataloged"]],
    range: 4..=8,
};

static WORD_UNB_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_UNB_CHILDREN),
    value: None,
};

pub static WORD_UNB_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("alanaced"),
        dictgen::InsensitiveStr::Ascii("alenced"),
        dictgen::InsensitiveStr::Ascii("allance"),
        dictgen::InsensitiveStr::Ascii("alnaced"),
        dictgen::InsensitiveStr::Ascii("anend"),
        dictgen::InsensitiveStr::Ascii("annd"),
        dictgen::InsensitiveStr::Ascii("annend"),
        dictgen::InsensitiveStr::Ascii("areable"),
        dictgen::InsensitiveStr::Ascii("eakable"),
        dictgen::InsensitiveStr::Ascii("eareble"),
        dictgen::InsensitiveStr::Ascii("eatbale"),
        dictgen::InsensitiveStr::Ascii("eateble"),
        dictgen::InsensitiveStr::Ascii("eerable"),
        dictgen::InsensitiveStr::Ascii("eetable"),
        dictgen::InsensitiveStr::Ascii("eknowst"),
        dictgen::InsensitiveStr::Ascii("eleivable"),
        dictgen::InsensitiveStr::Ascii("eleivably"),
        dictgen::InsensitiveStr::Ascii("eliavable"),
        dictgen::InsensitiveStr::Ascii("eliavably"),
        dictgen::InsensitiveStr::Ascii("eliebable"),
        dictgen::InsensitiveStr::Ascii("elievablely"),
        dictgen::InsensitiveStr::Ascii("elievabley"),
        dictgen::InsensitiveStr::Ascii("elievablly"),
        dictgen::InsensitiveStr::Ascii("elieveble"),
        dictgen::InsensitiveStr::Ascii("elievibly"),
        dictgen::InsensitiveStr::Ascii("eliveable"),
        dictgen::InsensitiveStr::Ascii("eliveably"),
        dictgen::InsensitiveStr::Ascii("elizeable"),
        dictgen::InsensitiveStr::Ascii("olievable"),
        dictgen::InsensitiveStr::Ascii("raikable"),
        dictgen::InsensitiveStr::Ascii("rakeable"),
        dictgen::InsensitiveStr::Ascii("reakabie"),
        dictgen::InsensitiveStr::Ascii("reakabke"),
        dictgen::InsensitiveStr::Ascii("reakbale"),
        dictgen::InsensitiveStr::Ascii("reakble"),
        dictgen::InsensitiveStr::Ascii("reakeble"),
        dictgen::InsensitiveStr::Ascii("rearable"),
    ],
    values: &[
        &["unbalanced"],
        &["unbalanced"],
        &["unbalance"],
        &["unbalanced"],
        &["unbanned"],
        &["unbanned"],
        &["unbanned"],
        &["unbearable"],
        &["unbeatable"],
        &["unbearable"],
        &["unbeatable"],
        &["unbeatable"],
        &["unbearable"],
        &["unbeatable"],
        &["unbeknownst"],
        &["unbelievable"],
        &["unbelievably"],
        &["unbelievable"],
        &["unbelievably"],
        &["unbelievable"],
        &["unbelievably"],
        &["unbelievably"],
        &["unbelievably"],
        &["unbelievable"],
        &["unbelievably"],
        &["unbelievable"],
        &["unbelievably"],
        &["unbelievable"],
        &["unbelievable"],
        &["unbreakable"],
        &["unbreakable"],
        &["unbreakable"],
        &["unbreakable"],
        &["unbreakable"],
        &["unbreakable"],
        &["unbreakable"],
        &["unbreakable"],
    ],
    range: 4..=11,
};

static WORD_UNA_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_UNA_CHILDREN),
    value: None,
};

pub static WORD_UNA_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("bel"),
        dictgen::InsensitiveStr::Ascii("bnned"),
        dictgen::InsensitiveStr::Ascii("ccaptable"),
        dictgen::InsensitiveStr::Ascii("cceptible"),
        dictgen::InsensitiveStr::Ascii("ccpetable"),
        dictgen::InsensitiveStr::Ascii("companied"),
        dictgen::InsensitiveStr::Ascii("hppy"),
        dictgen::InsensitiveStr::Ascii("minous"),
        dictgen::InsensitiveStr::Ascii("nimoulsy"),
        dictgen::InsensitiveStr::Ascii("nmious"),
        dictgen::InsensitiveStr::Ascii("nswerd"),
        dictgen::InsensitiveStr::Ascii("nwsered"),
        dictgen::InsensitiveStr::Ascii("nymous"),
        dictgen::InsensitiveStr::Ascii("ppealling"),
        dictgen::InsensitiveStr::Ascii("ppeasing"),
        dictgen::InsensitiveStr::Ascii("ppeeling"),
        dictgen::InsensitiveStr::Ascii("ppropriate"),
        dictgen::InsensitiveStr::Ascii("ppropriately"),
        dictgen::InsensitiveStr::Ascii("snwered"),
        dictgen::InsensitiveStr::Ascii("thorised"),
        dictgen::InsensitiveStr::Ascii("ttanded"),
        dictgen::InsensitiveStr::Ascii("ttendend"),
        dictgen::InsensitiveStr::Ascii("tteneded"),
        dictgen::InsensitiveStr::Ascii("ttented"),
        dictgen::InsensitiveStr::Ascii("ttracive"),
        dictgen::InsensitiveStr::Ascii("ttractice"),
        dictgen::InsensitiveStr::Ascii("utherized"),
        dictgen::InsensitiveStr::Ascii("uthoried"),
        dictgen::InsensitiveStr::Ascii("uthroized"),
        dictgen::InsensitiveStr::Ascii("vailabe"),
        dictgen::InsensitiveStr::Ascii("vailble"),
        dictgen::InsensitiveStr::Ascii("vailible"),
        dictgen::InsensitiveStr::Ascii("valiable"),
        dictgen::InsensitiveStr::Ascii("viodable"),
        dictgen::InsensitiveStr::Ascii("voidble"),
        dictgen::InsensitiveStr::Ascii("wnsered"),
    ],
    values: &[
        &["unable"],
        &["unbanned"],
        &["unacceptable"],
        &["unacceptable"],
        &["unacceptable"],
        &["unaccompanied"],
        &["unhappy"],
        &["unanimous"],
        &["unanimous"],
        &["unanimous"],
        &["unanswered"],
        &["unanswered"],
        &["unanimous"],
        &["unappealing"],
        &["unappealing"],
        &["unappealing"],
        &["inappropriate"],
        &["inappropriately"],
        &["unanswered"],
        &["unauthorised"],
        &["unattended"],
        &["unattended"],
        &["unattended"],
        &["unattended"],
        &["unattractive"],
        &["unattractive"],
        &["unauthorized"],
        &["unauthorized"],
        &["unauthorized"],
        &["unavailable"],
        &["unavailable"],
        &["unavailable"],
        &["unavailable"],
        &["unavoidable"],
        &["unavoidable"],
        &["unanswered"],
    ],
    range: 3..=12,
};

static WORD_UM_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_UM_CHILDREN),
    value: None,
};

pub static WORD_UM_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("believable"),
        dictgen::InsensitiveStr::Ascii("berlla"),
        dictgen::InsensitiveStr::Ascii("brela"),
        dictgen::InsensitiveStr::Ascii("brellla"),
        dictgen::InsensitiveStr::Ascii("comfortable"),
        dictgen::InsensitiveStr::Ascii("comfortably"),
        dictgen::InsensitiveStr::Ascii("employment"),
        dictgen::InsensitiveStr::Ascii("predictable"),
    ],
    values: &[
        &["unbelievable"],
        &["umbrella"],
        &["umbrella"],
        &["umbrella"],
        &["uncomfortable"],
        &["uncomfortably"],
        &["unemployment"],
        &["unpredictable"],
    ],
    range: 5..=11,
};

static WORD_UL_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_UL_CHILDREN),
    value: None,
};

pub static WORD_UL_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("itmate"),
        dictgen::InsensitiveStr::Ascii("itmately"),
        dictgen::InsensitiveStr::Ascii("itmatum"),
        dictgen::InsensitiveStr::Ascii("tamite"),
        dictgen::InsensitiveStr::Ascii("terioara"),
        dictgen::InsensitiveStr::Ascii("terioare"),
        dictgen::InsensitiveStr::Ascii("teriour"),
        dictgen::InsensitiveStr::Ascii("tiamte"),
        dictgen::InsensitiveStr::Ascii("timae"),
        dictgen::InsensitiveStr::Ascii("timatelly"),
        dictgen::InsensitiveStr::Ascii("timative"),
        dictgen::InsensitiveStr::Ascii("timatley"),
        dictgen::InsensitiveStr::Ascii("timatuum"),
        dictgen::InsensitiveStr::Ascii("timely"),
        dictgen::InsensitiveStr::Ascii("trason"),
    ],
    values: &[
        &["ultimate"],
        &["ultimately"],
        &["ultimatum"],
        &["ultimate"],
        &["ulterior"],
        &["ulterior"],
        &["ulterior"],
        &["ultimate"],
        &["ultimate"],
        &["ultimately"],
        &["ultimate"],
        &["ultimately"],
        &["ultimatum"],
        &["ultimately"],
        &["ultrasound"],
    ],
    range: 5..=9,
};

static WORD_UK_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_UK_CHILDREN),
    value: None,
};

pub static WORD_UK_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("arine"),
        dictgen::InsensitiveStr::Ascii("rainain"),
        dictgen::InsensitiveStr::Ascii("rainains"),
        dictgen::InsensitiveStr::Ascii("raineans"),
        dictgen::InsensitiveStr::Ascii("rainias"),
        dictgen::InsensitiveStr::Ascii("rainie"),
        dictgen::InsensitiveStr::Ascii("rainiens"),
        dictgen::InsensitiveStr::Ascii("rainin"),
        dictgen::InsensitiveStr::Ascii("rainina"),
        dictgen::InsensitiveStr::Ascii("raininans"),
        dictgen::InsensitiveStr::Ascii("raininas"),
        dictgen::InsensitiveStr::Ascii("rainisn"),
        dictgen::InsensitiveStr::Ascii("ranian"),
        dictgen::InsensitiveStr::Ascii("ranie"),
        dictgen::InsensitiveStr::Ascii("riane"),
        dictgen::InsensitiveStr::Ascii("rianian"),
        dictgen::InsensitiveStr::Ascii("rianians"),
    ],
    values: &[
        &["ukraine"],
        &["ukrainian"],
        &["ukrainians"],
        &["ukrainians"],
        &["ukrainians"],
        &["ukraine"],
        &["ukrainians"],
        &["ukrainian"],
        &["ukrainian"],
        &["ukrainians"],
        &["ukrainians"],
        &["ukrainians"],
        &["ukrainian"],
        &["ukraine"],
        &["ukraine"],
        &["ukrainian"],
        &["ukrainians"],
    ],
    range: 5..=9,
};

static WORD_UI_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_UI_CHILDREN),
    value: None,
};

pub static WORD_UI_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("se")],
    values: &[&["use"]],
    range: 2..=2,
};

static WORD_UG_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_UG_CHILDREN),
    value: None,
};

pub static WORD_UG_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("prade"),
        dictgen::InsensitiveStr::Ascii("praded"),
        dictgen::InsensitiveStr::Ascii("prades"),
        dictgen::InsensitiveStr::Ascii("prading"),
    ],
    values: &[&["upgrade"], &["upgraded"], &["upgrades"], &["upgrading"]],
    range: 5..=7,
};

static WORD_UE_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_UE_CHILDREN),
    value: None,
};

pub static WORD_UE_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("sfull")],
    values: &[&["usefull"]],
    range: 5..=5,
};

static WORD_UD_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_UD_CHILDREN),
    value: None,
};

pub static WORD_UD_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("nercut"),
        dictgen::InsensitiveStr::Ascii("nerdog"),
        dictgen::InsensitiveStr::Ascii("nerestimate"),
        dictgen::InsensitiveStr::Ascii("nerpowered"),
        dictgen::InsensitiveStr::Ascii("pated"),
    ],
    values: &[
        &["undercut"],
        &["underdog"],
        &["underestimated"],
        &["underpowered"],
        &["updated"],
    ],
    range: 5..=11,
};

static WORD_UB_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_UB_CHILDREN),
    value: None,
};

pub static WORD_UB_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("iqituous"),
        dictgen::InsensitiveStr::Ascii("iquitious"),
        dictgen::InsensitiveStr::Ascii("iquitos"),
        dictgen::InsensitiveStr::Ascii("iquituous"),
        dictgen::InsensitiveStr::Ascii("iquotous"),
        dictgen::InsensitiveStr::Ascii("iqutious"),
        dictgen::InsensitiveStr::Ascii("lisher"),
        dictgen::InsensitiveStr::Ascii("subscribed"),
        dictgen::InsensitiveStr::Ascii("substantiated"),
    ],
    values: &[
        &["ubiquitous"],
        &["ubiquitous"],
        &["ubiquitous"],
        &["ubiquitous"],
        &["ubiquitous"],
        &["ubiquitous"],
        &["publisher"],
        &["unsubscribed"],
        &["unsubstantiated"],
    ],
    range: 6..=13,
};

static WORD_T_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_T_CHILDREN),
    value: None,
};

static WORD_T_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    Some(&WORD_TA_NODE),
    None,
    None,
    None,
    Some(&WORD_TE_NODE),
    None,
    Some(&WORD_TG_NODE),
    Some(&WORD_TH_NODE),
    Some(&WORD_TI_NODE),
    Some(&WORD_TJ_NODE),
    Some(&WORD_TK_NODE),
    Some(&WORD_TL_NODE),
    None,
    None,
    Some(&WORD_TO_NODE),
    None,
    None,
    Some(&WORD_TR_NODE),
    Some(&WORD_TS_NODE),
    None,
    Some(&WORD_TU_NODE),
    None,
    Some(&WORD_TW_NODE),
    None,
    Some(&WORD_TY_NODE),
    None,
];

static WORD_TY_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_TY_CHILDREN),
    value: None,
};

pub static WORD_TY_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("elnol"),
        dictgen::InsensitiveStr::Ascii("hat"),
        dictgen::InsensitiveStr::Ascii("he"),
        dictgen::InsensitiveStr::Ascii("lenool"),
        dictgen::InsensitiveStr::Ascii("pcial"),
        dictgen::InsensitiveStr::Ascii("pcially"),
        dictgen::InsensitiveStr::Ascii("picaly"),
        dictgen::InsensitiveStr::Ascii("ranies"),
        dictgen::InsensitiveStr::Ascii("rannia"),
        dictgen::InsensitiveStr::Ascii("rantical"),
        dictgen::InsensitiveStr::Ascii("rany"),
        dictgen::InsensitiveStr::Ascii("rhard"),
        dictgen::InsensitiveStr::Ascii("rranies"),
        dictgen::InsensitiveStr::Ascii("rrany"),
    ],
    values: &[
        &["tylenol"],
        &["that"],
        &["they"],
        &["tylenol"],
        &["typical"],
        &["typically"],
        &["typically"],
        &["tyrannies"],
        &["tyrannical"],
        &["tyrannical"],
        &["tyranny"],
        &["tryhard"],
        &["tyrannies"],
        &["tyranny"],
    ],
    range: 2..=8,
};

static WORD_TW_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_TW_CHILDREN),
    value: None,
};

pub static WORD_TW_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("elth"),
        dictgen::InsensitiveStr::Ascii("ilgiht"),
        dictgen::InsensitiveStr::Ascii("iligt"),
        dictgen::InsensitiveStr::Ascii("on"),
        dictgen::InsensitiveStr::Ascii("po"),
    ],
    values: &[
        &["twelfth"],
        &["twilight"],
        &["twilight"],
        &["town"],
        &["two"],
    ],
    range: 2..=6,
};

static WORD_TU_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_TU_CHILDREN),
    value: None,
};

pub static WORD_TU_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("esdsay"),
        dictgen::InsensitiveStr::Ascii("esdsy"),
        dictgen::InsensitiveStr::Ascii("nnells"),
        dictgen::InsensitiveStr::Ascii("nnles"),
        dictgen::InsensitiveStr::Ascii("nraround"),
        dictgen::InsensitiveStr::Ascii("nrtable"),
        dictgen::InsensitiveStr::Ascii("pparware"),
        dictgen::InsensitiveStr::Ascii("pperwears"),
        dictgen::InsensitiveStr::Ascii("rbins"),
        dictgen::InsensitiveStr::Ascii("rkisch"),
        dictgen::InsensitiveStr::Ascii("rksih"),
        dictgen::InsensitiveStr::Ascii("rltes"),
        dictgen::InsensitiveStr::Ascii("rnapound"),
        dictgen::InsensitiveStr::Ascii("rnaroud"),
        dictgen::InsensitiveStr::Ascii("rntabe"),
        dictgen::InsensitiveStr::Ascii("rntabel"),
        dictgen::InsensitiveStr::Ascii("rrest"),
        dictgen::InsensitiveStr::Ascii("rretts"),
        dictgen::InsensitiveStr::Ascii("rstworthy"),
        dictgen::InsensitiveStr::Ascii("rtels"),
        dictgen::InsensitiveStr::Ascii("rthfully"),
        dictgen::InsensitiveStr::Ascii("seday"),
        dictgen::InsensitiveStr::Ascii("sedays"),
        dictgen::InsensitiveStr::Ascii("snami"),
        dictgen::InsensitiveStr::Ascii("st"),
        dictgen::InsensitiveStr::Ascii("toriales"),
        dictgen::InsensitiveStr::Ascii("torual"),
        dictgen::InsensitiveStr::Ascii("trles"),
    ],
    values: &[
        &["tuesdays"],
        &["tuesdays"],
        &["tunnels"],
        &["tunnels"],
        &["turnaround"],
        &["turntable"],
        &["tupperware"],
        &["tupperware"],
        &["turbines"],
        &["turkish"],
        &["turkish"],
        &["turtles"],
        &["turnaround"],
        &["turnaround"],
        &["turntable"],
        &["turntable"],
        &["turrets"],
        &["turrets"],
        &["trustworthy"],
        &["turtles"],
        &["truthfully"],
        &["tuesday"],
        &["tuesdays"],
        &["tsunami"],
        &["trust"],
        &["tutorials"],
        &["tutorial"],
        &["turtles"],
    ],
    range: 2..=9,
};

static WORD_TS_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_TS_CHILDREN),
    value: None,
};

pub static WORD_TS_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("amina"),
        dictgen::InsensitiveStr::Ascii("nuami"),
        dictgen::InsensitiveStr::Ascii("uanmi"),
        dictgen::InsensitiveStr::Ascii("unamai"),
        dictgen::InsensitiveStr::Ascii("unmai"),
    ],
    values: &[
        &["stamina"],
        &["tsunami"],
        &["tsunami"],
        &["tsunami"],
        &["tsunami"],
    ],
    range: 5..=6,
};

static WORD_TR_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_TR_CHILDREN),
    value: None,
};

static WORD_TR_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    Some(&WORD_TRA_NODE),
    None,
    None,
    None,
    Some(&WORD_TRE_NODE),
    None,
    None,
    Some(&WORD_TRH_NODE),
    Some(&WORD_TRI_NODE),
    None,
    None,
    None,
    None,
    None,
    Some(&WORD_TRO_NODE),
    Some(&WORD_TRP_NODE),
    None,
    None,
    None,
    None,
    Some(&WORD_TRU_NODE),
    None,
    None,
    None,
    Some(&WORD_TRY_NODE),
    None,
];

static WORD_TRY_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_TRY_CHILDREN),
    value: None,
};

pub static WORD_TRY_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ahrd"),
        dictgen::InsensitiveStr::Ascii("annical"),
        dictgen::InsensitiveStr::Ascii("avon"),
    ],
    values: &[&["tryhard"], &["tyrannical"], &["trayvon"]],
    range: 4..=7,
};

static WORD_TRU_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_TRU_CHILDREN),
    value: None,
};

pub static WORD_TRU_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("amatic"),
        dictgen::InsensitiveStr::Ascii("amatized"),
        dictgen::InsensitiveStr::Ascii("binal"),
        dictgen::InsensitiveStr::Ascii("bines"),
        dictgen::InsensitiveStr::Ascii("dnle"),
        dictgen::InsensitiveStr::Ascii("ely"),
        dictgen::InsensitiveStr::Ascii("imph"),
        dictgen::InsensitiveStr::Ascii("kish"),
        dictgen::InsensitiveStr::Ascii("mendously"),
        dictgen::InsensitiveStr::Ascii("ndel"),
        dictgen::InsensitiveStr::Ascii("nlde"),
        dictgen::InsensitiveStr::Ascii("shworthy"),
        dictgen::InsensitiveStr::Ascii("stowrthy"),
        dictgen::InsensitiveStr::Ascii("stwhorty"),
        dictgen::InsensitiveStr::Ascii("stworhty"),
        dictgen::InsensitiveStr::Ascii("stworhy"),
        dictgen::InsensitiveStr::Ascii("stworthly"),
        dictgen::InsensitiveStr::Ascii("stworthyness"),
        dictgen::InsensitiveStr::Ascii("stworty"),
        dictgen::InsensitiveStr::Ascii("stwothy"),
        dictgen::InsensitiveStr::Ascii("thfullly"),
        dictgen::InsensitiveStr::Ascii("thfuly"),
    ],
    values: &[
        &["traumatic"],
        &["traumatized"],
        &["tribunal"],
        &["turbines"],
        &["trundle"],
        &["truly"],
        &["triumph"],
        &["turkish"],
        &["tremendously"],
        &["trundle"],
        &["trundle"],
        &["trustworthy"],
        &["trustworthy"],
        &["trustworthy"],
        &["trustworthy"],
        &["trustworthy"],
        &["trustworthy"],
        &["trustworthiness"],
        &["trustworthy"],
        &["trustworthy"],
        &["truthfully"],
        &["truthfully"],
    ],
    range: 3..=12,
};

static WORD_TRP_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_TRP_CHILDREN),
    value: None,
};

pub static WORD_TRP_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("oical")],
    values: &[&["tropical"]],
    range: 5..=5,
};

static WORD_TRO_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_TRO_CHILDREN),
    value: None,
};

pub static WORD_TRO_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("chlight"),
        dictgen::InsensitiveStr::Ascii("hpies"),
        dictgen::InsensitiveStr::Ascii("leld"),
        dictgen::InsensitiveStr::Ascii("ling"),
        dictgen::InsensitiveStr::Ascii("llade"),
        dictgen::InsensitiveStr::Ascii("nado"),
        dictgen::InsensitiveStr::Ascii("pcial"),
        dictgen::InsensitiveStr::Ascii("pedo"),
        dictgen::InsensitiveStr::Ascii("tilla"),
        dictgen::InsensitiveStr::Ascii("ubelshoot"),
        dictgen::InsensitiveStr::Ascii("ubelshooting"),
        dictgen::InsensitiveStr::Ascii("ubelsome"),
        dictgen::InsensitiveStr::Ascii("ublehsoot"),
        dictgen::InsensitiveStr::Ascii("ublehsooting"),
        dictgen::InsensitiveStr::Ascii("ubleshooot"),
        dictgen::InsensitiveStr::Ascii("ubleshotting"),
        dictgen::InsensitiveStr::Ascii("ups"),
    ],
    values: &[
        &["torchlight"],
        &["trophies"],
        &["trolled"],
        &["trolling"],
        &["trolled"],
        &["tornado"],
        &["tropical"],
        &["torpedo"],
        &["tortilla"],
        &["troubleshoot"],
        &["troubleshooting"],
        &["troublesome"],
        &["troubleshoot"],
        &["troubleshooting"],
        &["troubleshoot"],
        &["troubleshooting"],
        &["troupes"],
    ],
    range: 3..=12,
};

static WORD_TRI_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_TRI_CHILDREN),
    value: None,
};

pub static WORD_TRI_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("aler"),
        dictgen::InsensitiveStr::Ascii("alers"),
        dictgen::InsensitiveStr::Ascii("aners"),
        dictgen::InsensitiveStr::Ascii("ange"),
        dictgen::InsensitiveStr::Ascii("angel"),
        dictgen::InsensitiveStr::Ascii("angels"),
        dictgen::InsensitiveStr::Ascii("angls"),
        dictgen::InsensitiveStr::Ascii("aning"),
        dictgen::InsensitiveStr::Ascii("anlge"),
        dictgen::InsensitiveStr::Ascii("anlges"),
        dictgen::InsensitiveStr::Ascii("anwreck"),
        dictgen::InsensitiveStr::Ascii("ator"),
        dictgen::InsensitiveStr::Ascii("ators"),
        dictgen::InsensitiveStr::Ascii("buanl"),
        dictgen::InsensitiveStr::Ascii("bunaal"),
        dictgen::InsensitiveStr::Ascii("ckey"),
        dictgen::InsensitiveStr::Ascii("ckyer"),
        dictgen::InsensitiveStr::Ascii("dnet"),
        dictgen::InsensitiveStr::Ascii("ggereing"),
        dictgen::InsensitiveStr::Ascii("ggern"),
        dictgen::InsensitiveStr::Ascii("ggerring"),
        dictgen::InsensitiveStr::Ascii("guered"),
        dictgen::InsensitiveStr::Ascii("logoy"),
        dictgen::InsensitiveStr::Ascii("muph"),
        dictgen::InsensitiveStr::Ascii("nagle"),
        dictgen::InsensitiveStr::Ascii("nagles"),
        dictgen::InsensitiveStr::Ascii("nekts"),
        dictgen::InsensitiveStr::Ascii("ngale"),
        dictgen::InsensitiveStr::Ascii("nitiy"),
        dictgen::InsensitiveStr::Ascii("nkes"),
        dictgen::InsensitiveStr::Ascii("nkst"),
        dictgen::InsensitiveStr::Ascii("ntiy"),
        dictgen::InsensitiveStr::Ascii("olgy"),
        dictgen::InsensitiveStr::Ascii("ology"),
        dictgen::InsensitiveStr::Ascii("umpth"),
    ],
    values: &[
        &["trailer"],
        &["trailers"],
        &["trainers"],
        &["triangle"],
        &["triangle"],
        &["triangles"],
        &["triangles"],
        &["training"],
        &["triangle"],
        &["triangles"],
        &["trainwreck"],
        &["traitor"],
        &["traitors"],
        &["tribunal"],
        &["tribunal"],
        &["trickery"],
        &["trickery"],
        &["trident"],
        &["triggering"],
        &["triggering"],
        &["triggering"],
        &["triggered"],
        &["trilogy"],
        &["triumph"],
        &["triangle"],
        &["triangles"],
        &["trinkets"],
        &["triangle"],
        &["trinity"],
        &["trinkets"],
        &["trinkets"],
        &["trinity"],
        &["trilogy"],
        &["trilogy"],
        &["triumph"],
    ],
    range: 4..=8,
};

static WORD_TRH_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_TRH_CHILDREN),
    value: None,
};

pub static WORD_TRH_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("illing"),
        dictgen::InsensitiveStr::Ascii("usters"),
    ],
    values: &[&["thrilling"], &["thrusters"]],
    range: 6..=6,
};

static WORD_TRE_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_TRE_CHILDREN),
    value: None,
};

pub static WORD_TRE_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("asue"),
        dictgen::InsensitiveStr::Ascii("asuers"),
        dictgen::InsensitiveStr::Ascii("asurery"),
        dictgen::InsensitiveStr::Ascii("asurey"),
        dictgen::InsensitiveStr::Ascii("asurs"),
        dictgen::InsensitiveStr::Ascii("atis"),
        dictgen::InsensitiveStr::Ascii("atmens"),
        dictgen::InsensitiveStr::Ascii("atmet"),
        dictgen::InsensitiveStr::Ascii("atsie"),
        dictgen::InsensitiveStr::Ascii("ausre"),
        dictgen::InsensitiveStr::Ascii("ausres"),
        dictgen::InsensitiveStr::Ascii("dning"),
        dictgen::InsensitiveStr::Ascii("melo"),
        dictgen::InsensitiveStr::Ascii("melos"),
        dictgen::InsensitiveStr::Ascii("memdous"),
        dictgen::InsensitiveStr::Ascii("memdously"),
        dictgen::InsensitiveStr::Ascii("mendeous"),
        dictgen::InsensitiveStr::Ascii("mendious"),
        dictgen::InsensitiveStr::Ascii("mendos"),
        dictgen::InsensitiveStr::Ascii("mendoulsy"),
        dictgen::InsensitiveStr::Ascii("menduous"),
        dictgen::InsensitiveStr::Ascii("mondous"),
        dictgen::InsensitiveStr::Ascii("mondously"),
        dictgen::InsensitiveStr::Ascii("ndig"),
        dictgen::InsensitiveStr::Ascii("spasing"),
        dictgen::InsensitiveStr::Ascii("spessing"),
        dictgen::InsensitiveStr::Ascii("sspasing"),
        dictgen::InsensitiveStr::Ascii("suary"),
    ],
    values: &[
        &["treasure"],
        &["treasures"],
        &["treasury"],
        &["treasury"],
        &["treasures"],
        &["treaties"],
        &["treatments"],
        &["treatments"],
        &["treaties"],
        &["treasure"],
        &["treasures"],
        &["trending"],
        &["tremolo"],
        &["tremolos"],
        &["tremendous"],
        &["tremendously"],
        &["tremendous"],
        &["tremendous"],
        &["tremendous"],
        &["tremendously"],
        &["tremendous"],
        &["tremendous"],
        &["tremendously"],
        &["trending"],
        &["trespassing"],
        &["trespassing"],
        &["trespassing"],
        &["treasury"],
    ],
    range: 4..=9,
};

static WORD_TRA_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_TRA_CHILDREN),
    value: None,
};

static WORD_TRA_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    None,
    Some(&WORD_TRAB_NODE),
    Some(&WORD_TRAC_NODE),
    Some(&WORD_TRAD_NODE),
    None,
    Some(&WORD_TRAF_NODE),
    Some(&WORD_TRAG_NODE),
    None,
    Some(&WORD_TRAI_NODE),
    None,
    Some(&WORD_TRAK_NODE),
    Some(&WORD_TRAL_NODE),
    Some(&WORD_TRAM_NODE),
    Some(&WORD_TRAN_NODE),
    None,
    None,
    None,
    None,
    Some(&WORD_TRAS_NODE),
    Some(&WORD_TRAT_NODE),
    Some(&WORD_TRAU_NODE),
    Some(&WORD_TRAV_NODE),
    None,
    None,
    None,
    None,
];

static WORD_TRAV_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_TRAV_CHILDREN),
    value: None,
};

pub static WORD_TRAV_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("eld"),
        dictgen::InsensitiveStr::Ascii("eleres"),
        dictgen::InsensitiveStr::Ascii("eles"),
        dictgen::InsensitiveStr::Ascii("ellerhd"),
        dictgen::InsensitiveStr::Ascii("ellodge"),
        dictgen::InsensitiveStr::Ascii("elodge"),
        dictgen::InsensitiveStr::Ascii("ere"),
        dictgen::InsensitiveStr::Ascii("eres"),
        dictgen::InsensitiveStr::Ascii("erlers"),
        dictgen::InsensitiveStr::Ascii("ersare"),
        dictgen::InsensitiveStr::Ascii("ersie"),
        dictgen::InsensitiveStr::Ascii("ersier"),
        dictgen::InsensitiveStr::Ascii("estry"),
        dictgen::InsensitiveStr::Ascii("esy"),
        dictgen::InsensitiveStr::Ascii("les"),
    ],
    values: &[
        &["traveled"],
        &["travelers"],
        &["travels"],
        &["travelled"],
        &["travelled"],
        &["traveled"],
        &["traverse"],
        &["traverse"],
        &["traverse"],
        &["traverse"],
        &["traverse"],
        &["traverse"],
        &["travesty"],
        &["travesty"],
        &["travels"],
    ],
    range: 3..=7,
};

static WORD_TRAU_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_TRAU_CHILDREN),
    value: None,
};

pub static WORD_TRAU_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("matisch"),
        dictgen::InsensitiveStr::Ascii("metized"),
        dictgen::InsensitiveStr::Ascii("mitized"),
    ],
    values: &[&["traumatic"], &["traumatized"], &["traumatized"]],
    range: 7..=7,
};

static WORD_TRAT_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_TRAT_CHILDREN),
    value: None,
};

pub static WORD_TRAT_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ior"),
        dictgen::InsensitiveStr::Ascii("iors"),
    ],
    values: &[&["traitor"], &["traitors"]],
    range: 3..=4,
};

static WORD_TRAS_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_TRAS_CHILDREN),
    value: None,
};

pub static WORD_TRAS_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ncript"),
        dictgen::InsensitiveStr::Ascii("ncripts"),
        dictgen::InsensitiveStr::Ascii("nfer"),
        dictgen::InsensitiveStr::Ascii("nferred"),
        dictgen::InsensitiveStr::Ascii("nferring"),
        dictgen::InsensitiveStr::Ascii("nfers"),
        dictgen::InsensitiveStr::Ascii("nform"),
        dictgen::InsensitiveStr::Ascii("nformation"),
        dictgen::InsensitiveStr::Ascii("nformed"),
        dictgen::InsensitiveStr::Ascii("nformer"),
        dictgen::InsensitiveStr::Ascii("nformers"),
        dictgen::InsensitiveStr::Ascii("nforming"),
        dictgen::InsensitiveStr::Ascii("nforms"),
        dictgen::InsensitiveStr::Ascii("ngender"),
        dictgen::InsensitiveStr::Ascii("ngendered"),
        dictgen::InsensitiveStr::Ascii("nlated"),
        dictgen::InsensitiveStr::Ascii("nlator"),
        dictgen::InsensitiveStr::Ascii("nmission"),
        dictgen::InsensitiveStr::Ascii("nmitted"),
        dictgen::InsensitiveStr::Ascii("nmitter"),
        dictgen::InsensitiveStr::Ascii("nparency"),
        dictgen::InsensitiveStr::Ascii("nparent"),
        dictgen::InsensitiveStr::Ascii("nphobic"),
        dictgen::InsensitiveStr::Ascii("nplant"),
        dictgen::InsensitiveStr::Ascii("nport"),
        dictgen::InsensitiveStr::Ascii("nportation"),
        dictgen::InsensitiveStr::Ascii("nported"),
        dictgen::InsensitiveStr::Ascii("nporter"),
        dictgen::InsensitiveStr::Ascii("nporting"),
    ],
    values: &[
        &["transcript"],
        &["transcripts"],
        &["transfer"],
        &["transferred"],
        &["transferring"],
        &["transfers"],
        &["transform"],
        &["transformation"],
        &["transformed"],
        &["transformer"],
        &["transformers"],
        &["transforming"],
        &["transforms"],
        &["transgender"],
        &["transgendered"],
        &["translated"],
        &["translator"],
        &["transmissions"],
        &["transmitted"],
        &["transmitter"],
        &["transparency"],
        &["transparent"],
        &["transphobic"],
        &["transplant"],
        &["transport"],
        &["transportation"],
        &["transported"],
        &["transporter"],
        &["transporting"],
    ],
    range: 4..=10,
};

static WORD_TRAN_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_TRAN_CHILDREN),
    value: None,
};

static WORD_TRAN_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    None,
    None,
    Some(&WORD_TRANC_NODE),
    Some(&WORD_TRAND_NODE),
    None,
    Some(&WORD_TRANF_NODE),
    None,
    None,
    Some(&WORD_TRANI_NODE),
    None,
    None,
    Some(&WORD_TRANL_NODE),
    Some(&WORD_TRANM_NODE),
    Some(&WORD_TRANN_NODE),
    None,
    Some(&WORD_TRANP_NODE),
    None,
    None,
    Some(&WORD_TRANS_NODE),
    None,
    None,
    None,
    None,
    None,
    None,
    Some(&WORD_TRANZ_NODE),
];

static WORD_TRANZ_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_TRANZ_CHILDREN),
    value: None,
};

pub static WORD_TRANZ_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("former"),
        dictgen::InsensitiveStr::Ascii("istor"),
        dictgen::InsensitiveStr::Ascii("itions"),
        dictgen::InsensitiveStr::Ascii("porter"),
    ],
    values: &[
        &["transformer"],
        &["transistor"],
        &["transitions"],
        &["transporter"],
    ],
    range: 5..=6,
};

static WORD_TRANS_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_TRANS_CHILDREN),
    value: None,
};

static WORD_TRANS_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    Some(&WORD_TRANSA_NODE),
    None,
    Some(&WORD_TRANSC_NODE),
    None,
    Some(&WORD_TRANSE_NODE),
    Some(&WORD_TRANSF_NODE),
    Some(&WORD_TRANSG_NODE),
    Some(&WORD_TRANSH_NODE),
    Some(&WORD_TRANSI_NODE),
    None,
    Some(&WORD_TRANSK_NODE),
    Some(&WORD_TRANSL_NODE),
    Some(&WORD_TRANSM_NODE),
    None,
    Some(&WORD_TRANSO_NODE),
    Some(&WORD_TRANSP_NODE),
    None,
    None,
    Some(&WORD_TRANSS_NODE),
    Some(&WORD_TRANST_NODE),
    Some(&WORD_TRANSU_NODE),
    None,
    None,
    None,
    Some(&WORD_TRANSY_NODE),
    None,
];

static WORD_TRANSY_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_TRANSY_CHILDREN),
    value: None,
};

pub static WORD_TRANSY_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("lmania"),
        dictgen::InsensitiveStr::Ascii("lvanai"),
        dictgen::InsensitiveStr::Ascii("lvannia"),
        dictgen::InsensitiveStr::Ascii("lvnia"),
    ],
    values: &[
        &["transylvania"],
        &["transylvania"],
        &["transylvania"],
        &["transylvania"],
    ],
    range: 5..=7,
};

static WORD_TRANSU_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_TRANSU_CHILDREN),
    value: None,
};

pub static WORD_TRANSU_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("lcent")],
    values: &[&["translucent"]],
    range: 5..=5,
};

static WORD_TRANST_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_TRANST_CHILDREN),
    value: None,
};

pub static WORD_TRANST_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("ator")],
    values: &[&["translator"]],
    range: 4..=4,
};

static WORD_TRANSS_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_TRANSS_CHILDREN),
    value: None,
};

pub static WORD_TRANSS_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("euxal"),
        dictgen::InsensitiveStr::Ascii("exal"),
        dictgen::InsensitiveStr::Ascii("exaul"),
        dictgen::InsensitiveStr::Ascii("exuel"),
        dictgen::InsensitiveStr::Ascii("exuella"),
        dictgen::InsensitiveStr::Ascii("mision"),
    ],
    values: &[
        &["transsexual"],
        &["transsexual"],
        &["transsexual"],
        &["transsexual"],
        &["transsexual"],
        &["transmissions"],
    ],
    range: 4..=7,
};

static WORD_TRANSP_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_TRANSP_CHILDREN),
    value: None,
};

pub static WORD_TRANSP_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("alnt"),
        dictgen::InsensitiveStr::Ascii("arancy"),
        dictgen::InsensitiveStr::Ascii("arant"),
        dictgen::InsensitiveStr::Ascii("arantie"),
        dictgen::InsensitiveStr::Ascii("arecy"),
        dictgen::InsensitiveStr::Ascii("arentcy"),
        dictgen::InsensitiveStr::Ascii("arenty"),
        dictgen::InsensitiveStr::Ascii("areny"),
        dictgen::InsensitiveStr::Ascii("arrent"),
        dictgen::InsensitiveStr::Ascii("erancy"),
        dictgen::InsensitiveStr::Ascii("erant"),
        dictgen::InsensitiveStr::Ascii("erency"),
        dictgen::InsensitiveStr::Ascii("erent"),
        dictgen::InsensitiveStr::Ascii("hoic"),
        dictgen::InsensitiveStr::Ascii("honic"),
        dictgen::InsensitiveStr::Ascii("hopic"),
        dictgen::InsensitiveStr::Ascii("lain"),
        dictgen::InsensitiveStr::Ascii("lanet"),
        dictgen::InsensitiveStr::Ascii("lantees"),
        dictgen::InsensitiveStr::Ascii("lantes"),
        dictgen::InsensitiveStr::Ascii("lat"),
        dictgen::InsensitiveStr::Ascii("late"),
        dictgen::InsensitiveStr::Ascii("lats"),
        dictgen::InsensitiveStr::Ascii("oder"),
        dictgen::InsensitiveStr::Ascii("oration"),
        dictgen::InsensitiveStr::Ascii("order"),
        dictgen::InsensitiveStr::Ascii("oring"),
        dictgen::InsensitiveStr::Ascii("ortaion"),
        dictgen::InsensitiveStr::Ascii("ortar"),
        dictgen::InsensitiveStr::Ascii("ortarme"),
        dictgen::InsensitiveStr::Ascii("ortarse"),
        dictgen::InsensitiveStr::Ascii("ortarte"),
        dictgen::InsensitiveStr::Ascii("orteur"),
        dictgen::InsensitiveStr::Ascii("orteurs"),
        dictgen::InsensitiveStr::Ascii("ortion"),
        dictgen::InsensitiveStr::Ascii("ortng"),
        dictgen::InsensitiveStr::Ascii("ortor"),
        dictgen::InsensitiveStr::Ascii("ortr"),
        dictgen::InsensitiveStr::Ascii("ot"),
        dictgen::InsensitiveStr::Ascii("otting"),
    ],
    values: &[
        &["transplants"],
        &["transparency"],
        &["transparent"],
        &["transparent"],
        &["transparency"],
        &["transparency"],
        &["transparency"],
        &["transparency"],
        &["transparent"],
        &["transparency"],
        &["transparent"],
        &["transparency"],
        &["transparent"],
        &["transphobic"],
        &["transphobic"],
        &["transphobic"],
        &["transplant"],
        &["transplant"],
        &["transplants"],
        &["transplants"],
        &["transplant"],
        &["transplant"],
        &["transplants"],
        &["transported"],
        &["transportation"],
        &["transporter"],
        &["transporting"],
        &["transportation"],
        &["transporter"],
        &["transporter"],
        &["transporter"],
        &["transporter"],
        &["transporter"],
        &["transporter"],
        &["transporting"],
        &["transporting"],
        &["transporter"],
        &["transporter"],
        &["transport"],
        &["transporting"],
    ],
    range: 2..=7,
};

static WORD_TRANSO_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_TRANSO_CHILDREN),
    value: None,
};

pub static WORD_TRANSO_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("frm"),
        dictgen::InsensitiveStr::Ascii("frmation"),
        dictgen::InsensitiveStr::Ascii("frmed"),
        dictgen::InsensitiveStr::Ascii("frmers"),
        dictgen::InsensitiveStr::Ascii("frming"),
        dictgen::InsensitiveStr::Ascii("hobic"),
    ],
    values: &[
        &["transform"],
        &["transformation"],
        &["transformed"],
        &["transformers"],
        &["transforming"],
        &["transphobic"],
    ],
    range: 3..=8,
};

static WORD_TRANSM_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_TRANSM_CHILDREN),
    value: None,
};

pub static WORD_TRANSM_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("atter"),
        dictgen::InsensitiveStr::Ascii("ision"),
        dictgen::InsensitiveStr::Ascii("isions"),
        dictgen::InsensitiveStr::Ascii("isison"),
        dictgen::InsensitiveStr::Ascii("isisons"),
        dictgen::InsensitiveStr::Ascii("issable"),
        dictgen::InsensitiveStr::Ascii("issin"),
        dictgen::InsensitiveStr::Ascii("isson"),
        dictgen::InsensitiveStr::Ascii("issons"),
        dictgen::InsensitiveStr::Ascii("isssion"),
        dictgen::InsensitiveStr::Ascii("ited"),
        dictgen::InsensitiveStr::Ascii("iter"),
        dictgen::InsensitiveStr::Ascii("itirte"),
        dictgen::InsensitiveStr::Ascii("itor"),
        dictgen::InsensitiveStr::Ascii("ittor"),
        dictgen::InsensitiveStr::Ascii("ittted"),
        dictgen::InsensitiveStr::Ascii("orfers"),
        dictgen::InsensitiveStr::Ascii("orged"),
        dictgen::InsensitiveStr::Ascii("orgs"),
        dictgen::InsensitiveStr::Ascii("utter"),
    ],
    values: &[
        &["transmitter"],
        &["transmission"],
        &["transmission"],
        &["transmission"],
        &["transmissions"],
        &["transmissible"],
        &["transmissions"],
        &["transmission"],
        &["transmissions"],
        &["transmissions"],
        &["transmitted"],
        &["transmitter"],
        &["transmitter"],
        &["transistor"],
        &["transmitter"],
        &["transmitted"],
        &["transformer"],
        &["transformed"],
        &["transforms"],
        &["transmitter"],
    ],
    range: 4..=7,
};

static WORD_TRANSL_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_TRANSL_CHILDREN),
    value: None,
};

pub static WORD_TRANSL_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("astion"),
        dictgen::InsensitiveStr::Ascii("ateing"),
        dictgen::InsensitiveStr::Ascii("ater"),
        dictgen::InsensitiveStr::Ascii("atin"),
        dictgen::InsensitiveStr::Ascii("atio"),
        dictgen::InsensitiveStr::Ascii("ationg"),
        dictgen::InsensitiveStr::Ascii("atron"),
        dictgen::InsensitiveStr::Ascii("pant"),
        dictgen::InsensitiveStr::Ascii("ucient"),
        dictgen::InsensitiveStr::Ascii("uent"),
        dictgen::InsensitiveStr::Ascii("usent"),
        dictgen::InsensitiveStr::Ascii("yvania"),
        dictgen::InsensitiveStr::Ascii("yvanian"),
    ],
    values: &[
        &["translations"],
        &["translating"],
        &["translator"],
        &["translations"],
        &["translator"],
        &["translating"],
        &["translation"],
        &["transplants"],
        &["translucent"],
        &["translucent"],
        &["translucent"],
        &["transylvania"],
        &["transylvania"],
    ],
    range: 4..=7,
};

static WORD_TRANSK_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_TRANSK_CHILDREN),
    value: None,
};

pub static WORD_TRANSK_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ript"),
        dictgen::InsensitiveStr::Ascii("ription"),
    ],
    values: &[&["transcript"], &["transcription"]],
    range: 4..=7,
};

static WORD_TRANSI_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_TRANSI_CHILDREN),
    value: None,
};

pub static WORD_TRANSI_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("cion"),
        dictgen::InsensitiveStr::Ascii("cional"),
        dictgen::InsensitiveStr::Ascii("et"),
        dictgen::InsensitiveStr::Ascii("lvania"),
        dictgen::InsensitiveStr::Ascii("mssion"),
        dictgen::InsensitiveStr::Ascii("sion"),
        dictgen::InsensitiveStr::Ascii("sioned"),
        dictgen::InsensitiveStr::Ascii("sioning"),
        dictgen::InsensitiveStr::Ascii("sions"),
        dictgen::InsensitiveStr::Ascii("sitor"),
        dictgen::InsensitiveStr::Ascii("ster"),
        dictgen::InsensitiveStr::Ascii("stion"),
        dictgen::InsensitiveStr::Ascii("stior"),
        dictgen::InsensitiveStr::Ascii("ten"),
        dictgen::InsensitiveStr::Ascii("tin"),
        dictgen::InsensitiveStr::Ascii("tionable"),
        dictgen::InsensitiveStr::Ascii("tionals"),
        dictgen::InsensitiveStr::Ascii("tiond"),
        dictgen::InsensitiveStr::Ascii("tiong"),
        dictgen::InsensitiveStr::Ascii("tionnal"),
        dictgen::InsensitiveStr::Ascii("tionned"),
        dictgen::InsensitiveStr::Ascii("tionning"),
        dictgen::InsensitiveStr::Ascii("to"),
        dictgen::InsensitiveStr::Ascii("tons"),
        dictgen::InsensitiveStr::Ascii("tors"),
    ],
    values: &[
        &["transition"],
        &["transitional"],
        &["transient"],
        &["transylvania"],
        &["transmissions"],
        &["transition"],
        &["transitioned"],
        &["transitioning"],
        &["transitions"],
        &["transistor"],
        &["transistor"],
        &["transition"],
        &["transistor"],
        &["transient"],
        &["transitions"],
        &["transitional"],
        &["transitions"],
        &["transitioned"],
        &["transitioning"],
        &["transitional"],
        &["transitioned"],
        &["transitioning"],
        &["transition"],
        &["transitions"],
        &["transistor"],
    ],
    range: 2..=8,
};

static WORD_TRANSH_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_TRANSH_CHILDREN),
    value: None,
};

pub static WORD_TRANSH_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("pobic")],
    values: &[&["transphobic"]],
    range: 5..=5,
};

static WORD_TRANSG_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_TRANSG_CHILDREN),
    value: None,
};

pub static WORD_TRANSG_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("eder"),
        dictgen::InsensitiveStr::Ascii("emder"),
        dictgen::InsensitiveStr::Ascii("ended"),
        dictgen::InsensitiveStr::Ascii("enderd"),
        dictgen::InsensitiveStr::Ascii("endred"),
        dictgen::InsensitiveStr::Ascii("ener"),
        dictgen::InsensitiveStr::Ascii("enered"),
        dictgen::InsensitiveStr::Ascii("enger"),
        dictgen::InsensitiveStr::Ascii("engered"),
        dictgen::InsensitiveStr::Ascii("enres"),
    ],
    values: &[
        &["transgender"],
        &["transgender"],
        &["transgender"],
        &["transgendered"],
        &["transgendered"],
        &["transgender"],
        &["transgendered"],
        &["transgender"],
        &["transgendered"],
        &["transgender"],
    ],
    range: 4..=7,
};

static WORD_TRANSF_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_TRANSF_CHILDREN),
    value: None,
};

pub static WORD_TRANSF_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("armers"),
        dictgen::InsensitiveStr::Ascii("arring"),
        dictgen::InsensitiveStr::Ascii("ender"),
        dictgen::InsensitiveStr::Ascii("erd"),
        dictgen::InsensitiveStr::Ascii("ere"),
        dictgen::InsensitiveStr::Ascii("ered"),
        dictgen::InsensitiveStr::Ascii("erer"),
        dictgen::InsensitiveStr::Ascii("erers"),
        dictgen::InsensitiveStr::Ascii("eres"),
        dictgen::InsensitiveStr::Ascii("ering"),
        dictgen::InsensitiveStr::Ascii("errred"),
        dictgen::InsensitiveStr::Ascii("errring"),
        dictgen::InsensitiveStr::Ascii("errs"),
        dictgen::InsensitiveStr::Ascii("ersom"),
        dictgen::InsensitiveStr::Ascii("erts"),
        dictgen::InsensitiveStr::Ascii("om"),
        dictgen::InsensitiveStr::Ascii("omed"),
        dictgen::InsensitiveStr::Ascii("omers"),
        dictgen::InsensitiveStr::Ascii("ored"),
        dictgen::InsensitiveStr::Ascii("ormacion"),
        dictgen::InsensitiveStr::Ascii("ormare"),
        dictgen::InsensitiveStr::Ascii("ormarea"),
        dictgen::InsensitiveStr::Ascii("ormarem"),
        dictgen::InsensitiveStr::Ascii("ormarse"),
        dictgen::InsensitiveStr::Ascii("ormas"),
        dictgen::InsensitiveStr::Ascii("ormase"),
        dictgen::InsensitiveStr::Ascii("ormaton"),
        dictgen::InsensitiveStr::Ascii("orme"),
        dictgen::InsensitiveStr::Ascii("ormees"),
        dictgen::InsensitiveStr::Ascii("ormered"),
        dictgen::InsensitiveStr::Ascii("ormes"),
        dictgen::InsensitiveStr::Ascii("ormis"),
        dictgen::InsensitiveStr::Ascii("ormus"),
        dictgen::InsensitiveStr::Ascii("orners"),
        dictgen::InsensitiveStr::Ascii("ors"),
        dictgen::InsensitiveStr::Ascii("orums"),
        dictgen::InsensitiveStr::Ascii("os"),
        dictgen::InsensitiveStr::Ascii("rom"),
        dictgen::InsensitiveStr::Ascii("romation"),
        dictgen::InsensitiveStr::Ascii("romed"),
        dictgen::InsensitiveStr::Ascii("romer"),
        dictgen::InsensitiveStr::Ascii("romers"),
        dictgen::InsensitiveStr::Ascii("roming"),
        dictgen::InsensitiveStr::Ascii("roms"),
    ],
    values: &[
        &["transformers"],
        &["transferring"],
        &["transgender"],
        &["transferred"],
        &["transferred"],
        &["transferred"],
        &["transferred"],
        &["transfers"],
        &["transfers"],
        &["transferring"],
        &["transferred"],
        &["transferring"],
        &["transfers"],
        &["transforms"],
        &["transfers"],
        &["transform"],
        &["transformed"],
        &["transforms"],
        &["transformed"],
        &["transformation"],
        &["transformers"],
        &["transformer"],
        &["transformer"],
        &["transformers"],
        &["transforms"],
        &["transforms"],
        &["transformation"],
        &["transfer"],
        &["transforms"],
        &["transformed"],
        &["transformers"],
        &["transforms"],
        &["transforms"],
        &["transformers"],
        &["transforms"],
        &["transforms"],
        &["transforms"],
        &["transform"],
        &["transformation"],
        &["transformed"],
        &["transformers"],
        &["transformers"],
        &["transforming"],
        &["transforms"],
    ],
    range: 2..=8,
};

static WORD_TRANSE_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_TRANSE_CHILDREN),
    value: None,
};

pub static WORD_TRANSE_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("at"),
        dictgen::InsensitiveStr::Ascii("nding"),
        dictgen::InsensitiveStr::Ascii("sxuals"),
    ],
    values: &[&["translates"], &["transcending"], &["transsexuals"]],
    range: 2..=6,
};

static WORD_TRANSC_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_TRANSC_CHILDREN),
    value: None,
};

pub static WORD_TRANSC_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ations"),
        dictgen::InsensitiveStr::Ascii("endance"),
        dictgen::InsensitiveStr::Ascii("endant"),
        dictgen::InsensitiveStr::Ascii("endentational"),
        dictgen::InsensitiveStr::Ascii("iprt"),
        dictgen::InsensitiveStr::Ascii("irpt"),
        dictgen::InsensitiveStr::Ascii("luent"),
        dictgen::InsensitiveStr::Ascii("ribtion"),
        dictgen::InsensitiveStr::Ascii("ripcion"),
        dictgen::InsensitiveStr::Ascii("rips"),
        dictgen::InsensitiveStr::Ascii("ripto"),
        dictgen::InsensitiveStr::Ascii("ripton"),
        dictgen::InsensitiveStr::Ascii("riptus"),
        dictgen::InsensitiveStr::Ascii("ris"),
        dictgen::InsensitiveStr::Ascii("rit"),
        dictgen::InsensitiveStr::Ascii("rito"),
        dictgen::InsensitiveStr::Ascii("rits"),
        dictgen::InsensitiveStr::Ascii("rpit"),
        dictgen::InsensitiveStr::Ascii("tions"),
        dictgen::InsensitiveStr::Ascii("ulent"),
    ],
    values: &[
        &["transactions"],
        &["transcendence"],
        &["transcendent"],
        &["transcendental"],
        &["transcripts"],
        &["transcripts"],
        &["translucent"],
        &["transcription"],
        &["transcription"],
        &["transcripts"],
        &["transcription"],
        &["transcription"],
        &["transcripts"],
        &["transcripts"],
        &["transcript"],
        &["transcript"],
        &["transcripts"],
        &["transcript"],
        &["transitions"],
        &["translucent"],
    ],
    range: 3..=13,
};

static WORD_TRANSA_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_TRANSA_CHILDREN),
    value: None,
};

pub static WORD_TRANSA_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ccion"),
        dictgen::InsensitiveStr::Ascii("citon"),
        dictgen::InsensitiveStr::Ascii("lte"),
        dictgen::InsensitiveStr::Ascii("lted"),
        dictgen::InsensitiveStr::Ascii("ltes"),
        dictgen::InsensitiveStr::Ascii("lting"),
        dictgen::InsensitiveStr::Ascii("ltion"),
        dictgen::InsensitiveStr::Ascii("ltions"),
        dictgen::InsensitiveStr::Ascii("ltor"),
        dictgen::InsensitiveStr::Ascii("prency"),
        dictgen::InsensitiveStr::Ascii("tion"),
        dictgen::InsensitiveStr::Ascii("tional"),
        dictgen::InsensitiveStr::Ascii("tions"),
    ],
    values: &[
        &["transaction"],
        &["transactions"],
        &["translate"],
        &["translated"],
        &["translates"],
        &["translating"],
        &["translation"],
        &["translations"],
        &["translator"],
        &["transparency"],
        &["transition"],
        &["transitional"],
        &["transitions"],
    ],
    range: 3..=6,
};

static WORD_TRANP_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_TRANP_CHILDREN),
    value: None,
};

pub static WORD_TRANP_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("shobic")],
    values: &[&["transphobic"]],
    range: 6..=6,
};

static WORD_TRANN_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_TRANN_CHILDREN),
    value: None,
};

pub static WORD_TRANN_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("sexual")],
    values: &[&["transsexual"]],
    range: 6..=6,
};

static WORD_TRANM_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_TRANM_CHILDREN),
    value: None,
};

pub static WORD_TRANM_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("sission")],
    values: &[&["transmissions"]],
    range: 7..=7,
};

static WORD_TRANL_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_TRANL_CHILDREN),
    value: None,
};

pub static WORD_TRANL_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("astion"),
        dictgen::InsensitiveStr::Ascii("sate"),
        dictgen::InsensitiveStr::Ascii("sated"),
        dictgen::InsensitiveStr::Ascii("sating"),
        dictgen::InsensitiveStr::Ascii("sation"),
        dictgen::InsensitiveStr::Ascii("sations"),
        dictgen::InsensitiveStr::Ascii("uscent"),
    ],
    values: &[
        &["translations"],
        &["translate"],
        &["translated"],
        &["translating"],
        &["translation"],
        &["translations"],
        &["translucent"],
    ],
    range: 4..=7,
};

static WORD_TRANI_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_TRANI_CHILDREN),
    value: None,
};

pub static WORD_TRANI_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("stion"),
        dictgen::InsensitiveStr::Ascii("stional"),
        dictgen::InsensitiveStr::Ascii("stioned"),
        dictgen::InsensitiveStr::Ascii("stioning"),
        dictgen::InsensitiveStr::Ascii("stions"),
    ],
    values: &[
        &["transition"],
        &["transitional"],
        &["transitioned"],
        &["transitioning"],
        &["transitions"],
    ],
    range: 5..=8,
};

static WORD_TRANF_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_TRANF_CHILDREN),
    value: None,
};

pub static WORD_TRANF_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("orm"),
        dictgen::InsensitiveStr::Ascii("ormed"),
    ],
    values: &[&["transform"], &["transformed"]],
    range: 3..=5,
};

static WORD_TRAND_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_TRAND_CHILDREN),
    value: None,
};

pub static WORD_TRAND_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("gender"),
        dictgen::InsensitiveStr::Ascii("itional"),
        dictgen::InsensitiveStr::Ascii("itions"),
    ],
    values: &[&["transgender"], &["transitional"], &["transitions"]],
    range: 6..=7,
};

static WORD_TRANC_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_TRANC_CHILDREN),
    value: None,
};

pub static WORD_TRANC_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("endent"),
        dictgen::InsensitiveStr::Ascii("ending"),
        dictgen::InsensitiveStr::Ascii("lucent"),
    ],
    values: &[&["transcendent"], &["transcending"], &["translucent"]],
    range: 6..=6,
};

static WORD_TRAM_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_TRAM_CHILDREN),
    value: None,
};

pub static WORD_TRAM_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("autic"),
        dictgen::InsensitiveStr::Ascii("autized"),
        dictgen::InsensitiveStr::Ascii("boline"),
        dictgen::InsensitiveStr::Ascii("endously"),
        dictgen::InsensitiveStr::Ascii("ploine"),
        dictgen::InsensitiveStr::Ascii("polene"),
        dictgen::InsensitiveStr::Ascii("sformers"),
        dictgen::InsensitiveStr::Ascii("sforming"),
        dictgen::InsensitiveStr::Ascii("uatized"),
    ],
    values: &[
        &["traumatic"],
        &["traumatized"],
        &["trampoline"],
        &["tremendously"],
        &["trampoline"],
        &["trampoline"],
        &["transformers"],
        &["transforming"],
        &["traumatized"],
    ],
    range: 5..=8,
};

static WORD_TRAL_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_TRAL_CHILDREN),
    value: None,
};

pub static WORD_TRAL_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ier"),
        dictgen::InsensitiveStr::Ascii("iers"),
    ],
    values: &[&["trailer"], &["trailers"]],
    range: 3..=4,
};

static WORD_TRAK_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_TRAK_CHILDREN),
    value: None,
};

pub static WORD_TRAK_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("cers")],
    values: &[&["trackers"]],
    range: 4..=4,
};

static WORD_TRAI_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_TRAI_CHILDREN),
    value: None,
};

pub static WORD_TRAI_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("leras"),
        dictgen::InsensitiveStr::Ascii("les"),
        dictgen::InsensitiveStr::Ascii("nes"),
        dictgen::InsensitiveStr::Ascii("ngle"),
        dictgen::InsensitiveStr::Ascii("ngles"),
        dictgen::InsensitiveStr::Ascii("nig"),
        dictgen::InsensitiveStr::Ascii("nwreak"),
        dictgen::InsensitiveStr::Ascii("nwrek"),
        dictgen::InsensitiveStr::Ascii("toris"),
        dictgen::InsensitiveStr::Ascii("torus"),
        dictgen::InsensitiveStr::Ascii("tour"),
    ],
    values: &[
        &["trailers"],
        &["trailers"],
        &["trainers"],
        &["triangle"],
        &["triangles"],
        &["training"],
        &["trainwreck"],
        &["trainwreck"],
        &["traitors"],
        &["traitors"],
        &["traitor"],
    ],
    range: 3..=6,
};

static WORD_TRAG_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_TRAG_CHILDREN),
    value: None,
};

pub static WORD_TRAG_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("eted"),
        dictgen::InsensitiveStr::Ascii("icallly"),
        dictgen::InsensitiveStr::Ascii("icaly"),
    ],
    values: &[&["targeted"], &["tragically"], &["tragically"]],
    range: 4..=7,
};

static WORD_TRAF_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_TRAF_CHILDREN),
    value: None,
};

pub static WORD_TRAF_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ficed"),
        dictgen::InsensitiveStr::Ascii("ficing"),
        dictgen::InsensitiveStr::Ascii("ic"),
    ],
    values: &[&["trafficked"], &["trafficking"], &["traffic"]],
    range: 2..=6,
};

static WORD_TRAD_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_TRAD_CHILDREN),
    value: None,
};

pub static WORD_TRAD_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("icional"),
        dictgen::InsensitiveStr::Ascii("ionally"),
        dictgen::InsensitiveStr::Ascii("isional"),
        dictgen::InsensitiveStr::Ascii("itionaly"),
        dictgen::InsensitiveStr::Ascii("itionel"),
        dictgen::InsensitiveStr::Ascii("itionnal"),
        dictgen::InsensitiveStr::Ascii("itition"),
        dictgen::InsensitiveStr::Ascii("tionally"),
    ],
    values: &[
        &["traditional"],
        &["traditionally"],
        &["traditional"],
        &["traditionally"],
        &["traditional"],
        &["traditional"],
        &["tradition"],
        &["traditionally"],
    ],
    range: 7..=8,
};

static WORD_TRAC_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_TRAC_CHILDREN),
    value: None,
};

pub static WORD_TRAC_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("kes"),
        dictgen::InsensitiveStr::Ascii("kres"),
    ],
    values: &[&["trackers"], &["trackers"]],
    range: 3..=4,
};

static WORD_TRAB_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_TRAB_CHILDREN),
    value: None,
};

pub static WORD_TRAB_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ajao"),
        dictgen::InsensitiveStr::Ascii("ajdo"),
    ],
    values: &[&["trabajo"], &["trabajo"]],
    range: 4..=4,
};

static WORD_TO_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_TO_CHILDREN),
    value: None,
};

static WORD_TO_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    None,
    Some(&WORD_TOB_NODE),
    Some(&WORD_TOC_NODE),
    Some(&WORD_TOD_NODE),
    None,
    None,
    Some(&WORD_TOG_NODE),
    None,
    Some(&WORD_TOI_NODE),
    None,
    None,
    Some(&WORD_TOL_NODE),
    Some(&WORD_TOM_NODE),
    Some(&WORD_TON_NODE),
    Some(&WORD_TOO_NODE),
    Some(&WORD_TOP_NODE),
    None,
    Some(&WORD_TOR_NODE),
    None,
    Some(&WORD_TOT_NODE),
    Some(&WORD_TOU_NODE),
    None,
    Some(&WORD_TOW_NODE),
    Some(&WORD_TOX_NODE),
    None,
    None,
];

static WORD_TOX_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_TOX_CHILDREN),
    value: None,
};

pub static WORD_TOX_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("icitity"),
        dictgen::InsensitiveStr::Ascii("icitiy"),
        dictgen::InsensitiveStr::Ascii("iticy"),
    ],
    values: &[&["toxicity"], &["toxicity"], &["toxicity"]],
    range: 5..=7,
};

static WORD_TOW_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_TOW_CHILDREN),
    value: None,
};

pub static WORD_TOW_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ords"),
        dictgen::InsensitiveStr::Ascii("rad"),
    ],
    values: &[&["towards"], &["toward"]],
    range: 3..=4,
};

static WORD_TOU_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_TOU_CHILDREN),
    value: None,
};

pub static WORD_TOU_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("bles"),
        dictgen::InsensitiveStr::Ascii("chapd"),
        dictgen::InsensitiveStr::Ascii("chda"),
        dictgen::InsensitiveStr::Ascii("chdwon"),
        dictgen::InsensitiveStr::Ascii("chsceen"),
        dictgen::InsensitiveStr::Ascii("chscreeen"),
        dictgen::InsensitiveStr::Ascii("chscren"),
        dictgen::InsensitiveStr::Ascii("nge"),
        dictgen::InsensitiveStr::Ascii("nrey"),
        dictgen::InsensitiveStr::Ascii("nreys"),
        dictgen::InsensitiveStr::Ascii("ranment"),
        dictgen::InsensitiveStr::Ascii("ranments"),
        dictgen::InsensitiveStr::Ascii("rch"),
        dictgen::InsensitiveStr::Ascii("risim"),
        dictgen::InsensitiveStr::Ascii("ristas"),
        dictgen::InsensitiveStr::Ascii("ristes"),
        dictgen::InsensitiveStr::Ascii("ristey"),
        dictgen::InsensitiveStr::Ascii("ristly"),
        dictgen::InsensitiveStr::Ascii("ristsy"),
        dictgen::InsensitiveStr::Ascii("risy"),
        dictgen::InsensitiveStr::Ascii("rits"),
        dictgen::InsensitiveStr::Ascii("ritsy"),
        dictgen::InsensitiveStr::Ascii("rmanent"),
        dictgen::InsensitiveStr::Ascii("rnamet"),
        dictgen::InsensitiveStr::Ascii("rnamets"),
        dictgen::InsensitiveStr::Ascii("rnamnet"),
        dictgen::InsensitiveStr::Ascii("rnamnets"),
        dictgen::InsensitiveStr::Ascii("rnemant"),
        dictgen::InsensitiveStr::Ascii("rnemants"),
        dictgen::InsensitiveStr::Ascii("rnement"),
        dictgen::InsensitiveStr::Ascii("rnements"),
        dictgen::InsensitiveStr::Ascii("rnes"),
        dictgen::InsensitiveStr::Ascii("rnmanets"),
        dictgen::InsensitiveStr::Ascii("rnyes"),
        dictgen::InsensitiveStr::Ascii("rsim"),
        dictgen::InsensitiveStr::Ascii("rsit"),
        dictgen::InsensitiveStr::Ascii("rsits"),
        dictgen::InsensitiveStr::Ascii("rsity"),
    ],
    values: &[
        &["troubles"],
        &["touchpad"],
        &["touchpad"],
        &["touchdown"],
        &["touchscreen"],
        &["touchscreen"],
        &["touchscreen"],
        &["tongue"],
        &["tourney"],
        &["tourneys"],
        &["tournaments"],
        &["tournaments"],
        &["torch"],
        &["tourism"],
        &["tourists"],
        &["tourists"],
        &["touristy"],
        &["touristy"],
        &["touristy"],
        &["touristy"],
        &["tourist"],
        &["touristy"],
        &["tournaments"],
        &["tournament"],
        &["tournaments"],
        &["tournament"],
        &["tournaments"],
        &["tournament"],
        &["tournaments"],
        &["tournament"],
        &["tournaments"],
        &["tourneys"],
        &["tournaments"],
        &["tourneys"],
        &["tourism"],
        &["tourist"],
        &["tourists"],
        &["touristy"],
    ],
    range: 3..=9,
};

static WORD_TOT_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_TOT_CHILDREN),
    value: None,
};

pub static WORD_TOT_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("alitara"),
        dictgen::InsensitiveStr::Ascii("alitaran"),
        dictgen::InsensitiveStr::Ascii("alitarion"),
        dictgen::InsensitiveStr::Ascii("alitarni"),
        dictgen::InsensitiveStr::Ascii("alitatian"),
        dictgen::InsensitiveStr::Ascii("tehnam"),
        dictgen::InsensitiveStr::Ascii("tenahm"),
        dictgen::InsensitiveStr::Ascii("tneham"),
        dictgen::InsensitiveStr::Ascii("urials"),
    ],
    values: &[
        &["totalitarian"],
        &["totalitarian"],
        &["totalitarian"],
        &["totalitarian"],
        &["totalitarian"],
        &["tottenham"],
        &["tottenham"],
        &["tottenham"],
        &["tutorials"],
    ],
    range: 6..=9,
};

static WORD_TOR_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_TOR_CHILDREN),
    value: None,
};

pub static WORD_TOR_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ando"),
        dictgen::InsensitiveStr::Ascii("andoes"),
        dictgen::InsensitiveStr::Ascii("chilght"),
        dictgen::InsensitiveStr::Ascii("chlgiht"),
        dictgen::InsensitiveStr::Ascii("chligt"),
        dictgen::InsensitiveStr::Ascii("chligth"),
        dictgen::InsensitiveStr::Ascii("elable"),
        dictgen::InsensitiveStr::Ascii("hclight"),
        dictgen::InsensitiveStr::Ascii("iodal"),
        dictgen::InsensitiveStr::Ascii("itlla"),
        dictgen::InsensitiveStr::Ascii("itllas"),
        dictgen::InsensitiveStr::Ascii("nadoe"),
        dictgen::InsensitiveStr::Ascii("naodes"),
        dictgen::InsensitiveStr::Ascii("ndao"),
        dictgen::InsensitiveStr::Ascii("otise"),
        dictgen::InsensitiveStr::Ascii("pdeo"),
        dictgen::InsensitiveStr::Ascii("peados"),
        dictgen::InsensitiveStr::Ascii("pedeo"),
        dictgen::InsensitiveStr::Ascii("phies"),
        dictgen::InsensitiveStr::Ascii("rentas"),
        dictgen::InsensitiveStr::Ascii("rentbig"),
        dictgen::InsensitiveStr::Ascii("renters"),
        dictgen::InsensitiveStr::Ascii("rentes"),
        dictgen::InsensitiveStr::Ascii("rentking"),
        dictgen::InsensitiveStr::Ascii("rentors"),
        dictgen::InsensitiveStr::Ascii("rentting"),
        dictgen::InsensitiveStr::Ascii("rest"),
        dictgen::InsensitiveStr::Ascii("tialls"),
        dictgen::InsensitiveStr::Ascii("tila"),
        dictgen::InsensitiveStr::Ascii("tillera"),
        dictgen::InsensitiveStr::Ascii("tillia"),
        dictgen::InsensitiveStr::Ascii("tillias"),
        dictgen::InsensitiveStr::Ascii("tillita"),
        dictgen::InsensitiveStr::Ascii("tillla"),
        dictgen::InsensitiveStr::Ascii("tilllas"),
        dictgen::InsensitiveStr::Ascii("tiose"),
        dictgen::InsensitiveStr::Ascii("ubleshoot"),
        dictgen::InsensitiveStr::Ascii("ublesome"),
        dictgen::InsensitiveStr::Ascii("uisty"),
        dictgen::InsensitiveStr::Ascii("unament"),
        dictgen::InsensitiveStr::Ascii("unaments"),
        dictgen::InsensitiveStr::Ascii("uney"),
        dictgen::InsensitiveStr::Ascii("uneys"),
    ],
    values: &[
        &["tornado"],
        &["tornadoes"],
        &["torchlight"],
        &["torchlight"],
        &["torchlight"],
        &["torchlight"],
        &["tolerable"],
        &["torchlight"],
        &["toroidal"],
        &["tortilla"],
        &["tortillas"],
        &["tornado"],
        &["tornadoes"],
        &["tornado"],
        &["tortoise"],
        &["torpedo"],
        &["torpedoes"],
        &["torpedo"],
        &["trophies"],
        &["torrents"],
        &["torrenting"],
        &["torrents"],
        &["torrents"],
        &["torrenting"],
        &["torrents"],
        &["torrenting"],
        &["torrents"],
        &["tortillas"],
        &["tortilla"],
        &["tortilla"],
        &["tortilla"],
        &["tortilla"],
        &["tortilla"],
        &["tortilla"],
        &["tortilla"],
        &["tortoise"],
        &["troubleshoot"],
        &["troublesome"],
        &["touristy"],
        &["tournament"],
        &["tournaments"],
        &["tourney"],
        &["tourneys"],
    ],
    range: 4..=9,
};

static WORD_TOP_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_TOP_CHILDREN),
    value: None,
};

pub static WORD_TOP_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("pingest"),
        dictgen::InsensitiveStr::Ascii("pins"),
    ],
    values: &[&["toppings"], &["toppings"]],
    range: 4..=7,
};

static WORD_TOO_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_TOO_CHILDREN),
    value: None,
};

pub static WORD_TOO_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("d"),
        dictgen::InsensitiveStr::Ascii("thbruch"),
        dictgen::InsensitiveStr::Ascii("thbruth"),
        dictgen::InsensitiveStr::Ascii("thbursh"),
        dictgen::InsensitiveStr::Ascii("thrbush"),
    ],
    values: &[
        &["todo"],
        &["toothbrush"],
        &["toothbrush"],
        &["toothbrush"],
        &["toothbrush"],
    ],
    range: 1..=7,
};

static WORD_TON_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_TON_CHILDREN),
    value: None,
};

pub static WORD_TON_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("giht"),
        dictgen::InsensitiveStr::Ascii("guers"),
        dictgen::InsensitiveStr::Ascii("uges"),
    ],
    values: &[&["tonight"], &["tongues"], &["tongues"]],
    range: 4..=5,
};

static WORD_TOM_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_TOM_CHILDREN),
    value: None,
};

pub static WORD_TOM_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("atos"),
        dictgen::InsensitiveStr::Ascii("morow"),
        dictgen::InsensitiveStr::Ascii("morrow"),
    ],
    values: &[&["tomatoes"], &["tomorrow"], &["tomorrow"]],
    range: 4..=6,
};

static WORD_TOL_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_TOL_CHILDREN),
    value: None,
};

pub static WORD_TOL_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("erabe"),
        dictgen::InsensitiveStr::Ascii("erence"),
        dictgen::InsensitiveStr::Ascii("iets"),
        dictgen::InsensitiveStr::Ascii("kein"),
    ],
    values: &[&["tolerable"], &["tolerance"], &["toilets"], &["tolkien"]],
    range: 4..=6,
};

static WORD_TOI_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_TOI_CHILDREN),
    value: None,
};

pub static WORD_TOI_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("letts")],
    values: &[&["toilets"]],
    range: 5..=5,
};

static WORD_TOG_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_TOG_CHILDREN),
    value: None,
};

pub static WORD_TOG_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ehter"),
        dictgen::InsensitiveStr::Ascii("heter"),
        dictgen::InsensitiveStr::Ascii("hether"),
    ],
    values: &[&["together"], &["together"], &["together"]],
    range: 5..=6,
};

static WORD_TOD_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_TOD_CHILDREN),
    value: None,
};

pub static WORD_TOD_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("ya")],
    values: &[&["today"]],
    range: 2..=2,
};

static WORD_TOC_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_TOC_CHILDREN),
    value: None,
};

pub static WORD_TOC_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("uhdown"),
        dictgen::InsensitiveStr::Ascii("uhpad"),
        dictgen::InsensitiveStr::Ascii("uhscreen"),
    ],
    values: &[&["touchdown"], &["touchpad"], &["touchscreen"]],
    range: 5..=8,
};

static WORD_TOB_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_TOB_CHILDREN),
    value: None,
};

pub static WORD_TOB_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("baco")],
    values: &[&["tobacco"]],
    range: 4..=4,
};

static WORD_TL_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_TL_CHILDREN),
    value: None,
};

pub static WORD_TL_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("aking")],
    values: &[&["talking"]],
    range: 5..=5,
};

static WORD_TK_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_TK_CHILDREN),
    value: None,
};

pub static WORD_TK_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ae"),
        dictgen::InsensitiveStr::Ascii("aes"),
        dictgen::InsensitiveStr::Ascii("aing"),
    ],
    values: &[&["take"], &["takes"], &["taking"]],
    range: 2..=4,
};

static WORD_TJ_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_TJ_CHILDREN),
    value: None,
};

pub static WORD_TJ_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("e"),
        dictgen::InsensitiveStr::Ascii("he"),
        dictgen::InsensitiveStr::Ascii("panishad"),
    ],
    values: &[&["the"], &["the"], &["upanishad"]],
    range: 1..=8,
};

static WORD_TI_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_TI_CHILDREN),
    value: None,
};

pub static WORD_TI_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("awanese"),
        dictgen::InsensitiveStr::Ascii("em"),
        dictgen::InsensitiveStr::Ascii("ghetning"),
        dictgen::InsensitiveStr::Ascii("ghtare"),
        dictgen::InsensitiveStr::Ascii("ghtenting"),
        dictgen::InsensitiveStr::Ascii("ghtining"),
        dictgen::InsensitiveStr::Ascii("gthening"),
        dictgen::InsensitiveStr::Ascii("gther"),
        dictgen::InsensitiveStr::Ascii("hkn"),
        dictgen::InsensitiveStr::Ascii("hs"),
        dictgen::InsensitiveStr::Ascii("mestap"),
        dictgen::InsensitiveStr::Ascii("mestmap"),
        dictgen::InsensitiveStr::Ascii("mne"),
        dictgen::InsensitiveStr::Ascii("ndergarten"),
        dictgen::InsensitiveStr::Ascii("olets"),
        dictgen::InsensitiveStr::Ascii("ome"),
        dictgen::InsensitiveStr::Ascii("rangle"),
        dictgen::InsensitiveStr::Ascii("rangles"),
        dictgen::InsensitiveStr::Ascii("rbunal"),
        dictgen::InsensitiveStr::Ascii("rdent"),
        dictgen::InsensitiveStr::Ascii("tainum"),
        dictgen::InsensitiveStr::Ascii("tanim"),
        dictgen::InsensitiveStr::Ascii("tanuim"),
    ],
    values: &[
        &["taiwanese"],
        &["time"],
        &["tightening"],
        &["tighter"],
        &["tightening"],
        &["tightening"],
        &["tightening"],
        &["tighter"],
        &["think"],
        &["this"],
        &["timestamp"],
        &["timestamp"],
        &["time"],
        &["kindergarten"],
        &["toilets"],
        &["time"],
        &["triangle"],
        &["triangles"],
        &["tribunal"],
        &["trident"],
        &["titanium"],
        &["titanium"],
        &["titanium"],
    ],
    range: 2..=10,
};

static WORD_TH_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_TH_CHILDREN),
    value: None,
};

static WORD_TH_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    Some(&WORD_THA_NODE),
    None,
    None,
    None,
    Some(&WORD_THE_NODE),
    None,
    Some(&WORD_THG_NODE),
    None,
    Some(&WORD_THI_NODE),
    None,
    None,
    None,
    None,
    Some(&WORD_THN_NODE),
    Some(&WORD_THO_NODE),
    None,
    None,
    Some(&WORD_THR_NODE),
    Some(&WORD_THS_NODE),
    Some(&WORD_THT_NODE),
    Some(&WORD_THU_NODE),
    None,
    None,
    None,
    Some(&WORD_THY_NODE),
    None,
];

static WORD_THY_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_THY_CHILDREN),
    value: None,
};

pub static WORD_THY_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("at"),
        dictgen::InsensitiveStr::Ascii("orid"),
        dictgen::InsensitiveStr::Ascii("riod"),
    ],
    values: &[&["that"], &["thyroid"], &["thyroid"]],
    range: 2..=4,
};

static WORD_THU_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_THU_CHILDREN),
    value: None,
};

pub static WORD_THU_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("bmnails"),
        dictgen::InsensitiveStr::Ascii("dnerbolt"),
        dictgen::InsensitiveStr::Ascii("mbmails"),
        dictgen::InsensitiveStr::Ascii("mbnailers"),
        dictgen::InsensitiveStr::Ascii("mbnal"),
        dictgen::InsensitiveStr::Ascii("nberbolt"),
        dictgen::InsensitiveStr::Ascii("nderblot"),
        dictgen::InsensitiveStr::Ascii("nderboat"),
        dictgen::InsensitiveStr::Ascii("nderboldt"),
        dictgen::InsensitiveStr::Ascii("nderbot"),
        dictgen::InsensitiveStr::Ascii("nderbots"),
        dictgen::InsensitiveStr::Ascii("nderbowl"),
        dictgen::InsensitiveStr::Ascii("nderjolt"),
        dictgen::InsensitiveStr::Ascii("nderolt"),
        dictgen::InsensitiveStr::Ascii("ndervolt"),
        dictgen::InsensitiveStr::Ascii("rdsay"),
        dictgen::InsensitiveStr::Ascii("rdsays"),
        dictgen::InsensitiveStr::Ascii("rsdsay"),
        dictgen::InsensitiveStr::Ascii("rsdsy"),
        dictgen::InsensitiveStr::Ascii("rsters"),
    ],
    values: &[
        &["thumbnails"],
        &["thunderbolt"],
        &["thumbnails"],
        &["thumbnails"],
        &["thumbnails"],
        &["thunderbolt"],
        &["thunderbolt"],
        &["thunderbolt"],
        &["thunderbolt"],
        &["thunderbolt"],
        &["thunderbolt"],
        &["thunderbolt"],
        &["thunderbolt"],
        &["thunderbolt"],
        &["thunderbolt"],
        &["thursday"],
        &["thursdays"],
        &["thursdays"],
        &["thursdays"],
        &["thrusters"],
    ],
    range: 5..=9,
};

static WORD_THT_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_THT_CHILDREN),
    value: None,
};

pub static WORD_THT_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("a")],
    values: &[&["that"]],
    range: 1..=1,
};

static WORD_THS_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_THS_CHILDREN),
    value: None,
};

pub static WORD_THS_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("i"),
        dictgen::InsensitiveStr::Ascii("oe"),
    ],
    values: &[&["this"], &["those"]],
    range: 1..=2,
};

static WORD_THR_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_THR_CHILDREN),
    value: None,
};

pub static WORD_THR_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("eadd"),
        dictgen::InsensitiveStr::Ascii("eadened"),
        dictgen::InsensitiveStr::Ascii("eataning"),
        dictgen::InsensitiveStr::Ascii("eatend"),
        dictgen::InsensitiveStr::Ascii("eatended"),
        dictgen::InsensitiveStr::Ascii("eatenes"),
        dictgen::InsensitiveStr::Ascii("eates"),
        dictgen::InsensitiveStr::Ascii("eatining"),
        dictgen::InsensitiveStr::Ascii("eatning"),
        dictgen::InsensitiveStr::Ascii("eee"),
        dictgen::InsensitiveStr::Ascii("eefor"),
        dictgen::InsensitiveStr::Ascii("eeof"),
        dictgen::InsensitiveStr::Ascii("eshhold"),
        dictgen::InsensitiveStr::Ascii("id"),
        dictgen::InsensitiveStr::Ascii("idly"),
        dictgen::InsensitiveStr::Ascii("isty"),
        dictgen::InsensitiveStr::Ascii("iteen"),
        dictgen::InsensitiveStr::Ascii("ities"),
        dictgen::InsensitiveStr::Ascii("oast"),
        dictgen::InsensitiveStr::Ascii("oaths"),
        dictgen::InsensitiveStr::Ascii("oium"),
        dictgen::InsensitiveStr::Ascii("oners"),
        dictgen::InsensitiveStr::Ascii("oough"),
        dictgen::InsensitiveStr::Ascii("orough"),
        dictgen::InsensitiveStr::Ascii("othling"),
        dictgen::InsensitiveStr::Ascii("otlling"),
        dictgen::InsensitiveStr::Ascii("ottleing"),
        dictgen::InsensitiveStr::Ascii("oughiut"),
        dictgen::InsensitiveStr::Ascii("oughly"),
        dictgen::InsensitiveStr::Ascii("oughoput"),
        dictgen::InsensitiveStr::Ascii("ought"),
        dictgen::InsensitiveStr::Ascii("oughtout"),
        dictgen::InsensitiveStr::Ascii("oughtput"),
        dictgen::InsensitiveStr::Ascii("ougout"),
        dictgen::InsensitiveStr::Ascii("usday"),
        dictgen::InsensitiveStr::Ascii("usdays"),
        dictgen::InsensitiveStr::Ascii("yoid"),
    ],
    values: &[
        &["threaded"],
        &["threaded"],
        &["threatening"],
        &["threatened"],
        &["threatened"],
        &["threatens"],
        &["threatens"],
        &["threatening"],
        &["threatening"],
        &["three"],
        &["therefor"],
        &["thereof"],
        &["threshold"],
        &["third"],
        &["thirdly"],
        &["thirsty"],
        &["thirteen"],
        &["thirties"],
        &["throats"],
        &["throats"],
        &["thorium"],
        &["thrones"],
        &["thorough"],
        &["thorough"],
        &["throttling"],
        &["throttling"],
        &["throttling"],
        &["throughput"],
        &["thoroughly"],
        &["throughput"],
        &["thought"],
        &["throughout"],
        &["throughput"],
        &["throughout"],
        &["thursday"],
        &["thursdays"],
        &["thyroid"],
    ],
    range: 2..=8,
};

static WORD_THO_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_THO_CHILDREN),
    value: None,
};

pub static WORD_THO_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ecracy"),
        dictgen::InsensitiveStr::Ascii("erem"),
        dictgen::InsensitiveStr::Ascii("eretical"),
        dictgen::InsensitiveStr::Ascii("eretically"),
        dictgen::InsensitiveStr::Ascii("eries"),
        dictgen::InsensitiveStr::Ascii("erist"),
        dictgen::InsensitiveStr::Ascii("erists"),
        dictgen::InsensitiveStr::Ascii("mspon"),
        dictgen::InsensitiveStr::Ascii("pmson"),
        dictgen::InsensitiveStr::Ascii("rats"),
        dictgen::InsensitiveStr::Ascii("rnes"),
        dictgen::InsensitiveStr::Ascii("roughy"),
        dictgen::InsensitiveStr::Ascii("rttling"),
        dictgen::InsensitiveStr::Ascii("rughout"),
        dictgen::InsensitiveStr::Ascii("ruim"),
        dictgen::InsensitiveStr::Ascii("ughout"),
        dictgen::InsensitiveStr::Ascii("ughs"),
        dictgen::InsensitiveStr::Ascii("ugths"),
        dictgen::InsensitiveStr::Ascii("urogh"),
        dictgen::InsensitiveStr::Ascii("uroghly"),
    ],
    values: &[
        &["theocracy"],
        &["theorem"],
        &["theoretical"],
        &["theoretically"],
        &["theories"],
        &["theorist"],
        &["theorists"],
        &["thompson"],
        &["thompson"],
        &["throats"],
        &["thrones"],
        &["thoroughly"],
        &["throttling"],
        &["throughout"],
        &["thorium"],
        &["throughout"],
        &["thoughts"],
        &["thoughts"],
        &["thorough"],
        &["thoroughly"],
    ],
    range: 4..=10,
};

static WORD_THN_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_THN_CHILDREN),
    value: Some(&["then"]),
};

pub static WORD_THN_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("a"),
        dictgen::InsensitiveStr::Ascii("akyou"),
        dictgen::InsensitiveStr::Ascii("e"),
        dictgen::InsensitiveStr::Ascii("ig"),
        dictgen::InsensitiveStr::Ascii("igs"),
    ],
    values: &[&["than"], &["thankyou"], &["then"], &["thing"], &["things"]],
    range: 1..=5,
};

static WORD_THI_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_THI_CHILDREN),
    value: None,
};

pub static WORD_THI_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("aland"),
        dictgen::InsensitiveStr::Ascii("er"),
        dictgen::InsensitiveStr::Ascii("estic"),
        dictgen::InsensitiveStr::Ascii("ests"),
        dictgen::InsensitiveStr::Ascii("gn"),
        dictgen::InsensitiveStr::Ascii("gns"),
        dictgen::InsensitiveStr::Ascii("gsn"),
        dictgen::InsensitiveStr::Ascii("kn"),
        dictgen::InsensitiveStr::Ascii("kning"),
        dictgen::InsensitiveStr::Ascii("kns"),
        dictgen::InsensitiveStr::Ascii("rites"),
        dictgen::InsensitiveStr::Ascii("rldy"),
        dictgen::InsensitiveStr::Ascii("rlling"),
        dictgen::InsensitiveStr::Ascii("rstay"),
        dictgen::InsensitiveStr::Ascii("rteeen"),
        dictgen::InsensitiveStr::Ascii("rten"),
        dictgen::InsensitiveStr::Ascii("rtsy"),
        dictgen::InsensitiveStr::Ascii("unk"),
    ],
    values: &[
        &["thailand"],
        &["their"],
        &["theistic"],
        &["theists"],
        &["thing"],
        &["things"],
        &["things"],
        &["think"],
        &["thinking"],
        &["thinks"],
        &["thirties"],
        &["thirdly"],
        &["thrilling"],
        &["thirsty"],
        &["thirteen"],
        &["thirteen"],
        &["thirsty"],
        &["think"],
    ],
    range: 2..=6,
};

static WORD_THG_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_THG_CHILDREN),
    value: None,
};

pub static WORD_THG_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("at"),
        dictgen::InsensitiveStr::Ascii("e"),
    ],
    values: &[&["that"], &["the"]],
    range: 1..=2,
};

static WORD_THE_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_THE_CHILDREN),
    value: None,
};

static WORD_THE_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    Some(&WORD_THEA_NODE),
    None,
    None,
    None,
    Some(&WORD_THEE_NODE),
    None,
    None,
    None,
    Some(&WORD_THEI_NODE),
    None,
    None,
    None,
    Some(&WORD_THEM_NODE),
    None,
    Some(&WORD_THEO_NODE),
    None,
    None,
    Some(&WORD_THER_NODE),
    Some(&WORD_THES_NODE),
    Some(&WORD_THET_NODE),
    None,
    None,
    None,
    None,
    None,
    None,
];

static WORD_THET_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_THET_CHILDREN),
    value: None,
};

pub static WORD_THET_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("ering")],
    values: &[&["tethering"]],
    range: 5..=5,
};

static WORD_THES_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_THES_CHILDREN),
    value: None,
};

pub static WORD_THES_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("itic"),
        dictgen::InsensitiveStr::Ascii("its"),
    ],
    values: &[&["theistic"], &["theists"]],
    range: 3..=4,
};

static WORD_THER_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_THER_CHILDREN),
    value: Some(&["there", "their", "the"]),
};

pub static WORD_THER_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("after"),
        dictgen::InsensitiveStr::Ascii("apautic"),
        dictgen::InsensitiveStr::Ascii("apetic"),
        dictgen::InsensitiveStr::Ascii("apeudic"),
        dictgen::InsensitiveStr::Ascii("apeutisch"),
        dictgen::InsensitiveStr::Ascii("apeutuc"),
        dictgen::InsensitiveStr::Ascii("aphy"),
        dictgen::InsensitiveStr::Ascii("apuetic"),
        dictgen::InsensitiveStr::Ascii("aupetic"),
        dictgen::InsensitiveStr::Ascii("by"),
        dictgen::InsensitiveStr::Ascii("eaputic"),
        dictgen::InsensitiveStr::Ascii("efo"),
        dictgen::InsensitiveStr::Ascii("efoer"),
        dictgen::InsensitiveStr::Ascii("efour"),
        dictgen::InsensitiveStr::Ascii("eian"),
        dictgen::InsensitiveStr::Ascii("eotical"),
        dictgen::InsensitiveStr::Ascii("eotically"),
        dictgen::InsensitiveStr::Ascii("epeutic"),
        dictgen::InsensitiveStr::Ascii("epists"),
        dictgen::InsensitiveStr::Ascii("i"),
        dictgen::InsensitiveStr::Ascii("ien"),
        dictgen::InsensitiveStr::Ascii("ipists"),
        dictgen::InsensitiveStr::Ascii("mastat"),
        dictgen::InsensitiveStr::Ascii("mistat"),
        dictgen::InsensitiveStr::Ascii("modinamics"),
        dictgen::InsensitiveStr::Ascii("modyanmics"),
        dictgen::InsensitiveStr::Ascii("modymamics"),
        dictgen::InsensitiveStr::Ascii("modymanics"),
        dictgen::InsensitiveStr::Ascii("modynaics"),
        dictgen::InsensitiveStr::Ascii("modynamcis"),
        dictgen::InsensitiveStr::Ascii("modynamcs"),
        dictgen::InsensitiveStr::Ascii("modynanics"),
        dictgen::InsensitiveStr::Ascii("modynmaics"),
        dictgen::InsensitiveStr::Ascii("momenter"),
        dictgen::InsensitiveStr::Ascii("momether"),
        dictgen::InsensitiveStr::Ascii("mometor"),
        dictgen::InsensitiveStr::Ascii("mometre"),
        dictgen::InsensitiveStr::Ascii("momiter"),
        dictgen::InsensitiveStr::Ascii("momoter"),
        dictgen::InsensitiveStr::Ascii("momter"),
        dictgen::InsensitiveStr::Ascii("moneter"),
        dictgen::InsensitiveStr::Ascii("mostaat"),
        dictgen::InsensitiveStr::Ascii("nodynamics"),
        dictgen::InsensitiveStr::Ascii("oem"),
        dictgen::InsensitiveStr::Ascii("oetical"),
        dictgen::InsensitiveStr::Ascii("oetically"),
        dictgen::InsensitiveStr::Ascii("oies"),
        dictgen::InsensitiveStr::Ascii("oist"),
        dictgen::InsensitiveStr::Ascii("oists"),
        dictgen::InsensitiveStr::Ascii("omdynamics"),
        dictgen::InsensitiveStr::Ascii("omstat"),
    ],
    values: &[
        &["thereafter"],
        &["therapeutic"],
        &["therapeutic"],
        &["therapeutic"],
        &["therapeutic"],
        &["therapeutic"],
        &["therapy"],
        &["therapeutic"],
        &["therapeutic"],
        &["thereby"],
        &["therapeutic"],
        &["thereof"],
        &["therefor"],
        &["therefor"],
        &["therein"],
        &["theoretical"],
        &["theoretically"],
        &["therapeutic"],
        &["therapists"],
        &["their"],
        &["therein"],
        &["therapists"],
        &["thermostat"],
        &["thermostat"],
        &["thermodynamics"],
        &["thermodynamics"],
        &["thermodynamics"],
        &["thermodynamics"],
        &["thermodynamics"],
        &["thermodynamics"],
        &["thermodynamics"],
        &["thermodynamics"],
        &["thermodynamics"],
        &["thermometer"],
        &["thermometer"],
        &["thermometer"],
        &["thermometer"],
        &["thermometer"],
        &["thermometer"],
        &["thermometer"],
        &["thermometer"],
        &["thermostat"],
        &["thermodynamics"],
        &["theorem"],
        &["theoretical"],
        &["theoretically"],
        &["theories"],
        &["theorist"],
        &["theorists"],
        &["thermodynamics"],
        &["thermostat"],
    ],
    range: 1..=10,
};

static WORD_THEO_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_THEO_CHILDREN),
    value: None,
};

pub static WORD_THEO_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("cracry"),
        dictgen::InsensitiveStr::Ascii("ligical"),
        dictgen::InsensitiveStr::Ascii("logia"),
        dictgen::InsensitiveStr::Ascii("logial"),
        dictgen::InsensitiveStr::Ascii("logicial"),
        dictgen::InsensitiveStr::Ascii("ratical"),
        dictgen::InsensitiveStr::Ascii("ratically"),
        dictgen::InsensitiveStr::Ascii("reticaly"),
        dictgen::InsensitiveStr::Ascii("reticly"),
        dictgen::InsensitiveStr::Ascii("ritical"),
        dictgen::InsensitiveStr::Ascii("ritically"),
        dictgen::InsensitiveStr::Ascii("rits"),
    ],
    values: &[
        &["theocracy"],
        &["theological"],
        &["theological"],
        &["theological"],
        &["theological"],
        &["theoretical"],
        &["theoretically"],
        &["theoretically"],
        &["theoretical"],
        &["theoretical"],
        &["theoretically"],
        &["theorist"],
    ],
    range: 4..=9,
};

static WORD_THEM_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_THEM_CHILDREN),
    value: None,
};

pub static WORD_THEM_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("sef"),
        dictgen::InsensitiveStr::Ascii("selfes"),
        dictgen::InsensitiveStr::Ascii("selfs"),
        dictgen::InsensitiveStr::Ascii("selvs"),
        dictgen::InsensitiveStr::Ascii("sevles"),
        dictgen::InsensitiveStr::Ascii("slef"),
        dictgen::InsensitiveStr::Ascii("sleves"),
        dictgen::InsensitiveStr::Ascii("slves"),
    ],
    values: &[
        &["themself"],
        &["themselves"],
        &["themselves"],
        &["themselves"],
        &["themselves"],
        &["themself"],
        &["themselves"],
        &["themselves"],
    ],
    range: 3..=6,
};

static WORD_THEI_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_THEI_CHILDREN),
    value: None,
};

pub static WORD_THEI_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("f"),
        dictgen::InsensitiveStr::Ascii("sitc"),
        dictgen::InsensitiveStr::Ascii("stc"),
        dictgen::InsensitiveStr::Ascii("ves"),
    ],
    values: &[&["thief"], &["theistic"], &["theistic"], &["thieves"]],
    range: 1..=4,
};

static WORD_THEE_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_THEE_CHILDREN),
    value: None,
};

pub static WORD_THEE_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("se")],
    values: &[&["these"]],
    range: 2..=2,
};

static WORD_THEA_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_THEA_CHILDREN),
    value: None,
};

pub static WORD_THEA_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("rpy"),
        dictgen::InsensitiveStr::Ascii("ther"),
        dictgen::InsensitiveStr::Ascii("thre"),
        dictgen::InsensitiveStr::Ascii("ture"),
    ],
    values: &[&["therapy"], &["theater"], &["theatre"], &["theatre"]],
    range: 3..=4,
};

static WORD_THA_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_THA_CHILDREN),
    value: None,
};

pub static WORD_THA_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("liand"),
        dictgen::InsensitiveStr::Ascii("nkfullly"),
        dictgen::InsensitiveStr::Ascii("nkfuly"),
        dictgen::InsensitiveStr::Ascii("nksgivng"),
        dictgen::InsensitiveStr::Ascii("nkyooou"),
        dictgen::InsensitiveStr::Ascii("nkyoou"),
        dictgen::InsensitiveStr::Ascii("nkyu"),
        dictgen::InsensitiveStr::Ascii("nskgiving"),
        dictgen::InsensitiveStr::Ascii("st"),
    ],
    values: &[
        &["thailand"],
        &["thankfully"],
        &["thankfully"],
        &["thanksgiving"],
        &["thankyou"],
        &["thankyou"],
        &["thankyou"],
        &["thanksgiving"],
        &["that"],
    ],
    range: 2..=9,
};

static WORD_TG_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_TG_CHILDREN),
    value: None,
};

pub static WORD_TG_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("he")],
    values: &[&["the"]],
    range: 2..=2,
};

static WORD_TE_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_TE_CHILDREN),
    value: None,
};

static WORD_TE_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    Some(&WORD_TEA_NODE),
    None,
    Some(&WORD_TEC_NODE),
    None,
    Some(&WORD_TEE_NODE),
    None,
    None,
    Some(&WORD_TEH_NODE),
    None,
    None,
    None,
    Some(&WORD_TEL_NODE),
    Some(&WORD_TEM_NODE),
    Some(&WORD_TEN_NODE),
    None,
    Some(&WORD_TEP_NODE),
    Some(&WORD_TEQ_NODE),
    Some(&WORD_TER_NODE),
    Some(&WORD_TES_NODE),
    None,
    Some(&WORD_TEU_NODE),
    None,
    None,
    Some(&WORD_TEX_NODE),
    None,
    None,
];

static WORD_TEX_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_TEX_CHILDREN),
    value: None,
};

pub static WORD_TEX_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("turers"),
        dictgen::InsensitiveStr::Ascii("utres"),
    ],
    values: &[&["textures"], &["textures"]],
    range: 5..=6,
};

static WORD_TEU_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_TEU_CHILDREN),
    value: None,
};

pub static WORD_TEU_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("sday"),
        dictgen::InsensitiveStr::Ascii("sdays"),
    ],
    values: &[&["tuesday"], &["tuesdays"]],
    range: 4..=5,
};

static WORD_TES_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_TES_CHILDREN),
    value: None,
};

pub static WORD_TES_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("itcle"),
        dictgen::InsensitiveStr::Ascii("itcles"),
        dictgen::InsensitiveStr::Ascii("itfy"),
        dictgen::InsensitiveStr::Ascii("itmony"),
        dictgen::InsensitiveStr::Ascii("tasterone"),
        dictgen::InsensitiveStr::Ascii("testorone"),
        dictgen::InsensitiveStr::Ascii("tice"),
        dictgen::InsensitiveStr::Ascii("ticel"),
        dictgen::InsensitiveStr::Ascii("ticels"),
        dictgen::InsensitiveStr::Ascii("ticlees"),
        dictgen::InsensitiveStr::Ascii("ticlies"),
        dictgen::InsensitiveStr::Ascii("ticlular"),
        dictgen::InsensitiveStr::Ascii("tifiy"),
        dictgen::InsensitiveStr::Ascii("timoney"),
        dictgen::InsensitiveStr::Ascii("tomony"),
    ],
    values: &[
        &["testicle"],
        &["testicles"],
        &["testify"],
        &["testimony"],
        &["testosterone"],
        &["testosterone"],
        &["testicle"],
        &["testicle"],
        &["testicles"],
        &["testicles"],
        &["testicle"],
        &["testicular"],
        &["testify"],
        &["testimony"],
        &["testimony"],
    ],
    range: 4..=9,
};

static WORD_TER_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_TER_CHILDREN),
    value: None,
};

static WORD_TER_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    Some(&WORD_TERM_NODE),
    None,
    Some(&WORD_TERO_NODE),
    None,
    None,
    Some(&WORD_TERR_NODE),
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
];

static WORD_TERR_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_TERR_CHILDREN),
    value: None,
};

pub static WORD_TERR_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("abyte"),
        dictgen::InsensitiveStr::Ascii("atorial"),
        dictgen::InsensitiveStr::Ascii("atories"),
        dictgen::InsensitiveStr::Ascii("erists"),
        dictgen::InsensitiveStr::Ascii("estial"),
        dictgen::InsensitiveStr::Ascii("etorial"),
        dictgen::InsensitiveStr::Ascii("etories"),
        dictgen::InsensitiveStr::Ascii("iblely"),
        dictgen::InsensitiveStr::Ascii("ibley"),
        dictgen::InsensitiveStr::Ascii("iblly"),
        dictgen::InsensitiveStr::Ascii("iories"),
        dictgen::InsensitiveStr::Ascii("iory"),
        dictgen::InsensitiveStr::Ascii("irorial"),
        dictgen::InsensitiveStr::Ascii("irories"),
        dictgen::InsensitiveStr::Ascii("iroties"),
        dictgen::InsensitiveStr::Ascii("iroty"),
        dictgen::InsensitiveStr::Ascii("istrial"),
        dictgen::InsensitiveStr::Ascii("itoires"),
        dictgen::InsensitiveStr::Ascii("itoral"),
        dictgen::InsensitiveStr::Ascii("itores"),
        dictgen::InsensitiveStr::Ascii("itoriella"),
        dictgen::InsensitiveStr::Ascii("itoris"),
        dictgen::InsensitiveStr::Ascii("itorist"),
        dictgen::InsensitiveStr::Ascii("itority"),
        dictgen::InsensitiveStr::Ascii("itorrial"),
        dictgen::InsensitiveStr::Ascii("itorries"),
        dictgen::InsensitiveStr::Ascii("itorry"),
        dictgen::InsensitiveStr::Ascii("itoy"),
        dictgen::InsensitiveStr::Ascii("oist"),
        dictgen::InsensitiveStr::Ascii("orisim"),
        dictgen::InsensitiveStr::Ascii("oristas"),
        dictgen::InsensitiveStr::Ascii("oristes"),
        dictgen::InsensitiveStr::Ascii("orities"),
        dictgen::InsensitiveStr::Ascii("orits"),
        dictgen::InsensitiveStr::Ascii("orsim"),
        dictgen::InsensitiveStr::Ascii("orsits"),
        dictgen::InsensitiveStr::Ascii("otorial"),
        dictgen::InsensitiveStr::Ascii("otories"),
        dictgen::InsensitiveStr::Ascii("urists"),
    ],
    values: &[
        &["terabyte"],
        &["territorial"],
        &["territories"],
        &["terrorists"],
        &["terrestrial"],
        &["territorial"],
        &["territories"],
        &["terribly"],
        &["terribly"],
        &["terribly"],
        &["territories"],
        &["territory"],
        &["territorial"],
        &["territories"],
        &["territories"],
        &["territory"],
        &["territorial"],
        &["territories"],
        &["territorial"],
        &["territories"],
        &["territorial"],
        &["territories"],
        &["terrorist"],
        &["territory"],
        &["territorial"],
        &["territories"],
        &["territory"],
        &["territory"],
        &["terrorist"],
        &["terrorism"],
        &["terrorists"],
        &["terrorists"],
        &["territories"],
        &["terrorist"],
        &["terrorism"],
        &["terrorists"],
        &["territorial"],
        &["territories"],
        &["terrorists"],
    ],
    range: 4..=9,
};

static WORD_TERO_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_TERO_CHILDREN),
    value: None,
};

pub static WORD_TERO_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("rrism"),
        dictgen::InsensitiveStr::Ascii("rrist"),
        dictgen::InsensitiveStr::Ascii("rrists"),
    ],
    values: &[&["terrorism"], &["terrorist"], &["terrorists"]],
    range: 5..=6,
};

static WORD_TERM_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_TERM_CHILDREN),
    value: None,
};

pub static WORD_TERM_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("anator"),
        dictgen::InsensitiveStr::Ascii("anology"),
        dictgen::InsensitiveStr::Ascii("endous"),
        dictgen::InsensitiveStr::Ascii("endously"),
        dictgen::InsensitiveStr::Ascii("ianls"),
        dictgen::InsensitiveStr::Ascii("iantor"),
        dictgen::InsensitiveStr::Ascii("igator"),
        dictgen::InsensitiveStr::Ascii("inacion"),
        dictgen::InsensitiveStr::Ascii("inaison"),
        dictgen::InsensitiveStr::Ascii("inales"),
        dictgen::InsensitiveStr::Ascii("inalis"),
        dictgen::InsensitiveStr::Ascii("inalogy"),
        dictgen::InsensitiveStr::Ascii("inarla"),
        dictgen::InsensitiveStr::Ascii("inarlo"),
        dictgen::InsensitiveStr::Ascii("inaron"),
        dictgen::InsensitiveStr::Ascii("inater"),
        dictgen::InsensitiveStr::Ascii("inatior"),
        dictgen::InsensitiveStr::Ascii("inato"),
        dictgen::InsensitiveStr::Ascii("inatorn"),
        dictgen::InsensitiveStr::Ascii("inilogy"),
        dictgen::InsensitiveStr::Ascii("inolgy"),
        dictgen::InsensitiveStr::Ascii("inoligy"),
    ],
    values: &[
        &["terminator"],
        &["terminology"],
        &["tremendous"],
        &["tremendously"],
        &["terminals"],
        &["terminator"],
        &["terminator"],
        &["termination"],
        &["termination"],
        &["terminals"],
        &["terminals"],
        &["terminology"],
        &["terminal"],
        &["terminal"],
        &["terminator"],
        &["terminator"],
        &["terminator"],
        &["termination"],
        &["termination"],
        &["terminology"],
        &["terminology"],
        &["terminology"],
    ],
    range: 5..=8,
};

static WORD_TEQ_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_TEQ_CHILDREN),
    value: None,
};

pub static WORD_TEQ_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("uilia"),
        dictgen::InsensitiveStr::Ascii("ulia"),
    ],
    values: &[&["tequila"], &["tequila"]],
    range: 4..=5,
};

static WORD_TEP_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_TEP_CHILDREN),
    value: None,
};

pub static WORD_TEP_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("morarily")],
    values: &[&["temporarily"]],
    range: 8..=8,
};

static WORD_TEN_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_TEN_CHILDREN),
    value: None,
};

pub static WORD_TEN_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("acitiy"),
        dictgen::InsensitiveStr::Ascii("acle"),
        dictgen::InsensitiveStr::Ascii("acles"),
        dictgen::InsensitiveStr::Ascii("actiy"),
        dictgen::InsensitiveStr::Ascii("caity"),
        dictgen::InsensitiveStr::Ascii("dacy"),
        dictgen::InsensitiveStr::Ascii("dancies"),
        dictgen::InsensitiveStr::Ascii("dancy"),
        dictgen::InsensitiveStr::Ascii("dence"),
        dictgen::InsensitiveStr::Ascii("dencias"),
        dictgen::InsensitiveStr::Ascii("dencije"),
        dictgen::InsensitiveStr::Ascii("densies"),
        dictgen::InsensitiveStr::Ascii("dincies"),
        dictgen::InsensitiveStr::Ascii("gentially"),
        dictgen::InsensitiveStr::Ascii("siones"),
        dictgen::InsensitiveStr::Ascii("sionors"),
        dictgen::InsensitiveStr::Ascii("tacel"),
        dictgen::InsensitiveStr::Ascii("tacels"),
        dictgen::InsensitiveStr::Ascii("tacls"),
        dictgen::InsensitiveStr::Ascii("tacreul"),
        dictgen::InsensitiveStr::Ascii("tacuel"),
        dictgen::InsensitiveStr::Ascii("talce"),
        dictgen::InsensitiveStr::Ascii("talces"),
    ],
    values: &[
        &["tenacity"],
        &["tentacle"],
        &["tentacles"],
        &["tenacity"],
        &["tenacity"],
        &["tendency"],
        &["tendencies"],
        &["tendency"],
        &["tendencies"],
        &["tendencies"],
        &["tendencies"],
        &["tendencies"],
        &["tendencies"],
        &["tangentially"],
        &["tensions"],
        &["tensions"],
        &["tentacle"],
        &["tentacles"],
        &["tentacles"],
        &["tentacle"],
        &["tentacle"],
        &["tentacle"],
        &["tentacles"],
    ],
    range: 4..=9,
};

static WORD_TEM_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_TEM_CHILDREN),
    value: None,
};

pub static WORD_TEM_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("afight"),
        dictgen::InsensitiveStr::Ascii("afights"),
        dictgen::InsensitiveStr::Ascii("eprature"),
        dictgen::InsensitiveStr::Ascii("epratures"),
        dictgen::InsensitiveStr::Ascii("epst"),
        dictgen::InsensitiveStr::Ascii("erature"),
        dictgen::InsensitiveStr::Ascii("palrs"),
        dictgen::InsensitiveStr::Ascii("palte"),
        dictgen::InsensitiveStr::Ascii("paltes"),
        dictgen::InsensitiveStr::Ascii("parament"),
        dictgen::InsensitiveStr::Ascii("parate"),
        dictgen::InsensitiveStr::Ascii("parature"),
        dictgen::InsensitiveStr::Ascii("paratures"),
        dictgen::InsensitiveStr::Ascii("parement"),
        dictgen::InsensitiveStr::Ascii("pearture"),
        dictgen::InsensitiveStr::Ascii("pels"),
        dictgen::InsensitiveStr::Ascii("peramant"),
        dictgen::InsensitiveStr::Ascii("perarily"),
        dictgen::InsensitiveStr::Ascii("peratue"),
        dictgen::InsensitiveStr::Ascii("peratues"),
        dictgen::InsensitiveStr::Ascii("peraturas"),
        dictgen::InsensitiveStr::Ascii("peraturs"),
        dictgen::InsensitiveStr::Ascii("peratuur"),
        dictgen::InsensitiveStr::Ascii("perement"),
        dictgen::InsensitiveStr::Ascii("permeant"),
        dictgen::InsensitiveStr::Ascii("perment"),
        dictgen::InsensitiveStr::Ascii("pertaure"),
        dictgen::InsensitiveStr::Ascii("perture"),
        dictgen::InsensitiveStr::Ascii("pets"),
        dictgen::InsensitiveStr::Ascii("plaras"),
        dictgen::InsensitiveStr::Ascii("plares"),
        dictgen::InsensitiveStr::Ascii("plarios"),
        dictgen::InsensitiveStr::Ascii("plarius"),
        dictgen::InsensitiveStr::Ascii("plas"),
        dictgen::InsensitiveStr::Ascii("plats"),
        dictgen::InsensitiveStr::Ascii("pleos"),
        dictgen::InsensitiveStr::Ascii("plers"),
        dictgen::InsensitiveStr::Ascii("poraily"),
        dictgen::InsensitiveStr::Ascii("porairly"),
        dictgen::InsensitiveStr::Ascii("porali"),
        dictgen::InsensitiveStr::Ascii("poraraly"),
        dictgen::InsensitiveStr::Ascii("porarilly"),
        dictgen::InsensitiveStr::Ascii("porarity"),
        dictgen::InsensitiveStr::Ascii("porarly"),
        dictgen::InsensitiveStr::Ascii("poray"),
        dictgen::InsensitiveStr::Ascii("prary"),
        dictgen::InsensitiveStr::Ascii("preature"),
        dictgen::InsensitiveStr::Ascii("preatures"),
        dictgen::InsensitiveStr::Ascii("proarily"),
        dictgen::InsensitiveStr::Ascii("pset"),
        dictgen::InsensitiveStr::Ascii("ptating"),
        dictgen::InsensitiveStr::Ascii("ptetion"),
        dictgen::InsensitiveStr::Ascii("purature"),
        dictgen::InsensitiveStr::Ascii("puratures"),
    ],
    values: &[
        &["teamfight"],
        &["teamfights"],
        &["temperature"],
        &["temperatures"],
        &["tempest"],
        &["temperature"],
        &["templars"],
        &["template"],
        &["templates"],
        &["temperament"],
        &["temperate"],
        &["temperature"],
        &["temperatures"],
        &["temperament"],
        &["temperatures"],
        &["temples"],
        &["temperament"],
        &["temporarily"],
        &["temperature"],
        &["temperatures"],
        &["temperatures"],
        &["temperatures"],
        &["temperature"],
        &["temperament"],
        &["temperament"],
        &["temperament"],
        &["temperature"],
        &["temperature"],
        &["tempest"],
        &["templars"],
        &["templars"],
        &["templars"],
        &["templars"],
        &["templars"],
        &["templates"],
        &["temples"],
        &["temples"],
        &["temporarily"],
        &["temporarily"],
        &["temporarily"],
        &["temporarily"],
        &["temporarily"],
        &["temporarily"],
        &["temporary"],
        &["temporary"],
        &["temporary"],
        &["temperature"],
        &["temperatures"],
        &["temporarily"],
        &["tempest"],
        &["temptation"],
        &["temptation"],
        &["temperature"],
        &["temperatures"],
    ],
    range: 4..=9,
};

static WORD_TEL_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_TEL_CHILDREN),
    value: None,
};

pub static WORD_TEL_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("aportation"),
        dictgen::InsensitiveStr::Ascii("egrah"),
        dictgen::InsensitiveStr::Ascii("egrapgh"),
        dictgen::InsensitiveStr::Ascii("egrpah"),
        dictgen::InsensitiveStr::Ascii("elevision"),
        dictgen::InsensitiveStr::Ascii("eporing"),
        dictgen::InsensitiveStr::Ascii("eportaion"),
        dictgen::InsensitiveStr::Ascii("eportating"),
        dictgen::InsensitiveStr::Ascii("eportato"),
        dictgen::InsensitiveStr::Ascii("eportaton"),
        dictgen::InsensitiveStr::Ascii("eportion"),
        dictgen::InsensitiveStr::Ascii("eprotation"),
        dictgen::InsensitiveStr::Ascii("eproting"),
        dictgen::InsensitiveStr::Ascii("evesion"),
        dictgen::InsensitiveStr::Ascii("evisivo"),
        dictgen::InsensitiveStr::Ascii("evsion"),
        dictgen::InsensitiveStr::Ascii("iportation"),
        dictgen::InsensitiveStr::Ascii("oportation"),
        dictgen::InsensitiveStr::Ascii("phony"),
    ],
    values: &[
        &["teleportation"],
        &["telegraph"],
        &["telegraph"],
        &["telegraph"],
        &["television"],
        &["teleporting"],
        &["teleportation"],
        &["teleportation"],
        &["teleportation"],
        &["teleportation"],
        &["teleporting"],
        &["teleportation"],
        &["teleporting"],
        &["television"],
        &["television"],
        &["television"],
        &["teleportation"],
        &["teleportation"],
        &["telephony"],
    ],
    range: 5..=10,
};

static WORD_TEH_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_TEH_CHILDREN),
    value: Some(&["the"]),
};

pub static WORD_TEH_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("cies"),
        dictgen::InsensitiveStr::Ascii("nically"),
        dictgen::InsensitiveStr::Ascii("tering"),
        dictgen::InsensitiveStr::Ascii("y"),
    ],
    values: &[&["techies"], &["ethnically"], &["tethering"], &["they"]],
    range: 1..=7,
};

static WORD_TEE_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_TEE_CHILDREN),
    value: None,
};

pub static WORD_TEE_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("angers"),
        dictgen::InsensitiveStr::Ascii("nages"),
    ],
    values: &[&["teenagers"], &["teenagers"]],
    range: 5..=6,
};

static WORD_TEC_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_TEC_CHILDREN),
    value: None,
};

pub static WORD_TEC_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("hanically"),
        dictgen::InsensitiveStr::Ascii("heis"),
        dictgen::InsensitiveStr::Ascii("hician"),
        dictgen::InsensitiveStr::Ascii("hicians"),
        dictgen::InsensitiveStr::Ascii("hincality"),
        dictgen::InsensitiveStr::Ascii("hincally"),
        dictgen::InsensitiveStr::Ascii("hincian"),
        dictgen::InsensitiveStr::Ascii("hincians"),
        dictgen::InsensitiveStr::Ascii("hinican"),
        dictgen::InsensitiveStr::Ascii("hiniques"),
        dictgen::InsensitiveStr::Ascii("hinque"),
        dictgen::InsensitiveStr::Ascii("hinques"),
        dictgen::InsensitiveStr::Ascii("hmological"),
        dictgen::InsensitiveStr::Ascii("hncially"),
        dictgen::InsensitiveStr::Ascii("hnicain"),
        dictgen::InsensitiveStr::Ascii("hnicallity"),
        dictgen::InsensitiveStr::Ascii("hnicalty"),
        dictgen::InsensitiveStr::Ascii("hnicaly"),
        dictgen::InsensitiveStr::Ascii("hnicans"),
        dictgen::InsensitiveStr::Ascii("hnichan"),
        dictgen::InsensitiveStr::Ascii("hnichian"),
        dictgen::InsensitiveStr::Ascii("hnicials"),
        dictgen::InsensitiveStr::Ascii("hnicien"),
        dictgen::InsensitiveStr::Ascii("hniciens"),
        dictgen::InsensitiveStr::Ascii("hnicion"),
        dictgen::InsensitiveStr::Ascii("hniqe"),
        dictgen::InsensitiveStr::Ascii("hnitian"),
        dictgen::InsensitiveStr::Ascii("hnitians"),
        dictgen::InsensitiveStr::Ascii("hnnology"),
        dictgen::InsensitiveStr::Ascii("hnolgy"),
        dictgen::InsensitiveStr::Ascii("hnoligical"),
        dictgen::InsensitiveStr::Ascii("hnoligically"),
        dictgen::InsensitiveStr::Ascii("hnologia"),
        dictgen::InsensitiveStr::Ascii("hnologial"),
        dictgen::InsensitiveStr::Ascii("hnologicaly"),
        dictgen::InsensitiveStr::Ascii("hnologicially"),
        dictgen::InsensitiveStr::Ascii("hnologicly"),
        dictgen::InsensitiveStr::Ascii("hnqiues"),
        dictgen::InsensitiveStr::Ascii("honlogical"),
        dictgen::InsensitiveStr::Ascii("htician"),
        dictgen::InsensitiveStr::Ascii("hticians"),
    ],
    values: &[
        &["mechanically"],
        &["techies"],
        &["technician"],
        &["technicians"],
        &["technicality"],
        &["technically"],
        &["technician"],
        &["technicians"],
        &["technician"],
        &["techniques"],
        &["technique"],
        &["techniques"],
        &["technological"],
        &["technically"],
        &["technician"],
        &["technically"],
        &["technicality"],
        &["technically"],
        &["technicians"],
        &["technician"],
        &["technician"],
        &["technicians"],
        &["technician"],
        &["technicians"],
        &["technician"],
        &["technique"],
        &["technician"],
        &["technicians"],
        &["technology"],
        &["technology"],
        &["technological"],
        &["technologically"],
        &["technological"],
        &["technological"],
        &["technologically"],
        &["technologically"],
        &["technological"],
        &["techniques"],
        &["technological"],
        &["technician"],
        &["technicians"],
    ],
    range: 4..=13,
};

static WORD_TEA_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_TEA_CHILDREN),
    value: None,
};

pub static WORD_TEA_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ched"),
        dictgen::InsensitiveStr::Ascii("mfighs"),
        dictgen::InsensitiveStr::Ascii("mfighters"),
        dictgen::InsensitiveStr::Ascii("mfigt"),
        dictgen::InsensitiveStr::Ascii("mfigth"),
        dictgen::InsensitiveStr::Ascii("mfigths"),
        dictgen::InsensitiveStr::Ascii("mifght"),
        dictgen::InsensitiveStr::Ascii("mifghts"),
        dictgen::InsensitiveStr::Ascii("mpseak"),
        dictgen::InsensitiveStr::Ascii("mspeack"),
        dictgen::InsensitiveStr::Ascii("mspek"),
        dictgen::InsensitiveStr::Ascii("ncity"),
        dictgen::InsensitiveStr::Ascii("nsylvania"),
        dictgen::InsensitiveStr::Ascii("psoon"),
        dictgen::InsensitiveStr::Ascii("spon"),
        dictgen::InsensitiveStr::Ascii("spooon"),
    ],
    values: &[
        &["taught"],
        &["teamfights"],
        &["teamfights"],
        &["teamfight"],
        &["teamfight"],
        &["teamfights"],
        &["teamfight"],
        &["teamfights"],
        &["teamspeak"],
        &["teamspeak"],
        &["teamspeak"],
        &["tenacity"],
        &["transylvania"],
        &["teaspoon"],
        &["teaspoon"],
        &["teaspoon"],
    ],
    range: 4..=9,
};

static WORD_TA_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_TA_CHILDREN),
    value: None,
};

pub static WORD_TA_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("bacco"),
        dictgen::InsensitiveStr::Ascii("belspoon"),
        dictgen::InsensitiveStr::Ascii("belspoons"),
        dictgen::InsensitiveStr::Ascii("blepsoons"),
        dictgen::InsensitiveStr::Ascii("blespon"),
        dictgen::InsensitiveStr::Ascii("blespons"),
        dictgen::InsensitiveStr::Ascii("blespooon"),
        dictgen::InsensitiveStr::Ascii("blespooons"),
        dictgen::InsensitiveStr::Ascii("blesppon"),
        dictgen::InsensitiveStr::Ascii("blesppons"),
        dictgen::InsensitiveStr::Ascii("citcally"),
        dictgen::InsensitiveStr::Ascii("cticallity"),
        dictgen::InsensitiveStr::Ascii("cticaly"),
        dictgen::InsensitiveStr::Ascii("cticas"),
        dictgen::InsensitiveStr::Ascii("cticts"),
        dictgen::InsensitiveStr::Ascii("cticus"),
        dictgen::InsensitiveStr::Ascii("gliate"),
        dictgen::InsensitiveStr::Ascii("hn"),
        dictgen::InsensitiveStr::Ascii("hnkyou"),
        dictgen::InsensitiveStr::Ascii("ht"),
        dictgen::InsensitiveStr::Ascii("ilban"),
        dictgen::InsensitiveStr::Ascii("ilgateing"),
        dictgen::InsensitiveStr::Ascii("ilgatting"),
        dictgen::InsensitiveStr::Ascii("ilord"),
        dictgen::InsensitiveStr::Ascii("ilsman"),
        dictgen::InsensitiveStr::Ascii("iwanee"),
        dictgen::InsensitiveStr::Ascii("iwanesse"),
        dictgen::InsensitiveStr::Ascii("lbian"),
        dictgen::InsensitiveStr::Ascii("lekd"),
        dictgen::InsensitiveStr::Ascii("ligate"),
        dictgen::InsensitiveStr::Ascii("ligating"),
        dictgen::InsensitiveStr::Ascii("liored"),
        dictgen::InsensitiveStr::Ascii("llents"),
        dictgen::InsensitiveStr::Ascii("llets"),
        dictgen::InsensitiveStr::Ascii("lsiman"),
        dictgen::InsensitiveStr::Ascii("nenhill"),
        dictgen::InsensitiveStr::Ascii("ngeld"),
        dictgen::InsensitiveStr::Ascii("ngencially"),
        dictgen::InsensitiveStr::Ascii("ngenitally"),
        dictgen::InsensitiveStr::Ascii("ngentialy"),
        dictgen::InsensitiveStr::Ascii("ngientally"),
        dictgen::InsensitiveStr::Ascii("nlged"),
        dictgen::InsensitiveStr::Ascii("nnheill"),
        dictgen::InsensitiveStr::Ascii("ntrumers"),
        dictgen::InsensitiveStr::Ascii("nturms"),
        dictgen::InsensitiveStr::Ascii("pitude"),
        dictgen::InsensitiveStr::Ascii("rgetd"),
        dictgen::InsensitiveStr::Ascii("rgetted"),
        dictgen::InsensitiveStr::Ascii("rgetting"),
        dictgen::InsensitiveStr::Ascii("ryvon"),
        dictgen::InsensitiveStr::Ascii("sliman"),
        dictgen::InsensitiveStr::Ascii("st"),
        dictgen::InsensitiveStr::Ascii("th"),
        dictgen::InsensitiveStr::Ascii("too"),
        dictgen::InsensitiveStr::Ascii("ttooes"),
        dictgen::InsensitiveStr::Ascii("ttooos"),
        dictgen::InsensitiveStr::Ascii("wainese"),
        dictgen::InsensitiveStr::Ascii("wianese"),
        dictgen::InsensitiveStr::Ascii("xanomic"),
        dictgen::InsensitiveStr::Ascii("xanomy"),
    ],
    values: &[
        &["tobacco"],
        &["tablespoon"],
        &["tablespoons"],
        &["tablespoons"],
        &["tablespoon"],
        &["tablespoons"],
        &["tablespoon"],
        &["tablespoon"],
        &["tablespoon"],
        &["tablespoons"],
        &["tactically"],
        &["tactically"],
        &["tactically"],
        &["tactics"],
        &["tactics"],
        &["tactics"],
        &["tailgate"],
        &["than"],
        &["thankyou"],
        &["that"],
        &["taliban"],
        &["tailgating"],
        &["tailgating"],
        &["tailored"],
        &["talisman"],
        &["taiwanese"],
        &["taiwanese"],
        &["taliban"],
        &["talked"],
        &["tailgate"],
        &["tailgating"],
        &["tailored"],
        &["tallest"],
        &["tallest"],
        &["talisman"],
        &["tannehill"],
        &["tangled"],
        &["tangentially"],
        &["tangentially"],
        &["tangentially"],
        &["tangentially"],
        &["tangled"],
        &["tannehill"],
        &["tantrums"],
        &["tantrums"],
        &["aptitude"],
        &["targeted"],
        &["targeted"],
        &["targeting"],
        &["trayvon"],
        &["talisman"],
        &["taste"],
        &["that"],
        &["tattoo"],
        &["tattoos"],
        &["tattoos"],
        &["taiwanese"],
        &["taiwanese"],
        &["taxonomic"],
        &["taxonomy"],
    ],
    range: 2..=10,
};

static WORD_S_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_S_CHILDREN),
    value: None,
};

static WORD_S_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    Some(&WORD_SA_NODE),
    None,
    Some(&WORD_SC_NODE),
    None,
    Some(&WORD_SE_NODE),
    None,
    None,
    Some(&WORD_SH_NODE),
    Some(&WORD_SI_NODE),
    None,
    Some(&WORD_SK_NODE),
    Some(&WORD_SL_NODE),
    Some(&WORD_SM_NODE),
    Some(&WORD_SN_NODE),
    Some(&WORD_SO_NODE),
    Some(&WORD_SP_NODE),
    Some(&WORD_SQ_NODE),
    Some(&WORD_SR_NODE),
    None,
    Some(&WORD_ST_NODE),
    Some(&WORD_SU_NODE),
    None,
    Some(&WORD_SW_NODE),
    None,
    Some(&WORD_SY_NODE),
    None,
];

static WORD_SY_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_SY_CHILDREN),
    value: None,
};

static WORD_SY_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    Some(&WORD_SYA_NODE),
    None,
    Some(&WORD_SYC_NODE),
    Some(&WORD_SYD_NODE),
    None,
    None,
    None,
    None,
    Some(&WORD_SYI_NODE),
    None,
    Some(&WORD_SYK_NODE),
    Some(&WORD_SYL_NODE),
    Some(&WORD_SYM_NODE),
    Some(&WORD_SYN_NODE),
    None,
    Some(&WORD_SYP_NODE),
    None,
    Some(&WORD_SYR_NODE),
    Some(&WORD_SYS_NODE),
    Some(&WORD_SYT_NODE),
    None,
    None,
    None,
    None,
    None,
    None,
];

static WORD_SYT_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_SYT_CHILDREN),
    value: None,
};

pub static WORD_SYT_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("em"),
        dictgen::InsensitiveStr::Ascii("le"),
        dictgen::InsensitiveStr::Ascii("lish"),
        dictgen::InsensitiveStr::Ascii("rofoam"),
    ],
    values: &[&["system"], &["style"], &["stylish"], &["styrofoam"]],
    range: 2..=6,
};

static WORD_SYS_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_SYS_CHILDREN),
    value: None,
};

pub static WORD_SYS_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("admn"),
        dictgen::InsensitiveStr::Ascii("amdin"),
        dictgen::InsensitiveStr::Ascii("damin"),
        dictgen::InsensitiveStr::Ascii("matically"),
        dictgen::InsensitiveStr::Ascii("tamatic"),
        dictgen::InsensitiveStr::Ascii("tematicaly"),
        dictgen::InsensitiveStr::Ascii("tematiclly"),
        dictgen::InsensitiveStr::Ascii("tematisch"),
        dictgen::InsensitiveStr::Ascii("temc"),
        dictgen::InsensitiveStr::Ascii("temetic"),
        dictgen::InsensitiveStr::Ascii("temetically"),
        dictgen::InsensitiveStr::Ascii("temisch"),
        dictgen::InsensitiveStr::Ascii("timatic"),
        dictgen::InsensitiveStr::Ascii("timatically"),
    ],
    values: &[
        &["sysadmin"],
        &["sysadmin"],
        &["sysadmin"],
        &["systematically"],
        &["systematic"],
        &["systematically"],
        &["systematically"],
        &["systematic"],
        &["systemic"],
        &["systematic"],
        &["systematically"],
        &["systemic"],
        &["systematic"],
        &["systematically"],
    ],
    range: 4..=11,
};

static WORD_SYR_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_SYR_CHILDREN),
    value: None,
};

pub static WORD_SYR_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("acue"),
        dictgen::InsensitiveStr::Ascii("acusae"),
        dictgen::InsensitiveStr::Ascii("ains"),
        dictgen::InsensitiveStr::Ascii("ap"),
        dictgen::InsensitiveStr::Ascii("aucse"),
        dictgen::InsensitiveStr::Ascii("cause"),
        dictgen::InsensitiveStr::Ascii("ingae"),
        dictgen::InsensitiveStr::Ascii("ingue"),
    ],
    values: &[
        &["syracuse"],
        &["syracuse"],
        &["syrians"],
        &["syrup"],
        &["syracuse"],
        &["syracuse"],
        &["syringe"],
        &["syringe"],
    ],
    range: 2..=6,
};

static WORD_SYP_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_SYP_CHILDREN),
    value: None,
};

pub static WORD_SYP_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("hyllis"),
        dictgen::InsensitiveStr::Ascii("mathetic"),
        dictgen::InsensitiveStr::Ascii("mathize"),
        dictgen::InsensitiveStr::Ascii("mathy"),
        dictgen::InsensitiveStr::Ascii("mtom"),
        dictgen::InsensitiveStr::Ascii("mtoms"),
        dictgen::InsensitiveStr::Ascii("nosis"),
    ],
    values: &[
        &["syphilis"],
        &["sympathetic"],
        &["sympathize"],
        &["sympathy"],
        &["symptom"],
        &["symptoms"],
        &["synopsis"],
    ],
    range: 4..=8,
};

static WORD_SYN_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_SYN_CHILDREN),
    value: None,
};

pub static WORD_SYN_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("agouge"),
        dictgen::InsensitiveStr::Ascii("chornously"),
        dictgen::InsensitiveStr::Ascii("cronization"),
        dictgen::InsensitiveStr::Ascii("cronous"),
        dictgen::InsensitiveStr::Ascii("cronously"),
        dictgen::InsensitiveStr::Ascii("dacite"),
        dictgen::InsensitiveStr::Ascii("diacte"),
        dictgen::InsensitiveStr::Ascii("egry"),
        dictgen::InsensitiveStr::Ascii("idcate"),
        dictgen::InsensitiveStr::Ascii("omymous"),
        dictgen::InsensitiveStr::Ascii("omynous"),
        dictgen::InsensitiveStr::Ascii("omyns"),
        dictgen::InsensitiveStr::Ascii("onamous"),
        dictgen::InsensitiveStr::Ascii("onimous"),
        dictgen::InsensitiveStr::Ascii("onmyous"),
        dictgen::InsensitiveStr::Ascii("onmys"),
        dictgen::InsensitiveStr::Ascii("onomous"),
        dictgen::InsensitiveStr::Ascii("onomy"),
        dictgen::InsensitiveStr::Ascii("onumous"),
        dictgen::InsensitiveStr::Ascii("onymes"),
        dictgen::InsensitiveStr::Ascii("onymis"),
        dictgen::InsensitiveStr::Ascii("onymns"),
        dictgen::InsensitiveStr::Ascii("onymos"),
        dictgen::InsensitiveStr::Ascii("onymus"),
        dictgen::InsensitiveStr::Ascii("onynous"),
        dictgen::InsensitiveStr::Ascii("opsies"),
        dictgen::InsensitiveStr::Ascii("oynm"),
        dictgen::InsensitiveStr::Ascii("oynms"),
        dictgen::InsensitiveStr::Ascii("phony"),
        dictgen::InsensitiveStr::Ascii("posis"),
        dictgen::InsensitiveStr::Ascii("tehsis"),
        dictgen::InsensitiveStr::Ascii("tehtic"),
        dictgen::InsensitiveStr::Ascii("tethic"),
        dictgen::InsensitiveStr::Ascii("thesasia"),
        dictgen::InsensitiveStr::Ascii("thesesia"),
    ],
    values: &[
        &["synagogue"],
        &["synchronously"],
        &["synchronization"],
        &["synchronous"],
        &["synchronously"],
        &["syndicate"],
        &["syndicate"],
        &["synergy"],
        &["syndicate"],
        &["synonymous"],
        &["synonymous"],
        &["synonyms"],
        &["synonymous"],
        &["synonymous"],
        &["synonymous"],
        &["synonyms"],
        &["synonymous"],
        &["synonym"],
        &["synonymous"],
        &["synonyms"],
        &["synonyms"],
        &["synonyms"],
        &["synonymous"],
        &["synonyms"],
        &["synonymous"],
        &["synopsis"],
        &["synonym"],
        &["synonyms"],
        &["symphony"],
        &["synopsis"],
        &["synthesis"],
        &["synthetic"],
        &["synthetic"],
        &["synthesis"],
        &["synthesis"],
    ],
    range: 4..=11,
};

static WORD_SYM_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_SYM_CHILDREN),
    value: None,
};

pub static WORD_SYM_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("apthetic"),
        dictgen::InsensitiveStr::Ascii("apthize"),
        dictgen::InsensitiveStr::Ascii("apthizers"),
        dictgen::InsensitiveStr::Ascii("apthy"),
        dictgen::InsensitiveStr::Ascii("boles"),
        dictgen::InsensitiveStr::Ascii("bolisch"),
        dictgen::InsensitiveStr::Ascii("bolisim"),
        dictgen::InsensitiveStr::Ascii("bolsim"),
        dictgen::InsensitiveStr::Ascii("etrical"),
        dictgen::InsensitiveStr::Ascii("etrically"),
        dictgen::InsensitiveStr::Ascii("etry"),
        dictgen::InsensitiveStr::Ascii("ettric"),
        dictgen::InsensitiveStr::Ascii("hpony"),
        dictgen::InsensitiveStr::Ascii("mertical"),
        dictgen::InsensitiveStr::Ascii("merty"),
        dictgen::InsensitiveStr::Ascii("metral"),
        dictgen::InsensitiveStr::Ascii("metria"),
        dictgen::InsensitiveStr::Ascii("metricaly"),
        dictgen::InsensitiveStr::Ascii("mety"),
        dictgen::InsensitiveStr::Ascii("mtery"),
        dictgen::InsensitiveStr::Ascii("oblic"),
        dictgen::InsensitiveStr::Ascii("oblism"),
        dictgen::InsensitiveStr::Ascii("obls"),
        dictgen::InsensitiveStr::Ascii("pathatic"),
        dictgen::InsensitiveStr::Ascii("patheic"),
        dictgen::InsensitiveStr::Ascii("pathethic"),
        dictgen::InsensitiveStr::Ascii("pathie"),
        dictgen::InsensitiveStr::Ascii("pathiek"),
        dictgen::InsensitiveStr::Ascii("pathien"),
        dictgen::InsensitiveStr::Ascii("pathiers"),
        dictgen::InsensitiveStr::Ascii("pathsize"),
        dictgen::InsensitiveStr::Ascii("pathsizer"),
        dictgen::InsensitiveStr::Ascii("pathtic"),
        dictgen::InsensitiveStr::Ascii("pathyze"),
        dictgen::InsensitiveStr::Ascii("pathyzers"),
        dictgen::InsensitiveStr::Ascii("paty"),
        dictgen::InsensitiveStr::Ascii("pethetic"),
        dictgen::InsensitiveStr::Ascii("pethize"),
        dictgen::InsensitiveStr::Ascii("pethizers"),
        dictgen::InsensitiveStr::Ascii("phatetic"),
        dictgen::InsensitiveStr::Ascii("phatize"),
        dictgen::InsensitiveStr::Ascii("phatized"),
        dictgen::InsensitiveStr::Ascii("phatizer"),
        dictgen::InsensitiveStr::Ascii("phatizers"),
        dictgen::InsensitiveStr::Ascii("phatizes"),
        dictgen::InsensitiveStr::Ascii("phaty"),
        dictgen::InsensitiveStr::Ascii("phoney"),
        dictgen::InsensitiveStr::Ascii("phonity"),
        dictgen::InsensitiveStr::Ascii("pithizers"),
        dictgen::InsensitiveStr::Ascii("pothetic"),
        dictgen::InsensitiveStr::Ascii("pothize"),
        dictgen::InsensitiveStr::Ascii("ptomes"),
        dictgen::InsensitiveStr::Ascii("ptomps"),
        dictgen::InsensitiveStr::Ascii("ptoom"),
        dictgen::InsensitiveStr::Ascii("tpom"),
        dictgen::InsensitiveStr::Ascii("tpoms"),
    ],
    values: &[
        &["sympathetic"],
        &["sympathize"],
        &["sympathizers"],
        &["sympathy"],
        &["symbols"],
        &["symbolic"],
        &["symbolism"],
        &["symbolism"],
        &["symmetrical"],
        &["symmetrically"],
        &["symmetry"],
        &["symmetric"],
        &["symphony"],
        &["symmetrical"],
        &["symmetry"],
        &["symmetric"],
        &["symmetrical"],
        &["symmetrically"],
        &["symmetry"],
        &["symmetry"],
        &["symbolic"],
        &["symbolism"],
        &["symbols"],
        &["sympathetic"],
        &["sympathetic"],
        &["sympathetic"],
        &["sympathize"],
        &["sympathize"],
        &["sympathize"],
        &["sympathizers"],
        &["sympathize"],
        &["sympathizers"],
        &["sympathetic"],
        &["sympathize"],
        &["sympathizers"],
        &["sympathy"],
        &["sympathetic"],
        &["sympathize"],
        &["sympathizers"],
        &["sympathetic"],
        &["sympathize"],
        &["sympathize"],
        &["sympathizers"],
        &["sympathizers"],
        &["sympathize"],
        &["sympathy"],
        &["symphony"],
        &["symphony"],
        &["sympathizers"],
        &["sympathetic"],
        &["sympathize"],
        &["symptoms"],
        &["symptoms"],
        &["symptom"],
        &["symptom"],
        &["symptoms"],
    ],
    range: 4..=9,
};

static WORD_SYL_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_SYL_CHILDREN),
    value: None,
};

pub static WORD_SYL_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ablle"),
        dictgen::InsensitiveStr::Ascii("ablles"),
        dictgen::InsensitiveStr::Ascii("labe"),
        dictgen::InsensitiveStr::Ascii("label"),
        dictgen::InsensitiveStr::Ascii("labels"),
    ],
    values: &[
        &["syllable"],
        &["syllables"],
        &["syllable"],
        &["syllable"],
        &["syllables"],
    ],
    range: 4..=6,
};

static WORD_SYK_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_SYK_CHILDREN),
    value: None,
};

pub static WORD_SYK_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("walker"),
        dictgen::InsensitiveStr::Ascii("ward"),
    ],
    values: &[&["skywalker"], &["skyward"]],
    range: 4..=6,
};

static WORD_SYI_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_SYI_CHILDREN),
    value: None,
};

pub static WORD_SYI_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("rans")],
    values: &[&["syrians"]],
    range: 4..=4,
};

static WORD_SYD_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_SYD_CHILDREN),
    value: None,
};

pub static WORD_SYD_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("nicate"),
        dictgen::InsensitiveStr::Ascii("nrome"),
    ],
    values: &[&["syndicate"], &["syndrome"]],
    range: 5..=6,
};

static WORD_SYC_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_SYC_CHILDREN),
    value: None,
};

pub static WORD_SYC_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ning"),
        dictgen::InsensitiveStr::Ascii("ther"),
    ],
    values: &[&["syncing"], &["scyther"]],
    range: 4..=4,
};

static WORD_SYA_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_SYA_CHILDREN),
    value: None,
};

pub static WORD_SYA_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("rcuse"),
        dictgen::InsensitiveStr::Ascii("s"),
    ],
    values: &[&["syracuse"], &["says"]],
    range: 1..=5,
};

static WORD_SW_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_SW_CHILDREN),
    value: None,
};

pub static WORD_SW_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("aer"),
        dictgen::InsensitiveStr::Ascii("aering"),
        dictgen::InsensitiveStr::Ascii("aers"),
        dictgen::InsensitiveStr::Ascii("aetshirt"),
        dictgen::InsensitiveStr::Ascii("ansoon"),
        dictgen::InsensitiveStr::Ascii("asitka"),
        dictgen::InsensitiveStr::Ascii("askita"),
        dictgen::InsensitiveStr::Ascii("astikka"),
        dictgen::InsensitiveStr::Ascii("atiska"),
        dictgen::InsensitiveStr::Ascii("atsika"),
        dictgen::InsensitiveStr::Ascii("earengin"),
        dictgen::InsensitiveStr::Ascii("earshirt"),
        dictgen::InsensitiveStr::Ascii("eathsirt"),
        dictgen::InsensitiveStr::Ascii("eatshit"),
        dictgen::InsensitiveStr::Ascii("eatshits"),
        dictgen::InsensitiveStr::Ascii("eatshort"),
        dictgen::InsensitiveStr::Ascii("eatshrit"),
        dictgen::InsensitiveStr::Ascii("edisch"),
        dictgen::InsensitiveStr::Ascii("eerheart"),
        dictgen::InsensitiveStr::Ascii("eetheat"),
        dictgen::InsensitiveStr::Ascii("eetshart"),
        dictgen::InsensitiveStr::Ascii("eidsh"),
        dictgen::InsensitiveStr::Ascii("epth"),
        dictgen::InsensitiveStr::Ascii("iflty"),
        dictgen::InsensitiveStr::Ascii("iftley"),
        dictgen::InsensitiveStr::Ascii("iming"),
        dictgen::InsensitiveStr::Ascii("itcheasy"),
        dictgen::InsensitiveStr::Ascii("itchign"),
        dictgen::InsensitiveStr::Ascii("itchs"),
        dictgen::InsensitiveStr::Ascii("iterzland"),
        dictgen::InsensitiveStr::Ascii("itfly"),
        dictgen::InsensitiveStr::Ascii("ithced"),
        dictgen::InsensitiveStr::Ascii("ithces"),
        dictgen::InsensitiveStr::Ascii("ithcing"),
        dictgen::InsensitiveStr::Ascii("itserland"),
        dictgen::InsensitiveStr::Ascii("itzerand"),
        dictgen::InsensitiveStr::Ascii("itzlerand"),
        dictgen::InsensitiveStr::Ascii("izterland"),
        dictgen::InsensitiveStr::Ascii("nasea"),
        dictgen::InsensitiveStr::Ascii("tiched"),
        dictgen::InsensitiveStr::Ascii("tiches"),
        dictgen::InsensitiveStr::Ascii("tiching"),
        dictgen::InsensitiveStr::Ascii("tizerland"),
    ],
    values: &[
        &["swear"],
        &["swearing"],
        &["swears"],
        &["sweatshirt"],
        &["swanson"],
        &["swastika"],
        &["swastika"],
        &["swastika"],
        &["swastika"],
        &["swastika"],
        &["swearing"],
        &["sweatshirt"],
        &["sweatshirt"],
        &["sweatshirt"],
        &["sweatshirt"],
        &["sweatshirt"],
        &["sweatshirt"],
        &["swedish"],
        &["sweetheart"],
        &["sweetheart"],
        &["sweetheart"],
        &["swedish"],
        &["swept"],
        &["swiftly"],
        &["swiftly"],
        &["swimming"],
        &["switches"],
        &["switching"],
        &["switches"],
        &["switzerland"],
        &["swiftly"],
        &["switched"],
        &["switches"],
        &["switching"],
        &["switzerland"],
        &["switzerland"],
        &["switzerland"],
        &["switzerland"],
        &["swansea"],
        &["switched"],
        &["switches"],
        &["switching"],
        &["switzerland"],
    ],
    range: 3..=9,
};

static WORD_SU_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_SU_CHILDREN),
    value: None,
};

static WORD_SU_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    Some(&WORD_SUA_NODE),
    Some(&WORD_SUB_NODE),
    Some(&WORD_SUC_NODE),
    Some(&WORD_SUD_NODE),
    Some(&WORD_SUE_NODE),
    Some(&WORD_SUF_NODE),
    Some(&WORD_SUG_NODE),
    None,
    None,
    None,
    None,
    None,
    Some(&WORD_SUM_NODE),
    Some(&WORD_SUN_NODE),
    Some(&WORD_SUO_NODE),
    Some(&WORD_SUP_NODE),
    None,
    Some(&WORD_SUR_NODE),
    Some(&WORD_SUS_NODE),
    None,
    None,
    None,
    None,
    None,
    None,
    None,
];

static WORD_SUS_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_SUS_CHILDREN),
    value: None,
};

pub static WORD_SUS_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("bcribe"),
        dictgen::InsensitiveStr::Ascii("btantial"),
        dictgen::InsensitiveStr::Ascii("btantially"),
        dictgen::InsensitiveStr::Ascii("btantive"),
        dictgen::InsensitiveStr::Ascii("btrate"),
        dictgen::InsensitiveStr::Ascii("cepitble"),
        dictgen::InsensitiveStr::Ascii("ceptable"),
        dictgen::InsensitiveStr::Ascii("ceptiable"),
        dictgen::InsensitiveStr::Ascii("ceptibile"),
        dictgen::InsensitiveStr::Ascii("cpetible"),
        dictgen::InsensitiveStr::Ascii("ecptible"),
        dictgen::InsensitiveStr::Ascii("eptable"),
        dictgen::InsensitiveStr::Ascii("eptible"),
        dictgen::InsensitiveStr::Ascii("ncreen"),
        dictgen::InsensitiveStr::Ascii("pecions"),
        dictgen::InsensitiveStr::Ascii("pecious"),
        dictgen::InsensitiveStr::Ascii("peciously"),
        dictgen::InsensitiveStr::Ascii("pectes"),
        dictgen::InsensitiveStr::Ascii("pectible"),
        dictgen::InsensitiveStr::Ascii("pencion"),
        dictgen::InsensitiveStr::Ascii("pendeds"),
        dictgen::InsensitiveStr::Ascii("pendes"),
        dictgen::InsensitiveStr::Ascii("pened"),
        dictgen::InsensitiveStr::Ascii("pensie"),
        dictgen::InsensitiveStr::Ascii("penso"),
        dictgen::InsensitiveStr::Ascii("pention"),
        dictgen::InsensitiveStr::Ascii("picians"),
        dictgen::InsensitiveStr::Ascii("piciois"),
        dictgen::InsensitiveStr::Ascii("piciosly"),
        dictgen::InsensitiveStr::Ascii("picioso"),
        dictgen::InsensitiveStr::Ascii("picioulsy"),
        dictgen::InsensitiveStr::Ascii("piciouly"),
        dictgen::InsensitiveStr::Ascii("picioun"),
        dictgen::InsensitiveStr::Ascii("piciouns"),
        dictgen::InsensitiveStr::Ascii("picision"),
        dictgen::InsensitiveStr::Ascii("picison"),
        dictgen::InsensitiveStr::Ascii("picisons"),
        dictgen::InsensitiveStr::Ascii("piciuos"),
        dictgen::InsensitiveStr::Ascii("piciuosly"),
        dictgen::InsensitiveStr::Ascii("picsion"),
        dictgen::InsensitiveStr::Ascii("pisions"),
        dictgen::InsensitiveStr::Ascii("pisious"),
        dictgen::InsensitiveStr::Ascii("pisiously"),
        dictgen::InsensitiveStr::Ascii("pitions"),
        dictgen::InsensitiveStr::Ascii("tainabillity"),
        dictgen::InsensitiveStr::Ascii("tainabiltiy"),
        dictgen::InsensitiveStr::Ascii("tainabilty"),
        dictgen::InsensitiveStr::Ascii("tainabily"),
        dictgen::InsensitiveStr::Ascii("tainble"),
        dictgen::InsensitiveStr::Ascii("tainible"),
    ],
    values: &[
        &["subscribe"],
        &["substantial"],
        &["substantially"],
        &["substantive"],
        &["substrate"],
        &["susceptible"],
        &["susceptible"],
        &["susceptible"],
        &["susceptible"],
        &["susceptible"],
        &["susceptible"],
        &["susceptible"],
        &["susceptible"],
        &["sunscreen"],
        &["suspicions"],
        &["suspicious"],
        &["suspiciously"],
        &["suspects"],
        &["susceptible"],
        &["suspension"],
        &["suspense"],
        &["suspense"],
        &["suspend"],
        &["suspense"],
        &["suspension"],
        &["suspension"],
        &["suspicions"],
        &["suspicions"],
        &["suspiciously"],
        &["suspicions"],
        &["suspiciously"],
        &["suspiciously"],
        &["suspicion"],
        &["suspicion"],
        &["suspicions"],
        &["suspicions"],
        &["suspicions"],
        &["suspicions"],
        &["suspiciously"],
        &["suspicions"],
        &["suspicions"],
        &["suspicious"],
        &["suspiciously"],
        &["suspicions"],
        &["sustainability"],
        &["sustainability"],
        &["sustainability"],
        &["sustainability"],
        &["sustainable"],
        &["sustainable"],
    ],
    range: 5..=12,
};

static WORD_SUR_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_SUR_CHILDREN),
    value: None,
};

static WORD_SUR_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    None,
    Some(&WORD_SURB_NODE),
    None,
    None,
    None,
    Some(&WORD_SURF_NODE),
    None,
    None,
    None,
    None,
    None,
    Some(&WORD_SURL_NODE),
    None,
    None,
    Some(&WORD_SURO_NODE),
    Some(&WORD_SURP_NODE),
    None,
    Some(&WORD_SURR_NODE),
    None,
    None,
    None,
    Some(&WORD_SURV_NODE),
    None,
    None,
    None,
    None,
];

static WORD_SURV_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_SURV_CHILDREN),
    value: None,
};

pub static WORD_SURV_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("aillance"),
        dictgen::InsensitiveStr::Ascii("aillence"),
        dictgen::InsensitiveStr::Ascii("allience"),
        dictgen::InsensitiveStr::Ascii("avibility"),
        dictgen::InsensitiveStr::Ascii("eilence"),
        dictgen::InsensitiveStr::Ascii("eill"),
        dictgen::InsensitiveStr::Ascii("eillence"),
        dictgen::InsensitiveStr::Ascii("elliance"),
        dictgen::InsensitiveStr::Ascii("eyer"),
        dictgen::InsensitiveStr::Ascii("ibability"),
        dictgen::InsensitiveStr::Ascii("iellance"),
        dictgen::InsensitiveStr::Ascii("ivabiity"),
        dictgen::InsensitiveStr::Ascii("ivabililty"),
        dictgen::InsensitiveStr::Ascii("ivabiliy"),
        dictgen::InsensitiveStr::Ascii("ivabillity"),
        dictgen::InsensitiveStr::Ascii("ivabiltiy"),
        dictgen::InsensitiveStr::Ascii("ivabilty"),
        dictgen::InsensitiveStr::Ascii("ivabily"),
        dictgen::InsensitiveStr::Ascii("ivalibity"),
        dictgen::InsensitiveStr::Ascii("ivavility"),
        dictgen::InsensitiveStr::Ascii("ivebility"),
        dictgen::InsensitiveStr::Ascii("iver"),
        dictgen::InsensitiveStr::Ascii("ivers"),
        dictgen::InsensitiveStr::Ascii("ivied"),
        dictgen::InsensitiveStr::Ascii("ivour"),
        dictgen::InsensitiveStr::Ascii("ivours"),
    ],
    values: &[
        &["surveillance"],
        &["surveillance"],
        &["surveillance"],
        &["survivability"],
        &["surveillance"],
        &["surveil"],
        &["surveillance"],
        &["surveillance"],
        &["surveyor"],
        &["survivability"],
        &["surveillance"],
        &["survivability"],
        &["survivability"],
        &["survivability"],
        &["survivability"],
        &["survivability"],
        &["survivability"],
        &["survivability"],
        &["survivability"],
        &["survivability"],
        &["survivability"],
        &["survivor"],
        &["survivors"],
        &["survived"],
        &["survivor"],
        &["survivor"],
    ],
    range: 4..=10,
};

static WORD_SURR_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_SURR_CHILDREN),
    value: None,
};

pub static WORD_SURR_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("enderd"),
        dictgen::InsensitiveStr::Ascii("enderred"),
        dictgen::InsensitiveStr::Ascii("epetitious"),
        dictgen::InsensitiveStr::Ascii("epetitiously"),
        dictgen::InsensitiveStr::Ascii("eptious"),
        dictgen::InsensitiveStr::Ascii("eptiously"),
        dictgen::InsensitiveStr::Ascii("onded"),
        dictgen::InsensitiveStr::Ascii("oud"),
        dictgen::InsensitiveStr::Ascii("ouded"),
        dictgen::InsensitiveStr::Ascii("ouding"),
        dictgen::InsensitiveStr::Ascii("oundes"),
        dictgen::InsensitiveStr::Ascii("oundig"),
        dictgen::InsensitiveStr::Ascii("oundign"),
        dictgen::InsensitiveStr::Ascii("oundigs"),
        dictgen::InsensitiveStr::Ascii("oundins"),
        dictgen::InsensitiveStr::Ascii("oundngs"),
        dictgen::InsensitiveStr::Ascii("ouned"),
        dictgen::InsensitiveStr::Ascii("ouns"),
        dictgen::InsensitiveStr::Ascii("undering"),
    ],
    values: &[
        &["surrendered"],
        &["surrendered"],
        &["surreptitious"],
        &["surreptitiously"],
        &["surreptitious"],
        &["surreptitiously"],
        &["surrounded"],
        &["surround"],
        &["surrounded"],
        &["surrounding"],
        &["surrounds"],
        &["surroundings"],
        &["surroundings"],
        &["surrounds"],
        &["surrounds"],
        &["surrounds"],
        &["surround"],
        &["surrounds"],
        &["surrendering"],
    ],
    range: 3..=12,
};

static WORD_SURP_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_SURP_CHILDREN),
    value: None,
};

pub static WORD_SURP_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ases"),
        dictgen::InsensitiveStr::Ascii("emacist"),
        dictgen::InsensitiveStr::Ascii("eme"),
        dictgen::InsensitiveStr::Ascii("lanted"),
        dictgen::InsensitiveStr::Ascii("ress"),
        dictgen::InsensitiveStr::Ascii("ressed"),
        dictgen::InsensitiveStr::Ascii("risinly"),
        dictgen::InsensitiveStr::Ascii("rize"),
        dictgen::InsensitiveStr::Ascii("rized"),
        dictgen::InsensitiveStr::Ascii("rizing"),
        dictgen::InsensitiveStr::Ascii("rizingly"),
    ],
    values: &[
        &["surpass"],
        &["supremacist"],
        &["supreme"],
        &["supplanted"],
        &["suppress"],
        &["suppressed"],
        &["surprisingly"],
        &["surprise"],
        &["surprised"],
        &["surprising"],
        &["surprisingly"],
    ],
    range: 3..=8,
};

static WORD_SURO_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_SURO_CHILDREN),
    value: None,
};

pub static WORD_SURO_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("und"),
        dictgen::InsensitiveStr::Ascii("unded"),
        dictgen::InsensitiveStr::Ascii("unding"),
        dictgen::InsensitiveStr::Ascii("undings"),
        dictgen::InsensitiveStr::Ascii("unds"),
    ],
    values: &[
        &["surround"],
        &["surrounded"],
        &["surrounding"],
        &["surroundings"],
        &["surrounds"],
    ],
    range: 3..=7,
};

static WORD_SURL_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_SURL_CHILDREN),
    value: None,
};

pub static WORD_SURL_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("ey")],
    values: &[&["surly"]],
    range: 2..=2,
};

static WORD_SURF_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_SURF_CHILDREN),
    value: None,
};

pub static WORD_SURF_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("ce")],
    values: &[&["surface"]],
    range: 2..=2,
};

static WORD_SURB_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_SURB_CHILDREN),
    value: None,
};

pub static WORD_SURB_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("uban")],
    values: &[&["suburban"]],
    range: 4..=4,
};

static WORD_SUP_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_SUP_CHILDREN),
    value: None,
};

static WORD_SUP_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    None,
    None,
    None,
    None,
    Some(&WORD_SUPE_NODE),
    None,
    None,
    Some(&WORD_SUPH_NODE),
    Some(&WORD_SUPI_NODE),
    None,
    None,
    Some(&WORD_SUPL_NODE),
    None,
    None,
    Some(&WORD_SUPO_NODE),
    Some(&WORD_SUPP_NODE),
    None,
    Some(&WORD_SUPR_NODE),
    Some(&WORD_SUPS_NODE),
    None,
    None,
    None,
    None,
    None,
    None,
    None,
];

static WORD_SUPS_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_SUPS_CHILDREN),
    value: None,
};

pub static WORD_SUPS_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("cription"),
        dictgen::InsensitiveStr::Ascii("criptions"),
        dictgen::InsensitiveStr::Ascii("ects"),
        dictgen::InsensitiveStr::Ascii("end"),
        dictgen::InsensitiveStr::Ascii("ense"),
        dictgen::InsensitiveStr::Ascii("ension"),
        dictgen::InsensitiveStr::Ascii("icion"),
        dictgen::InsensitiveStr::Ascii("icions"),
        dictgen::InsensitiveStr::Ascii("icious"),
        dictgen::InsensitiveStr::Ascii("iciously"),
    ],
    values: &[
        &["subscription"],
        &["subscriptions"],
        &["suspects"],
        &["suspend"],
        &["suspense"],
        &["suspension"],
        &["suspicion"],
        &["suspicions"],
        &["suspicious"],
        &["suspiciously"],
    ],
    range: 3..=9,
};

static WORD_SUPR_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_SUPR_CHILDREN),
    value: None,
};

pub static WORD_SUPR_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("amacist"),
        dictgen::InsensitiveStr::Ascii("ass"),
        dictgen::InsensitiveStr::Ascii("assing"),
        dictgen::InsensitiveStr::Ascii("emacits"),
        dictgen::InsensitiveStr::Ascii("emasist"),
        dictgen::InsensitiveStr::Ascii("emicist"),
        dictgen::InsensitiveStr::Ascii("ess"),
        dictgen::InsensitiveStr::Ascii("essed"),
        dictgen::InsensitiveStr::Ascii("esses"),
        dictgen::InsensitiveStr::Ascii("essing"),
        dictgen::InsensitiveStr::Ascii("ession"),
        dictgen::InsensitiveStr::Ascii("imacist"),
        dictgen::InsensitiveStr::Ascii("isd"),
        dictgen::InsensitiveStr::Ascii("ise"),
        dictgen::InsensitiveStr::Ascii("ised"),
        dictgen::InsensitiveStr::Ascii("ising"),
        dictgen::InsensitiveStr::Ascii("isingly"),
        dictgen::InsensitiveStr::Ascii("ize"),
        dictgen::InsensitiveStr::Ascii("ized"),
        dictgen::InsensitiveStr::Ascii("izing"),
        dictgen::InsensitiveStr::Ascii("izingly"),
        dictgen::InsensitiveStr::Ascii("sied"),
    ],
    values: &[
        &["supremacist"],
        &["surpass"],
        &["surpassing"],
        &["supremacist"],
        &["supremacist"],
        &["supremacist"],
        &["suppress"],
        &["suppressed"],
        &["suppresses"],
        &["suppressing"],
        &["suppression"],
        &["supremacist"],
        &["suprised"],
        &["surprise"],
        &["surprised"],
        &["surprising"],
        &["surprisingly"],
        &["surprise"],
        &["surprised"],
        &["surprising"],
        &["surprisingly"],
        &["suprised"],
    ],
    range: 3..=7,
};

static WORD_SUPP_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_SUPP_CHILDREN),
    value: None,
};

pub static WORD_SUPP_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("erssor"),
        dictgen::InsensitiveStr::Ascii("lament"),
        dictgen::InsensitiveStr::Ascii("lamental"),
        dictgen::InsensitiveStr::Ascii("lamented"),
        dictgen::InsensitiveStr::Ascii("laments"),
        dictgen::InsensitiveStr::Ascii("lemant"),
        dictgen::InsensitiveStr::Ascii("lemetal"),
        dictgen::InsensitiveStr::Ascii("lemets"),
        dictgen::InsensitiveStr::Ascii("liementing"),
        dictgen::InsensitiveStr::Ascii("limental"),
        dictgen::InsensitiveStr::Ascii("oed"),
        dictgen::InsensitiveStr::Ascii("orre"),
        dictgen::InsensitiveStr::Ascii("ortare"),
        dictgen::InsensitiveStr::Ascii("ortes"),
        dictgen::InsensitiveStr::Ascii("orteur"),
        dictgen::InsensitiveStr::Ascii("orteurs"),
        dictgen::InsensitiveStr::Ascii("ortied"),
        dictgen::InsensitiveStr::Ascii("ortors"),
        dictgen::InsensitiveStr::Ascii("osdely"),
        dictgen::InsensitiveStr::Ascii("osebly"),
        dictgen::InsensitiveStr::Ascii("osedely"),
        dictgen::InsensitiveStr::Ascii("osidely"),
        dictgen::InsensitiveStr::Ascii("osidly"),
        dictgen::InsensitiveStr::Ascii("osingly"),
        dictgen::InsensitiveStr::Ascii("ost"),
        dictgen::InsensitiveStr::Ascii("reses"),
        dictgen::InsensitiveStr::Ascii("resion"),
        dictgen::InsensitiveStr::Ascii("resions"),
        dictgen::InsensitiveStr::Ascii("resors"),
        dictgen::InsensitiveStr::Ascii("ressin"),
        dictgen::InsensitiveStr::Ascii("ressio"),
        dictgen::InsensitiveStr::Ascii("resson"),
        dictgen::InsensitiveStr::Ascii("resssion"),
        dictgen::InsensitiveStr::Ascii("resssor"),
        dictgen::InsensitiveStr::Ascii("y"),
    ],
    values: &[
        &["suppressor"],
        &["supplement"],
        &["supplemental"],
        &["supplemented"],
        &["supplements"],
        &["supplemental"],
        &["supplemental"],
        &["supplements"],
        &["supplementing"],
        &["supplemental"],
        &["supposed"],
        &["supporters"],
        &["supporters"],
        &["supports"],
        &["supporter"],
        &["supporters"],
        &["supported"],
        &["supporters"],
        &["supposedly"],
        &["supposedly"],
        &["supposedly"],
        &["supposedly"],
        &["supposedly"],
        &["supposedly"],
        &["supports"],
        &["suppress"],
        &["suppression"],
        &["suppression"],
        &["suppressor"],
        &["suppression"],
        &["suppressor"],
        &["suppression"],
        &["suppression"],
        &["suppressor"],
        &["supply"],
    ],
    range: 1..=10,
};

static WORD_SUPO_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_SUPO_CHILDREN),
    value: None,
};

pub static WORD_SUPO_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("rt"),
        dictgen::InsensitiveStr::Ascii("se"),
        dictgen::InsensitiveStr::Ascii("sed"),
        dictgen::InsensitiveStr::Ascii("sedly"),
        dictgen::InsensitiveStr::Ascii("ses"),
        dictgen::InsensitiveStr::Ascii("sing"),
    ],
    values: &[
        &["support"],
        &["suppose"],
        &["supposed"],
        &["supposedly"],
        &["supposes"],
        &["supposing"],
    ],
    range: 2..=5,
};

static WORD_SUPL_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_SUPL_CHILDREN),
    value: None,
};

pub static WORD_SUPL_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("imented"),
        dictgen::InsensitiveStr::Ascii("lemental"),
    ],
    values: &[&["supplemented"], &["supplemental"]],
    range: 7..=8,
};

static WORD_SUPI_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_SUPI_CHILDREN),
    value: None,
};

pub static WORD_SUPI_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("rsed")],
    values: &[&["suprised"]],
    range: 4..=4,
};

static WORD_SUPH_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_SUPH_CHILDREN),
    value: None,
};

pub static WORD_SUPH_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("isticated")],
    values: &[&["sophisticated"]],
    range: 9..=9,
};

static WORD_SUPE_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_SUPE_CHILDREN),
    value: None,
};

static WORD_SUPE_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    Some(&WORD_SUPER_NODE),
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
];

static WORD_SUPER_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_SUPER_CHILDREN),
    value: None,
};

static WORD_SUPER_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    None,
    None,
    Some(&WORD_SUPERC_NODE),
    None,
    None,
    Some(&WORD_SUPERF_NODE),
    None,
    Some(&WORD_SUPERH_NODE),
    Some(&WORD_SUPERI_NODE),
    None,
    None,
    None,
    Some(&WORD_SUPERM_NODE),
    Some(&WORD_SUPERN_NODE),
    Some(&WORD_SUPERO_NODE),
    Some(&WORD_SUPERP_NODE),
    None,
    None,
    Some(&WORD_SUPERS_NODE),
    None,
    None,
    Some(&WORD_SUPERV_NODE),
    None,
    None,
    None,
    None,
];

static WORD_SUPERV_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_SUPERV_CHILDREN),
    value: None,
};

pub static WORD_SUPERV_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("iors"),
        dictgen::InsensitiveStr::Ascii("iosr"),
        dictgen::InsensitiveStr::Ascii("isar"),
        dictgen::InsensitiveStr::Ascii("iser"),
        dictgen::InsensitiveStr::Ascii("isers"),
        dictgen::InsensitiveStr::Ascii("isin"),
        dictgen::InsensitiveStr::Ascii("isior"),
        dictgen::InsensitiveStr::Ascii("isiors"),
        dictgen::InsensitiveStr::Ascii("iso"),
        dictgen::InsensitiveStr::Ascii("ison"),
        dictgen::InsensitiveStr::Ascii("isoras"),
        dictgen::InsensitiveStr::Ascii("isores"),
        dictgen::InsensitiveStr::Ascii("sior"),
    ],
    values: &[
        &["supervisors"],
        &["supervisors"],
        &["supervisor"],
        &["supervisor"],
        &["supervisors"],
        &["supervision"],
        &["supervisor"],
        &["supervisors"],
        &["supervision"],
        &["supervision"],
        &["supervisors"],
        &["supervisors"],
        &["supervisors"],
    ],
    range: 3..=6,
};

static WORD_SUPERS_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_SUPERS_CHILDREN),
    value: None,
};

pub static WORD_SUPERS_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ition"),
        dictgen::InsensitiveStr::Ascii("ticion"),
        dictgen::InsensitiveStr::Ascii("ticious"),
        dictgen::InsensitiveStr::Ascii("tision"),
        dictgen::InsensitiveStr::Ascii("tisious"),
        dictgen::InsensitiveStr::Ascii("titios"),
        dictgen::InsensitiveStr::Ascii("titiosi"),
        dictgen::InsensitiveStr::Ascii("titiuos"),
        dictgen::InsensitiveStr::Ascii("titon"),
        dictgen::InsensitiveStr::Ascii("titous"),
        dictgen::InsensitiveStr::Ascii("tituous"),
    ],
    values: &[
        &["supervision"],
        &["superstition"],
        &["superstitious"],
        &["superstition"],
        &["superstitious"],
        &["superstitious"],
        &["superstitious"],
        &["superstitious"],
        &["superstition"],
        &["superstitious"],
        &["superstitious"],
    ],
    range: 5..=7,
};

static WORD_SUPERP_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_SUPERP_CHILDREN),
    value: None,
};

pub static WORD_SUPERP_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("oser"),
        dictgen::InsensitiveStr::Ascii("owereds"),
    ],
    values: &[&["superpowers"], &["superpowers"]],
    range: 4..=7,
};

static WORD_SUPERO_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_SUPERO_CHILDREN),
    value: None,
};

pub static WORD_SUPERO_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("uman")],
    values: &[&["superhuman"]],
    range: 4..=4,
};

static WORD_SUPERN_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_SUPERN_CHILDREN),
    value: None,
};

pub static WORD_SUPERN_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("arkets"),
        dictgen::InsensitiveStr::Ascii("atrual"),
        dictgen::InsensitiveStr::Ascii("atual"),
    ],
    values: &[&["supermarkets"], &["supernatural"], &["supernatural"]],
    range: 5..=6,
};

static WORD_SUPERM_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_SUPERM_CHILDREN),
    value: None,
};

pub static WORD_SUPERM_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("acist"),
        dictgen::InsensitiveStr::Ascii("akert"),
        dictgen::InsensitiveStr::Ascii("aket"),
        dictgen::InsensitiveStr::Ascii("akret"),
        dictgen::InsensitiveStr::Ascii("akter"),
        dictgen::InsensitiveStr::Ascii("are"),
        dictgen::InsensitiveStr::Ascii("arkedet"),
        dictgen::InsensitiveStr::Ascii("arkeds"),
        dictgen::InsensitiveStr::Ascii("arkers"),
        dictgen::InsensitiveStr::Ascii("arkert"),
        dictgen::InsensitiveStr::Ascii("arkerts"),
        dictgen::InsensitiveStr::Ascii("arkt"),
        dictgen::InsensitiveStr::Ascii("arkten"),
        dictgen::InsensitiveStr::Ascii("arktes"),
        dictgen::InsensitiveStr::Ascii("arkts"),
        dictgen::InsensitiveStr::Ascii("aster"),
        dictgen::InsensitiveStr::Ascii("e"),
    ],
    values: &[
        &["supremacist"],
        &["supermarkets"],
        &["supermarket"],
        &["supermarkets"],
        &["supermarkets"],
        &["supermarket"],
        &["supermarket"],
        &["supermarkets"],
        &["supermarkets"],
        &["supermarkets"],
        &["supermarkets"],
        &["supermarket"],
        &["supermarket"],
        &["supermarkets"],
        &["supermarkets"],
        &["supermarkets"],
        &["supreme"],
    ],
    range: 1..=7,
};

static WORD_SUPERI_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_SUPERI_CHILDREN),
    value: None,
};

pub static WORD_SUPERI_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("fical"),
        dictgen::InsensitiveStr::Ascii("ntendant"),
        dictgen::InsensitiveStr::Ascii("oara"),
        dictgen::InsensitiveStr::Ascii("oare"),
        dictgen::InsensitiveStr::Ascii("orest"),
        dictgen::InsensitiveStr::Ascii("oris"),
        dictgen::InsensitiveStr::Ascii("os"),
        dictgen::InsensitiveStr::Ascii("our"),
        dictgen::InsensitiveStr::Ascii("sor"),
        dictgen::InsensitiveStr::Ascii("vsor"),
    ],
    values: &[
        &["superficial"],
        &["superintendent"],
        &["superior"],
        &["superior"],
        &["superiors"],
        &["superiors"],
        &["superiors"],
        &["superior"],
        &["superiors"],
        &["supervisors"],
    ],
    range: 2..=8,
};

static WORD_SUPERH_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_SUPERH_CHILDREN),
    value: None,
};

pub static WORD_SUPERH_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("am"),
        dictgen::InsensitiveStr::Ascii("eo"),
        dictgen::InsensitiveStr::Ascii("ereos"),
    ],
    values: &[&["superhuman"], &["superhero"], &["superhero"]],
    range: 2..=5,
};

static WORD_SUPERF_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_SUPERF_CHILDREN),
    value: None,
};

pub static WORD_SUPERF_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ical"),
        dictgen::InsensitiveStr::Ascii("iciel"),
        dictgen::InsensitiveStr::Ascii("luos"),
        dictgen::InsensitiveStr::Ascii("luu"),
        dictgen::InsensitiveStr::Ascii("ulous"),
    ],
    values: &[
        &["superficial"],
        &["superficial"],
        &["superfluous"],
        &["superfluous"],
        &["superfluous"],
    ],
    range: 3..=5,
};

static WORD_SUPERC_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_SUPERC_CHILDREN),
    value: None,
};

pub static WORD_SUPERC_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("eeded")],
    values: &[&["superseded"]],
    range: 5..=5,
};

static WORD_SUO_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_SUO_CHILDREN),
    value: None,
};

pub static WORD_SUO_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("p")],
    values: &[&["soup"]],
    range: 1..=1,
};

static WORD_SUN_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_SUN_CHILDREN),
    value: None,
};

pub static WORD_SUN_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("conscious"),
        dictgen::InsensitiveStr::Ascii("consciously"),
        dictgen::InsensitiveStr::Ascii("derlad"),
        dictgen::InsensitiveStr::Ascii("derlona"),
        dictgen::InsensitiveStr::Ascii("derlund"),
        dictgen::InsensitiveStr::Ascii("fiber"),
        dictgen::InsensitiveStr::Ascii("galsses"),
        dictgen::InsensitiveStr::Ascii("ggle"),
        dictgen::InsensitiveStr::Ascii("glases"),
        dictgen::InsensitiveStr::Ascii("glassses"),
        dictgen::InsensitiveStr::Ascii("glesses"),
        dictgen::InsensitiveStr::Ascii("glinger"),
        dictgen::InsensitiveStr::Ascii("ifre"),
        dictgen::InsensitiveStr::Ascii("screeen"),
        dictgen::InsensitiveStr::Ascii("scren"),
    ],
    values: &[
        &["subconscious"],
        &["subconsciously"],
        &["sunderland"],
        &["sunderland"],
        &["sunderland"],
        &["sunfire"],
        &["sunglasses"],
        &["snuggle"],
        &["sunglasses"],
        &["sunglasses"],
        &["sunglasses"],
        &["gunslinger"],
        &["sunfire"],
        &["sunscreen"],
        &["sunscreen"],
    ],
    range: 4..=11,
};

static WORD_SUM_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_SUM_CHILDREN),
    value: None,
};

pub static WORD_SUM_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ary"),
        dictgen::InsensitiveStr::Ascii("barine"),
        dictgen::InsensitiveStr::Ascii("barines"),
        dictgen::InsensitiveStr::Ascii("berged"),
        dictgen::InsensitiveStr::Ascii("bissions"),
        dictgen::InsensitiveStr::Ascii("bissive"),
        dictgen::InsensitiveStr::Ascii("bitting"),
        dictgen::InsensitiveStr::Ascii("menor"),
        dictgen::InsensitiveStr::Ascii("menors"),
        dictgen::InsensitiveStr::Ascii("merized"),
        dictgen::InsensitiveStr::Ascii("moenrs"),
        dictgen::InsensitiveStr::Ascii("mones"),
        dictgen::InsensitiveStr::Ascii("monr"),
        dictgen::InsensitiveStr::Ascii("more"),
        dictgen::InsensitiveStr::Ascii("morized"),
        dictgen::InsensitiveStr::Ascii("murized"),
    ],
    values: &[
        &["summary"],
        &["submarine"],
        &["submarines"],
        &["submerged"],
        &["submissions"],
        &["submissive"],
        &["submitting"],
        &["summoner"],
        &["summoners"],
        &["summarized"],
        &["summoners"],
        &["summoners"],
        &["summoner"],
        &["summoner"],
        &["summarized"],
        &["summarized"],
    ],
    range: 3..=8,
};

static WORD_SUG_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_SUG_CHILDREN),
    value: None,
};

pub static WORD_SUG_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("gesst"),
        dictgen::InsensitiveStr::Ascii("geste"),
        dictgen::InsensitiveStr::Ascii("gestes"),
        dictgen::InsensitiveStr::Ascii("gestie"),
        dictgen::InsensitiveStr::Ascii("gestied"),
        dictgen::InsensitiveStr::Ascii("gestief"),
        dictgen::InsensitiveStr::Ascii("gestieve"),
        dictgen::InsensitiveStr::Ascii("gestons"),
    ],
    values: &[
        &["suggests"],
        &["suggestive"],
        &["suggests"],
        &["suggestive"],
        &["suggestive"],
        &["suggestive"],
        &["suggestive"],
        &["suggests"],
    ],
    range: 5..=8,
};

static WORD_SUF_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_SUF_CHILDREN),
    value: None,
};

pub static WORD_SUF_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ferage"),
        dictgen::InsensitiveStr::Ascii("ferd"),
        dictgen::InsensitiveStr::Ascii("ferered"),
        dictgen::InsensitiveStr::Ascii("ferred"),
        dictgen::InsensitiveStr::Ascii("ferring"),
        dictgen::InsensitiveStr::Ascii("ficent"),
        dictgen::InsensitiveStr::Ascii("ficently"),
        dictgen::InsensitiveStr::Ascii("ficiant"),
        dictgen::InsensitiveStr::Ascii("ficit"),
    ],
    values: &[
        &["suffrage"],
        &["suffered"],
        &["suffered"],
        &["suffered"],
        &["suffering"],
        &["sufficient"],
        &["sufficiently"],
        &["sufficient"],
        &["sufficient"],
    ],
    range: 4..=8,
};

static WORD_SUE_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_SUE_CHILDREN),
    value: None,
};

pub static WORD_SUE_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("full")],
    values: &[&["usefull"]],
    range: 4..=4,
};

static WORD_SUD_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_SUD_CHILDREN),
    value: None,
};

pub static WORD_SUD_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("deny"),
        dictgen::InsensitiveStr::Ascii("dnely"),
        dictgen::InsensitiveStr::Ascii("nerland"),
    ],
    values: &[&["suddenly"], &["suddenly"], &["sunderland"]],
    range: 4..=7,
};

static WORD_SUC_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_SUC_CHILDREN),
    value: None,
};

pub static WORD_SUC_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("cceeded"),
        dictgen::InsensitiveStr::Ascii("ccesses"),
        dictgen::InsensitiveStr::Ascii("cedded"),
        dictgen::InsensitiveStr::Ascii("cede"),
        dictgen::InsensitiveStr::Ascii("ceded"),
        dictgen::InsensitiveStr::Ascii("cedes"),
        dictgen::InsensitiveStr::Ascii("ceds"),
        dictgen::InsensitiveStr::Ascii("ceedes"),
        dictgen::InsensitiveStr::Ascii("ceeed"),
        dictgen::InsensitiveStr::Ascii("cees"),
        dictgen::InsensitiveStr::Ascii("cesd"),
        dictgen::InsensitiveStr::Ascii("cesed"),
        dictgen::InsensitiveStr::Ascii("cesful"),
        dictgen::InsensitiveStr::Ascii("cesfully"),
        dictgen::InsensitiveStr::Ascii("cesfuly"),
        dictgen::InsensitiveStr::Ascii("cesion"),
        dictgen::InsensitiveStr::Ascii("cesions"),
        dictgen::InsensitiveStr::Ascii("cesive"),
        dictgen::InsensitiveStr::Ascii("cesseurs"),
        dictgen::InsensitiveStr::Ascii("cessfull"),
        dictgen::InsensitiveStr::Ascii("cessfullly"),
        dictgen::InsensitiveStr::Ascii("cessfuly"),
        dictgen::InsensitiveStr::Ascii("cessing"),
        dictgen::InsensitiveStr::Ascii("cessivo"),
        dictgen::InsensitiveStr::Ascii("cesss"),
        dictgen::InsensitiveStr::Ascii("cesssion"),
        dictgen::InsensitiveStr::Ascii("cessully"),
        dictgen::InsensitiveStr::Ascii("csesfull"),
        dictgen::InsensitiveStr::Ascii("csess"),
        dictgen::InsensitiveStr::Ascii("csessfull"),
        dictgen::InsensitiveStr::Ascii("eed"),
        dictgen::InsensitiveStr::Ascii("eeded"),
        dictgen::InsensitiveStr::Ascii("eeding"),
        dictgen::InsensitiveStr::Ascii("eeds"),
        dictgen::InsensitiveStr::Ascii("esful"),
        dictgen::InsensitiveStr::Ascii("esfully"),
        dictgen::InsensitiveStr::Ascii("esfuly"),
        dictgen::InsensitiveStr::Ascii("esion"),
        dictgen::InsensitiveStr::Ascii("ess"),
        dictgen::InsensitiveStr::Ascii("esses"),
        dictgen::InsensitiveStr::Ascii("essful"),
        dictgen::InsensitiveStr::Ascii("essfull"),
        dictgen::InsensitiveStr::Ascii("essfully"),
        dictgen::InsensitiveStr::Ascii("essfuly"),
        dictgen::InsensitiveStr::Ascii("ession"),
        dictgen::InsensitiveStr::Ascii("essive"),
        dictgen::InsensitiveStr::Ascii("essor"),
        dictgen::InsensitiveStr::Ascii("essot"),
        dictgen::InsensitiveStr::Ascii("ide"),
        dictgen::InsensitiveStr::Ascii("idial"),
        dictgen::InsensitiveStr::Ascii("septible"),
    ],
    values: &[
        &["succeeded"],
        &["successes"],
        &["succeeded"],
        &["succeed"],
        &["succeeded"],
        &["succeeds"],
        &["succeeds"],
        &["succeeds"],
        &["succeed"],
        &["succeeds"],
        &["succeeds"],
        &["succeeds"],
        &["successful"],
        &["successfully"],
        &["successfully"],
        &["succession"],
        &["succession"],
        &["successive"],
        &["successes"],
        &["successful"],
        &["successfully"],
        &["successfully"],
        &["succession"],
        &["succession"],
        &["successes"],
        &["succession"],
        &["successfully"],
        &["successfully"],
        &["success"],
        &["successful"],
        &["succeed"],
        &["succeeded"],
        &["succeeding"],
        &["succeeds"],
        &["successful"],
        &["successfully"],
        &["successfully"],
        &["succession"],
        &["success"],
        &["successes"],
        &["successful"],
        &["successful"],
        &["successfully"],
        &["successfully"],
        &["succession"],
        &["successive"],
        &["successor"],
        &["successor"],
        &["suicide"],
        &["suicidal"],
        &["susceptible"],
    ],
    range: 3..=10,
};

static WORD_SUB_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_SUB_CHILDREN),
    value: None,
};

static WORD_SUB_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    Some(&WORD_SUBA_NODE),
    None,
    Some(&WORD_SUBC_NODE),
    None,
    Some(&WORD_SUBE_NODE),
    None,
    None,
    None,
    Some(&WORD_SUBI_NODE),
    Some(&WORD_SUBJ_NODE),
    None,
    Some(&WORD_SUBL_NODE),
    Some(&WORD_SUBM_NODE),
    None,
    None,
    Some(&WORD_SUBP_NODE),
    None,
    Some(&WORD_SUBR_NODE),
    Some(&WORD_SUBS_NODE),
    Some(&WORD_SUBT_NODE),
    Some(&WORD_SUBU_NODE),
    None,
    None,
    None,
    None,
    None,
];

static WORD_SUBU_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_SUBU_CHILDREN),
    value: None,
};

pub static WORD_SUBU_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("rburban")],
    values: &[&["suburban"]],
    range: 7..=7,
};

static WORD_SUBT_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_SUBT_CHILDREN),
    value: None,
};

pub static WORD_SUBT_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ances"),
        dictgen::InsensitiveStr::Ascii("elty"),
        dictgen::InsensitiveStr::Ascii("erranian"),
        dictgen::InsensitiveStr::Ascii("etly"),
        dictgen::InsensitiveStr::Ascii("iel"),
        dictgen::InsensitiveStr::Ascii("ilte"),
        dictgen::InsensitiveStr::Ascii("iltes"),
        dictgen::InsensitiveStr::Ascii("itel"),
        dictgen::InsensitiveStr::Ascii("itels"),
        dictgen::InsensitiveStr::Ascii("itls"),
        dictgen::InsensitiveStr::Ascii("itltes"),
        dictgen::InsensitiveStr::Ascii("letly"),
        dictgen::InsensitiveStr::Ascii("ltey"),
        dictgen::InsensitiveStr::Ascii("lties"),
    ],
    values: &[
        &["substances"],
        &["subtlety"],
        &["subterranean"],
        &["subtlety"],
        &["subtitle"],
        &["subtitle"],
        &["subtitles"],
        &["subtitle"],
        &["subtitles"],
        &["subtitles"],
        &["subtitle"],
        &["subtlety"],
        &["subtlety"],
        &["subtitles"],
    ],
    range: 3..=8,
};

static WORD_SUBS_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_SUBS_CHILDREN),
    value: None,
};

static WORD_SUBS_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    Some(&WORD_SUBSA_NODE),
    None,
    Some(&WORD_SUBSC_NODE),
    None,
    Some(&WORD_SUBSE_NODE),
    None,
    None,
    None,
    Some(&WORD_SUBSI_NODE),
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    Some(&WORD_SUBSQ_NODE),
    Some(&WORD_SUBSR_NODE),
    None,
    Some(&WORD_SUBST_NODE),
    Some(&WORD_SUBSU_NODE),
    None,
    None,
    None,
    None,
    None,
];

static WORD_SUBSU_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_SUBSU_CHILDREN),
    value: None,
};

pub static WORD_SUBSU_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("dized")],
    values: &[&["subsidized"]],
    range: 5..=5,
};

static WORD_SUBST_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_SUBST_CHILDREN),
    value: None,
};

pub static WORD_SUBST_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ace"),
        dictgen::InsensitiveStr::Ascii("ancial"),
        dictgen::InsensitiveStr::Ascii("ancially"),
        dictgen::InsensitiveStr::Ascii("anial"),
        dictgen::InsensitiveStr::Ascii("anitally"),
        dictgen::InsensitiveStr::Ascii("ans"),
        dictgen::InsensitiveStr::Ascii("anse"),
        dictgen::InsensitiveStr::Ascii("ansen"),
        dictgen::InsensitiveStr::Ascii("anser"),
        dictgen::InsensitiveStr::Ascii("anses"),
        dictgen::InsensitiveStr::Ascii("ansial"),
        dictgen::InsensitiveStr::Ascii("ansially"),
        dictgen::InsensitiveStr::Ascii("ansive"),
        dictgen::InsensitiveStr::Ascii("anta"),
        dictgen::InsensitiveStr::Ascii("ante"),
        dictgen::InsensitiveStr::Ascii("antiable"),
        dictgen::InsensitiveStr::Ascii("antialy"),
        dictgen::InsensitiveStr::Ascii("antie"),
        dictgen::InsensitiveStr::Ascii("antied"),
        dictgen::InsensitiveStr::Ascii("anties"),
        dictgen::InsensitiveStr::Ascii("antitve"),
        dictgen::InsensitiveStr::Ascii("antually"),
        dictgen::InsensitiveStr::Ascii("arte"),
        dictgen::InsensitiveStr::Ascii("atial"),
        dictgen::InsensitiveStr::Ascii("ences"),
        dictgen::InsensitiveStr::Ascii("ential"),
        dictgen::InsensitiveStr::Ascii("ite"),
        dictgen::InsensitiveStr::Ascii("itite"),
        dictgen::InsensitiveStr::Ascii("itition"),
        dictgen::InsensitiveStr::Ascii("itiute"),
        dictgen::InsensitiveStr::Ascii("ittue"),
        dictgen::InsensitiveStr::Ascii("itude"),
        dictgen::InsensitiveStr::Ascii("ituded"),
        dictgen::InsensitiveStr::Ascii("itudes"),
        dictgen::InsensitiveStr::Ascii("itue"),
        dictgen::InsensitiveStr::Ascii("itued"),
        dictgen::InsensitiveStr::Ascii("ituer"),
        dictgen::InsensitiveStr::Ascii("itues"),
        dictgen::InsensitiveStr::Ascii("ituion"),
        dictgen::InsensitiveStr::Ascii("iture"),
        dictgen::InsensitiveStr::Ascii("itures"),
        dictgen::InsensitiveStr::Ascii("itutents"),
        dictgen::InsensitiveStr::Ascii("ituters"),
        dictgen::InsensitiveStr::Ascii("itutie"),
        dictgen::InsensitiveStr::Ascii("itutivo"),
        dictgen::InsensitiveStr::Ascii("ituto"),
        dictgen::InsensitiveStr::Ascii("itutos"),
        dictgen::InsensitiveStr::Ascii("ituts"),
        dictgen::InsensitiveStr::Ascii("itutue"),
        dictgen::InsensitiveStr::Ascii("itutues"),
        dictgen::InsensitiveStr::Ascii("ract"),
        dictgen::InsensitiveStr::Ascii("racted"),
        dictgen::InsensitiveStr::Ascii("racting"),
        dictgen::InsensitiveStr::Ascii("raction"),
        dictgen::InsensitiveStr::Ascii("racts"),
        dictgen::InsensitiveStr::Ascii("utite"),
    ],
    values: &[
        &["substance"],
        &["substantial"],
        &["substantially"],
        &["substantial"],
        &["substantially"],
        &["substances"],
        &["substances"],
        &["substances"],
        &["substances"],
        &["substances"],
        &["substantial"],
        &["substantially"],
        &["substantive"],
        &["substantial"],
        &["substantive"],
        &["substantial"],
        &["substantially"],
        &["substantive"],
        &["substantive"],
        &["substantive"],
        &["substantive"],
        &["substantially"],
        &["substrate"],
        &["substantial"],
        &["substances"],
        &["substantial"],
        &["substitute"],
        &["substitute"],
        &["substitution"],
        &["substitute"],
        &["substitutes"],
        &["substitute"],
        &["substituted"],
        &["substitutes"],
        &["substitute"],
        &["substitute"],
        &["substitute"],
        &["substitutes"],
        &["substitution"],
        &["substitute"],
        &["substitutes"],
        &["substitutes"],
        &["substitutes"],
        &["substitutes"],
        &["substitution"],
        &["substitution"],
        &["substitutes"],
        &["substitutes"],
        &["substitutes"],
        &["substitutes"],
        &["subtract"],
        &["subtracted"],
        &["subtracting"],
        &["subtraction"],
        &["subtracts"],
        &["substitutes"],
    ],
    range: 3..=8,
};

static WORD_SUBSR_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_SUBSR_CHILDREN),
    value: None,
};

pub static WORD_SUBSR_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("cibe"),
        dictgen::InsensitiveStr::Ascii("cibed"),
        dictgen::InsensitiveStr::Ascii("cibers"),
        dictgen::InsensitiveStr::Ascii("ciption"),
        dictgen::InsensitiveStr::Ascii("icption"),
    ],
    values: &[
        &["subscribe"],
        &["subscribed"],
        &["subscribers"],
        &["subscriptions"],
        &["subscriptions"],
    ],
    range: 4..=7,
};

static WORD_SUBSQ_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_SUBSQ_CHILDREN),
    value: None,
};

pub static WORD_SUBSQ_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("uent"),
        dictgen::InsensitiveStr::Ascii("uently"),
    ],
    values: &[&["subsequent"], &["subsequently"]],
    range: 4..=6,
};

static WORD_SUBSI_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_SUBSI_CHILDREN),
    value: None,
};

pub static WORD_SUBSI_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("dary"),
        dictgen::InsensitiveStr::Ascii("dezed"),
        dictgen::InsensitiveStr::Ascii("diced"),
        dictgen::InsensitiveStr::Ascii("die"),
        dictgen::InsensitiveStr::Ascii("diezed"),
        dictgen::InsensitiveStr::Ascii("diy"),
        dictgen::InsensitiveStr::Ascii("dizied"),
        dictgen::InsensitiveStr::Ascii("dizies"),
        dictgen::InsensitiveStr::Ascii("dizng"),
        dictgen::InsensitiveStr::Ascii("duary"),
        dictgen::InsensitiveStr::Ascii("quent"),
        dictgen::InsensitiveStr::Ascii("quently"),
        dictgen::InsensitiveStr::Ascii("ttute"),
        dictgen::InsensitiveStr::Ascii("zide"),
        dictgen::InsensitiveStr::Ascii("zided"),
        dictgen::InsensitiveStr::Ascii("ziding"),
    ],
    values: &[
        &["subsidiary"],
        &["subsidized"],
        &["subsidized"],
        &["subsidized"],
        &["subsidized"],
        &["subsidy"],
        &["subsidized"],
        &["subsidize"],
        &["subsidizing"],
        &["subsidiary"],
        &["subsequent"],
        &["subsequently"],
        &["substitutes"],
        &["subsidize"],
        &["subsidized"],
        &["subsidizing"],
    ],
    range: 3..=7,
};

static WORD_SUBSE_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_SUBSE_CHILDREN),
    value: None,
};

pub static WORD_SUBSE_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("dized"),
        dictgen::InsensitiveStr::Ascii("quant"),
        dictgen::InsensitiveStr::Ascii("quenty"),
    ],
    values: &[&["subsidized"], &["subsequent"], &["subsequently"]],
    range: 5..=6,
};

static WORD_SUBSC_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_SUBSC_CHILDREN),
    value: None,
};

pub static WORD_SUBSC_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("irbe"),
        dictgen::InsensitiveStr::Ascii("irbed"),
        dictgen::InsensitiveStr::Ascii("irber"),
        dictgen::InsensitiveStr::Ascii("irbers"),
        dictgen::InsensitiveStr::Ascii("irption"),
        dictgen::InsensitiveStr::Ascii("oncious"),
        dictgen::InsensitiveStr::Ascii("onciously"),
        dictgen::InsensitiveStr::Ascii("ribar"),
        dictgen::InsensitiveStr::Ascii("ribbed"),
        dictgen::InsensitiveStr::Ascii("ribber"),
        dictgen::InsensitiveStr::Ascii("ribbers"),
        dictgen::InsensitiveStr::Ascii("ribbing"),
        dictgen::InsensitiveStr::Ascii("ribir"),
        dictgen::InsensitiveStr::Ascii("ribirse"),
        dictgen::InsensitiveStr::Ascii("rible"),
        dictgen::InsensitiveStr::Ascii("ribtion"),
        dictgen::InsensitiveStr::Ascii("ribtions"),
        dictgen::InsensitiveStr::Ascii("rie"),
        dictgen::InsensitiveStr::Ascii("riped"),
        dictgen::InsensitiveStr::Ascii("riping"),
        dictgen::InsensitiveStr::Ascii("riptin"),
        dictgen::InsensitiveStr::Ascii("ripton"),
        dictgen::InsensitiveStr::Ascii("riptons"),
        dictgen::InsensitiveStr::Ascii("ritpion"),
        dictgen::InsensitiveStr::Ascii("rpition"),
        dictgen::InsensitiveStr::Ascii("rubed"),
        dictgen::InsensitiveStr::Ascii("ryber"),
    ],
    values: &[
        &["subscribe"],
        &["subscribed"],
        &["subscribers"],
        &["subscribers"],
        &["subscriptions"],
        &["subconscious"],
        &["subconsciously"],
        &["subscriber"],
        &["subscribe"],
        &["subscriber"],
        &["subscribers"],
        &["subscribing"],
        &["subscriber"],
        &["subscriber"],
        &["subscriber"],
        &["subscription"],
        &["subscriptions"],
        &["subscriber"],
        &["subscribed"],
        &["subscribing"],
        &["subscriptions"],
        &["subscription"],
        &["subscriptions"],
        &["subscriptions"],
        &["subscriptions"],
        &["subscribed"],
        &["subscriber"],
    ],
    range: 3..=9,
};

static WORD_SUBSA_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_SUBSA_CHILDREN),
    value: None,
};

pub static WORD_SUBSA_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("dized")],
    values: &[&["subsidized"]],
    range: 5..=5,
};

static WORD_SUBR_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_SUBR_CHILDREN),
    value: None,
};

pub static WORD_SUBR_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("edddits"),
        dictgen::InsensitiveStr::Ascii("edditors"),
        dictgen::InsensitiveStr::Ascii("uban"),
    ],
    values: &[&["subreddits"], &["subreddits"], &["suburban"]],
    range: 4..=8,
};

static WORD_SUBP_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_SUBP_CHILDREN),
    value: None,
};

pub static WORD_SUBP_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("ecies")],
    values: &[&["subspecies"]],
    range: 5..=5,
};

static WORD_SUBM_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_SUBM_CHILDREN),
    value: None,
};

pub static WORD_SUBM_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("achne"),
        dictgen::InsensitiveStr::Ascii("arie"),
        dictgen::InsensitiveStr::Ascii("ariens"),
        dictgen::InsensitiveStr::Ascii("arinas"),
        dictgen::InsensitiveStr::Ascii("ergerd"),
        dictgen::InsensitiveStr::Ascii("ergered"),
        dictgen::InsensitiveStr::Ascii("erines"),
        dictgen::InsensitiveStr::Ascii("isison"),
        dictgen::InsensitiveStr::Ascii("isisons"),
        dictgen::InsensitiveStr::Ascii("issies"),
        dictgen::InsensitiveStr::Ascii("issons"),
        dictgen::InsensitiveStr::Ascii("ittion"),
    ],
    values: &[
        &["submachine"],
        &["submarines"],
        &["submarines"],
        &["submarines"],
        &["submerged"],
        &["submerged"],
        &["submarines"],
        &["submissions"],
        &["submissions"],
        &["submissive"],
        &["submissions"],
        &["submitting"],
    ],
    range: 4..=7,
};

static WORD_SUBL_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_SUBL_CHILDREN),
    value: None,
};

pub static WORD_SUBL_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("tety")],
    values: &[&["subtlety"]],
    range: 4..=4,
};

static WORD_SUBJ_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_SUBJ_CHILDREN),
    value: None,
};

pub static WORD_SUBJ_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ectief"),
        dictgen::InsensitiveStr::Ascii("ectifs"),
        dictgen::InsensitiveStr::Ascii("ectivelly"),
        dictgen::InsensitiveStr::Ascii("ectivety"),
        dictgen::InsensitiveStr::Ascii("ectivily"),
        dictgen::InsensitiveStr::Ascii("ectivley"),
        dictgen::InsensitiveStr::Ascii("ectivly"),
        dictgen::InsensitiveStr::Ascii("ectivy"),
        dictgen::InsensitiveStr::Ascii("ektive"),
        dictgen::InsensitiveStr::Ascii("est"),
        dictgen::InsensitiveStr::Ascii("udgation"),
    ],
    values: &[
        &["subjective"],
        &["subjects"],
        &["subjectively"],
        &["subjectively"],
        &["subjectively"],
        &["subjectively"],
        &["subjectively"],
        &["subjectively"],
        &["subjective"],
        &["subjects"],
        &["subjugation"],
    ],
    range: 3..=9,
};

static WORD_SUBI_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_SUBI_CHILDREN),
    value: None,
};

pub static WORD_SUBI_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("sdized"),
        dictgen::InsensitiveStr::Ascii("sdizing"),
        dictgen::InsensitiveStr::Ascii("sdy"),
    ],
    values: &[&["subsidized"], &["subsidizing"], &["subsidy"]],
    range: 3..=7,
};

static WORD_SUBE_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_SUBE_CHILDREN),
    value: None,
};

pub static WORD_SUBE_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("squent"),
        dictgen::InsensitiveStr::Ascii("squently"),
    ],
    values: &[&["subsequent"], &["subsequently"]],
    range: 6..=8,
};

static WORD_SUBC_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_SUBC_CHILDREN),
    value: None,
};

pub static WORD_SUBC_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("atagories"),
        dictgen::InsensitiveStr::Ascii("atagory"),
        dictgen::InsensitiveStr::Ascii("oncsious"),
        dictgen::InsensitiveStr::Ascii("oncsiously"),
        dictgen::InsensitiveStr::Ascii("onsciosly"),
        dictgen::InsensitiveStr::Ascii("onsciouly"),
        dictgen::InsensitiveStr::Ascii("onscius"),
        dictgen::InsensitiveStr::Ascii("onscous"),
        dictgen::InsensitiveStr::Ascii("onsicous"),
        dictgen::InsensitiveStr::Ascii("onsicously"),
        dictgen::InsensitiveStr::Ascii("onsiously"),
        dictgen::InsensitiveStr::Ascii("ouncious"),
        dictgen::InsensitiveStr::Ascii("sription"),
        dictgen::InsensitiveStr::Ascii("ulter"),
        dictgen::InsensitiveStr::Ascii("ultuur"),
    ],
    values: &[
        &["subcategories"],
        &["subcategory"],
        &["subconscious"],
        &["subconsciously"],
        &["subconsciously"],
        &["subconsciously"],
        &["subconscious"],
        &["subconscious"],
        &["subconscious"],
        &["subconsciously"],
        &["subconsciously"],
        &["subconscious"],
        &["subscriptions"],
        &["subculture"],
        &["subculture"],
    ],
    range: 5..=10,
};

static WORD_SUBA_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_SUBA_CHILDREN),
    value: None,
};

pub static WORD_SUBA_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("rmine"),
        dictgen::InsensitiveStr::Ascii("rmines"),
    ],
    values: &[&["submarine"], &["submarines"]],
    range: 5..=6,
};

static WORD_SUA_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_SUA_CHILDREN),
    value: None,
};

pub static WORD_SUA_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("sage"),
        dictgen::InsensitiveStr::Ascii("sages"),
    ],
    values: &[&["sausage"], &["sausages"]],
    range: 4..=5,
};

static WORD_ST_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_ST_CHILDREN),
    value: None,
};

static WORD_ST_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    Some(&WORD_STA_NODE),
    None,
    None,
    None,
    Some(&WORD_STE_NODE),
    None,
    None,
    None,
    Some(&WORD_STI_NODE),
    None,
    None,
    Some(&WORD_STL_NODE),
    None,
    None,
    Some(&WORD_STO_NODE),
    Some(&WORD_STP_NODE),
    None,
    Some(&WORD_STR_NODE),
    None,
    Some(&WORD_STT_NODE),
    Some(&WORD_STU_NODE),
    None,
    None,
    None,
    Some(&WORD_STY_NODE),
    None,
];

static WORD_STY_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_STY_CHILDREN),
    value: None,
};

pub static WORD_STY_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("lisch"),
        dictgen::InsensitiveStr::Ascii("rofaom"),
        dictgen::InsensitiveStr::Ascii("rofom"),
    ],
    values: &[&["stylish"], &["styrofoam"], &["styrofoam"]],
    range: 5..=6,
};

static WORD_STU_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_STU_CHILDREN),
    value: None,
};

pub static WORD_STU_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("bbon"),
        dictgen::InsensitiveStr::Ascii("bborness"),
        dictgen::InsensitiveStr::Ascii("bbron"),
        dictgen::InsensitiveStr::Ascii("bmled"),
        dictgen::InsensitiveStr::Ascii("cture"),
        dictgen::InsensitiveStr::Ascii("ctured"),
        dictgen::InsensitiveStr::Ascii("ddy"),
        dictgen::InsensitiveStr::Ascii("ding"),
        dictgen::InsensitiveStr::Ascii("dioes"),
        dictgen::InsensitiveStr::Ascii("ggling"),
        dictgen::InsensitiveStr::Ascii("idos"),
        dictgen::InsensitiveStr::Ascii("ipder"),
        dictgen::InsensitiveStr::Ascii("mbeld"),
        dictgen::InsensitiveStr::Ascii("nami"),
        dictgen::InsensitiveStr::Ascii("pdily"),
        dictgen::InsensitiveStr::Ascii("pidfree"),
        dictgen::InsensitiveStr::Ascii("piditiy"),
        dictgen::InsensitiveStr::Ascii("pidiy"),
        dictgen::InsensitiveStr::Ascii("pidr"),
        dictgen::InsensitiveStr::Ascii("pidy"),
        dictgen::InsensitiveStr::Ascii("pire"),
        dictgen::InsensitiveStr::Ascii("pitidy"),
        dictgen::InsensitiveStr::Ascii("rctural"),
        dictgen::InsensitiveStr::Ascii("rcture"),
        dictgen::InsensitiveStr::Ascii("rctures"),
        dictgen::InsensitiveStr::Ascii("rggled"),
        dictgen::InsensitiveStr::Ascii("rggles"),
        dictgen::InsensitiveStr::Ascii("rggling"),
        dictgen::InsensitiveStr::Ascii("tterring"),
    ],
    values: &[
        &["stubborn"],
        &["stubbornness"],
        &["stubborn"],
        &["stumbled"],
        &["structure"],
        &["structured"],
        &["study"],
        &["studying"],
        &["studios"],
        &["struggling"],
        &["studios"],
        &["stupider"],
        &["stumbled"],
        &["tsunami"],
        &["stupidly"],
        &["stupider"],
        &["stupidity"],
        &["stupidity"],
        &["stupider"],
        &["stupidly"],
        &["stupider"],
        &["stupidity"],
        &["structural"],
        &["structure"],
        &["structures"],
        &["struggled"],
        &["struggles"],
        &["struggling"],
        &["stuttering"],
    ],
    range: 3..=8,
};

static WORD_STT_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_STT_CHILDREN),
    value: None,
};

pub static WORD_STT_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("utering")],
    values: &[&["stuttering"]],
    range: 7..=7,
};

static WORD_STR_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_STR_CHILDREN),
    value: None,
};

static WORD_STR_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    Some(&WORD_STRA_NODE),
    None,
    None,
    None,
    Some(&WORD_STRE_NODE),
    None,
    None,
    None,
    Some(&WORD_STRI_NODE),
    None,
    None,
    None,
    None,
    Some(&WORD_STRN_NODE),
    Some(&WORD_STRO_NODE),
    None,
    None,
    None,
    None,
    None,
    Some(&WORD_STRU_NODE),
    None,
    Some(&WORD_STRW_NODE),
    None,
    Some(&WORD_STRY_NODE),
    None,
];

static WORD_STRY_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_STRY_CHILDREN),
    value: None,
};

pub static WORD_STRY_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("ofoam")],
    values: &[&["styrofoam"]],
    range: 5..=5,
};

static WORD_STRW_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_STRW_CHILDREN),
    value: None,
};

pub static WORD_STRW_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("aberry")],
    values: &[&["strawberry"]],
    range: 6..=6,
};

static WORD_STRU_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_STRU_CHILDREN),
    value: None,
};

pub static WORD_STRU_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ctered"),
        dictgen::InsensitiveStr::Ascii("ctrual"),
        dictgen::InsensitiveStr::Ascii("ctual"),
        dictgen::InsensitiveStr::Ascii("cturel"),
        dictgen::InsensitiveStr::Ascii("cturels"),
        dictgen::InsensitiveStr::Ascii("cturs"),
        dictgen::InsensitiveStr::Ascii("cutral"),
        dictgen::InsensitiveStr::Ascii("cutre"),
        dictgen::InsensitiveStr::Ascii("cutred"),
        dictgen::InsensitiveStr::Ascii("cutres"),
        dictgen::InsensitiveStr::Ascii("ggeld"),
        dictgen::InsensitiveStr::Ascii("ggels"),
        dictgen::InsensitiveStr::Ascii("gglebus"),
        dictgen::InsensitiveStr::Ascii("ggleing"),
        dictgen::InsensitiveStr::Ascii("gglign"),
    ],
    values: &[
        &["structured"],
        &["structural"],
        &["structural"],
        &["structural"],
        &["structures"],
        &["structures"],
        &["structural"],
        &["structure"],
        &["structured"],
        &["structures"],
        &["struggled"],
        &["struggles"],
        &["struggles"],
        &["struggling"],
        &["struggling"],
    ],
    range: 5..=7,
};

static WORD_STRO_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_STRO_CHILDREN),
    value: None,
};

pub static WORD_STRO_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("med"),
        dictgen::InsensitiveStr::Ascii("mfront"),
        dictgen::InsensitiveStr::Ascii("nkhold"),
        dictgen::InsensitiveStr::Ascii("y"),
        dictgen::InsensitiveStr::Ascii("yline"),
        dictgen::InsensitiveStr::Ascii("ylines"),
        dictgen::InsensitiveStr::Ascii("ytelling"),
    ],
    values: &[
        &["stormed"],
        &["stormfront"],
        &["stronghold"],
        &["story"],
        &["storyline"],
        &["storylines"],
        &["storytelling"],
    ],
    range: 1..=8,
};

static WORD_STRN_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_STRN_CHILDREN),
    value: None,
};

pub static WORD_STRN_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("ad")],
    values: &[&["strand"]],
    range: 2..=2,
};

static WORD_STRI_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_STRI_CHILDREN),
    value: None,
};

pub static WORD_STRI_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("aght"),
        dictgen::InsensitiveStr::Ascii("aghten"),
        dictgen::InsensitiveStr::Ascii("aghtforward"),
        dictgen::InsensitiveStr::Ascii("ans"),
        dictgen::InsensitiveStr::Ascii("clty"),
        dictgen::InsensitiveStr::Ascii("ctist"),
        dictgen::InsensitiveStr::Ascii("cty"),
        dictgen::InsensitiveStr::Ascii("ekr"),
        dictgen::InsensitiveStr::Ascii("ekrs"),
        dictgen::InsensitiveStr::Ascii("kely"),
        dictgen::InsensitiveStr::Ascii("nget"),
        dictgen::InsensitiveStr::Ascii("ngnet"),
    ],
    values: &[
        &["straight"],
        &["straighten"],
        &["straightforward"],
        &["strains"],
        &["strictly"],
        &["strictest"],
        &["strictly"],
        &["striker"],
        &["strikers"],
        &["strikingly"],
        &["stringent"],
        &["stringent"],
    ],
    range: 3..=11,
};

static WORD_STRE_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_STRE_CHILDREN),
    value: None,
};

pub static WORD_STRE_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("aching"),
        dictgen::InsensitiveStr::Ascii("amade"),
        dictgen::InsensitiveStr::Ascii("amare"),
        dictgen::InsensitiveStr::Ascii("amd"),
        dictgen::InsensitiveStr::Ascii("amear"),
        dictgen::InsensitiveStr::Ascii("ames"),
        dictgen::InsensitiveStr::Ascii("amos"),
        dictgen::InsensitiveStr::Ascii("amtrue"),
        dictgen::InsensitiveStr::Ascii("amus"),
        dictgen::InsensitiveStr::Ascii("amys"),
        dictgen::InsensitiveStr::Ascii("chted"),
        dictgen::InsensitiveStr::Ascii("chtes"),
        dictgen::InsensitiveStr::Ascii("chting"),
        dictgen::InsensitiveStr::Ascii("cthed"),
        dictgen::InsensitiveStr::Ascii("cthes"),
        dictgen::InsensitiveStr::Ascii("cthing"),
        dictgen::InsensitiveStr::Ascii("emlining"),
        dictgen::InsensitiveStr::Ascii("gnth"),
        dictgen::InsensitiveStr::Ascii("gnthen"),
        dictgen::InsensitiveStr::Ascii("gnthening"),
        dictgen::InsensitiveStr::Ascii("gnths"),
        dictgen::InsensitiveStr::Ascii("gth"),
        dictgen::InsensitiveStr::Ascii("ichung"),
        dictgen::InsensitiveStr::Ascii("ightened"),
        dictgen::InsensitiveStr::Ascii("mear"),
        dictgen::InsensitiveStr::Ascii("ngh"),
        dictgen::InsensitiveStr::Ascii("nghen"),
        dictgen::InsensitiveStr::Ascii("nghened"),
        dictgen::InsensitiveStr::Ascii("nghening"),
        dictgen::InsensitiveStr::Ascii("nght"),
        dictgen::InsensitiveStr::Ascii("nghten"),
        dictgen::InsensitiveStr::Ascii("nghtend"),
        dictgen::InsensitiveStr::Ascii("nghtened"),
        dictgen::InsensitiveStr::Ascii("nghtening"),
        dictgen::InsensitiveStr::Ascii("nghtens"),
        dictgen::InsensitiveStr::Ascii("ngsten"),
        dictgen::InsensitiveStr::Ascii("ngtened"),
        dictgen::InsensitiveStr::Ascii("ngtheing"),
        dictgen::InsensitiveStr::Ascii("ngthes"),
        dictgen::InsensitiveStr::Ascii("ngthin"),
        dictgen::InsensitiveStr::Ascii("ngthining"),
        dictgen::InsensitiveStr::Ascii("ngthn"),
        dictgen::InsensitiveStr::Ascii("ngts"),
        dictgen::InsensitiveStr::Ascii("nous"),
        dictgen::InsensitiveStr::Ascii("ntgh"),
        dictgen::InsensitiveStr::Ascii("ntghs"),
        dictgen::InsensitiveStr::Ascii("oid"),
        dictgen::InsensitiveStr::Ascii("ssade"),
        dictgen::InsensitiveStr::Ascii("ssende"),
        dictgen::InsensitiveStr::Ascii("ssers"),
        dictgen::InsensitiveStr::Ascii("sss"),
        dictgen::InsensitiveStr::Ascii("tchs"),
        dictgen::InsensitiveStr::Ascii("tegically"),
    ],
    values: &[
        &["stretching"],
        &["streamed"],
        &["streamer"],
        &["streamed"],
        &["streamer"],
        &["streams"],
        &["streams"],
        &["streamer"],
        &["streams"],
        &["streams"],
        &["stretched"],
        &["stretches"],
        &["stretching"],
        &["stretched"],
        &["stretches"],
        &["stretching"],
        &["streamlining"],
        &["strength"],
        &["strengthen"],
        &["strengthening"],
        &["strengths"],
        &["strength"],
        &["stretching"],
        &["straightened"],
        &["streamer"],
        &["strength"],
        &["strengthen"],
        &["strengthened"],
        &["strengthening"],
        &["strength"],
        &["strengthen"],
        &["strengthen"],
        &["strengthened"],
        &["strengthening"],
        &["strengthen"],
        &["strengthen"],
        &["strengthened"],
        &["strengthening"],
        &["strengths"],
        &["strengthen"],
        &["strengthening"],
        &["strengthen"],
        &["strengths"],
        &["strenuous"],
        &["strength"],
        &["strengths"],
        &["steroid"],
        &["stressed"],
        &["stressed"],
        &["stresses"],
        &["stresses"],
        &["stretches"],
        &["strategically"],
    ],
    range: 3..=9,
};

static WORD_STRA_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_STRA_CHILDREN),
    value: None,
};

pub static WORD_STRA_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("degies"),
        dictgen::InsensitiveStr::Ascii("degy"),
        dictgen::InsensitiveStr::Ascii("gegically"),
        dictgen::InsensitiveStr::Ascii("getic"),
        dictgen::InsensitiveStr::Ascii("getically"),
        dictgen::InsensitiveStr::Ascii("geties"),
        dictgen::InsensitiveStr::Ascii("gety"),
        dictgen::InsensitiveStr::Ascii("ightden"),
        dictgen::InsensitiveStr::Ascii("ighted"),
        dictgen::InsensitiveStr::Ascii("ightend"),
        dictgen::InsensitiveStr::Ascii("ightenend"),
        dictgen::InsensitiveStr::Ascii("ightforeward"),
        dictgen::InsensitiveStr::Ascii("ightforwad"),
        dictgen::InsensitiveStr::Ascii("ightie"),
        dictgen::InsensitiveStr::Ascii("ightin"),
        dictgen::InsensitiveStr::Ascii("ightmen"),
        dictgen::InsensitiveStr::Ascii("ightn"),
        dictgen::InsensitiveStr::Ascii("ightned"),
        dictgen::InsensitiveStr::Ascii("ightner"),
        dictgen::InsensitiveStr::Ascii("ignt"),
        dictgen::InsensitiveStr::Ascii("igntened"),
        dictgen::InsensitiveStr::Ascii("igt"),
        dictgen::InsensitiveStr::Ascii("igth"),
        dictgen::InsensitiveStr::Ascii("igthen"),
        dictgen::InsensitiveStr::Ascii("igthened"),
        dictgen::InsensitiveStr::Ascii("igthforward"),
        dictgen::InsensitiveStr::Ascii("ind"),
        dictgen::InsensitiveStr::Ascii("ings"),
        dictgen::InsensitiveStr::Ascii("itforward"),
        dictgen::InsensitiveStr::Ascii("ngel"),
        dictgen::InsensitiveStr::Ascii("ngeshit"),
        dictgen::InsensitiveStr::Ascii("nget"),
        dictgen::InsensitiveStr::Ascii("ngets"),
        dictgen::InsensitiveStr::Ascii("nglove"),
        dictgen::InsensitiveStr::Ascii("ngreal"),
        dictgen::InsensitiveStr::Ascii("t"),
        dictgen::InsensitiveStr::Ascii("tagically"),
        dictgen::InsensitiveStr::Ascii("tagies"),
        dictgen::InsensitiveStr::Ascii("tegems"),
        dictgen::InsensitiveStr::Ascii("tegicaly"),
        dictgen::InsensitiveStr::Ascii("tegice"),
        dictgen::InsensitiveStr::Ascii("tegiclly"),
        dictgen::InsensitiveStr::Ascii("tegis"),
        dictgen::InsensitiveStr::Ascii("tegisch"),
        dictgen::InsensitiveStr::Ascii("tegisk"),
        dictgen::InsensitiveStr::Ascii("tegiske"),
        dictgen::InsensitiveStr::Ascii("tgey"),
        dictgen::InsensitiveStr::Ascii("tigically"),
        dictgen::InsensitiveStr::Ascii("tled"),
        dictgen::InsensitiveStr::Ascii("vation"),
        dictgen::InsensitiveStr::Ascii("wbarry"),
        dictgen::InsensitiveStr::Ascii("wbeary"),
        dictgen::InsensitiveStr::Ascii("wbeery"),
        dictgen::InsensitiveStr::Ascii("wberies"),
        dictgen::InsensitiveStr::Ascii("wberrries"),
        dictgen::InsensitiveStr::Ascii("wberrry"),
        dictgen::InsensitiveStr::Ascii("wbery"),
        dictgen::InsensitiveStr::Ascii("wbrary"),
        dictgen::InsensitiveStr::Ascii("wbrerry"),
        dictgen::InsensitiveStr::Ascii("wburries"),
        dictgen::InsensitiveStr::Ascii("wburry"),
    ],
    values: &[
        &["strategies"],
        &["strategy"],
        &["strategically"],
        &["strategic"],
        &["strategically"],
        &["strategies"],
        &["strategy"],
        &["straightened"],
        &["straightened"],
        &["straightened"],
        &["straightened"],
        &["straightforward"],
        &["straightforward"],
        &["straighten"],
        &["straighten"],
        &["straighten"],
        &["straighten"],
        &["straightened"],
        &["straighten"],
        &["straighten"],
        &["straightened"],
        &["straight"],
        &["straight"],
        &["straighten"],
        &["straightened"],
        &["straightforward"],
        &["strained"],
        &["strains"],
        &["straightforward"],
        &["strangle"],
        &["strangest"],
        &["strangest"],
        &["strangest"],
        &["strangle"],
        &["strangle"],
        &["start"],
        &["strategically"],
        &["strategies"],
        &["strategies"],
        &["strategically"],
        &["strategies"],
        &["strategically"],
        &["strategies"],
        &["strategic"],
        &["strategies"],
        &["strategies"],
        &["strategy"],
        &["strategically"],
        &["startled"],
        &["starvation"],
        &["strawberry"],
        &["strawberry"],
        &["strawberry"],
        &["strawberries"],
        &["strawberries"],
        &["strawberry"],
        &["strawberry"],
        &["strawberry"],
        &["strawberry"],
        &["strawberries"],
        &["strawberry"],
    ],
    range: 1..=12,
};

static WORD_STP_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_STP_CHILDREN),
    value: None,
};

pub static WORD_STP_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("o")],
    values: &[&["stop"]],
    range: 1..=1,
};

static WORD_STO_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_STO_CHILDREN),
    value: None,
};

pub static WORD_STO_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ckpilled"),
        dictgen::InsensitiveStr::Ascii("ckplie"),
        dictgen::InsensitiveStr::Ascii("mache"),
        dictgen::InsensitiveStr::Ascii("mrfront"),
        dictgen::InsensitiveStr::Ascii("ng"),
        dictgen::InsensitiveStr::Ascii("pry"),
        dictgen::InsensitiveStr::Ascii("reis"),
        dictgen::InsensitiveStr::Ascii("relines"),
        dictgen::InsensitiveStr::Ascii("rise"),
        dictgen::InsensitiveStr::Ascii("rmade"),
        dictgen::InsensitiveStr::Ascii("rmde"),
        dictgen::InsensitiveStr::Ascii("rmend"),
        dictgen::InsensitiveStr::Ascii("rmfornt"),
        dictgen::InsensitiveStr::Ascii("rmfromt"),
        dictgen::InsensitiveStr::Ascii("rmfrount"),
        dictgen::InsensitiveStr::Ascii("rnegst"),
        dictgen::InsensitiveStr::Ascii("rnfront"),
        dictgen::InsensitiveStr::Ascii("rnghold"),
        dictgen::InsensitiveStr::Ascii("ryteling"),
        dictgen::InsensitiveStr::Ascii("rytellling"),
        dictgen::InsensitiveStr::Ascii("yr"),
    ],
    values: &[
        &["stockpile"],
        &["stockpile"],
        &["stomach"],
        &["stormfront"],
        &["strong"],
        &["story"],
        &["storeys"],
        &["storylines"],
        &["stories"],
        &["stormed"],
        &["stormed"],
        &["stormed"],
        &["stormfront"],
        &["stormfront"],
        &["stormfront"],
        &["strongest"],
        &["stormfront"],
        &["stronghold"],
        &["storytelling"],
        &["storytelling"],
        &["story"],
    ],
    range: 2..=10,
};

static WORD_STL_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_STL_CHILDREN),
    value: None,
};

pub static WORD_STL_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("aker"),
        dictgen::InsensitiveStr::Ascii("akers"),
        dictgen::InsensitiveStr::Ascii("ye"),
        dictgen::InsensitiveStr::Ascii("yish"),
    ],
    values: &[&["stalker"], &["stalkers"], &["style"], &["stylish"]],
    range: 2..=5,
};

static WORD_STI_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_STI_CHILDREN),
    value: None,
};

pub static WORD_STI_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("chted"),
        dictgen::InsensitiveStr::Ascii("chting"),
        dictgen::InsensitiveStr::Ascii("ckes"),
        dictgen::InsensitiveStr::Ascii("cthed"),
        dictgen::InsensitiveStr::Ascii("cthes"),
        dictgen::InsensitiveStr::Ascii("cthing"),
        dictgen::InsensitiveStr::Ascii("lus"),
        dictgen::InsensitiveStr::Ascii("milants"),
        dictgen::InsensitiveStr::Ascii("milated"),
        dictgen::InsensitiveStr::Ascii("mluating"),
        dictgen::InsensitiveStr::Ascii("mualted"),
        dictgen::InsensitiveStr::Ascii("mualting"),
        dictgen::InsensitiveStr::Ascii("mualtion"),
        dictgen::InsensitiveStr::Ascii("mulai"),
        dictgen::InsensitiveStr::Ascii("mulans"),
        dictgen::InsensitiveStr::Ascii("mulantes"),
        dictgen::InsensitiveStr::Ascii("mulas"),
        dictgen::InsensitiveStr::Ascii("mulat"),
        dictgen::InsensitiveStr::Ascii("mulatie"),
        dictgen::InsensitiveStr::Ascii("mulatin"),
        dictgen::InsensitiveStr::Ascii("mulaton"),
        dictgen::InsensitiveStr::Ascii("mulents"),
        dictgen::InsensitiveStr::Ascii("mulli"),
        dictgen::InsensitiveStr::Ascii("ngent"),
        dictgen::InsensitiveStr::Ascii("ring"),
        dictgen::InsensitiveStr::Ascii("rker"),
        dictgen::InsensitiveStr::Ascii("rkers"),
        dictgen::InsensitiveStr::Ascii("rrig"),
        dictgen::InsensitiveStr::Ascii("rrs"),
        dictgen::InsensitiveStr::Ascii("tchs"),
    ],
    values: &[
        &["stitched"],
        &["stitching"],
        &["stickers"],
        &["stitched"],
        &["stitches"],
        &["stitching"],
        &["stylus"],
        &["stimulants"],
        &["stimulated"],
        &["stimulating"],
        &["stimulated"],
        &["stimulating"],
        &["stimulation"],
        &["stimuli"],
        &["stimulants"],
        &["stimulants"],
        &["stimulants"],
        &["stimulants"],
        &["stimulated"],
        &["stimulation"],
        &["stimulation"],
        &["stimulants"],
        &["stimuli"],
        &["stringent"],
        &["stirring"],
        &["striker"],
        &["strikers"],
        &["stirring"],
        &["stirs"],
        &["stitches"],
    ],
    range: 3..=8,
};

static WORD_STE_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_STE_CHILDREN),
    value: None,
};

pub static WORD_STE_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("adilly"),
        dictgen::InsensitiveStr::Ascii("adliy"),
        dictgen::InsensitiveStr::Ascii("alhty"),
        dictgen::InsensitiveStr::Ascii("althboy"),
        dictgen::InsensitiveStr::Ascii("althely"),
        dictgen::InsensitiveStr::Ascii("althify"),
        dictgen::InsensitiveStr::Ascii("althly"),
        dictgen::InsensitiveStr::Ascii("althray"),
        dictgen::InsensitiveStr::Ascii("alty"),
        dictgen::InsensitiveStr::Ascii("athly"),
        dictgen::InsensitiveStr::Ascii("eleries"),
        dictgen::InsensitiveStr::Ascii("eles"),
        dictgen::InsensitiveStr::Ascii("lathy"),
        dictgen::InsensitiveStr::Ascii("orid"),
        dictgen::InsensitiveStr::Ascii("reotipe"),
        dictgen::InsensitiveStr::Ascii("reotipical"),
        dictgen::InsensitiveStr::Ascii("reotpye"),
        dictgen::InsensitiveStr::Ascii("reotpyes"),
        dictgen::InsensitiveStr::Ascii("reotpyical"),
        dictgen::InsensitiveStr::Ascii("reotpying"),
        dictgen::InsensitiveStr::Ascii("reotying"),
        dictgen::InsensitiveStr::Ascii("reotypcial"),
        dictgen::InsensitiveStr::Ascii("reotypeing"),
        dictgen::InsensitiveStr::Ascii("reotypers"),
        dictgen::InsensitiveStr::Ascii("reotypian"),
        dictgen::InsensitiveStr::Ascii("reotypying"),
        dictgen::InsensitiveStr::Ascii("riel"),
        dictgen::InsensitiveStr::Ascii("rilze"),
        dictgen::InsensitiveStr::Ascii("riods"),
        dictgen::InsensitiveStr::Ascii("riotype"),
        dictgen::InsensitiveStr::Ascii("riotypes"),
        dictgen::InsensitiveStr::Ascii("riotypical"),
        dictgen::InsensitiveStr::Ascii("riotyping"),
        dictgen::InsensitiveStr::Ascii("rlie"),
        dictgen::InsensitiveStr::Ascii("roetype"),
        dictgen::InsensitiveStr::Ascii("roetypes"),
        dictgen::InsensitiveStr::Ascii("roetypical"),
        dictgen::InsensitiveStr::Ascii("roetyping"),
        dictgen::InsensitiveStr::Ascii("rotypes"),
        dictgen::InsensitiveStr::Ascii("ryotype"),
        dictgen::InsensitiveStr::Ascii("ryotypes"),
        dictgen::InsensitiveStr::Ascii("ryotypical"),
        dictgen::InsensitiveStr::Ascii("ryotyping"),
    ],
    values: &[
        &["steadily"],
        &["steadily"],
        &["stealthy"],
        &["stealthy"],
        &["stealthy"],
        &["stealthy"],
        &["stealthy"],
        &["stealthy"],
        &["stealthy"],
        &["stealthy"],
        &["steelers"],
        &["steelers"],
        &["stealthy"],
        &["steroid"],
        &["stereotype"],
        &["stereotypical"],
        &["stereotypes"],
        &["stereotypes"],
        &["stereotypical"],
        &["stereotyping"],
        &["stereotyping"],
        &["stereotypical"],
        &["stereotyping"],
        &["stereotypes"],
        &["stereotyping"],
        &["stereotyping"],
        &["sterile"],
        &["sterile"],
        &["steroids"],
        &["stereotype"],
        &["stereotypes"],
        &["stereotypical"],
        &["stereotyping"],
        &["sterile"],
        &["stereotype"],
        &["stereotypes"],
        &["stereotypical"],
        &["stereotyping"],
        &["stereotypes"],
        &["stereotype"],
        &["stereotypes"],
        &["stereotypical"],
        &["stereotyping"],
    ],
    range: 4..=10,
};

static WORD_STA_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_STA_CHILDREN),
    value: None,
};

static WORD_STA_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    None,
    Some(&WORD_STAB_NODE),
    None,
    Some(&WORD_STAD_NODE),
    None,
    None,
    Some(&WORD_STAG_NODE),
    None,
    Some(&WORD_STAI_NODE),
    None,
    Some(&WORD_STAK_NODE),
    Some(&WORD_STAL_NODE),
    Some(&WORD_STAM_NODE),
    Some(&WORD_STAN_NODE),
    Some(&WORD_STAO_NODE),
    None,
    None,
    Some(&WORD_STAR_NODE),
    None,
    Some(&WORD_STAT_NODE),
    Some(&WORD_STAU_NODE),
    None,
    None,
    None,
    None,
    None,
];

static WORD_STAU_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_STAU_CHILDREN),
    value: None,
};

pub static WORD_STAU_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ration"),
        dictgen::InsensitiveStr::Ascii("rday"),
        dictgen::InsensitiveStr::Ascii("rdays"),
        dictgen::InsensitiveStr::Ascii("tes"),
    ],
    values: &[&["saturation"], &["saturday"], &["saturdays"], &["statues"]],
    range: 3..=6,
};

static WORD_STAT_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_STAT_CHILDREN),
    value: None,
};

pub static WORD_STAT_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("eman"),
        dictgen::InsensitiveStr::Ascii("ememts"),
        dictgen::InsensitiveStr::Ascii("ictics"),
        dictgen::InsensitiveStr::Ascii("icts"),
        dictgen::InsensitiveStr::Ascii("ionair"),
        dictgen::InsensitiveStr::Ascii("ionairy"),
        dictgen::InsensitiveStr::Ascii("iond"),
        dictgen::InsensitiveStr::Ascii("ionerad"),
        dictgen::InsensitiveStr::Ascii("ionnary"),
        dictgen::InsensitiveStr::Ascii("iony"),
        dictgen::InsensitiveStr::Ascii("isitc"),
        dictgen::InsensitiveStr::Ascii("isitcal"),
        dictgen::InsensitiveStr::Ascii("isitcally"),
        dictgen::InsensitiveStr::Ascii("isitcs"),
        dictgen::InsensitiveStr::Ascii("iskt"),
        dictgen::InsensitiveStr::Ascii("istacally"),
        dictgen::InsensitiveStr::Ascii("istc"),
        dictgen::InsensitiveStr::Ascii("istcal"),
        dictgen::InsensitiveStr::Ascii("isticaly"),
        dictgen::InsensitiveStr::Ascii("isticly"),
        dictgen::InsensitiveStr::Ascii("istisch"),
        dictgen::InsensitiveStr::Ascii("istisk"),
        dictgen::InsensitiveStr::Ascii("its"),
        dictgen::InsensitiveStr::Ascii("ment"),
        dictgen::InsensitiveStr::Ascii("sit"),
        dictgen::InsensitiveStr::Ascii("sitical"),
        dictgen::InsensitiveStr::Ascii("tues"),
        dictgen::InsensitiveStr::Ascii("uer"),
        dictgen::InsensitiveStr::Ascii("uets"),
        dictgen::InsensitiveStr::Ascii("use"),
        dictgen::InsensitiveStr::Ascii("user"),
        dictgen::InsensitiveStr::Ascii("uts"),
    ],
    values: &[
        &["statesman"],
        &["statements"],
        &["statistics"],
        &["statist"],
        &["stationary"],
        &["stationary"],
        &["stationed"],
        &["stationed"],
        &["stationary"],
        &["stationary"],
        &["statistic"],
        &["statistical"],
        &["statistically"],
        &["statistics"],
        &["statist"],
        &["statistically"],
        &["statistic"],
        &["statistical"],
        &["statistically"],
        &["statistical"],
        &["statistics"],
        &["statistics"],
        &["statist"],
        &["statement"],
        &["statist"],
        &["statistical"],
        &["statutes"],
        &["stature"],
        &["statutes"],
        &["statutes"],
        &["stature"],
        &["statutes"],
    ],
    range: 3..=9,
};

static WORD_STAR_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_STAR_CHILDREN),
    value: None,
};

pub static WORD_STAR_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("dardized"),
        dictgen::InsensitiveStr::Ascii("ight"),
        dictgen::InsensitiveStr::Ascii("ighten"),
        dictgen::InsensitiveStr::Ascii("ightened"),
        dictgen::InsensitiveStr::Ascii("ightforward"),
        dictgen::InsensitiveStr::Ascii("ined"),
        dictgen::InsensitiveStr::Ascii("ins"),
        dictgen::InsensitiveStr::Ascii("lted"),
        dictgen::InsensitiveStr::Ascii("nation"),
        dictgen::InsensitiveStr::Ascii("tde"),
        dictgen::InsensitiveStr::Ascii("tegic"),
        dictgen::InsensitiveStr::Ascii("tegically"),
        dictgen::InsensitiveStr::Ascii("tegies"),
        dictgen::InsensitiveStr::Ascii("tegy"),
        dictgen::InsensitiveStr::Ascii("teld"),
        dictgen::InsensitiveStr::Ascii("tlxde"),
        dictgen::InsensitiveStr::Ascii("tsup"),
        dictgen::InsensitiveStr::Ascii("tupbus"),
        dictgen::InsensitiveStr::Ascii("tus"),
        dictgen::InsensitiveStr::Ascii("wberries"),
        dictgen::InsensitiveStr::Ascii("wberry"),
    ],
    values: &[
        &["standardized"],
        &["straight"],
        &["straighten"],
        &["straightened"],
        &["straightforward"],
        &["strained"],
        &["strains"],
        &["startled"],
        &["starvation"],
        &["startled"],
        &["strategic"],
        &["strategically"],
        &["strategies"],
        &["strategy"],
        &["startled"],
        &["startled"],
        &["startups"],
        &["startups"],
        &["startups"],
        &["strawberries"],
        &["strawberry"],
    ],
    range: 3..=11,
};

static WORD_STAO_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_STAO_CHILDREN),
    value: None,
};

pub static WORD_STAO_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("shi")],
    values: &[&["satoshi"]],
    range: 3..=3,
};

static WORD_STAN_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_STAN_CHILDREN),
    value: None,
};

pub static WORD_STAN_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("cels"),
        dictgen::InsensitiveStr::Ascii("cers"),
        dictgen::InsensitiveStr::Ascii("dars"),
        dictgen::InsensitiveStr::Ascii("dartized"),
        dictgen::InsensitiveStr::Ascii("dbay"),
        dictgen::InsensitiveStr::Ascii("dbuy"),
        dictgen::InsensitiveStr::Ascii("derdized"),
        dictgen::InsensitiveStr::Ascii("gant"),
        dictgen::InsensitiveStr::Ascii("ge"),
    ],
    values: &[
        &["stances"],
        &["stances"],
        &["standards"],
        &["standardized"],
        &["standby"],
        &["standby"],
        &["standardized"],
        &["stagnant"],
        &["strange"],
    ],
    range: 2..=8,
};

static WORD_STAM_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_STAM_CHILDREN),
    value: None,
};

pub static WORD_STAM_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("inia"),
        dictgen::InsensitiveStr::Ascii("nia"),
        dictgen::InsensitiveStr::Ascii("pade"),
        dictgen::InsensitiveStr::Ascii("peed"),
    ],
    values: &[&["stamina"], &["stamina"], &["stamped"], &["stamped"]],
    range: 3..=4,
};

static WORD_STAL_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_STAL_CHILDREN),
    value: None,
};

pub static WORD_STAL_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ekrs"),
        dictgen::InsensitiveStr::Ascii("kear"),
        dictgen::InsensitiveStr::Ascii("kes"),
    ],
    values: &[&["stalkers"], &["stalker"], &["stalkers"]],
    range: 3..=4,
};

static WORD_STAK_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_STAK_CHILDREN),
    value: None,
};

pub static WORD_STAK_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("eboard"),
        dictgen::InsensitiveStr::Ascii("eboarding"),
        dictgen::InsensitiveStr::Ascii("ler"),
        dictgen::InsensitiveStr::Ascii("lers"),
    ],
    values: &[
        &["skateboard"],
        &["skateboarding"],
        &["stalker"],
        &["stalkers"],
    ],
    range: 3..=9,
};

static WORD_STAI_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_STAI_CHILDREN),
    value: None,
};

pub static WORD_STAI_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("dum"),
        dictgen::InsensitiveStr::Ascii("dums"),
        dictgen::InsensitiveStr::Ascii("nlees"),
        dictgen::InsensitiveStr::Ascii("on"),
    ],
    values: &[&["stadium"], &["stadiums"], &["stainless"], &["station"]],
    range: 2..=5,
};

static WORD_STAG_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_STAG_CHILDREN),
    value: None,
};

pub static WORD_STAG_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("garing"),
        dictgen::InsensitiveStr::Ascii("gerring"),
        dictgen::InsensitiveStr::Ascii("gerwing"),
        dictgen::InsensitiveStr::Ascii("nat"),
    ],
    values: &[
        &["staggering"],
        &["staggering"],
        &["staggering"],
        &["stagnant"],
    ],
    range: 3..=7,
};

static WORD_STAD_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_STAD_CHILDREN),
    value: None,
};

pub static WORD_STAD_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ius"),
        dictgen::InsensitiveStr::Ascii("uim"),
        dictgen::InsensitiveStr::Ascii("uims"),
    ],
    values: &[&["stadiums"], &["stadium"], &["stadiums"]],
    range: 3..=4,
};

static WORD_STAB_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_STAB_CHILDREN),
    value: None,
};

pub static WORD_STAB_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("elized"),
        dictgen::InsensitiveStr::Ascii("ilizare"),
        dictgen::InsensitiveStr::Ascii("ilizied"),
        dictgen::InsensitiveStr::Ascii("ilizier"),
        dictgen::InsensitiveStr::Ascii("ilizies"),
        dictgen::InsensitiveStr::Ascii("ilzied"),
        dictgen::InsensitiveStr::Ascii("liize"),
        dictgen::InsensitiveStr::Ascii("lility"),
        dictgen::InsensitiveStr::Ascii("lizied"),
    ],
    values: &[
        &["stabilized"],
        &["stabilize"],
        &["stabilize"],
        &["stabilize"],
        &["stabilize"],
        &["stabilized"],
        &["stabilize"],
        &["stability"],
        &["stabilized"],
    ],
    range: 5..=7,
};

static WORD_SR_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_SR_CHILDREN),
    value: None,
};

pub static WORD_SR_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("iarcha"),
        dictgen::InsensitiveStr::Ascii("iraca"),
        dictgen::InsensitiveStr::Ascii("irachia"),
        dictgen::InsensitiveStr::Ascii("irachra"),
        dictgen::InsensitiveStr::Ascii("pouts"),
        dictgen::InsensitiveStr::Ascii("riacha"),
        dictgen::InsensitiveStr::Ascii("yacuse"),
        dictgen::InsensitiveStr::Ascii("yians"),
        dictgen::InsensitiveStr::Ascii("yinge"),
    ],
    values: &[
        &["sriracha"],
        &["sriracha"],
        &["sriracha"],
        &["sriracha"],
        &["sprouts"],
        &["sriracha"],
        &["syracuse"],
        &["syrians"],
        &["syringe"],
    ],
    range: 5..=7,
};

static WORD_SQ_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_SQ_CHILDREN),
    value: None,
};

pub static WORD_SQ_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("audron"),
        dictgen::InsensitiveStr::Ascii("aure"),
        dictgen::InsensitiveStr::Ascii("aurely"),
        dictgen::InsensitiveStr::Ascii("aures"),
        dictgen::InsensitiveStr::Ascii("euaky"),
        dictgen::InsensitiveStr::Ascii("iurtle"),
        dictgen::InsensitiveStr::Ascii("iushy"),
        dictgen::InsensitiveStr::Ascii("uadroon"),
        dictgen::InsensitiveStr::Ascii("uardon"),
        dictgen::InsensitiveStr::Ascii("uareds"),
        dictgen::InsensitiveStr::Ascii("uarey"),
        dictgen::InsensitiveStr::Ascii("uarley"),
        dictgen::InsensitiveStr::Ascii("ueakey"),
        dictgen::InsensitiveStr::Ascii("ueakly"),
        dictgen::InsensitiveStr::Ascii("uirel"),
        dictgen::InsensitiveStr::Ascii("uirle"),
        dictgen::InsensitiveStr::Ascii("uirlte"),
        dictgen::InsensitiveStr::Ascii("uirrelies"),
        dictgen::InsensitiveStr::Ascii("uirrelius"),
        dictgen::InsensitiveStr::Ascii("uirrells"),
        dictgen::InsensitiveStr::Ascii("uirrelus"),
        dictgen::InsensitiveStr::Ascii("uirrl"),
        dictgen::InsensitiveStr::Ascii("uirrle"),
        dictgen::InsensitiveStr::Ascii("uirrles"),
        dictgen::InsensitiveStr::Ascii("uirrtle"),
        dictgen::InsensitiveStr::Ascii("uirte"),
        dictgen::InsensitiveStr::Ascii("uirtel"),
        dictgen::InsensitiveStr::Ascii("uishey"),
        dictgen::InsensitiveStr::Ascii("uishly"),
        dictgen::InsensitiveStr::Ascii("uritle"),
        dictgen::InsensitiveStr::Ascii("urriel"),
        dictgen::InsensitiveStr::Ascii("urriels"),
        dictgen::InsensitiveStr::Ascii("urtile"),
        dictgen::InsensitiveStr::Ascii("usihy"),
    ],
    values: &[
        &["squadron"],
        &["square"],
        &["squarely"],
        &["squares"],
        &["squeaky"],
        &["squirtle"],
        &["squishy"],
        &["squadron"],
        &["squadron"],
        &["squares"],
        &["squarely"],
        &["squarely"],
        &["squeaky"],
        &["squeaky"],
        &["squirtle"],
        &["squirrel"],
        &["squirtle"],
        &["squirrels"],
        &["squirrels"],
        &["squirrels"],
        &["squirrels"],
        &["squirrel"],
        &["squirrel"],
        &["squirrels"],
        &["squirrel"],
        &["squirtle"],
        &["squirtle"],
        &["squishy"],
        &["squishy"],
        &["squirtle"],
        &["squirrel"],
        &["squirrels"],
        &["squirtle"],
        &["squishy"],
    ],
    range: 4..=9,
};

static WORD_SP_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_SP_CHILDREN),
    value: None,
};

static WORD_SP_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    Some(&WORD_SPA_NODE),
    None,
    None,
    None,
    Some(&WORD_SPE_NODE),
    None,
    None,
    Some(&WORD_SPH_NODE),
    Some(&WORD_SPI_NODE),
    None,
    None,
    Some(&WORD_SPL_NODE),
    None,
    None,
    Some(&WORD_SPO_NODE),
    Some(&WORD_SPP_NODE),
    None,
    Some(&WORD_SPR_NODE),
    None,
    None,
    None,
    None,
    Some(&WORD_SPW_NODE),
    None,
    None,
    None,
];

static WORD_SPW_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_SPW_CHILDREN),
    value: None,
};

pub static WORD_SPW_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("aned"),
        dictgen::InsensitiveStr::Ascii("aning"),
    ],
    values: &[&["spawned"], &["spawning"]],
    range: 4..=5,
};

static WORD_SPR_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_SPR_CHILDREN),
    value: None,
};

pub static WORD_SPR_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("akling"),
        dictgen::InsensitiveStr::Ascii("ayade"),
        dictgen::InsensitiveStr::Ascii("eaded"),
        dictgen::InsensitiveStr::Ascii("eadhseet"),
        dictgen::InsensitiveStr::Ascii("eadhseets"),
        dictgen::InsensitiveStr::Ascii("eadsheat"),
        dictgen::InsensitiveStr::Ascii("eadsheats"),
        dictgen::InsensitiveStr::Ascii("eadsheeds"),
        dictgen::InsensitiveStr::Ascii("eadsheeet"),
        dictgen::InsensitiveStr::Ascii("eadsheeters"),
        dictgen::InsensitiveStr::Ascii("eadsheeticus"),
        dictgen::InsensitiveStr::Ascii("eadshet"),
        dictgen::InsensitiveStr::Ascii("eadshets"),
        dictgen::InsensitiveStr::Ascii("ed"),
        dictgen::InsensitiveStr::Ascii("eedsheet"),
        dictgen::InsensitiveStr::Ascii("ingfeild"),
        dictgen::InsensitiveStr::Ascii("ingfeld"),
        dictgen::InsensitiveStr::Ascii("ingfied"),
        dictgen::InsensitiveStr::Ascii("ingfiled"),
        dictgen::InsensitiveStr::Ascii("ingst"),
        dictgen::InsensitiveStr::Ascii("inke"),
        dictgen::InsensitiveStr::Ascii("inkel"),
        dictgen::InsensitiveStr::Ascii("inkeld"),
        dictgen::InsensitiveStr::Ascii("inklered"),
        dictgen::InsensitiveStr::Ascii("intas"),
        dictgen::InsensitiveStr::Ascii("iritual"),
        dictgen::InsensitiveStr::Ascii("itual"),
        dictgen::InsensitiveStr::Ascii("oels"),
        dictgen::InsensitiveStr::Ascii("otsmanship"),
        dictgen::InsensitiveStr::Ascii("outes"),
    ],
    values: &[
        &["sparkling"],
        &["sprayed"],
        &["spread"],
        &["spreadsheet"],
        &["spreadsheets"],
        &["spreadsheet"],
        &["spreadsheets"],
        &["spreadsheets"],
        &["spreadsheets"],
        &["spreadsheets"],
        &["spreadsheets"],
        &["spreadsheet"],
        &["spreadsheets"],
        &["spread"],
        &["spreadsheet"],
        &["springfield"],
        &["springfield"],
        &["springfield"],
        &["springfield"],
        &["sprints"],
        &["sprinkle"],
        &["sprinkle"],
        &["sprinkled"],
        &["sprinkled"],
        &["sprints"],
        &["spiritual"],
        &["spiritual"],
        &["sproles"],
        &["sportsmanship"],
        &["sprouts"],
    ],
    range: 2..=12,
};

static WORD_SPP_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_SPP_CHILDREN),
    value: None,
};

pub static WORD_SPP_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("eches")],
    values: &[&["speeches"]],
    range: 5..=5,
};

static WORD_SPO_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_SPO_CHILDREN),
    value: None,
};

pub static WORD_SPO_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ace"),
        dictgen::InsensitiveStr::Ascii("ilerd"),
        dictgen::InsensitiveStr::Ascii("iles"),
        dictgen::InsensitiveStr::Ascii("itfy"),
        dictgen::InsensitiveStr::Ascii("lied"),
        dictgen::InsensitiveStr::Ascii("liers"),
        dictgen::InsensitiveStr::Ascii("natenous"),
        dictgen::InsensitiveStr::Ascii("natenously"),
        dictgen::InsensitiveStr::Ascii("natneous"),
        dictgen::InsensitiveStr::Ascii("nosred"),
        dictgen::InsensitiveStr::Ascii("nser"),
        dictgen::InsensitiveStr::Ascii("nsered"),
        dictgen::InsensitiveStr::Ascii("nsership"),
        dictgen::InsensitiveStr::Ascii("nsord"),
        dictgen::InsensitiveStr::Ascii("nsorees"),
        dictgen::InsensitiveStr::Ascii("nsores"),
        dictgen::InsensitiveStr::Ascii("nsorhip"),
        dictgen::InsensitiveStr::Ascii("nsorhips"),
        dictgen::InsensitiveStr::Ascii("nsorhsip"),
        dictgen::InsensitiveStr::Ascii("nsorise"),
        dictgen::InsensitiveStr::Ascii("nsorshop"),
        dictgen::InsensitiveStr::Ascii("ntaenous"),
        dictgen::InsensitiveStr::Ascii("ntaenously"),
        dictgen::InsensitiveStr::Ascii("ntainous"),
        dictgen::InsensitiveStr::Ascii("ntainously"),
        dictgen::InsensitiveStr::Ascii("ntaneos"),
        dictgen::InsensitiveStr::Ascii("ntaneosly"),
        dictgen::InsensitiveStr::Ascii("ntaneoulsy"),
        dictgen::InsensitiveStr::Ascii("ntaneouly"),
        dictgen::InsensitiveStr::Ascii("ntanes"),
        dictgen::InsensitiveStr::Ascii("ntaneuos"),
        dictgen::InsensitiveStr::Ascii("ntaneuosly"),
        dictgen::InsensitiveStr::Ascii("ntaneus"),
        dictgen::InsensitiveStr::Ascii("ntanious"),
        dictgen::InsensitiveStr::Ascii("ntaniously"),
        dictgen::InsensitiveStr::Ascii("ntanous"),
        dictgen::InsensitiveStr::Ascii("ntanuously"),
        dictgen::InsensitiveStr::Ascii("nteanous"),
        dictgen::InsensitiveStr::Ascii("nteanously"),
        dictgen::InsensitiveStr::Ascii("nteneous"),
        dictgen::InsensitiveStr::Ascii("nteneously"),
        dictgen::InsensitiveStr::Ascii("nzored"),
        dictgen::InsensitiveStr::Ascii("onfulls"),
        dictgen::InsensitiveStr::Ascii("ranos"),
        dictgen::InsensitiveStr::Ascii("rles"),
        dictgen::InsensitiveStr::Ascii("rstmanship"),
        dictgen::InsensitiveStr::Ascii("rtmansship"),
        dictgen::InsensitiveStr::Ascii("rtsmamship"),
        dictgen::InsensitiveStr::Ascii("rtsmansship"),
        dictgen::InsensitiveStr::Ascii("rtsmenship"),
        dictgen::InsensitiveStr::Ascii("ruts"),
        dictgen::InsensitiveStr::Ascii("tfiy"),
        dictgen::InsensitiveStr::Ascii("tifiy"),
        dictgen::InsensitiveStr::Ascii("tifty"),
    ],
    values: &[
        &["space"],
        &["spoiled"],
        &["spoilers"],
        &["spotify"],
        &["spoiled"],
        &["spoilers"],
        &["spontaneous"],
        &["spontaneously"],
        &["spontaneous"],
        &["sponsored"],
        &["sponsor"],
        &["sponsored"],
        &["sponsorship"],
        &["sponsored"],
        &["sponsors"],
        &["sponsors"],
        &["sponsorship"],
        &["sponsorship"],
        &["sponsorship"],
        &["sponsors"],
        &["sponsorship"],
        &["spontaneous"],
        &["spontaneously"],
        &["spontaneous"],
        &["spontaneously"],
        &["spontaneous"],
        &["spontaneously"],
        &["spontaneously"],
        &["spontaneously"],
        &["spontaneous"],
        &["spontaneous"],
        &["spontaneously"],
        &["spontaneous"],
        &["spontaneous"],
        &["spontaneously"],
        &["spontaneous"],
        &["spontaneously"],
        &["spontaneous"],
        &["spontaneously"],
        &["spontaneous"],
        &["spontaneously"],
        &["sponsored"],
        &["spoonfuls"],
        &["sopranos"],
        &["sproles"],
        &["sportsmanship"],
        &["sportsmanship"],
        &["sportsmanship"],
        &["sportsmanship"],
        &["sportsmanship"],
        &["sprouts"],
        &["spotify"],
        &["spotify"],
        &["spotify"],
    ],
    range: 3..=11,
};

static WORD_SPL_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_SPL_CHILDREN),
    value: None,
};

pub static WORD_SPL_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("aton"),
        dictgen::InsensitiveStr::Ascii("atooon"),
        dictgen::InsensitiveStr::Ascii("eling"),
        dictgen::InsensitiveStr::Ascii("itner"),
        dictgen::InsensitiveStr::Ascii("ittr"),
    ],
    values: &[
        &["splatoon"],
        &["splatoon"],
        &["spelling"],
        &["splinter"],
        &["splitter"],
    ],
    range: 4..=6,
};

static WORD_SPI_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_SPI_CHILDREN),
    value: None,
};

pub static WORD_SPI_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("lnter"),
        dictgen::InsensitiveStr::Ascii("ltter"),
        dictgen::InsensitiveStr::Ascii("ndel"),
        dictgen::InsensitiveStr::Ascii("ndrel"),
        dictgen::InsensitiveStr::Ascii("ritd"),
        dictgen::InsensitiveStr::Ascii("rites"),
        dictgen::InsensitiveStr::Ascii("ritis"),
        dictgen::InsensitiveStr::Ascii("ritualiy"),
        dictgen::InsensitiveStr::Ascii("rituallity"),
        dictgen::InsensitiveStr::Ascii("rituallly"),
        dictgen::InsensitiveStr::Ascii("ritualty"),
        dictgen::InsensitiveStr::Ascii("ritualy"),
        dictgen::InsensitiveStr::Ascii("rituella"),
        dictgen::InsensitiveStr::Ascii("ritus"),
        dictgen::InsensitiveStr::Ascii("rtied"),
        dictgen::InsensitiveStr::Ascii("rtiuality"),
        dictgen::InsensitiveStr::Ascii("rtiually"),
        dictgen::InsensitiveStr::Ascii("rutuality"),
        dictgen::InsensitiveStr::Ascii("rutually"),
        dictgen::InsensitiveStr::Ascii("tirually"),
    ],
    values: &[
        &["splinter"],
        &["splitter"],
        &["spindle"],
        &["spindle"],
        &["spirited"],
        &["spirits"],
        &["spirits"],
        &["spiritually"],
        &["spiritually"],
        &["spiritually"],
        &["spirituality"],
        &["spiritually"],
        &["spiritually"],
        &["spirits"],
        &["spirited"],
        &["spirituality"],
        &["spiritually"],
        &["spirituality"],
        &["spiritually"],
        &["spiritually"],
    ],
    range: 4..=10,
};

static WORD_SPH_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_SPH_CHILDREN),
    value: None,
};

pub static WORD_SPH_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("agetti"),
        dictgen::InsensitiveStr::Ascii("ereos"),
    ],
    values: &[&["spaghetti"], &["spheres"]],
    range: 5..=6,
};

static WORD_SPE_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_SPE_CHILDREN),
    value: None,
};

static WORD_SPE_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    Some(&WORD_SPEA_NODE),
    None,
    Some(&WORD_SPEC_NODE),
    None,
    Some(&WORD_SPEE_NODE),
    None,
    None,
    Some(&WORD_SPEH_NODE),
    Some(&WORD_SPEI_NODE),
    None,
    None,
    Some(&WORD_SPEL_NODE),
    None,
    Some(&WORD_SPEN_NODE),
    None,
    None,
    None,
    Some(&WORD_SPER_NODE),
    Some(&WORD_SPES_NODE),
    Some(&WORD_SPET_NODE),
    None,
    None,
    None,
    None,
    None,
    Some(&WORD_SPEZ_NODE),
];

static WORD_SPEZ_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_SPEZ_CHILDREN),
    value: None,
};

pub static WORD_SPEZ_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("ialisation")],
    values: &[&["specialisation"]],
    range: 10..=10,
};

static WORD_SPET_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_SPET_CHILDREN),
    value: None,
};

pub static WORD_SPET_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("ember")],
    values: &[&["september"]],
    range: 5..=5,
};

static WORD_SPES_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_SPES_CHILDREN),
    value: None,
};

pub static WORD_SPES_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ifically"),
        dictgen::InsensitiveStr::Ascii("ification"),
        dictgen::InsensitiveStr::Ascii("ifications"),
    ],
    values: &[&["specifically"], &["specification"], &["specifications"]],
    range: 8..=10,
};

static WORD_SPER_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_SPER_CHILDREN),
    value: None,
};

pub static WORD_SPER_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("matozoan")],
    values: &[&["spermatozoon"]],
    range: 8..=8,
};

static WORD_SPEN_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_SPEN_CHILDREN),
    value: None,
};

pub static WORD_SPEN_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("dour")],
    values: &[&["splendour"]],
    range: 4..=4,
};

static WORD_SPEL_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_SPEL_CHILDREN),
    value: None,
};

pub static WORD_SPEL_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("lig"),
        dictgen::InsensitiveStr::Ascii("lign"),
    ],
    values: &[&["spelling"], &["spelling"]],
    range: 3..=4,
};

static WORD_SPEI_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_SPEI_CHILDREN),
    value: None,
};

pub static WORD_SPEI_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("cal"),
        dictgen::InsensitiveStr::Ascii("calist"),
        dictgen::InsensitiveStr::Ascii("cally"),
        dictgen::InsensitiveStr::Ascii("cals"),
        dictgen::InsensitiveStr::Ascii("ces"),
    ],
    values: &[
        &["special"],
        &["specialist"],
        &["specially"],
        &["specials"],
        &["species"],
    ],
    range: 3..=6,
};

static WORD_SPEH_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_SPEH_CHILDREN),
    value: None,
};

pub static WORD_SPEH_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("res"),
        dictgen::InsensitiveStr::Ascii("rical"),
    ],
    values: &[&["spheres"], &["spherical"]],
    range: 3..=5,
};

static WORD_SPEE_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_SPEE_CHILDREN),
    value: None,
};

pub static WORD_SPEE_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("cheasy"),
        dictgen::InsensitiveStr::Ascii("chers"),
        dictgen::InsensitiveStr::Ascii("chs"),
    ],
    values: &[&["speeches"], &["speeches"], &["speeches"]],
    range: 3..=6,
};

static WORD_SPEC_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_SPEC_CHILDREN),
    value: None,
};

static WORD_SPEC_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    Some(&WORD_SPECA_NODE),
    None,
    None,
    None,
    Some(&WORD_SPECE_NODE),
    Some(&WORD_SPECF_NODE),
    None,
    None,
    Some(&WORD_SPECI_NODE),
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    Some(&WORD_SPECR_NODE),
    None,
    Some(&WORD_SPECT_NODE),
    Some(&WORD_SPECU_NODE),
    None,
    None,
    None,
    None,
    None,
];

static WORD_SPECU_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_SPECU_CHILDREN),
    value: None,
};

pub static WORD_SPECU_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("alte"),
        dictgen::InsensitiveStr::Ascii("alting"),
        dictgen::InsensitiveStr::Ascii("altion"),
        dictgen::InsensitiveStr::Ascii("altions"),
        dictgen::InsensitiveStr::Ascii("altive"),
        dictgen::InsensitiveStr::Ascii("larite"),
        dictgen::InsensitiveStr::Ascii("latie"),
        dictgen::InsensitiveStr::Ascii("laties"),
        dictgen::InsensitiveStr::Ascii("latin"),
    ],
    values: &[
        &["speculate"],
        &["speculating"],
        &["speculation"],
        &["speculation"],
        &["speculative"],
        &["speculative"],
        &["speculative"],
        &["speculative"],
        &["speculation"],
    ],
    range: 4..=7,
};

static WORD_SPECT_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_SPECT_CHILDREN),
    value: None,
};

pub static WORD_SPECT_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("acuarly"),
        dictgen::InsensitiveStr::Ascii("aculair"),
        dictgen::InsensitiveStr::Ascii("aculaire"),
        dictgen::InsensitiveStr::Ascii("aculalry"),
        dictgen::InsensitiveStr::Ascii("acularely"),
        dictgen::InsensitiveStr::Ascii("acularily"),
        dictgen::InsensitiveStr::Ascii("aculary"),
        dictgen::InsensitiveStr::Ascii("acullar"),
        dictgen::InsensitiveStr::Ascii("arors"),
        dictgen::InsensitiveStr::Ascii("aters"),
        dictgen::InsensitiveStr::Ascii("atores"),
        dictgen::InsensitiveStr::Ascii("atular"),
        dictgen::InsensitiveStr::Ascii("atularly"),
        dictgen::InsensitiveStr::Ascii("auclar"),
        dictgen::InsensitiveStr::Ascii("aulars"),
        dictgen::InsensitiveStr::Ascii("ecular"),
        dictgen::InsensitiveStr::Ascii("racal"),
        dictgen::InsensitiveStr::Ascii("rail"),
        dictgen::InsensitiveStr::Ascii("raply"),
        dictgen::InsensitiveStr::Ascii("rolab"),
        dictgen::InsensitiveStr::Ascii("s"),
        dictgen::InsensitiveStr::Ascii("um"),
    ],
    values: &[
        &["spectacular"],
        &["spectacular"],
        &["spectacular"],
        &["spectacularly"],
        &["spectacularly"],
        &["spectacularly"],
        &["spectacularly"],
        &["spectacularly"],
        &["spectators"],
        &["spectators"],
        &["spectators"],
        &["spectacular"],
        &["spectacularly"],
        &["spectacular"],
        &["spectaculars"],
        &["spectacular"],
        &["spectral"],
        &["spectral"],
        &["spectral"],
        &["spectral"],
        &["aspects"],
        &["spectrum"],
    ],
    range: 1..=9,
};

static WORD_SPECR_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_SPECR_CHILDREN),
    value: None,
};

pub static WORD_SPECR_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("tal")],
    values: &[&["spectral"]],
    range: 3..=3,
};

static WORD_SPECI_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_SPECI_CHILDREN),
    value: None,
};

pub static WORD_SPECI_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("aal"),
        dictgen::InsensitiveStr::Ascii("ales"),
        dictgen::InsensitiveStr::Ascii("alication"),
        dictgen::InsensitiveStr::Ascii("alice"),
        dictgen::InsensitiveStr::Ascii("aliced"),
        dictgen::InsensitiveStr::Ascii("alices"),
        dictgen::InsensitiveStr::Ascii("alied"),
        dictgen::InsensitiveStr::Ascii("alies"),
        dictgen::InsensitiveStr::Ascii("alis"),
        dictgen::InsensitiveStr::Ascii("alistes"),
        dictgen::InsensitiveStr::Ascii("alites"),
        dictgen::InsensitiveStr::Ascii("alits"),
        dictgen::InsensitiveStr::Ascii("alizaiton"),
        dictgen::InsensitiveStr::Ascii("alizare"),
        dictgen::InsensitiveStr::Ascii("alizate"),
        dictgen::InsensitiveStr::Ascii("alizaton"),
        dictgen::InsensitiveStr::Ascii("alizeds"),
        dictgen::InsensitiveStr::Ascii("alizied"),
        dictgen::InsensitiveStr::Ascii("allist"),
        dictgen::InsensitiveStr::Ascii("allity"),
        dictgen::InsensitiveStr::Ascii("allize"),
        dictgen::InsensitiveStr::Ascii("allized"),
        dictgen::InsensitiveStr::Ascii("allly"),
        dictgen::InsensitiveStr::Ascii("allty"),
        dictgen::InsensitiveStr::Ascii("alops"),
        dictgen::InsensitiveStr::Ascii("alsts"),
        dictgen::InsensitiveStr::Ascii("alt"),
        dictgen::InsensitiveStr::Ascii("altys"),
        dictgen::InsensitiveStr::Ascii("aly"),
        dictgen::InsensitiveStr::Ascii("alz"),
        dictgen::InsensitiveStr::Ascii("alzed"),
        dictgen::InsensitiveStr::Ascii("alzes"),
        dictgen::InsensitiveStr::Ascii("alzied"),
        dictgen::InsensitiveStr::Ascii("as"),
        dictgen::InsensitiveStr::Ascii("atly"),
        dictgen::InsensitiveStr::Ascii("fcally"),
        dictgen::InsensitiveStr::Ascii("fcation"),
        dictgen::InsensitiveStr::Ascii("fed"),
        dictgen::InsensitiveStr::Ascii("ficaiton"),
        dictgen::InsensitiveStr::Ascii("ficaitons"),
        dictgen::InsensitiveStr::Ascii("ficaly"),
        dictgen::InsensitiveStr::Ascii("ficato"),
        dictgen::InsensitiveStr::Ascii("ficatons"),
        dictgen::InsensitiveStr::Ascii("fices"),
        dictgen::InsensitiveStr::Ascii("ficies"),
        dictgen::InsensitiveStr::Ascii("fiing"),
        dictgen::InsensitiveStr::Ascii("fikation"),
        dictgen::InsensitiveStr::Ascii("fing"),
        dictgen::InsensitiveStr::Ascii("fiy"),
        dictgen::InsensitiveStr::Ascii("fiying"),
        dictgen::InsensitiveStr::Ascii("fiyng"),
        dictgen::InsensitiveStr::Ascii("laized"),
        dictgen::InsensitiveStr::Ascii("liast"),
        dictgen::InsensitiveStr::Ascii("liazation"),
        dictgen::InsensitiveStr::Ascii("liazed"),
        dictgen::InsensitiveStr::Ascii("man"),
        dictgen::InsensitiveStr::Ascii("mine"),
        dictgen::InsensitiveStr::Ascii("mines"),
        dictgen::InsensitiveStr::Ascii("sl"),
    ],
    values: &[
        &["special"],
        &["specials"],
        &["specialization"],
        &["specialize"],
        &["specialized"],
        &["specializes"],
        &["specialized"],
        &["specializes"],
        &["specials"],
        &["specialists"],
        &["specializes"],
        &["specials"],
        &["specialization"],
        &["specialize"],
        &["specialize"],
        &["specialization"],
        &["specializes"],
        &["specialize"],
        &["specialist"],
        &["specially"],
        &["specialize"],
        &["specialized"],
        &["specially"],
        &["specially"],
        &["specials"],
        &["specialists"],
        &["specialist"],
        &["specials"],
        &["specially"],
        &["specialize"],
        &["specialized"],
        &["specializes"],
        &["specialized"],
        &["specials"],
        &["specialty"],
        &["specifically"],
        &["specification"],
        &["specified"],
        &["specifications"],
        &["specification"],
        &["specifically"],
        &["specification"],
        &["specifications"],
        &["specifics"],
        &["specifics"],
        &["specifying"],
        &["specification"],
        &["specifying"],
        &["specify"],
        &["specifying"],
        &["specifying"],
        &["specialize"],
        &["specialists"],
        &["specialization"],
        &["specialize"],
        &["specimen"],
        &["specimen"],
        &["specimen"],
        &["specials"],
    ],
    range: 2..=9,
};

static WORD_SPECF_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_SPECF_CHILDREN),
    value: None,
};

pub static WORD_SPECF_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("ic")],
    values: &[&["specific"]],
    range: 2..=2,
};

static WORD_SPECE_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_SPECE_CHILDREN),
    value: None,
};

pub static WORD_SPECE_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("min")],
    values: &[&["specimen"]],
    range: 3..=3,
};

static WORD_SPECA_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_SPECA_CHILDREN),
    value: None,
};

pub static WORD_SPECA_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("il"),
        dictgen::InsensitiveStr::Ascii("ilist"),
        dictgen::InsensitiveStr::Ascii("ilists"),
        dictgen::InsensitiveStr::Ascii("ilization"),
        dictgen::InsensitiveStr::Ascii("ilize"),
        dictgen::InsensitiveStr::Ascii("ilized"),
        dictgen::InsensitiveStr::Ascii("ilizes"),
        dictgen::InsensitiveStr::Ascii("illy"),
        dictgen::InsensitiveStr::Ascii("ilty"),
        dictgen::InsensitiveStr::Ascii("lity"),
        dictgen::InsensitiveStr::Ascii("tcular"),
    ],
    values: &[
        &["special"],
        &["specialist"],
        &["specialists"],
        &["specialization"],
        &["specializes"],
        &["specialized"],
        &["specializes"],
        &["specially"],
        &["specialty"],
        &["speciality"],
        &["spectacular"],
    ],
    range: 2..=9,
};

static WORD_SPEA_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_SPEA_CHILDREN),
    value: None,
};

pub static WORD_SPEA_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("ch")],
    values: &[&["speech"]],
    range: 2..=2,
};

static WORD_SPA_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_SPA_CHILDREN),
    value: None,
};

pub static WORD_SPA_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("cebr"),
        dictgen::InsensitiveStr::Ascii("cegoat"),
        dictgen::InsensitiveStr::Ascii("cification"),
        dictgen::InsensitiveStr::Ascii("gehtti"),
        dictgen::InsensitiveStr::Ascii("gheti"),
        dictgen::InsensitiveStr::Ascii("hgetti"),
        dictgen::InsensitiveStr::Ascii("inish"),
        dictgen::InsensitiveStr::Ascii("insh"),
        dictgen::InsensitiveStr::Ascii("ltoon"),
        dictgen::InsensitiveStr::Ascii("mmade"),
        dictgen::InsensitiveStr::Ascii("mmare"),
        dictgen::InsensitiveStr::Ascii("mmear"),
        dictgen::InsensitiveStr::Ascii("mmend"),
        dictgen::InsensitiveStr::Ascii("mmeur"),
        dictgen::InsensitiveStr::Ascii("nisch"),
        dictgen::InsensitiveStr::Ascii("nsih"),
        dictgen::InsensitiveStr::Ascii("nwed"),
        dictgen::InsensitiveStr::Ascii("rkel"),
        dictgen::InsensitiveStr::Ascii("rklie"),
        dictgen::InsensitiveStr::Ascii("rlking"),
        dictgen::InsensitiveStr::Ascii("rtaniis"),
        dictgen::InsensitiveStr::Ascii("rtanops"),
        dictgen::InsensitiveStr::Ascii("rtants"),
        dictgen::InsensitiveStr::Ascii("rtas"),
        dictgen::InsensitiveStr::Ascii("rtsn"),
        dictgen::InsensitiveStr::Ascii("ryed"),
        dictgen::InsensitiveStr::Ascii("wend"),
        dictgen::InsensitiveStr::Ascii("wnig"),
        dictgen::InsensitiveStr::Ascii("wnign"),
    ],
    values: &[
        &["spacebar"],
        &["scapegoat"],
        &["specification"],
        &["spaghetti"],
        &["spaghetti"],
        &["spaghetti"],
        &["spanish"],
        &["spanish"],
        &["splatoon"],
        &["spammed"],
        &["spammer"],
        &["spammer"],
        &["spammed"],
        &["spammer"],
        &["spanish"],
        &["spanish"],
        &["spawned"],
        &["sparkle"],
        &["sparkle"],
        &["sparkling"],
        &["spartans"],
        &["spartans"],
        &["spartans"],
        &["spartans"],
        &["spartans"],
        &["sprayed"],
        &["spawned"],
        &["spawning"],
        &["spawning"],
    ],
    range: 4..=10,
};

static WORD_SO_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_SO_CHILDREN),
    value: None,
};

static WORD_SO_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    None,
    Some(&WORD_SOB_NODE),
    Some(&WORD_SOC_NODE),
    None,
    Some(&WORD_SOE_NODE),
    Some(&WORD_SOF_NODE),
    None,
    Some(&WORD_SOH_NODE),
    Some(&WORD_SOI_NODE),
    None,
    None,
    Some(&WORD_SOL_NODE),
    Some(&WORD_SOM_NODE),
    None,
    None,
    Some(&WORD_SOP_NODE),
    None,
    Some(&WORD_SOR_NODE),
    None,
    Some(&WORD_SOT_NODE),
    Some(&WORD_SOU_NODE),
    Some(&WORD_SOV_NODE),
    None,
    None,
    None,
    None,
];

static WORD_SOV_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_SOV_CHILDREN),
    value: None,
};

pub static WORD_SOV_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("eits"),
        dictgen::InsensitiveStr::Ascii("eregin"),
        dictgen::InsensitiveStr::Ascii("eregnity"),
        dictgen::InsensitiveStr::Ascii("ereighnty"),
        dictgen::InsensitiveStr::Ascii("ereighty"),
        dictgen::InsensitiveStr::Ascii("ereignety"),
        dictgen::InsensitiveStr::Ascii("ereignity"),
        dictgen::InsensitiveStr::Ascii("ereigny"),
        dictgen::InsensitiveStr::Ascii("erein"),
        dictgen::InsensitiveStr::Ascii("ereing"),
        dictgen::InsensitiveStr::Ascii("ereingty"),
        dictgen::InsensitiveStr::Ascii("ereinity"),
        dictgen::InsensitiveStr::Ascii("ereinty"),
        dictgen::InsensitiveStr::Ascii("eriegn"),
        dictgen::InsensitiveStr::Ascii("eriegnty"),
        dictgen::InsensitiveStr::Ascii("eriengty"),
        dictgen::InsensitiveStr::Ascii("erign"),
        dictgen::InsensitiveStr::Ascii("erignity"),
        dictgen::InsensitiveStr::Ascii("erignty"),
        dictgen::InsensitiveStr::Ascii("ietes"),
    ],
    values: &[
        &["soviets"],
        &["sovereign"],
        &["sovereignty"],
        &["sovereignty"],
        &["sovereignty"],
        &["sovereignty"],
        &["sovereignty"],
        &["sovereignty"],
        &["sovereign"],
        &["sovereign"],
        &["sovereignty"],
        &["sovereignty"],
        &["sovereignty"],
        &["sovereign"],
        &["sovereignty"],
        &["sovereignty"],
        &["sovereign"],
        &["sovereignty"],
        &["sovereignty"],
        &["soviets"],
    ],
    range: 4..=9,
};

static WORD_SOU_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_SOU_CHILDREN),
    value: None,
};

pub static WORD_SOU_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("dn"),
        dictgen::InsensitiveStr::Ascii("dns"),
        dictgen::InsensitiveStr::Ascii("dntrack"),
        dictgen::InsensitiveStr::Ascii("ld"),
        dictgen::InsensitiveStr::Ascii("ndrtack"),
        dictgen::InsensitiveStr::Ascii("ndtracs"),
        dictgen::InsensitiveStr::Ascii("ndtrak"),
        dictgen::InsensitiveStr::Ascii("ndtrakc"),
        dictgen::InsensitiveStr::Ascii("ndtrakcs"),
        dictgen::InsensitiveStr::Ascii("ndtrakk"),
        dictgen::InsensitiveStr::Ascii("ndtraks"),
        dictgen::InsensitiveStr::Ascii("ntrack"),
        dictgen::InsensitiveStr::Ascii("rth"),
        dictgen::InsensitiveStr::Ascii("rthern"),
        dictgen::InsensitiveStr::Ascii("thampon"),
        dictgen::InsensitiveStr::Ascii("thamption"),
        dictgen::InsensitiveStr::Ascii("thamton"),
        dictgen::InsensitiveStr::Ascii("thamtpon"),
        dictgen::InsensitiveStr::Ascii("thanpton"),
        dictgen::InsensitiveStr::Ascii("thapmton"),
        dictgen::InsensitiveStr::Ascii("then"),
        dictgen::InsensitiveStr::Ascii("therers"),
        dictgen::InsensitiveStr::Ascii("thernerns"),
        dictgen::InsensitiveStr::Ascii("thernes"),
        dictgen::InsensitiveStr::Ascii("thernese"),
        dictgen::InsensitiveStr::Ascii("therness"),
        dictgen::InsensitiveStr::Ascii("thernest"),
        dictgen::InsensitiveStr::Ascii("thernors"),
        dictgen::InsensitiveStr::Ascii("therton"),
        dictgen::InsensitiveStr::Ascii("thmapton"),
        dictgen::InsensitiveStr::Ascii("thren"),
        dictgen::InsensitiveStr::Ascii("thtampon"),
        dictgen::InsensitiveStr::Ascii("venier"),
        dictgen::InsensitiveStr::Ascii("veniers"),
    ],
    values: &[
        &["sound"],
        &["sounds"],
        &["soundtrack"],
        &["could"],
        &["soundtracks"],
        &["soundtracks"],
        &["soundtrack"],
        &["soundtracks"],
        &["soundtracks"],
        &["soundtrack"],
        &["soundtracks"],
        &["soundtrack"],
        &["south"],
        &["southern"],
        &["southampton"],
        &["southampton"],
        &["southampton"],
        &["southampton"],
        &["southampton"],
        &["southampton"],
        &["southern"],
        &["southerners"],
        &["southerners"],
        &["southerners"],
        &["southerners"],
        &["southerners"],
        &["southerners"],
        &["southerners"],
        &["southern"],
        &["southampton"],
        &["southern"],
        &["southampton"],
        &["souvenir"],
        &["souvenirs"],
    ],
    range: 2..=9,
};

static WORD_SOT_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_SOT_CHILDREN),
    value: None,
};

pub static WORD_SOT_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("rmfront"),
        dictgen::InsensitiveStr::Ascii("ry"),
        dictgen::InsensitiveStr::Ascii("ryline"),
        dictgen::InsensitiveStr::Ascii("rylines"),
        dictgen::InsensitiveStr::Ascii("yr"),
    ],
    values: &[
        &["stormfront"],
        &["story"],
        &["storyline"],
        &["storylines"],
        &["satyr"],
    ],
    range: 2..=7,
};

static WORD_SOR_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_SOR_CHILDREN),
    value: None,
};

pub static WORD_SOR_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("cercy"),
        dictgen::InsensitiveStr::Ascii("cerey"),
        dictgen::InsensitiveStr::Ascii("ceror"),
        dictgen::InsensitiveStr::Ascii("cerry"),
        dictgen::InsensitiveStr::Ascii("panos"),
        dictgen::InsensitiveStr::Ascii("rounding"),
    ],
    values: &[
        &["sorcery"],
        &["sorcery"],
        &["sorcerer"],
        &["sorcery"],
        &["sopranos"],
        &["surrounding"],
    ],
    range: 5..=8,
};

static WORD_SOP_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_SOP_CHILDREN),
    value: None,
};

pub static WORD_SOP_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("arnos"),
        dictgen::InsensitiveStr::Ascii("hicated"),
        dictgen::InsensitiveStr::Ascii("hisitcated"),
        dictgen::InsensitiveStr::Ascii("histacated"),
        dictgen::InsensitiveStr::Ascii("histicaed"),
        dictgen::InsensitiveStr::Ascii("histicted"),
        dictgen::InsensitiveStr::Ascii("histocated"),
        dictgen::InsensitiveStr::Ascii("hmore"),
        dictgen::InsensitiveStr::Ascii("hosticated"),
        dictgen::InsensitiveStr::Ascii("ohmore"),
    ],
    values: &[
        &["sopranos"],
        &["sophisticated"],
        &["sophisticated"],
        &["sophisticated"],
        &["sophisticated"],
        &["sophisticated"],
        &["sophisticated"],
        &["sophomore"],
        &["sophisticated"],
        &["sophomore"],
    ],
    range: 5..=10,
};

static WORD_SOM_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_SOM_CHILDREN),
    value: None,
};

pub static WORD_SOM_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("aila"),
        dictgen::InsensitiveStr::Ascii("alija"),
        dictgen::InsensitiveStr::Ascii("ehtin"),
        dictgen::InsensitiveStr::Ascii("ehting"),
        dictgen::InsensitiveStr::Ascii("ehtings"),
        dictgen::InsensitiveStr::Ascii("ene"),
        dictgen::InsensitiveStr::Ascii("eoens"),
        dictgen::InsensitiveStr::Ascii("eoneis"),
        dictgen::InsensitiveStr::Ascii("eonelse"),
        dictgen::InsensitiveStr::Ascii("eons"),
        dictgen::InsensitiveStr::Ascii("ethibng"),
        dictgen::InsensitiveStr::Ascii("ethign"),
        dictgen::InsensitiveStr::Ascii("ethigng"),
        dictgen::InsensitiveStr::Ascii("ethigns"),
        dictgen::InsensitiveStr::Ascii("ethihng"),
        dictgen::InsensitiveStr::Ascii("ethiing"),
        dictgen::InsensitiveStr::Ascii("ethijng"),
        dictgen::InsensitiveStr::Ascii("ethikng"),
        dictgen::InsensitiveStr::Ascii("ethimng"),
        dictgen::InsensitiveStr::Ascii("ethinbg"),
        dictgen::InsensitiveStr::Ascii("ethines"),
        dictgen::InsensitiveStr::Ascii("ethinfg"),
        dictgen::InsensitiveStr::Ascii("ethingest"),
        dictgen::InsensitiveStr::Ascii("ethingis"),
        dictgen::InsensitiveStr::Ascii("ethinhg"),
        dictgen::InsensitiveStr::Ascii("ethinig"),
        dictgen::InsensitiveStr::Ascii("ethinkg"),
        dictgen::InsensitiveStr::Ascii("ethinks"),
        dictgen::InsensitiveStr::Ascii("ethinmg"),
        dictgen::InsensitiveStr::Ascii("ethinng"),
        dictgen::InsensitiveStr::Ascii("ethins"),
        dictgen::InsensitiveStr::Ascii("ethintg"),
        dictgen::InsensitiveStr::Ascii("ethiong"),
        dictgen::InsensitiveStr::Ascii("ethis"),
        dictgen::InsensitiveStr::Ascii("ethiung"),
        dictgen::InsensitiveStr::Ascii("ethn"),
        dictgen::InsensitiveStr::Ascii("etihn"),
        dictgen::InsensitiveStr::Ascii("etinh"),
        dictgen::InsensitiveStr::Ascii("oenes"),
        dictgen::InsensitiveStr::Ascii("times"),
        dictgen::InsensitiveStr::Ascii("where"),
    ],
    values: &[
        &["somalia"],
        &["somalia"],
        &["somethin"],
        &["something"],
        &["somethings"],
        &["someone"],
        &["someones"],
        &["someones"],
        &["someones"],
        &["someones"],
        &["somethin"],
        &["something"],
        &["somethin"],
        &["somethings"],
        &["somethin"],
        &["somethin"],
        &["somethin"],
        &["somethin"],
        &["somethin"],
        &["somethings"],
        &["somethings"],
        &["somethings"],
        &["somethings"],
        &["somethings"],
        &["somethings"],
        &["somethings"],
        &["somethings"],
        &["somethings"],
        &["somethings"],
        &["somethings"],
        &["somethings"],
        &["somethings"],
        &["somethin"],
        &["somethings"],
        &["somethin"],
        &["somethin"],
        &["somethin"],
        &["somethin"],
        &["someones"],
        &["sometimes"],
        &["somewhere"],
    ],
    range: 3..=9,
};

static WORD_SOL_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_SOL_CHILDREN),
    value: None,
};

pub static WORD_SOL_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("atary"),
        dictgen::InsensitiveStr::Ascii("deirs"),
        dictgen::InsensitiveStr::Ascii("diarity"),
        dictgen::InsensitiveStr::Ascii("dies"),
        dictgen::InsensitiveStr::Ascii("dily"),
        dictgen::InsensitiveStr::Ascii("ey"),
        dictgen::InsensitiveStr::Ascii("idairty"),
        dictgen::InsensitiveStr::Ascii("idariety"),
        dictgen::InsensitiveStr::Ascii("iders"),
        dictgen::InsensitiveStr::Ascii("iditary"),
        dictgen::InsensitiveStr::Ascii("iliquy"),
        dictgen::InsensitiveStr::Ascii("itudine"),
        dictgen::InsensitiveStr::Ascii("uable"),
        dictgen::InsensitiveStr::Ascii("utide"),
    ],
    values: &[
        &["solitary"],
        &["soldiers"],
        &["solidarity"],
        &["soldiers"],
        &["solidly"],
        &["solely"],
        &["solidarity"],
        &["solidarity"],
        &["soldiers"],
        &["solidarity"],
        &["soliloquy"],
        &["solitude"],
        &["soluble"],
        &["solitude"],
    ],
    range: 2..=8,
};

static WORD_SOI_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_SOI_CHILDREN),
    value: None,
};

pub static WORD_SOI_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("lders"),
        dictgen::InsensitiveStr::Ascii("ldly"),
    ],
    values: &[&["soldiers"], &["solidly"]],
    range: 4..=5,
};

static WORD_SOH_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_SOH_CHILDREN),
    value: None,
};

pub static WORD_SOH_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("pisticated"),
        dictgen::InsensitiveStr::Ascii("pomore"),
        dictgen::InsensitiveStr::Ascii("w"),
    ],
    values: &[&["sophisticated"], &["sophomore"], &["show"]],
    range: 1..=10,
};

static WORD_SOF_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_SOF_CHILDREN),
    value: None,
};

pub static WORD_SOF_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("ware")],
    values: &[&["software"]],
    range: 4..=4,
};

static WORD_SOE_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_SOE_CHILDREN),
    value: None,
};

pub static WORD_SOE_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("m"),
        dictgen::InsensitiveStr::Ascii("mthin"),
        dictgen::InsensitiveStr::Ascii("mthing"),
        dictgen::InsensitiveStr::Ascii("mthings"),
    ],
    values: &[&["some"], &["somethin"], &["something"], &["somethings"]],
    range: 1..=7,
};

static WORD_SOC_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_SOC_CHILDREN),
    value: None,
};

pub static WORD_SOC_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ailism"),
        dictgen::InsensitiveStr::Ascii("ailist"),
        dictgen::InsensitiveStr::Ascii("ailists"),
        dictgen::InsensitiveStr::Ascii("ailize"),
        dictgen::InsensitiveStr::Ascii("ailized"),
        dictgen::InsensitiveStr::Ascii("ailizing"),
        dictgen::InsensitiveStr::Ascii("ailly"),
        dictgen::InsensitiveStr::Ascii("alism"),
        dictgen::InsensitiveStr::Ascii("artes"),
        dictgen::InsensitiveStr::Ascii("eities"),
        dictgen::InsensitiveStr::Ascii("ialicing"),
        dictgen::InsensitiveStr::Ascii("ialim"),
        dictgen::InsensitiveStr::Ascii("ialini"),
        dictgen::InsensitiveStr::Ascii("ialisim"),
        dictgen::InsensitiveStr::Ascii("ialiss"),
        dictgen::InsensitiveStr::Ascii("ialistes"),
        dictgen::InsensitiveStr::Ascii("ialistisk"),
        dictgen::InsensitiveStr::Ascii("ialistos"),
        dictgen::InsensitiveStr::Ascii("ializare"),
        dictgen::InsensitiveStr::Ascii("ializng"),
        dictgen::InsensitiveStr::Ascii("ialogical"),
        dictgen::InsensitiveStr::Ascii("ialsim"),
        dictgen::InsensitiveStr::Ascii("ialsits"),
        dictgen::InsensitiveStr::Ascii("ialy"),
        dictgen::InsensitiveStr::Ascii("iapathic"),
        dictgen::InsensitiveStr::Ascii("iapaths"),
        dictgen::InsensitiveStr::Ascii("ieites"),
        dictgen::InsensitiveStr::Ascii("ilaism"),
        dictgen::InsensitiveStr::Ascii("ilaist"),
        dictgen::InsensitiveStr::Ascii("ilaists"),
        dictgen::InsensitiveStr::Ascii("ilaized"),
        dictgen::InsensitiveStr::Ascii("ioecenomic"),
        dictgen::InsensitiveStr::Ascii("ioecomonic"),
        dictgen::InsensitiveStr::Ascii("ioeconimc"),
        dictgen::InsensitiveStr::Ascii("ioeconimic"),
        dictgen::InsensitiveStr::Ascii("ioeconmic"),
        dictgen::InsensitiveStr::Ascii("ioligical"),
        dictgen::InsensitiveStr::Ascii("iologia"),
        dictgen::InsensitiveStr::Ascii("iologial"),
        dictgen::InsensitiveStr::Ascii("iopatas"),
        dictgen::InsensitiveStr::Ascii("iopatch"),
        dictgen::InsensitiveStr::Ascii("iopathes"),
        dictgen::InsensitiveStr::Ascii("iopathis"),
        dictgen::InsensitiveStr::Ascii("iopati"),
        dictgen::InsensitiveStr::Ascii("iopatic"),
        dictgen::InsensitiveStr::Ascii("iopats"),
        dictgen::InsensitiveStr::Ascii("iophatic"),
        dictgen::InsensitiveStr::Ascii("iopolical"),
        dictgen::InsensitiveStr::Ascii("ities"),
        dictgen::InsensitiveStr::Ascii("ratease"),
        dictgen::InsensitiveStr::Ascii("ratees"),
        dictgen::InsensitiveStr::Ascii("rateks"),
        dictgen::InsensitiveStr::Ascii("reboard"),
        dictgen::InsensitiveStr::Ascii("ttish"),
    ],
    values: &[
        &["socialism"],
        &["socialist"],
        &["socialists"],
        &["socialize"],
        &["socialized"],
        &["socializing"],
        &["socially"],
        &["socialism"],
        &["socrates"],
        &["societies"],
        &["socializing"],
        &["socialism"],
        &["socializing"],
        &["socialism"],
        &["socialists"],
        &["socialists"],
        &["socialists"],
        &["socialists"],
        &["socialize"],
        &["socializing"],
        &["sociological"],
        &["socialism"],
        &["socialists"],
        &["socially"],
        &["sociopathic"],
        &["sociopaths"],
        &["societies"],
        &["socialism"],
        &["socialist"],
        &["socialists"],
        &["socialized"],
        &["socioeconomic"],
        &["socioeconomic"],
        &["socioeconomic"],
        &["socioeconomic"],
        &["socioeconomic"],
        &["sociological"],
        &["sociological"],
        &["sociological"],
        &["sociopaths"],
        &["sociopaths"],
        &["sociopaths"],
        &["sociopaths"],
        &["sociopathic"],
        &["sociopathic"],
        &["sociopaths"],
        &["sociopathic"],
        &["sociological"],
        &["societies"],
        &["socrates"],
        &["socrates"],
        &["socrates"],
        &["scoreboard"],
        &["scottish"],
    ],
    range: 4..=10,
};

static WORD_SOB_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_SOB_CHILDREN),
    value: None,
};

pub static WORD_SOB_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("erity"),
        dictgen::InsensitiveStr::Ascii("reity"),
    ],
    values: &[&["sobriety"], &["sobriety"]],
    range: 5..=5,
};

static WORD_SN_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_SN_CHILDREN),
    value: None,
};

pub static WORD_SN_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("adler"),
        dictgen::InsensitiveStr::Ascii("adstorm"),
        dictgen::InsensitiveStr::Ascii("adwiches"),
        dictgen::InsensitiveStr::Ascii("eeks"),
        dictgen::InsensitiveStr::Ascii("ese"),
        dictgen::InsensitiveStr::Ascii("etries"),
        dictgen::InsensitiveStr::Ascii("igles"),
        dictgen::InsensitiveStr::Ascii("ippent"),
        dictgen::InsensitiveStr::Ascii("ippert"),
        dictgen::InsensitiveStr::Ascii("ippes"),
        dictgen::InsensitiveStr::Ascii("ippetts"),
        dictgen::InsensitiveStr::Ascii("odwen"),
        dictgen::InsensitiveStr::Ascii("owbaling"),
        dictgen::InsensitiveStr::Ascii("owballes"),
        dictgen::InsensitiveStr::Ascii("owballling"),
        dictgen::InsensitiveStr::Ascii("owballls"),
        dictgen::InsensitiveStr::Ascii("owbals"),
        dictgen::InsensitiveStr::Ascii("owbaording"),
        dictgen::InsensitiveStr::Ascii("owboaring"),
        dictgen::InsensitiveStr::Ascii("owbolling"),
        dictgen::InsensitiveStr::Ascii("owfalke"),
        dictgen::InsensitiveStr::Ascii("owfalling"),
        dictgen::InsensitiveStr::Ascii("owflaek"),
        dictgen::InsensitiveStr::Ascii("owlfake"),
        dictgen::InsensitiveStr::Ascii("ugglie"),
        dictgen::InsensitiveStr::Ascii("woballs"),
        dictgen::InsensitiveStr::Ascii("woden"),
        dictgen::InsensitiveStr::Ascii("ycing"),
        dictgen::InsensitiveStr::Ascii("ydrome"),
        dictgen::InsensitiveStr::Ascii("yergy"),
        dictgen::InsensitiveStr::Ascii("yopsis"),
        dictgen::InsensitiveStr::Ascii("ythesis"),
        dictgen::InsensitiveStr::Ascii("ythetic"),
    ],
    values: &[
        &["sandler"],
        &["sandstorm"],
        &["sandwiches"],
        &["sneaks"],
        &["sneeze"],
        &["sentries"],
        &["singles"],
        &["snippet"],
        &["snippet"],
        &["snippets"],
        &["snippets"],
        &["snowden"],
        &["snowballing"],
        &["snowballs"],
        &["snowballing"],
        &["snowballs"],
        &["snowballs"],
        &["snowboarding"],
        &["snowboarding"],
        &["snowballing"],
        &["snowflake"],
        &["snowballing"],
        &["snowflake"],
        &["snowflake"],
        &["snuggle"],
        &["snowballs"],
        &["snowden"],
        &["syncing"],
        &["syndrome"],
        &["synergy"],
        &["synopsis"],
        &["synthesis"],
        &["synthetic"],
    ],
    range: 3..=10,
};

static WORD_SM_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_SM_CHILDREN),
    value: None,
};

pub static WORD_SM_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ackdwon"),
        dictgen::InsensitiveStr::Ascii("ae"),
        dictgen::InsensitiveStr::Ascii("aples"),
        dictgen::InsensitiveStr::Ascii("arpthone"),
        dictgen::InsensitiveStr::Ascii("artare"),
        dictgen::InsensitiveStr::Ascii("arthpone"),
        dictgen::InsensitiveStr::Ascii("arthpones"),
        dictgen::InsensitiveStr::Ascii("artre"),
        dictgen::InsensitiveStr::Ascii("aurai"),
        dictgen::InsensitiveStr::Ascii("ealting"),
        dictgen::InsensitiveStr::Ascii("eesters"),
        dictgen::InsensitiveStr::Ascii("oe"),
    ],
    values: &[
        &["smackdown"],
        &["same"],
        &["samples"],
        &["smartphones"],
        &["smarter"],
        &["smartphone"],
        &["smartphones"],
        &["smarter"],
        &["samurai"],
        &["smelting"],
        &["semesters"],
        &["some"],
    ],
    range: 2..=9,
};

static WORD_SL_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_SL_CHILDREN),
    value: None,
};

pub static WORD_SL_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("aptoon"),
        dictgen::InsensitiveStr::Ascii("aughted"),
        dictgen::InsensitiveStr::Ascii("aughterd"),
        dictgen::InsensitiveStr::Ascii("augterhouses"),
        dictgen::InsensitiveStr::Ascii("augther"),
        dictgen::InsensitiveStr::Ascii("augthered"),
        dictgen::InsensitiveStr::Ascii("augthering"),
        dictgen::InsensitiveStr::Ascii("avage"),
        dictgen::InsensitiveStr::Ascii("averly"),
        dictgen::InsensitiveStr::Ascii("ayign"),
        dictgen::InsensitiveStr::Ascii("diers"),
        dictgen::InsensitiveStr::Ascii("efies"),
        dictgen::InsensitiveStr::Ascii("efishness"),
        dictgen::InsensitiveStr::Ascii("ienced"),
        dictgen::InsensitiveStr::Ascii("iently"),
        dictgen::InsensitiveStr::Ascii("ighlty"),
        dictgen::InsensitiveStr::Ascii("ighly"),
        dictgen::InsensitiveStr::Ascii("ighty"),
        dictgen::InsensitiveStr::Ascii("igthly"),
        dictgen::InsensitiveStr::Ascii("ipperies"),
        dictgen::InsensitiveStr::Ascii("ipperly"),
        dictgen::InsensitiveStr::Ascii("ippes"),
        dictgen::InsensitiveStr::Ascii("ippey"),
        dictgen::InsensitiveStr::Ascii("oughtering"),
        dictgen::InsensitiveStr::Ascii("owy"),
        dictgen::InsensitiveStr::Ascii("uaghter"),
        dictgen::InsensitiveStr::Ascii("uaghtered"),
        dictgen::InsensitiveStr::Ascii("uaghtering"),
    ],
    values: &[
        &["splatoon"],
        &["slaughtered"],
        &["slaughtered"],
        &["slaughterhouses"],
        &["slaughter"],
        &["slaughtered"],
        &["slaughtering"],
        &["salvage"],
        &["slavery"],
        &["slaying"],
        &["sliders"],
        &["selfies"],
        &["selfishness"],
        &["silenced"],
        &["silently"],
        &["slightly"],
        &["slightly"],
        &["slightly"],
        &["slightly"],
        &["slippers"],
        &["slippery"],
        &["slippers"],
        &["slippery"],
        &["slaughtering"],
        &["slowly"],
        &["slaughter"],
        &["slaughtered"],
        &["slaughtering"],
    ],
    range: 3..=12,
};

static WORD_SK_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_SK_CHILDREN),
    value: None,
};

pub static WORD_SK_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("andinavian"),
        dictgen::InsensitiveStr::Ascii("atebaord"),
        dictgen::InsensitiveStr::Ascii("atebaording"),
        dictgen::InsensitiveStr::Ascii("atebaords"),
        dictgen::InsensitiveStr::Ascii("ateboad"),
        dictgen::InsensitiveStr::Ascii("ateboader"),
        dictgen::InsensitiveStr::Ascii("ateboaring"),
        dictgen::InsensitiveStr::Ascii("ateborad"),
        dictgen::InsensitiveStr::Ascii("ateborading"),
        dictgen::InsensitiveStr::Ascii("atebored"),
        dictgen::InsensitiveStr::Ascii("atebrand"),
        dictgen::InsensitiveStr::Ascii("ateing"),
        dictgen::InsensitiveStr::Ascii("ecthes"),
        dictgen::InsensitiveStr::Ascii("ecthy"),
        dictgen::InsensitiveStr::Ascii("elatel"),
        dictgen::InsensitiveStr::Ascii("eletaal"),
        dictgen::InsensitiveStr::Ascii("eletl"),
        dictgen::InsensitiveStr::Ascii("eletones"),
        dictgen::InsensitiveStr::Ascii("eletos"),
        dictgen::InsensitiveStr::Ascii("epitcal"),
        dictgen::InsensitiveStr::Ascii("eptecism"),
        dictgen::InsensitiveStr::Ascii("epticals"),
        dictgen::InsensitiveStr::Ascii("epticim"),
        dictgen::InsensitiveStr::Ascii("epticisim"),
        dictgen::InsensitiveStr::Ascii("epticles"),
        dictgen::InsensitiveStr::Ascii("epticons"),
        dictgen::InsensitiveStr::Ascii("eptis"),
        dictgen::InsensitiveStr::Ascii("eptisicm"),
        dictgen::InsensitiveStr::Ascii("eptisism"),
        dictgen::InsensitiveStr::Ascii("etchey"),
        dictgen::InsensitiveStr::Ascii("etchs"),
        dictgen::InsensitiveStr::Ascii("etchysex"),
        dictgen::InsensitiveStr::Ascii("etpic"),
        dictgen::InsensitiveStr::Ascii("etpical"),
        dictgen::InsensitiveStr::Ascii("etpicism"),
        dictgen::InsensitiveStr::Ascii("etpics"),
        dictgen::InsensitiveStr::Ascii("illhosts"),
        dictgen::InsensitiveStr::Ascii("illshits"),
        dictgen::InsensitiveStr::Ascii("illshoot"),
        dictgen::InsensitiveStr::Ascii("illshoots"),
        dictgen::InsensitiveStr::Ascii("illshosts"),
        dictgen::InsensitiveStr::Ascii("illslots"),
        dictgen::InsensitiveStr::Ascii("illsofts"),
        dictgen::InsensitiveStr::Ascii("illsshot"),
        dictgen::InsensitiveStr::Ascii("illsto"),
        dictgen::InsensitiveStr::Ascii("imrish"),
        dictgen::InsensitiveStr::Ascii("irmiches"),
        dictgen::InsensitiveStr::Ascii("petic"),
        dictgen::InsensitiveStr::Ascii("peticism"),
        dictgen::InsensitiveStr::Ascii("petics"),
        dictgen::InsensitiveStr::Ascii("rawberries"),
        dictgen::InsensitiveStr::Ascii("rimish"),
        dictgen::InsensitiveStr::Ascii("teches"),
        dictgen::InsensitiveStr::Ascii("techy"),
        dictgen::InsensitiveStr::Ascii("wyard"),
        dictgen::InsensitiveStr::Ascii("ywalkr"),
    ],
    values: &[
        &["scandinavian"],
        &["skateboard"],
        &["skateboarding"],
        &["skateboard"],
        &["skateboard"],
        &["skateboard"],
        &["skateboarding"],
        &["skateboard"],
        &["skateboarding"],
        &["skateboard"],
        &["skateboard"],
        &["skating"],
        &["sketches"],
        &["sketchy"],
        &["skeletal"],
        &["skeletal"],
        &["skeletal"],
        &["skeletons"],
        &["skeletons"],
        &["skeptical"],
        &["skepticism"],
        &["skeptics"],
        &["skepticism"],
        &["skepticism"],
        &["skeptics"],
        &["skeptics"],
        &["skeptics"],
        &["skepticism"],
        &["skepticism"],
        &["sketchy"],
        &["sketches"],
        &["sketches"],
        &["skeptic"],
        &["skeptical"],
        &["skepticism"],
        &["skeptics"],
        &["skillshots"],
        &["skillshots"],
        &["skillshots"],
        &["skillshots"],
        &["skillshots"],
        &["skillshots"],
        &["skillshots"],
        &["skillshots"],
        &["skillshots"],
        &["skirmish"],
        &["skirmish"],
        &["skeptic"],
        &["skepticism"],
        &["skeptics"],
        &["strawberries"],
        &["skirmish"],
        &["sketches"],
        &["sketchy"],
        &["skyward"],
        &["skywalker"],
    ],
    range: 5..=11,
};

static WORD_SI_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_SI_CHILDREN),
    value: None,
};

static WORD_SI_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    None,
    Some(&WORD_SIB_NODE),
    Some(&WORD_SIC_NODE),
    Some(&WORD_SID_NODE),
    Some(&WORD_SIE_NODE),
    None,
    Some(&WORD_SIG_NODE),
    Some(&WORD_SIH_NODE),
    None,
    None,
    None,
    Some(&WORD_SIL_NODE),
    Some(&WORD_SIM_NODE),
    Some(&WORD_SIN_NODE),
    None,
    None,
    None,
    None,
    Some(&WORD_SIS_NODE),
    Some(&WORD_SIT_NODE),
    Some(&WORD_SIU_NODE),
    None,
    None,
    Some(&WORD_SIX_NODE),
    None,
    Some(&WORD_SIZ_NODE),
];

static WORD_SIZ_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_SIZ_CHILDREN),
    value: None,
};

pub static WORD_SIZ_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("ebale")],
    values: &[&["sizeable"]],
    range: 5..=5,
};

static WORD_SIX_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_SIX_CHILDREN),
    value: None,
};

pub static WORD_SIX_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("tin")],
    values: &[&["sistine"]],
    range: 3..=3,
};

static WORD_SIU_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_SIU_CHILDREN),
    value: None,
};

pub static WORD_SIU_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("tational")],
    values: &[&["situational"]],
    range: 8..=8,
};

static WORD_SIT_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_SIT_CHILDREN),
    value: None,
};

pub static WORD_SIT_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("autional"),
        dictgen::InsensitiveStr::Ascii("autions"),
        dictgen::InsensitiveStr::Ascii("ckers"),
        dictgen::InsensitiveStr::Ascii("muli"),
        dictgen::InsensitiveStr::Ascii("rring"),
        dictgen::InsensitiveStr::Ascii("uacional"),
        dictgen::InsensitiveStr::Ascii("uatinal"),
        dictgen::InsensitiveStr::Ascii("uationals"),
        dictgen::InsensitiveStr::Ascii("uationly"),
        dictgen::InsensitiveStr::Ascii("uationnal"),
    ],
    values: &[
        &["situational"],
        &["situations"],
        &["stickers"],
        &["stimuli"],
        &["stirring"],
        &["situational"],
        &["situational"],
        &["situations"],
        &["situational"],
        &["situational"],
    ],
    range: 4..=9,
};

static WORD_SIS_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_SIS_CHILDREN),
    value: None,
};

pub static WORD_SIS_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("tematically")],
    values: &[&["systematically"]],
    range: 11..=11,
};

static WORD_SIN_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_SIN_CHILDREN),
    value: None,
};

pub static WORD_SIN_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("agpore"),
        dictgen::InsensitiveStr::Ascii("cereley"),
        dictgen::InsensitiveStr::Ascii("cerelly"),
        dictgen::InsensitiveStr::Ascii("cerley"),
        dictgen::InsensitiveStr::Ascii("gals"),
        dictgen::InsensitiveStr::Ascii("gature"),
        dictgen::InsensitiveStr::Ascii("gatures"),
        dictgen::InsensitiveStr::Ascii("gelplayer"),
        dictgen::InsensitiveStr::Ascii("gels"),
        dictgen::InsensitiveStr::Ascii("gificantly"),
        dictgen::InsensitiveStr::Ascii("gify"),
        dictgen::InsensitiveStr::Ascii("glepalyer"),
        dictgen::InsensitiveStr::Ascii("glers"),
        dictgen::InsensitiveStr::Ascii("gluar"),
        dictgen::InsensitiveStr::Ascii("gluarity"),
        dictgen::InsensitiveStr::Ascii("gpaore"),
        dictgen::InsensitiveStr::Ascii("gsog"),
        dictgen::InsensitiveStr::Ascii("gualrity"),
        dictgen::InsensitiveStr::Ascii("gulair"),
        dictgen::InsensitiveStr::Ascii("gulaire"),
        dictgen::InsensitiveStr::Ascii("gulairty"),
        dictgen::InsensitiveStr::Ascii("gularily"),
        dictgen::InsensitiveStr::Ascii("gulariy"),
        dictgen::InsensitiveStr::Ascii("gularty"),
        dictgen::InsensitiveStr::Ascii("gulary"),
        dictgen::InsensitiveStr::Ascii("gulator"),
        dictgen::InsensitiveStr::Ascii("istre"),
        dictgen::InsensitiveStr::Ascii("lgeplayer"),
        dictgen::InsensitiveStr::Ascii("se"),
        dictgen::InsensitiveStr::Ascii("siter"),
    ],
    values: &[
        &["singapore"],
        &["sincerely"],
        &["sincerely"],
        &["sincerely"],
        &["signals"],
        &["signature"],
        &["signatures"],
        &["singleplayer"],
        &["singles"],
        &["significantly"],
        &["signify"],
        &["singleplayer"],
        &["singles"],
        &["singular"],
        &["singularity"],
        &["singapore"],
        &["singsong"],
        &["singularity"],
        &["singular"],
        &["singular"],
        &["singularity"],
        &["singularity"],
        &["singularity"],
        &["singularity"],
        &["singularity"],
        &["singular"],
        &["sinister"],
        &["singleplayer"],
        &["sines"],
        &["sinister"],
    ],
    range: 2..=10,
};

static WORD_SIM_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_SIM_CHILDREN),
    value: None,
};

static WORD_SIM_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    Some(&WORD_SIMA_NODE),
    None,
    None,
    None,
    Some(&WORD_SIME_NODE),
    None,
    None,
    None,
    Some(&WORD_SIMI_NODE),
    None,
    None,
    Some(&WORD_SIML_NODE),
    Some(&WORD_SIMM_NODE),
    None,
    None,
    Some(&WORD_SIMP_NODE),
    None,
    None,
    Some(&WORD_SIMS_NODE),
    None,
    Some(&WORD_SIMU_NODE),
    None,
    None,
    None,
    None,
    None,
];

static WORD_SIMU_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_SIMU_CHILDREN),
    value: None,
};

pub static WORD_SIMU_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("alted"),
        dictgen::InsensitiveStr::Ascii("altion"),
        dictgen::InsensitiveStr::Ascii("altions"),
        dictgen::InsensitiveStr::Ascii("altor"),
        dictgen::InsensitiveStr::Ascii("lacion"),
        dictgen::InsensitiveStr::Ascii("laiton"),
        dictgen::InsensitiveStr::Ascii("latenous"),
        dictgen::InsensitiveStr::Ascii("latenously"),
        dictgen::InsensitiveStr::Ascii("latie"),
        dictgen::InsensitiveStr::Ascii("laties"),
        dictgen::InsensitiveStr::Ascii("latin"),
        dictgen::InsensitiveStr::Ascii("latious"),
        dictgen::InsensitiveStr::Ascii("lative"),
        dictgen::InsensitiveStr::Ascii("latneous"),
        dictgen::InsensitiveStr::Ascii("latneously"),
        dictgen::InsensitiveStr::Ascii("lato"),
        dictgen::InsensitiveStr::Ascii("latons"),
        dictgen::InsensitiveStr::Ascii("latore"),
        dictgen::InsensitiveStr::Ascii("ltaenous"),
        dictgen::InsensitiveStr::Ascii("ltaenously"),
        dictgen::InsensitiveStr::Ascii("ltainously"),
        dictgen::InsensitiveStr::Ascii("ltaneos"),
        dictgen::InsensitiveStr::Ascii("ltaneosly"),
        dictgen::InsensitiveStr::Ascii("ltaneoulsy"),
        dictgen::InsensitiveStr::Ascii("ltaneuos"),
        dictgen::InsensitiveStr::Ascii("ltaneuous"),
        dictgen::InsensitiveStr::Ascii("ltaneus"),
        dictgen::InsensitiveStr::Ascii("ltanious"),
        dictgen::InsensitiveStr::Ascii("ltaniously"),
        dictgen::InsensitiveStr::Ascii("ltanous"),
        dictgen::InsensitiveStr::Ascii("ltanously"),
        dictgen::InsensitiveStr::Ascii("lteanously"),
        dictgen::InsensitiveStr::Ascii("lteneous"),
    ],
    values: &[
        &["simulated"],
        &["simulation"],
        &["simulations"],
        &["simulator"],
        &["simulation"],
        &["simulations"],
        &["simultaneous"],
        &["simultaneously"],
        &["simulate"],
        &["simulate"],
        &["simulation"],
        &["simulations"],
        &["simulate"],
        &["simultaneous"],
        &["simultaneously"],
        &["simulation"],
        &["simulations"],
        &["simulate"],
        &["simultaneous"],
        &["simultaneously"],
        &["simultaneously"],
        &["simultaneous"],
        &["simultaneously"],
        &["simultaneously"],
        &["simultaneous"],
        &["simultaneous"],
        &["simultaneous"],
        &["simultaneous"],
        &["simultaneously"],
        &["simultaneous"],
        &["simultaneously"],
        &["simultaneously"],
        &["simultaneous"],
    ],
    range: 4..=10,
};

static WORD_SIMS_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_SIMS_CHILDREN),
    value: None,
};

pub static WORD_SIMS_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("pon")],
    values: &[&["simpson"]],
    range: 3..=3,
};

static WORD_SIMP_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_SIMP_CHILDREN),
    value: None,
};

pub static WORD_SIMP_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("athizers"),
        dictgen::InsensitiveStr::Ascii("elst"),
        dictgen::InsensitiveStr::Ascii("lefying"),
        dictgen::InsensitiveStr::Ascii("let"),
        dictgen::InsensitiveStr::Ascii("lets"),
        dictgen::InsensitiveStr::Ascii("ley"),
        dictgen::InsensitiveStr::Ascii("lfy"),
        dictgen::InsensitiveStr::Ascii("licitly"),
        dictgen::InsensitiveStr::Ascii("lictic"),
        dictgen::InsensitiveStr::Ascii("licy"),
        dictgen::InsensitiveStr::Ascii("lier"),
        dictgen::InsensitiveStr::Ascii("lificacion"),
        dictgen::InsensitiveStr::Ascii("lificaiton"),
        dictgen::InsensitiveStr::Ascii("lificating"),
        dictgen::InsensitiveStr::Ascii("lifiing"),
        dictgen::InsensitiveStr::Ascii("lifing"),
        dictgen::InsensitiveStr::Ascii("lifiy"),
        dictgen::InsensitiveStr::Ascii("lifyed"),
        dictgen::InsensitiveStr::Ascii("lifyng"),
        dictgen::InsensitiveStr::Ascii("lisitc"),
        dictgen::InsensitiveStr::Ascii("lisitic"),
        dictgen::InsensitiveStr::Ascii("lisity"),
        dictgen::InsensitiveStr::Ascii("listes"),
        dictgen::InsensitiveStr::Ascii("listisch"),
        dictgen::InsensitiveStr::Ascii("livity"),
        dictgen::InsensitiveStr::Ascii("liy"),
        dictgen::InsensitiveStr::Ascii("lyfied"),
        dictgen::InsensitiveStr::Ascii("lyifing"),
        dictgen::InsensitiveStr::Ascii("osn"),
    ],
    values: &[
        &["sympathizers"],
        &["simplest"],
        &["simplifying"],
        &["simplest"],
        &["simplest"],
        &["simply"],
        &["simplify"],
        &["simplicity"],
        &["simplistic"],
        &["simplicity"],
        &["simpler"],
        &["simplification"],
        &["simplification"],
        &["simplification"],
        &["simplifying"],
        &["simplifying"],
        &["simplify"],
        &["simplified"],
        &["simplifying"],
        &["simplistic"],
        &["simplistic"],
        &["simplicity"],
        &["simplest"],
        &["simplistic"],
        &["simplicity"],
        &["simplify"],
        &["simplified"],
        &["simplifying"],
        &["simpson"],
    ],
    range: 3..=10,
};

static WORD_SIMM_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_SIMM_CHILDREN),
    value: None,
};

pub static WORD_SIMM_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("ilar")],
    values: &[&["similar"]],
    range: 4..=4,
};

static WORD_SIML_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_SIML_CHILDREN),
    value: None,
};

pub static WORD_SIML_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("iar"),
        dictgen::InsensitiveStr::Ascii("iarities"),
        dictgen::InsensitiveStr::Ascii("iarity"),
        dictgen::InsensitiveStr::Ascii("iarly"),
        dictgen::InsensitiveStr::Ascii("iiar"),
        dictgen::InsensitiveStr::Ascii("uate"),
        dictgen::InsensitiveStr::Ascii("uated"),
        dictgen::InsensitiveStr::Ascii("uation"),
        dictgen::InsensitiveStr::Ascii("uations"),
        dictgen::InsensitiveStr::Ascii("uator"),
        dictgen::InsensitiveStr::Ascii("utaneous"),
        dictgen::InsensitiveStr::Ascii("utaneously"),
    ],
    values: &[
        &["similar"],
        &["similarities"],
        &["similarity"],
        &["similarly"],
        &["similiar"],
        &["simulate"],
        &["simulated"],
        &["simulation"],
        &["simulations"],
        &["simulator"],
        &["simultaneous"],
        &["simultaneously"],
    ],
    range: 3..=10,
};

static WORD_SIMI_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_SIMI_CHILDREN),
    value: None,
};

pub static WORD_SIMI_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("alir"),
        dictgen::InsensitiveStr::Ascii("ilar"),
        dictgen::InsensitiveStr::Ascii("lair"),
        dictgen::InsensitiveStr::Ascii("lairty"),
        dictgen::InsensitiveStr::Ascii("laraties"),
        dictgen::InsensitiveStr::Ascii("lari"),
        dictgen::InsensitiveStr::Ascii("larily"),
        dictgen::InsensitiveStr::Ascii("larites"),
        dictgen::InsensitiveStr::Ascii("larlity"),
        dictgen::InsensitiveStr::Ascii("larlly"),
        dictgen::InsensitiveStr::Ascii("lart"),
        dictgen::InsensitiveStr::Ascii("lary"),
        dictgen::InsensitiveStr::Ascii("liair"),
        dictgen::InsensitiveStr::Ascii("liar"),
        dictgen::InsensitiveStr::Ascii("liarites"),
        dictgen::InsensitiveStr::Ascii("liarity"),
        dictgen::InsensitiveStr::Ascii("liarly"),
        dictgen::InsensitiveStr::Ascii("liarties"),
        dictgen::InsensitiveStr::Ascii("liarty"),
        dictgen::InsensitiveStr::Ascii("lir"),
        dictgen::InsensitiveStr::Ascii("liraties"),
        dictgen::InsensitiveStr::Ascii("ltaneous"),
        dictgen::InsensitiveStr::Ascii("ltaneously"),
    ],
    values: &[
        &["similiar"],
        &["similiar"],
        &["similar"],
        &["similarity"],
        &["similarities"],
        &["similiar"],
        &["similarly"],
        &["similarities"],
        &["similarity"],
        &["similarly"],
        &["similarity"],
        &["similarly"],
        &["similiar"],
        &["similar"],
        &["similarities"],
        &["similarity"],
        &["similarly"],
        &["similarities"],
        &["similarity"],
        &["similiar"],
        &["similarities"],
        &["simultaneous"],
        &["simultaneously"],
    ],
    range: 3..=10,
};

static WORD_SIME_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_SIME_CHILDREN),
    value: None,
};

pub static WORD_SIME_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ltaneous"),
        dictgen::InsensitiveStr::Ascii("ltaneously"),
    ],
    values: &[&["simultaneous"], &["simultaneously"]],
    range: 8..=10,
};

static WORD_SIMA_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_SIMA_CHILDREN),
    value: None,
};

pub static WORD_SIMA_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ltaneous"),
        dictgen::InsensitiveStr::Ascii("ltaneously"),
    ],
    values: &[&["simultaneous"], &["simultaneously"]],
    range: 8..=10,
};

static WORD_SIL_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_SIL_CHILDREN),
    value: None,
};

pub static WORD_SIL_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("bings"),
        dictgen::InsensitiveStr::Ascii("ders"),
        dictgen::InsensitiveStr::Ascii("enty"),
        dictgen::InsensitiveStr::Ascii("houete"),
        dictgen::InsensitiveStr::Ascii("icoln"),
        dictgen::InsensitiveStr::Ascii("icoon"),
        dictgen::InsensitiveStr::Ascii("imiar"),
        dictgen::InsensitiveStr::Ascii("ohuette"),
        dictgen::InsensitiveStr::Ascii("ouhette"),
    ],
    values: &[
        &["siblings"],
        &["sliders"],
        &["silently"],
        &["silhouette"],
        &["silicon"],
        &["silicon"],
        &["similiar"],
        &["silhouette"],
        &["silhouette"],
    ],
    range: 4..=7,
};

static WORD_SIH_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_SIH_CHILDREN),
    value: None,
};

pub static WORD_SIH_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("louette")],
    values: &[&["silhouette"]],
    range: 7..=7,
};

static WORD_SIG_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_SIG_CHILDREN),
    value: None,
};

pub static WORD_SIG_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("anture"),
        dictgen::InsensitiveStr::Ascii("antures"),
        dictgen::InsensitiveStr::Ascii("htstine"),
        dictgen::InsensitiveStr::Ascii("inificant"),
        dictgen::InsensitiveStr::Ascii("napore"),
        dictgen::InsensitiveStr::Ascii("natue"),
        dictgen::InsensitiveStr::Ascii("nficant"),
        dictgen::InsensitiveStr::Ascii("nficiant"),
        dictgen::InsensitiveStr::Ascii("nfies"),
        dictgen::InsensitiveStr::Ascii("nfiy"),
        dictgen::InsensitiveStr::Ascii("nifantly"),
        dictgen::InsensitiveStr::Ascii("nifiant"),
        dictgen::InsensitiveStr::Ascii("nificane"),
        dictgen::InsensitiveStr::Ascii("nificanlty"),
        dictgen::InsensitiveStr::Ascii("nificanly"),
        dictgen::InsensitiveStr::Ascii("nificante"),
        dictgen::InsensitiveStr::Ascii("nificanty"),
        dictgen::InsensitiveStr::Ascii("nificat"),
        dictgen::InsensitiveStr::Ascii("nificatly"),
        dictgen::InsensitiveStr::Ascii("nificato"),
        dictgen::InsensitiveStr::Ascii("nificently"),
        dictgen::InsensitiveStr::Ascii("nifigant"),
        dictgen::InsensitiveStr::Ascii("nifigantly"),
        dictgen::InsensitiveStr::Ascii("nifikant"),
        dictgen::InsensitiveStr::Ascii("nifiy"),
        dictgen::InsensitiveStr::Ascii("nigns"),
        dictgen::InsensitiveStr::Ascii("nins"),
        dictgen::InsensitiveStr::Ascii("nitories"),
        dictgen::InsensitiveStr::Ascii("nitory"),
        dictgen::InsensitiveStr::Ascii("nitures"),
        dictgen::InsensitiveStr::Ascii("nleplayer"),
        dictgen::InsensitiveStr::Ascii("nles"),
        dictgen::InsensitiveStr::Ascii("nular"),
        dictgen::InsensitiveStr::Ascii("nularity"),
        dictgen::InsensitiveStr::Ascii("thstone"),
    ],
    values: &[
        &["signature"],
        &["signatures"],
        &["sightstone"],
        &["significant"],
        &["singapore"],
        &["signatures"],
        &["significant"],
        &["significant"],
        &["signifies"],
        &["signify"],
        &["significantly"],
        &["significant"],
        &["significance"],
        &["significantly"],
        &["significantly"],
        &["significance"],
        &["significantly"],
        &["significant"],
        &["significantly"],
        &["significant"],
        &["significantly"],
        &["significant"],
        &["significantly"],
        &["significant"],
        &["signify"],
        &["signings"],
        &["signings"],
        &["signatories"],
        &["signatory"],
        &["signatures"],
        &["singleplayer"],
        &["singles"],
        &["singular"],
        &["singularity"],
        &["sightstone"],
    ],
    range: 4..=10,
};

static WORD_SIE_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_SIE_CHILDREN),
    value: None,
};

pub static WORD_SIE_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("zable"),
        dictgen::InsensitiveStr::Ascii("ze"),
        dictgen::InsensitiveStr::Ascii("zed"),
        dictgen::InsensitiveStr::Ascii("zing"),
        dictgen::InsensitiveStr::Ascii("zure"),
        dictgen::InsensitiveStr::Ascii("zures"),
    ],
    values: &[
        &["sizable"],
        &["seize"],
        &["seized"],
        &["seizing"],
        &["seizure"],
        &["seizures"],
    ],
    range: 2..=5,
};

static WORD_SID_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_SID_CHILDREN),
    value: None,
};

pub static WORD_SID_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ebaord"),
        dictgen::InsensitiveStr::Ascii("eboad"),
        dictgen::InsensitiveStr::Ascii("elen"),
        dictgen::InsensitiveStr::Ascii("elinien"),
        dictgen::InsensitiveStr::Ascii("elinjen"),
        dictgen::InsensitiveStr::Ascii("elinked"),
        dictgen::InsensitiveStr::Ascii("eral"),
        dictgen::InsensitiveStr::Ascii("leine"),
    ],
    values: &[
        &["sideboard"],
        &["sideboard"],
        &["sideline"],
        &["sideline"],
        &["sideline"],
        &["sideline"],
        &["sidereal"],
        &["sideline"],
    ],
    range: 4..=7,
};

static WORD_SIC_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_SIC_CHILDREN),
    value: None,
};

pub static WORD_SIC_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("ne")],
    values: &[&["since"]],
    range: 2..=2,
};

static WORD_SIB_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_SIB_CHILDREN),
    value: None,
};

pub static WORD_SIB_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("lins")],
    values: &[&["siblings"]],
    range: 4..=4,
};

static WORD_SH_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_SH_CHILDREN),
    value: None,
};

static WORD_SH_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    Some(&WORD_SHA_NODE),
    None,
    Some(&WORD_SHC_NODE),
    None,
    Some(&WORD_SHE_NODE),
    Some(&WORD_SHF_NODE),
    None,
    None,
    Some(&WORD_SHI_NODE),
    None,
    None,
    Some(&WORD_SHL_NODE),
    None,
    Some(&WORD_SHN_NODE),
    Some(&WORD_SHO_NODE),
    Some(&WORD_SHP_NODE),
    None,
    Some(&WORD_SHR_NODE),
    None,
    Some(&WORD_SHT_NODE),
    Some(&WORD_SHU_NODE),
    None,
    Some(&WORD_SHW_NODE),
    None,
    None,
    None,
];

static WORD_SHW_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_SHW_CHILDREN),
    value: None,
};

pub static WORD_SHW_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("ashank")],
    values: &[&["shawshank"]],
    range: 6..=6,
};

static WORD_SHU_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_SHU_CHILDREN),
    value: None,
};

pub static WORD_SHU_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("oldnt")],
    values: &[&["shouldnt"]],
    range: 5..=5,
};

static WORD_SHT_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_SHT_CHILDREN),
    value: None,
};

pub static WORD_SHT_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("iless")],
    values: &[&["shitless"]],
    range: 5..=5,
};

static WORD_SHR_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_SHR_CHILDREN),
    value: None,
};

pub static WORD_SHR_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("apenl"),
        dictgen::InsensitiveStr::Ascii("eak"),
        dictgen::InsensitiveStr::Ascii("elock"),
        dictgen::InsensitiveStr::Ascii("iley"),
        dictgen::InsensitiveStr::Ascii("inked"),
        dictgen::InsensitiveStr::Ascii("panel"),
    ],
    values: &[
        &["shrapnel"],
        &["shriek"],
        &["sherlock"],
        &["shirley"],
        &["shrunk"],
        &["shrapnel"],
    ],
    range: 3..=5,
};

static WORD_SHP_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_SHP_CHILDREN),
    value: None,
};

pub static WORD_SHP_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("eres"),
        dictgen::InsensitiveStr::Ascii("erical"),
    ],
    values: &[&["spheres"], &["spherical"]],
    range: 4..=6,
};

static WORD_SHO_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_SHO_CHILDREN),
    value: None,
};

pub static WORD_SHO_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("pkeeepers"),
        dictgen::InsensitiveStr::Ascii("rly"),
        dictgen::InsensitiveStr::Ascii("rtend"),
        dictgen::InsensitiveStr::Ascii("rtenend"),
        dictgen::InsensitiveStr::Ascii("rtenning"),
        dictgen::InsensitiveStr::Ascii("rtenting"),
        dictgen::InsensitiveStr::Ascii("rtining"),
        dictgen::InsensitiveStr::Ascii("tuout"),
        dictgen::InsensitiveStr::Ascii("udl"),
        dictgen::InsensitiveStr::Ascii("udlers"),
        dictgen::InsensitiveStr::Ascii("udln"),
        dictgen::InsensitiveStr::Ascii("udlnt"),
        dictgen::InsensitiveStr::Ascii("uldes"),
        dictgen::InsensitiveStr::Ascii("uldnot"),
        dictgen::InsensitiveStr::Ascii("uldt"),
        dictgen::InsensitiveStr::Ascii("ulndt"),
        dictgen::InsensitiveStr::Ascii("utot"),
        dictgen::InsensitiveStr::Ascii("wboarding"),
        dictgen::InsensitiveStr::Ascii("wede"),
        dictgen::InsensitiveStr::Ascii("werd"),
    ],
    values: &[
        &["shopkeepers"],
        &["shortly"],
        &["shortened"],
        &["shortened"],
        &["shortening"],
        &["shortening"],
        &["shortening"],
        &["shoutout"],
        &["should"],
        &["shoulders"],
        &["should"],
        &["shouldnt"],
        &["shoulders"],
        &["shouldnt"],
        &["shouldnt"],
        &["shouldnt"],
        &["shoutout"],
        &["snowboarding"],
        &["showered"],
        &["showered"],
    ],
    range: 3..=9,
};

static WORD_SHN_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_SHN_CHILDREN),
    value: None,
};

pub static WORD_SHN_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("aghai")],
    values: &[&["shanghai"]],
    range: 5..=5,
};

static WORD_SHL_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_SHL_CHILDREN),
    value: None,
};

pub static WORD_SHL_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("edon"),
        dictgen::InsensitiveStr::Ascii("eter"),
        dictgen::InsensitiveStr::Ascii("etered"),
        dictgen::InsensitiveStr::Ascii("eters"),
    ],
    values: &[&["sheldon"], &["shelter"], &["sheltered"], &["shelters"]],
    range: 4..=6,
};

static WORD_SHI_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_SHI_CHILDREN),
    value: None,
};

pub static WORD_SHI_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("eldd"),
        dictgen::InsensitiveStr::Ascii("fitng"),
        dictgen::InsensitiveStr::Ascii("fteer"),
        dictgen::InsensitiveStr::Ascii("leded"),
        dictgen::InsensitiveStr::Ascii("leding"),
        dictgen::InsensitiveStr::Ascii("louette"),
        dictgen::InsensitiveStr::Ascii("neing"),
        dictgen::InsensitiveStr::Ascii("ped"),
        dictgen::InsensitiveStr::Ascii("ping"),
        dictgen::InsensitiveStr::Ascii("rely"),
        dictgen::InsensitiveStr::Ascii("tfer"),
        dictgen::InsensitiveStr::Ascii("tlasses"),
        dictgen::InsensitiveStr::Ascii("tstom"),
        dictgen::InsensitiveStr::Ascii("tstrom"),
        dictgen::InsensitiveStr::Ascii("ttoon"),
        dictgen::InsensitiveStr::Ascii("ttown"),
    ],
    values: &[
        &["shielded"],
        &["shifting"],
        &["shifter"],
        &["shielded"],
        &["shielding"],
        &["silhouette"],
        &["shining"],
        &["shipped"],
        &["shipping"],
        &["shirley"],
        &["shifter"],
        &["shitless"],
        &["shitstorm"],
        &["shitstorm"],
        &["shitton"],
        &["shitton"],
    ],
    range: 3..=7,
};

static WORD_SHF_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_SHF_CHILDREN),
    value: None,
};

pub static WORD_SHF_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("iter"),
        dictgen::InsensitiveStr::Ascii("iting"),
    ],
    values: &[&["shifter"], &["shifting"]],
    range: 4..=5,
};

static WORD_SHE_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_SHE_CHILDREN),
    value: None,
};

pub static WORD_SHE_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("akspeare"),
        dictgen::InsensitiveStr::Ascii("elpe"),
        dictgen::InsensitiveStr::Ascii("epel"),
        dictgen::InsensitiveStr::Ascii("ild"),
        dictgen::InsensitiveStr::Ascii("ilded"),
        dictgen::InsensitiveStr::Ascii("ilding"),
        dictgen::InsensitiveStr::Ascii("lterd"),
        dictgen::InsensitiveStr::Ascii("lvers"),
        dictgen::InsensitiveStr::Ascii("lveys"),
        dictgen::InsensitiveStr::Ascii("nadigans"),
        dictgen::InsensitiveStr::Ascii("nanagans"),
        dictgen::InsensitiveStr::Ascii("nanagins"),
        dictgen::InsensitiveStr::Ascii("nanegans"),
        dictgen::InsensitiveStr::Ascii("nanegins"),
        dictgen::InsensitiveStr::Ascii("nangians"),
        dictgen::InsensitiveStr::Ascii("nanigains"),
        dictgen::InsensitiveStr::Ascii("nanigangs"),
        dictgen::InsensitiveStr::Ascii("naniganns"),
        dictgen::InsensitiveStr::Ascii("nanigens"),
        dictgen::InsensitiveStr::Ascii("nanighans"),
        dictgen::InsensitiveStr::Ascii("nanigins"),
        dictgen::InsensitiveStr::Ascii("nenigans"),
        dictgen::InsensitiveStr::Ascii("ninigans"),
        dictgen::InsensitiveStr::Ascii("nnaigans"),
        dictgen::InsensitiveStr::Ascii("pharded"),
        dictgen::InsensitiveStr::Ascii("phed"),
        dictgen::InsensitiveStr::Ascii("phered"),
        dictgen::InsensitiveStr::Ascii("rlcok"),
        dictgen::InsensitiveStr::Ascii("rlok"),
        dictgen::InsensitiveStr::Ascii("tler"),
        dictgen::InsensitiveStr::Ascii("tlers"),
        dictgen::InsensitiveStr::Ascii("vles"),
    ],
    values: &[
        &["shakespeare"],
        &["sheeple"],
        &["sheeple"],
        &["shield"],
        &["shielded"],
        &["shielding"],
        &["sheltered"],
        &["shelves"],
        &["shelves"],
        &["shenanigans"],
        &["shenanigans"],
        &["shenanigans"],
        &["shenanigans"],
        &["shenanigans"],
        &["shenanigans"],
        &["shenanigans"],
        &["shenanigans"],
        &["shenanigans"],
        &["shenanigans"],
        &["shenanigans"],
        &["shenanigans"],
        &["shenanigans"],
        &["shenanigans"],
        &["shenanigans"],
        &["shepherd"],
        &["shepherd"],
        &["shepherd"],
        &["sherlock"],
        &["sherlock"],
        &["shelter"],
        &["shelters"],
        &["shelves"],
    ],
    range: 3..=9,
};

static WORD_SHC_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_SHC_CHILDREN),
    value: None,
};

pub static WORD_SHC_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("emes"),
        dictgen::InsensitiveStr::Ascii("izophrenic"),
        dictgen::InsensitiveStr::Ascii("olars"),
        dictgen::InsensitiveStr::Ascii("ooled"),
    ],
    values: &[
        &["schemes"],
        &["schizophrenic"],
        &["scholars"],
        &["schooled"],
    ],
    range: 4..=10,
};

static WORD_SHA_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_SHA_CHILDREN),
    value: None,
};

pub static WORD_SHA_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("dasloo"),
        dictgen::InsensitiveStr::Ascii("ddow"),
        dictgen::InsensitiveStr::Ascii("doloo"),
        dictgen::InsensitiveStr::Ascii("keapeare"),
        dictgen::InsensitiveStr::Ascii("kepseare"),
        dictgen::InsensitiveStr::Ascii("kespare"),
        dictgen::InsensitiveStr::Ascii("kespeer"),
        dictgen::InsensitiveStr::Ascii("kespere"),
        dictgen::InsensitiveStr::Ascii("kesperean"),
        dictgen::InsensitiveStr::Ascii("kesphere"),
        dictgen::InsensitiveStr::Ascii("melesly"),
        dictgen::InsensitiveStr::Ascii("melessely"),
        dictgen::InsensitiveStr::Ascii("melessley"),
        dictgen::InsensitiveStr::Ascii("melessy"),
        dictgen::InsensitiveStr::Ascii("men"),
        dictgen::InsensitiveStr::Ascii("mpionship"),
        dictgen::InsensitiveStr::Ascii("nenigans"),
        dictgen::InsensitiveStr::Ascii("ngahi"),
        dictgen::InsensitiveStr::Ascii("nghi"),
        dictgen::InsensitiveStr::Ascii("nghia"),
        dictgen::InsensitiveStr::Ascii("prening"),
        dictgen::InsensitiveStr::Ascii("prie"),
        dictgen::InsensitiveStr::Ascii("prly"),
        dictgen::InsensitiveStr::Ascii("prness"),
        dictgen::InsensitiveStr::Ascii("rdholders"),
        dictgen::InsensitiveStr::Ascii("reholdes"),
        dictgen::InsensitiveStr::Ascii("reholds"),
        dictgen::InsensitiveStr::Ascii("ripe"),
        dictgen::InsensitiveStr::Ascii("rkening"),
        dictgen::InsensitiveStr::Ascii("rpeneing"),
        dictgen::InsensitiveStr::Ascii("rpenning"),
        dictgen::InsensitiveStr::Ascii("rpenss"),
        dictgen::InsensitiveStr::Ascii("rpining"),
        dictgen::InsensitiveStr::Ascii("rplay"),
        dictgen::InsensitiveStr::Ascii("rpley"),
        dictgen::InsensitiveStr::Ascii("rtening"),
        dictgen::InsensitiveStr::Ascii("tnering"),
        dictgen::InsensitiveStr::Ascii("ttening"),
        dictgen::InsensitiveStr::Ascii("tterling"),
        dictgen::InsensitiveStr::Ascii("tterring"),
        dictgen::InsensitiveStr::Ascii("whsank"),
        dictgen::InsensitiveStr::Ascii("wshak"),
    ],
    values: &[
        &["shadaloo"],
        &["shadow"],
        &["shadaloo"],
        &["shakespeare"],
        &["shakespeare"],
        &["shakespeare"],
        &["shakespeare"],
        &["shakespeare"],
        &["shakespeare"],
        &["shakespeare"],
        &["shamelessly"],
        &["shamelessly"],
        &["shamelessly"],
        &["shamelessly"],
        &["shaman"],
        &["championship"],
        &["shenanigans"],
        &["shanghai"],
        &["shanghai"],
        &["shanghai"],
        &["sharpening"],
        &["sharpie"],
        &["sharply"],
        &["sharpness"],
        &["shareholders"],
        &["shareholders"],
        &["shareholders"],
        &["sharpie"],
        &["sharpening"],
        &["sharpening"],
        &["sharpening"],
        &["sharpness"],
        &["sharpening"],
        &["sharply"],
        &["sharply"],
        &["sharpening"],
        &["shattering"],
        &["shattering"],
        &["shattering"],
        &["shattering"],
        &["shawshank"],
        &["shawshank"],
    ],
    range: 3..=9,
};

static WORD_SE_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_SE_CHILDREN),
    value: None,
};

static WORD_SE_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    Some(&WORD_SEA_NODE),
    Some(&WORD_SEB_NODE),
    Some(&WORD_SEC_NODE),
    Some(&WORD_SED_NODE),
    None,
    Some(&WORD_SEF_NODE),
    Some(&WORD_SEG_NODE),
    None,
    Some(&WORD_SEI_NODE),
    None,
    None,
    Some(&WORD_SEL_NODE),
    Some(&WORD_SEM_NODE),
    Some(&WORD_SEN_NODE),
    None,
    Some(&WORD_SEP_NODE),
    None,
    Some(&WORD_SER_NODE),
    Some(&WORD_SES_NODE),
    Some(&WORD_SET_NODE),
    Some(&WORD_SEU_NODE),
    Some(&WORD_SEV_NODE),
    None,
    Some(&WORD_SEX_NODE),
    None,
    Some(&WORD_SEZ_NODE),
];

static WORD_SEZ_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_SEZ_CHILDREN),
    value: None,
};

pub static WORD_SEZ_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("iure"),
        dictgen::InsensitiveStr::Ascii("iures"),
        dictgen::InsensitiveStr::Ascii("uires"),
    ],
    values: &[&["seizure"], &["seizures"], &["seizures"]],
    range: 4..=5,
};

static WORD_SEX_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_SEX_CHILDREN),
    value: None,
};

pub static WORD_SEX_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("aulized"),
        dictgen::InsensitiveStr::Ascii("aully"),
        dictgen::InsensitiveStr::Ascii("ualixed"),
        dictgen::InsensitiveStr::Ascii("ualizd"),
        dictgen::InsensitiveStr::Ascii("ualizied"),
        dictgen::InsensitiveStr::Ascii("uallity"),
        dictgen::InsensitiveStr::Ascii("uallly"),
        dictgen::InsensitiveStr::Ascii("ualy"),
        dictgen::InsensitiveStr::Ascii("ualzied"),
        dictgen::InsensitiveStr::Ascii("ulaized"),
    ],
    values: &[
        &["sexualized"],
        &["sexually"],
        &["sexualized"],
        &["sexualized"],
        &["sexualized"],
        &["sexually"],
        &["sexually"],
        &["sexually"],
        &["sexualized"],
        &["sexualized"],
    ],
    range: 4..=8,
};

static WORD_SEV_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_SEV_CHILDREN),
    value: None,
};

pub static WORD_SEV_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("enteeen"),
        dictgen::InsensitiveStr::Ascii("enten"),
        dictgen::InsensitiveStr::Ascii("ereal"),
        dictgen::InsensitiveStr::Ascii("ereid"),
        dictgen::InsensitiveStr::Ascii("eride"),
        dictgen::InsensitiveStr::Ascii("erley"),
        dictgen::InsensitiveStr::Ascii("erly"),
        dictgen::InsensitiveStr::Ascii("ice"),
    ],
    values: &[
        &["seventeen"],
        &["seventeen"],
        &["several"],
        &["severed"],
        &["severed"],
        &["severely"],
        &["severely"],
        &["service"],
    ],
    range: 3..=7,
};

static WORD_SEU_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_SEU_CHILDREN),
    value: None,
};

pub static WORD_SEU_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("xalized")],
    values: &[&["sexualized"]],
    range: 7..=7,
};

static WORD_SET_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_SET_CHILDREN),
    value: None,
};

pub static WORD_SET_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("telement"),
        dictgen::InsensitiveStr::Ascii("telment"),
        dictgen::InsensitiveStr::Ascii("telments"),
        dictgen::InsensitiveStr::Ascii("tigns"),
        dictgen::InsensitiveStr::Ascii("tins"),
        dictgen::InsensitiveStr::Ascii("tlemens"),
        dictgen::InsensitiveStr::Ascii("tlemetns"),
        dictgen::InsensitiveStr::Ascii("tlemets"),
        dictgen::InsensitiveStr::Ascii("tlemnts"),
        dictgen::InsensitiveStr::Ascii("tlment"),
    ],
    values: &[
        &["settlement"],
        &["settlement"],
        &["settlements"],
        &["settings"],
        &["settings"],
        &["settlements"],
        &["settlements"],
        &["settlements"],
        &["settlements"],
        &["settlement"],
    ],
    range: 4..=8,
};

static WORD_SES_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_SES_CHILDREN),
    value: None,
};

pub static WORD_SES_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("katchewan"),
        dictgen::InsensitiveStr::Ascii("nors"),
    ],
    values: &[&["saskatchewan"], &["sensors"]],
    range: 4..=9,
};

static WORD_SER_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_SER_CHILDREN),
    value: None,
};

pub static WORD_SER_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ached"),
        dictgen::InsensitiveStr::Ascii("aches"),
        dictgen::InsensitiveStr::Ascii("aching"),
        dictgen::InsensitiveStr::Ascii("bain"),
        dictgen::InsensitiveStr::Ascii("enitary"),
        dictgen::InsensitiveStr::Ascii("entiy"),
        dictgen::InsensitiveStr::Ascii("gaent"),
        dictgen::InsensitiveStr::Ascii("geat"),
        dictgen::InsensitiveStr::Ascii("gent"),
        dictgen::InsensitiveStr::Ascii("iban"),
        dictgen::InsensitiveStr::Ascii("iosuly"),
        dictgen::InsensitiveStr::Ascii("ioulsy"),
        dictgen::InsensitiveStr::Ascii("iuosly"),
        dictgen::InsensitiveStr::Ascii("ivceable"),
        dictgen::InsensitiveStr::Ascii("tificates"),
        dictgen::InsensitiveStr::Ascii("vans"),
        dictgen::InsensitiveStr::Ascii("vantes"),
        dictgen::InsensitiveStr::Ascii("veillance"),
        dictgen::InsensitiveStr::Ascii("viceble"),
        dictgen::InsensitiveStr::Ascii("viciable"),
    ],
    values: &[
        &["searched"],
        &["searches"],
        &["searching"],
        &["serbian"],
        &["serenity"],
        &["serenity"],
        &["sergeant"],
        &["sergeant"],
        &["sergeant"],
        &["serbian"],
        &["seriously"],
        &["seriously"],
        &["seriously"],
        &["serviceable"],
        &["certificates"],
        &["servants"],
        &["servants"],
        &["surveillance"],
        &["serviceable"],
        &["serviceable"],
    ],
    range: 4..=9,
};

static WORD_SEP_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_SEP_CHILDREN),
    value: None,
};

pub static WORD_SEP_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("aracion"),
        dictgen::InsensitiveStr::Ascii("aratedly"),
        dictgen::InsensitiveStr::Ascii("aratelly"),
        dictgen::InsensitiveStr::Ascii("araters"),
        dictgen::InsensitiveStr::Ascii("aratisme"),
        dictgen::InsensitiveStr::Ascii("aratiste"),
        dictgen::InsensitiveStr::Ascii("aratley"),
        dictgen::InsensitiveStr::Ascii("arato"),
        dictgen::InsensitiveStr::Ascii("aratron"),
        dictgen::InsensitiveStr::Ascii("arete"),
        dictgen::InsensitiveStr::Ascii("aretely"),
        dictgen::InsensitiveStr::Ascii("cially"),
        dictgen::InsensitiveStr::Ascii("cifications"),
        dictgen::InsensitiveStr::Ascii("culating"),
        dictgen::InsensitiveStr::Ascii("earte"),
        dictgen::InsensitiveStr::Ascii("erate"),
        dictgen::InsensitiveStr::Ascii("erated"),
        dictgen::InsensitiveStr::Ascii("erately"),
        dictgen::InsensitiveStr::Ascii("erates"),
        dictgen::InsensitiveStr::Ascii("erating"),
        dictgen::InsensitiveStr::Ascii("eration"),
        dictgen::InsensitiveStr::Ascii("eratism"),
        dictgen::InsensitiveStr::Ascii("eratist"),
        dictgen::InsensitiveStr::Ascii("eratley"),
        dictgen::InsensitiveStr::Ascii("erator"),
        dictgen::InsensitiveStr::Ascii("ina"),
        dictgen::InsensitiveStr::Ascii("lling"),
        dictgen::InsensitiveStr::Ascii("reate"),
        dictgen::InsensitiveStr::Ascii("tmeber"),
        dictgen::InsensitiveStr::Ascii("ulchure"),
        dictgen::InsensitiveStr::Ascii("ulcre"),
    ],
    values: &[
        &["separation"],
        &["separately"],
        &["separately"],
        &["separates"],
        &["separates"],
        &["separates"],
        &["separately"],
        &["separation"],
        &["separation"],
        &["seperate"],
        &["separately"],
        &["specially"],
        &["specification"],
        &["speculating"],
        &["seperate"],
        &["separate"],
        &["separated"],
        &["separately"],
        &["separates"],
        &["separating"],
        &["separation"],
        &["separatism"],
        &["separatist"],
        &["seperate"],
        &["separator"],
        &["subpena"],
        &["spelling"],
        &["seperate"],
        &["september"],
        &["sepulchre"],
        &["sepulchre"],
    ],
    range: 3..=11,
};

static WORD_SEN_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_SEN_CHILDREN),
    value: None,
};

static WORD_SEN_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    Some(&WORD_SENA_NODE),
    None,
    Some(&WORD_SENC_NODE),
    Some(&WORD_SEND_NODE),
    Some(&WORD_SENE_NODE),
    None,
    None,
    None,
    Some(&WORD_SENI_NODE),
    None,
    None,
    None,
    None,
    None,
    Some(&WORD_SENO_NODE),
    None,
    None,
    None,
    Some(&WORD_SENS_NODE),
    Some(&WORD_SENT_NODE),
    None,
    None,
    None,
    None,
    None,
    Some(&WORD_SENZ_NODE),
];

static WORD_SENZ_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_SENZ_CHILDREN),
    value: None,
};

pub static WORD_SENZ_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ationalism"),
        dictgen::InsensitiveStr::Ascii("ationalist"),
    ],
    values: &[&["sensationalism"], &["sensationalist"]],
    range: 10..=10,
};

static WORD_SENT_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_SENT_CHILDREN),
    value: None,
};

pub static WORD_SENT_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("amental"),
        dictgen::InsensitiveStr::Ascii("aments"),
        dictgen::InsensitiveStr::Ascii("ancing"),
        dictgen::InsensitiveStr::Ascii("aor"),
        dictgen::InsensitiveStr::Ascii("aors"),
        dictgen::InsensitiveStr::Ascii("ationalism"),
        dictgen::InsensitiveStr::Ascii("ationalist"),
        dictgen::InsensitiveStr::Ascii("emental"),
        dictgen::InsensitiveStr::Ascii("ements"),
        dictgen::InsensitiveStr::Ascii("enceing"),
        dictgen::InsensitiveStr::Ascii("encian"),
        dictgen::InsensitiveStr::Ascii("ensing"),
        dictgen::InsensitiveStr::Ascii("iers"),
        dictgen::InsensitiveStr::Ascii("imant"),
        dictgen::InsensitiveStr::Ascii("imenal"),
        dictgen::InsensitiveStr::Ascii("imentals"),
        dictgen::InsensitiveStr::Ascii("imentos"),
        dictgen::InsensitiveStr::Ascii("imentul"),
        dictgen::InsensitiveStr::Ascii("imetal"),
        dictgen::InsensitiveStr::Ascii("incing"),
        dictgen::InsensitiveStr::Ascii("inents"),
        dictgen::InsensitiveStr::Ascii("inet"),
        dictgen::InsensitiveStr::Ascii("inte"),
        dictgen::InsensitiveStr::Ascii("ires"),
        dictgen::InsensitiveStr::Ascii("reis"),
        dictgen::InsensitiveStr::Ascii("ris"),
    ],
    values: &[
        &["sentimental"],
        &["sentiments"],
        &["sentencing"],
        &["senator"],
        &["senators"],
        &["sensationalism"],
        &["sensationalist"],
        &["sentimental"],
        &["sentiments"],
        &["sentencing"],
        &["sentencing"],
        &["sentencing"],
        &["sentries"],
        &["sentimental"],
        &["sentimental"],
        &["sentiments"],
        &["sentiments"],
        &["sentimental"],
        &["sentimental"],
        &["sentencing"],
        &["sentiments"],
        &["sentient"],
        &["sentient"],
        &["sentries"],
        &["sentries"],
        &["sentries"],
    ],
    range: 3..=10,
};

static WORD_SENS_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_SENS_CHILDREN),
    value: None,
};

pub static WORD_SENS_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("acional"),
        dictgen::InsensitiveStr::Ascii("acionalism"),
        dictgen::InsensitiveStr::Ascii("acionalist"),
        dictgen::InsensitiveStr::Ascii("asional"),
        dictgen::InsensitiveStr::Ascii("asionalism"),
        dictgen::InsensitiveStr::Ascii("asionalist"),
        dictgen::InsensitiveStr::Ascii("ationable"),
        dictgen::InsensitiveStr::Ascii("ationail"),
        dictgen::InsensitiveStr::Ascii("ationails"),
        dictgen::InsensitiveStr::Ascii("ationaism"),
        dictgen::InsensitiveStr::Ascii("ationalim"),
        dictgen::InsensitiveStr::Ascii("ationalisim"),
        dictgen::InsensitiveStr::Ascii("ationality"),
        dictgen::InsensitiveStr::Ascii("ationalizm"),
        dictgen::InsensitiveStr::Ascii("ationalsim"),
        dictgen::InsensitiveStr::Ascii("ationel"),
        dictgen::InsensitiveStr::Ascii("ationella"),
        dictgen::InsensitiveStr::Ascii("ationilism"),
        dictgen::InsensitiveStr::Ascii("ationilist"),
        dictgen::InsensitiveStr::Ascii("ationnal"),
        dictgen::InsensitiveStr::Ascii("ationslism"),
        dictgen::InsensitiveStr::Ascii("etional"),
        dictgen::InsensitiveStr::Ascii("etionalism"),
        dictgen::InsensitiveStr::Ascii("ibel"),
        dictgen::InsensitiveStr::Ascii("ibilisiert"),
        dictgen::InsensitiveStr::Ascii("ibilites"),
        dictgen::InsensitiveStr::Ascii("itivety"),
        dictgen::InsensitiveStr::Ascii("itivitiy"),
        dictgen::InsensitiveStr::Ascii("itiviy"),
        dictgen::InsensitiveStr::Ascii("itivty"),
        dictgen::InsensitiveStr::Ascii("itivy"),
        dictgen::InsensitiveStr::Ascii("ores"),
        dictgen::InsensitiveStr::Ascii("tive"),
        dictgen::InsensitiveStr::Ascii("ure"),
    ],
    values: &[
        &["sensational"],
        &["sensationalism"],
        &["sensationalist"],
        &["sensational"],
        &["sensationalism"],
        &["sensationalist"],
        &["sensational"],
        &["sensational"],
        &["sensationalism"],
        &["sensationalism"],
        &["sensationalism"],
        &["sensationalism"],
        &["sensationalist"],
        &["sensationalism"],
        &["sensationalism"],
        &["sensational"],
        &["sensational"],
        &["sensationalism"],
        &["sensationalist"],
        &["sensational"],
        &["sensationalism"],
        &["sensational"],
        &["sensationalism"],
        &["sensible"],
        &["sensibilities"],
        &["sensibilities"],
        &["sensitivity"],
        &["sensitivity"],
        &["sensitivity"],
        &["sensitivity"],
        &["sensitivity"],
        &["sensors"],
        &["sensitive"],
        &["censure"],
    ],
    range: 3..=11,
};

static WORD_SENO_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_SENO_CHILDREN),
    value: None,
};

pub static WORD_SENO_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("irs")],
    values: &[&["seniors"]],
    range: 3..=3,
};

static WORD_SENI_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_SENI_CHILDREN),
    value: None,
};

pub static WORD_SENI_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ores"),
        dictgen::InsensitiveStr::Ascii("sble"),
        dictgen::InsensitiveStr::Ascii("tmental"),
        dictgen::InsensitiveStr::Ascii("tments"),
    ],
    values: &[
        &["seniors"],
        &["sensible"],
        &["sentimental"],
        &["sentiments"],
    ],
    range: 4..=7,
};

static WORD_SENE_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_SENE_CHILDREN),
    value: None,
};

pub static WORD_SENE_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("rity")],
    values: &[&["serenity"]],
    range: 4..=4,
};

static WORD_SEND_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_SEND_CHILDREN),
    value: None,
};

pub static WORD_SEND_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("etary")],
    values: &[&["sedentary"]],
    range: 5..=5,
};

static WORD_SENC_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_SENC_CHILDREN),
    value: None,
};

pub static WORD_SENC_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("e")],
    values: &[&["sense"]],
    range: 1..=1,
};

static WORD_SENA_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_SENA_CHILDREN),
    value: None,
};

pub static WORD_SENA_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("rios"),
        dictgen::InsensitiveStr::Ascii("tores"),
    ],
    values: &[&["scenarios"], &["senators"]],
    range: 4..=5,
};

static WORD_SEM_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_SEM_CHILDREN),
    value: None,
};

pub static WORD_SEM_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("anitcs"),
        dictgen::InsensitiveStr::Ascii("estre"),
        dictgen::InsensitiveStr::Ascii("estres"),
        dictgen::InsensitiveStr::Ascii("natics"),
        dictgen::InsensitiveStr::Ascii("seter"),
        dictgen::InsensitiveStr::Ascii("seters"),
    ],
    values: &[
        &["semantics"],
        &["semester"],
        &["semesters"],
        &["semantics"],
        &["semester"],
        &["semesters"],
    ],
    range: 5..=6,
};

static WORD_SEL_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_SEL_CHILDREN),
    value: None,
};

pub static WORD_SEL_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("domly"),
        dictgen::InsensitiveStr::Ascii("ectie"),
        dictgen::InsensitiveStr::Ascii("ectiose"),
        dictgen::InsensitiveStr::Ascii("ectivley"),
        dictgen::InsensitiveStr::Ascii("ectivly"),
        dictgen::InsensitiveStr::Ascii("ectivos"),
        dictgen::InsensitiveStr::Ascii("feshness"),
        dictgen::InsensitiveStr::Ascii("fiers"),
        dictgen::InsensitiveStr::Ascii("fishess"),
        dictgen::InsensitiveStr::Ascii("ifes"),
    ],
    values: &[
        &["seldom"],
        &["selective"],
        &["selections"],
        &["selectively"],
        &["selectively"],
        &["selections"],
        &["selfishness"],
        &["selfies"],
        &["selfishness"],
        &["selfies"],
    ],
    range: 4..=8,
};

static WORD_SEI_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_SEI_CHILDREN),
    value: None,
};

pub static WORD_SEI_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ge"),
        dictgen::InsensitiveStr::Ascii("ng"),
        dictgen::InsensitiveStr::Ascii("nor"),
        dictgen::InsensitiveStr::Ascii("nors"),
    ],
    values: &[&["siege"], &["seeing"], &["senior"], &["seniors"]],
    range: 2..=4,
};

static WORD_SEG_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_SEG_CHILDREN),
    value: None,
};

pub static WORD_SEG_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("egrated"),
        dictgen::InsensitiveStr::Ascii("ementation"),
        dictgen::InsensitiveStr::Ascii("ergation"),
        dictgen::InsensitiveStr::Ascii("ragated"),
        dictgen::InsensitiveStr::Ascii("ragation"),
        dictgen::InsensitiveStr::Ascii("regacion"),
        dictgen::InsensitiveStr::Ascii("regaded"),
        dictgen::InsensitiveStr::Ascii("regatie"),
        dictgen::InsensitiveStr::Ascii("retated"),
        dictgen::InsensitiveStr::Ascii("retation"),
        dictgen::InsensitiveStr::Ascii("rigated"),
        dictgen::InsensitiveStr::Ascii("rigation"),
        dictgen::InsensitiveStr::Ascii("uoys"),
    ],
    values: &[
        &["segregated"],
        &["segmentation"],
        &["segregation"],
        &["segregated"],
        &["segregation"],
        &["segregation"],
        &["segregated"],
        &["segregated"],
        &["segregated"],
        &["segregation"],
        &["segregated"],
        &["segregation"],
        &["segues"],
    ],
    range: 4..=10,
};

static WORD_SEF_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_SEF_CHILDREN),
    value: None,
};

pub static WORD_SEF_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("lies"),
        dictgen::InsensitiveStr::Ascii("lishness"),
    ],
    values: &[&["selfies"], &["selfishness"]],
    range: 4..=8,
};

static WORD_SED_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_SED_CHILDREN),
    value: None,
};

pub static WORD_SED_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("entarity"),
        dictgen::InsensitiveStr::Ascii("ereal"),
        dictgen::InsensitiveStr::Ascii("netary"),
        dictgen::InsensitiveStr::Ascii("uciton"),
    ],
    values: &[
        &["sedentary"],
        &["sidereal"],
        &["sedentary"],
        &["seduction"],
    ],
    range: 5..=8,
};

static WORD_SEC_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_SEC_CHILDREN),
    value: None,
};

pub static WORD_SEC_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ceeded"),
        dictgen::InsensitiveStr::Ascii("eed"),
        dictgen::InsensitiveStr::Ascii("eeded"),
        dictgen::InsensitiveStr::Ascii("ertary"),
        dictgen::InsensitiveStr::Ascii("ertly"),
        dictgen::InsensitiveStr::Ascii("erts"),
        dictgen::InsensitiveStr::Ascii("pter"),
        dictgen::InsensitiveStr::Ascii("ratary"),
        dictgen::InsensitiveStr::Ascii("ratery"),
        dictgen::InsensitiveStr::Ascii("relty"),
        dictgen::InsensitiveStr::Ascii("rest"),
        dictgen::InsensitiveStr::Ascii("retas"),
        dictgen::InsensitiveStr::Ascii("retery"),
        dictgen::InsensitiveStr::Ascii("retley"),
        dictgen::InsensitiveStr::Ascii("retos"),
        dictgen::InsensitiveStr::Ascii("rety"),
        dictgen::InsensitiveStr::Ascii("ruity"),
        dictgen::InsensitiveStr::Ascii("uirty"),
    ],
    values: &[
        &["seceded"],
        &["succeed"],
        &["succeeded"],
        &["secretary"],
        &["secretly"],
        &["secrets"],
        &["scepter"],
        &["secretary"],
        &["secretary"],
        &["secretly"],
        &["secrets"],
        &["secrets"],
        &["secretary"],
        &["secretly"],
        &["secrets"],
        &["secretly"],
        &["security"],
        &["security"],
    ],
    range: 3..=6,
};

static WORD_SEB_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_SEB_CHILDREN),
    value: None,
};

pub static WORD_SEB_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("asitan"),
        dictgen::InsensitiveStr::Ascii("astain"),
        dictgen::InsensitiveStr::Ascii("astiaan"),
        dictgen::InsensitiveStr::Ascii("astin"),
        dictgen::InsensitiveStr::Ascii("rian"),
        dictgen::InsensitiveStr::Ascii("satian"),
    ],
    values: &[
        &["sebastian"],
        &["sebastian"],
        &["sebastian"],
        &["sebastian"],
        &["serbian"],
        &["sebastian"],
    ],
    range: 4..=7,
};

static WORD_SEA_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_SEA_CHILDREN),
    value: None,
};

pub static WORD_SEA_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ch"),
        dictgen::InsensitiveStr::Ascii("ched"),
        dictgen::InsensitiveStr::Ascii("ches"),
        dictgen::InsensitiveStr::Ascii("hakws"),
        dictgen::InsensitiveStr::Ascii("hawkers"),
        dictgen::InsensitiveStr::Ascii("haws"),
        dictgen::InsensitiveStr::Ascii("hwaks"),
        dictgen::InsensitiveStr::Ascii("mlessley"),
        dictgen::InsensitiveStr::Ascii("mlessy"),
        dictgen::InsensitiveStr::Ascii("ntor"),
        dictgen::InsensitiveStr::Ascii("ntors"),
        dictgen::InsensitiveStr::Ascii("rchd"),
        dictgen::InsensitiveStr::Ascii("rchign"),
        dictgen::InsensitiveStr::Ascii("rchs"),
    ],
    values: &[
        &["search"],
        &["searched"],
        &["searches"],
        &["seahawks"],
        &["seahawks"],
        &["seahawks"],
        &["seahawks"],
        &["seamlessly"],
        &["seamlessly"],
        &["senator"],
        &["senators"],
        &["searched"],
        &["searching"],
        &["searches"],
    ],
    range: 2..=8,
};

static WORD_SC_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_SC_CHILDREN),
    value: None,
};

static WORD_SC_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    Some(&WORD_SCA_NODE),
    None,
    None,
    None,
    Some(&WORD_SCE_NODE),
    None,
    None,
    Some(&WORD_SCH_NODE),
    Some(&WORD_SCI_NODE),
    None,
    None,
    Some(&WORD_SCL_NODE),
    None,
    Some(&WORD_SCN_NODE),
    Some(&WORD_SCO_NODE),
    Some(&WORD_SCP_NODE),
    None,
    Some(&WORD_SCR_NODE),
    None,
    Some(&WORD_SCT_NODE),
    Some(&WORD_SCU_NODE),
    None,
    None,
    None,
    Some(&WORD_SCY_NODE),
    None,
];

static WORD_SCY_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_SCY_CHILDREN),
    value: None,
};

pub static WORD_SCY_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("hter")],
    values: &[&["scyther"]],
    range: 4..=4,
};

static WORD_SCU_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_SCU_CHILDREN),
    value: None,
};

pub static WORD_SCU_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("lpter"),
        dictgen::InsensitiveStr::Ascii("lpteur"),
        dictgen::InsensitiveStr::Ascii("lputre"),
        dictgen::InsensitiveStr::Ascii("ltpure"),
        dictgen::InsensitiveStr::Ascii("plture"),
        dictgen::InsensitiveStr::Ascii("ptures"),
        dictgen::InsensitiveStr::Ascii("rtiny"),
    ],
    values: &[
        &["sculpture"],
        &["sculpture"],
        &["sculpture"],
        &["sculpture"],
        &["sculpture"],
        &["sculptures"],
        &["scrutiny"],
    ],
    range: 5..=6,
};

static WORD_SCT_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_SCT_CHILDREN),
    value: None,
};

pub static WORD_SCT_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("osman")],
    values: &[&["scotsman"]],
    range: 5..=5,
};

static WORD_SCR_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_SCR_CHILDREN),
    value: None,
};

pub static WORD_SCR_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("acth"),
        dictgen::InsensitiveStr::Ascii("acthed"),
        dictgen::InsensitiveStr::Ascii("acthes"),
        dictgen::InsensitiveStr::Ascii("acthing"),
        dictgen::InsensitiveStr::Ascii("ambe"),
        dictgen::InsensitiveStr::Ascii("ambeld"),
        dictgen::InsensitiveStr::Ascii("ambleing"),
        dictgen::InsensitiveStr::Ascii("amblies"),
        dictgen::InsensitiveStr::Ascii("atchs"),
        dictgen::InsensitiveStr::Ascii("athces"),
        dictgen::InsensitiveStr::Ascii("eenshat"),
        dictgen::InsensitiveStr::Ascii("eenshit"),
        dictgen::InsensitiveStr::Ascii("eenshoot"),
        dictgen::InsensitiveStr::Ascii("eenshoots"),
        dictgen::InsensitiveStr::Ascii("eenwrighter"),
        dictgen::InsensitiveStr::Ascii("iptores"),
        dictgen::InsensitiveStr::Ascii("iptue"),
        dictgen::InsensitiveStr::Ascii("ipturae"),
        dictgen::InsensitiveStr::Ascii("iptus"),
        dictgen::InsensitiveStr::Ascii("iputres"),
        dictgen::InsensitiveStr::Ascii("itped"),
        dictgen::InsensitiveStr::Ascii("itps"),
        dictgen::InsensitiveStr::Ascii("itpures"),
        dictgen::InsensitiveStr::Ascii("oates"),
        dictgen::InsensitiveStr::Ascii("ollade"),
        dictgen::InsensitiveStr::Ascii("olld"),
        dictgen::InsensitiveStr::Ascii("opion"),
        dictgen::InsensitiveStr::Ascii("pited"),
        dictgen::InsensitiveStr::Ascii("pits"),
        dictgen::InsensitiveStr::Ascii("uitny"),
        dictgen::InsensitiveStr::Ascii("unity"),
        dictgen::InsensitiveStr::Ascii("utiney"),
        dictgen::InsensitiveStr::Ascii("utinity"),
        dictgen::InsensitiveStr::Ascii("utinty"),
    ],
    values: &[
        &["scratch"],
        &["scratched"],
        &["scratches"],
        &["scratching"],
        &["scramble"],
        &["scrambled"],
        &["scrambling"],
        &["scramble"],
        &["scratches"],
        &["scratches"],
        &["screenshot"],
        &["screenshot"],
        &["screenshot"],
        &["screenshot"],
        &["screenwriter"],
        &["scriptures"],
        &["scriptures"],
        &["scriptures"],
        &["scripts"],
        &["scriptures"],
        &["scripted"],
        &["scripts"],
        &["scriptures"],
        &["socrates"],
        &["scrolled"],
        &["scrolled"],
        &["scorpion"],
        &["scripted"],
        &["scripts"],
        &["scrutiny"],
        &["scrutiny"],
        &["scrutiny"],
        &["scrutiny"],
        &["scrutiny"],
    ],
    range: 4..=11,
};

static WORD_SCP_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_SCP_CHILDREN),
    value: None,
};

pub static WORD_SCP_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("eter")],
    values: &[&["scepter"]],
    range: 4..=4,
};

static WORD_SCO_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_SCO_CHILDREN),
    value: None,
};

pub static WORD_SCO_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ll"),
        dictgen::InsensitiveStr::Ascii("oterers"),
        dictgen::InsensitiveStr::Ascii("otes"),
        dictgen::InsensitiveStr::Ascii("prion"),
        dictgen::InsensitiveStr::Ascii("rates"),
        dictgen::InsensitiveStr::Ascii("rebaord"),
        dictgen::InsensitiveStr::Ascii("reboad"),
        dictgen::InsensitiveStr::Ascii("reborad"),
        dictgen::InsensitiveStr::Ascii("rebored"),
        dictgen::InsensitiveStr::Ascii("ripon"),
        dictgen::InsensitiveStr::Ascii("rpin"),
        dictgen::InsensitiveStr::Ascii("rpiomon"),
        dictgen::InsensitiveStr::Ascii("rpoin"),
        dictgen::InsensitiveStr::Ascii("stman"),
        dictgen::InsensitiveStr::Ascii("ttisch"),
    ],
    values: &[
        &["scroll"],
        &["scooters"],
        &["scooters"],
        &["scorpion"],
        &["socrates"],
        &["scoreboard"],
        &["scoreboard"],
        &["scoreboard"],
        &["scoreboard"],
        &["scorpion"],
        &["scorpion"],
        &["scorpion"],
        &["scorpion"],
        &["scotsman"],
        &["scottish"],
    ],
    range: 2..=7,
};

static WORD_SCN_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_SCN_CHILDREN),
    value: None,
};

pub static WORD_SCN_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("adinavia"),
        dictgen::InsensitiveStr::Ascii("adinavian"),
        dictgen::InsensitiveStr::Ascii("earios"),
    ],
    values: &[&["scandinavia"], &["scandinavian"], &["scenarios"]],
    range: 6..=9,
};

static WORD_SCL_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_SCL_CHILDREN),
    value: None,
};

pub static WORD_SCL_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("upture")],
    values: &[&["sculpture"]],
    range: 6..=6,
};

static WORD_SCI_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_SCI_CHILDREN),
    value: None,
};

pub static WORD_SCI_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("encers"),
        dictgen::InsensitiveStr::Ascii("encists"),
        dictgen::InsensitiveStr::Ascii("ense"),
        dictgen::InsensitiveStr::Ascii("entests"),
        dictgen::InsensitiveStr::Ascii("entfic"),
        dictgen::InsensitiveStr::Ascii("entic"),
        dictgen::InsensitiveStr::Ascii("entiests"),
        dictgen::InsensitiveStr::Ascii("entifc"),
        dictgen::InsensitiveStr::Ascii("entificaly"),
        dictgen::InsensitiveStr::Ascii("entificlly"),
        dictgen::InsensitiveStr::Ascii("entis"),
        dictgen::InsensitiveStr::Ascii("entits"),
        dictgen::InsensitiveStr::Ascii("nce"),
        dictgen::InsensitiveStr::Ascii("nece"),
        dictgen::InsensitiveStr::Ascii("rpt"),
        dictgen::InsensitiveStr::Ascii("rptures"),
    ],
    values: &[
        &["sciences"],
        &["scientists"],
        &["sciences"],
        &["scientists"],
        &["scientific"],
        &["scientific"],
        &["scientists"],
        &["scientific"],
        &["scientifically"],
        &["scientifically"],
        &["scientist"],
        &["scientist"],
        &["science"],
        &["science"],
        &["script"],
        &["scriptures"],
    ],
    range: 3..=10,
};

static WORD_SCH_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_SCH_CHILDREN),
    value: None,
};

pub static WORD_SCH_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("edual"),
        dictgen::InsensitiveStr::Ascii("eduleing"),
        dictgen::InsensitiveStr::Ascii("edulling"),
        dictgen::InsensitiveStr::Ascii("eems"),
        dictgen::InsensitiveStr::Ascii("eudling"),
        dictgen::InsensitiveStr::Ascii("isophrenic"),
        dictgen::InsensitiveStr::Ascii("iziphrenic"),
        dictgen::InsensitiveStr::Ascii("izophernia"),
        dictgen::InsensitiveStr::Ascii("izophernic"),
        dictgen::InsensitiveStr::Ascii("izophrania"),
        dictgen::InsensitiveStr::Ascii("izophrena"),
        dictgen::InsensitiveStr::Ascii("izophreniiic"),
        dictgen::InsensitiveStr::Ascii("izophrentic"),
        dictgen::InsensitiveStr::Ascii("izoprhenia"),
        dictgen::InsensitiveStr::Ascii("izoprhenic"),
        dictgen::InsensitiveStr::Ascii("oalrs"),
        dictgen::InsensitiveStr::Ascii("oalrship"),
        dictgen::InsensitiveStr::Ascii("olalry"),
        dictgen::InsensitiveStr::Ascii("olarhip"),
        dictgen::InsensitiveStr::Ascii("olarhips"),
        dictgen::InsensitiveStr::Ascii("olarhsips"),
        dictgen::InsensitiveStr::Ascii("olarley"),
        dictgen::InsensitiveStr::Ascii("olarstic"),
        dictgen::InsensitiveStr::Ascii("olary"),
        dictgen::InsensitiveStr::Ascii("olership"),
        dictgen::InsensitiveStr::Ascii("olerships"),
        dictgen::InsensitiveStr::Ascii("olorship"),
        dictgen::InsensitiveStr::Ascii("olorships"),
        dictgen::InsensitiveStr::Ascii("oodle"),
        dictgen::InsensitiveStr::Ascii("oold"),
        dictgen::InsensitiveStr::Ascii("ozophrenia"),
        dictgen::InsensitiveStr::Ascii("ozophrenic"),
        dictgen::InsensitiveStr::Ascii("yzophrenia"),
        dictgen::InsensitiveStr::Ascii("yzophrenic"),
        dictgen::InsensitiveStr::Ascii("ziophrenia"),
        dictgen::InsensitiveStr::Ascii("ziophrenic"),
    ],
    values: &[
        &["schedule"],
        &["scheduling"],
        &["scheduling"],
        &["schemes"],
        &["scheduling"],
        &["schizophrenic"],
        &["schizophrenic"],
        &["schizophrenia"],
        &["schizophrenic"],
        &["schizophrenia"],
        &["schizophrenia"],
        &["schizophrenic"],
        &["schizophrenic"],
        &["schizophrenia"],
        &["schizophrenic"],
        &["scholars"],
        &["scholarships"],
        &["scholarly"],
        &["scholarship"],
        &["scholarship"],
        &["scholarships"],
        &["scholarly"],
        &["scholastic"],
        &["scholarly"],
        &["scholarship"],
        &["scholarships"],
        &["scholarship"],
        &["scholarships"],
        &["schooled"],
        &["schooled"],
        &["schizophrenia"],
        &["schizophrenic"],
        &["schizophrenia"],
        &["schizophrenic"],
        &["schizophrenia"],
        &["schizophrenic"],
    ],
    range: 4..=12,
};

static WORD_SCE_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_SCE_CHILDREN),
    value: None,
};

pub static WORD_SCE_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("intific"),
        dictgen::InsensitiveStr::Ascii("intifically"),
        dictgen::InsensitiveStr::Ascii("intist"),
        dictgen::InsensitiveStr::Ascii("intists"),
        dictgen::InsensitiveStr::Ascii("narioes"),
        dictgen::InsensitiveStr::Ascii("narions"),
        dictgen::InsensitiveStr::Ascii("narious"),
        dictgen::InsensitiveStr::Ascii("pture"),
    ],
    values: &[
        &["scientific"],
        &["scientifically"],
        &["scientist"],
        &["scientists"],
        &["scenarios"],
        &["scenarios"],
        &["scenarios"],
        &["sceptre"],
    ],
    range: 5..=11,
};

static WORD_SCA_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_SCA_CHILDREN),
    value: None,
};

pub static WORD_SCA_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("epgoat"),
        dictgen::InsensitiveStr::Ascii("leable"),
        dictgen::InsensitiveStr::Ascii("ndales"),
        dictgen::InsensitiveStr::Ascii("ndalos"),
        dictgen::InsensitiveStr::Ascii("ndalosa"),
        dictgen::InsensitiveStr::Ascii("ndalose"),
        dictgen::InsensitiveStr::Ascii("ndalosi"),
        dictgen::InsensitiveStr::Ascii("ndaloso"),
        dictgen::InsensitiveStr::Ascii("ndanavia"),
        dictgen::InsensitiveStr::Ascii("ndaniva"),
        dictgen::InsensitiveStr::Ascii("ndanivia"),
        dictgen::InsensitiveStr::Ascii("ndanivian"),
        dictgen::InsensitiveStr::Ascii("ndas"),
        dictgen::InsensitiveStr::Ascii("ndenavia"),
        dictgen::InsensitiveStr::Ascii("ndenavian"),
        dictgen::InsensitiveStr::Ascii("ndianvia"),
        dictgen::InsensitiveStr::Ascii("ndianvian"),
        dictgen::InsensitiveStr::Ascii("ndianvians"),
        dictgen::InsensitiveStr::Ascii("ndimania"),
        dictgen::InsensitiveStr::Ascii("ndinacian"),
        dictgen::InsensitiveStr::Ascii("ndinaiva"),
        dictgen::InsensitiveStr::Ascii("ndinaivan"),
        dictgen::InsensitiveStr::Ascii("ndinava"),
        dictgen::InsensitiveStr::Ascii("ndinavan"),
        dictgen::InsensitiveStr::Ascii("ndinavica"),
        dictgen::InsensitiveStr::Ascii("ndinavien"),
        dictgen::InsensitiveStr::Ascii("ndinavion"),
        dictgen::InsensitiveStr::Ascii("ndinvia"),
        dictgen::InsensitiveStr::Ascii("ndivania"),
        dictgen::InsensitiveStr::Ascii("ndivanian"),
        dictgen::InsensitiveStr::Ascii("ndlas"),
        dictgen::InsensitiveStr::Ascii("ndonavia"),
        dictgen::InsensitiveStr::Ascii("ndonavian"),
        dictgen::InsensitiveStr::Ascii("nnig"),
        dictgen::InsensitiveStr::Ascii("nnign"),
        dictgen::InsensitiveStr::Ascii("ntuary"),
        dictgen::InsensitiveStr::Ascii("ramento"),
        dictgen::InsensitiveStr::Ascii("ricity"),
        dictgen::InsensitiveStr::Ascii("rifice"),
        dictgen::InsensitiveStr::Ascii("rificed"),
        dictgen::InsensitiveStr::Ascii("rifices"),
        dictgen::InsensitiveStr::Ascii("rificing"),
        dictgen::InsensitiveStr::Ascii("rmble"),
        dictgen::InsensitiveStr::Ascii("rmbled"),
        dictgen::InsensitiveStr::Ascii("rmbling"),
        dictgen::InsensitiveStr::Ascii("rtch"),
        dictgen::InsensitiveStr::Ascii("rtched"),
        dictgen::InsensitiveStr::Ascii("rtches"),
        dictgen::InsensitiveStr::Ascii("rtching"),
        dictgen::InsensitiveStr::Ascii("teboarding"),
        dictgen::InsensitiveStr::Ascii("vanged"),
    ],
    values: &[
        &["scapegoat"],
        &["scalable"],
        &["scandals"],
        &["scandals"],
        &["scandals"],
        &["scandals"],
        &["scandals"],
        &["scandals"],
        &["scandinavia"],
        &["scandinavia"],
        &["scandinavian"],
        &["scandinavian"],
        &["scandals"],
        &["scandinavia"],
        &["scandinavian"],
        &["scandinavian"],
        &["scandinavian"],
        &["scandinavian"],
        &["scandinavia"],
        &["scandinavian"],
        &["scandinavian"],
        &["scandinavia"],
        &["scandinavian"],
        &["scandinavian"],
        &["scandinavian"],
        &["scandinavian"],
        &["scandinavian"],
        &["scandinavia"],
        &["scandinavian"],
        &["scandinavian"],
        &["scandals"],
        &["scandinavia"],
        &["scandinavian"],
        &["scanning"],
        &["scanning"],
        &["sanctuary"],
        &["sacramento"],
        &["scarcity"],
        &["sacrifice"],
        &["sacrificed"],
        &["sacrifices"],
        &["sacrificing"],
        &["scramble"],
        &["scrambled"],
        &["scrambling"],
        &["scratch"],
        &["scratched"],
        &["scratches"],
        &["scratching"],
        &["skateboarding"],
        &["scavenged"],
    ],
    range: 4..=10,
};

static WORD_SA_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_SA_CHILDREN),
    value: None,
};

static WORD_SA_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    None,
    None,
    Some(&WORD_SAC_NODE),
    Some(&WORD_SAD_NODE),
    None,
    Some(&WORD_SAF_NODE),
    None,
    None,
    None,
    None,
    Some(&WORD_SAK_NODE),
    Some(&WORD_SAL_NODE),
    Some(&WORD_SAM_NODE),
    Some(&WORD_SAN_NODE),
    None,
    Some(&WORD_SAP_NODE),
    None,
    Some(&WORD_SAR_NODE),
    Some(&WORD_SAS_NODE),
    Some(&WORD_SAT_NODE),
    Some(&WORD_SAU_NODE),
    Some(&WORD_SAV_NODE),
    Some(&WORD_SAW_NODE),
    Some(&WORD_SAX_NODE),
    None,
    None,
];

static WORD_SAX_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_SAX_CHILDREN),
    value: None,
};

pub static WORD_SAX_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("aphone")],
    values: &[&["saxophone"]],
    range: 6..=6,
};

static WORD_SAW_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_SAW_CHILDREN),
    value: None,
};

pub static WORD_SAW_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("nsea"),
        dictgen::InsensitiveStr::Ascii("nson"),
        dictgen::InsensitiveStr::Ascii("stika"),
    ],
    values: &[&["swansea"], &["swanson"], &["swastika"]],
    range: 4..=5,
};

static WORD_SAV_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_SAV_CHILDREN),
    value: None,
};

pub static WORD_SAV_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("anha"),
        dictgen::InsensitiveStr::Ascii("annh"),
        dictgen::InsensitiveStr::Ascii("eing"),
    ],
    values: &[&["savanna"], &["savannah"], &["saving"]],
    range: 4..=4,
};

static WORD_SAU_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_SAU_CHILDREN),
    value: None,
};

pub static WORD_SAU_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("ght")],
    values: &[&["sought"]],
    range: 3..=3,
};

static WORD_SAT_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_SAT_CHILDREN),
    value: None,
};

pub static WORD_SAT_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("asfaction"),
        dictgen::InsensitiveStr::Ascii("asfactory"),
        dictgen::InsensitiveStr::Ascii("elite"),
        dictgen::InsensitiveStr::Ascii("elites"),
        dictgen::InsensitiveStr::Ascii("ellie"),
        dictgen::InsensitiveStr::Ascii("ellitte"),
        dictgen::InsensitiveStr::Ascii("erday"),
        dictgen::InsensitiveStr::Ascii("erdays"),
        dictgen::InsensitiveStr::Ascii("ifies"),
        dictgen::InsensitiveStr::Ascii("ifsy"),
        dictgen::InsensitiveStr::Ascii("ifsying"),
        dictgen::InsensitiveStr::Ascii("isfaccion"),
        dictgen::InsensitiveStr::Ascii("isfacion"),
        dictgen::InsensitiveStr::Ascii("isfacory"),
        dictgen::InsensitiveStr::Ascii("isfacting"),
        dictgen::InsensitiveStr::Ascii("isfactorally"),
        dictgen::InsensitiveStr::Ascii("isfactoraly"),
        dictgen::InsensitiveStr::Ascii("isfactorilly"),
        dictgen::InsensitiveStr::Ascii("isfactority"),
        dictgen::InsensitiveStr::Ascii("isfactorly"),
        dictgen::InsensitiveStr::Ascii("isfcation"),
        dictgen::InsensitiveStr::Ascii("isfiction"),
        dictgen::InsensitiveStr::Ascii("isfiy"),
        dictgen::InsensitiveStr::Ascii("isifed"),
        dictgen::InsensitiveStr::Ascii("isifes"),
        dictgen::InsensitiveStr::Ascii("istactory"),
        dictgen::InsensitiveStr::Ascii("isy"),
        dictgen::InsensitiveStr::Ascii("ric"),
        dictgen::InsensitiveStr::Ascii("rical"),
        dictgen::InsensitiveStr::Ascii("rically"),
        dictgen::InsensitiveStr::Ascii("ruday"),
        dictgen::InsensitiveStr::Ascii("rudays"),
        dictgen::InsensitiveStr::Ascii("sifaction"),
        dictgen::InsensitiveStr::Ascii("sifactory"),
        dictgen::InsensitiveStr::Ascii("sified"),
        dictgen::InsensitiveStr::Ascii("sifies"),
        dictgen::InsensitiveStr::Ascii("sify"),
        dictgen::InsensitiveStr::Ascii("sifying"),
        dictgen::InsensitiveStr::Ascii("sohi"),
        dictgen::InsensitiveStr::Ascii("telite"),
        dictgen::InsensitiveStr::Ascii("telites"),
        dictgen::InsensitiveStr::Ascii("uracion"),
        dictgen::InsensitiveStr::Ascii("urdsy"),
    ],
    values: &[
        &["satisfaction"],
        &["satisfactory"],
        &["satellite"],
        &["satellites"],
        &["satellites"],
        &["satellites"],
        &["saturday"],
        &["saturdays"],
        &["satisfies"],
        &["satisfy"],
        &["satisfying"],
        &["satisfaction"],
        &["satisfaction"],
        &["satisfactory"],
        &["satisfaction"],
        &["satisfactory"],
        &["satisfactory"],
        &["satisfactory"],
        &["satisfactorily"],
        &["satisfactory"],
        &["satisfaction"],
        &["satisfaction"],
        &["satisfy"],
        &["satisfied"],
        &["satisfies"],
        &["satisfactory"],
        &["satisfy"],
        &["satiric"],
        &["satirical"],
        &["satirically"],
        &["saturday"],
        &["saturdays"],
        &["satisfaction"],
        &["satisfactory"],
        &["satisfied"],
        &["satisfies"],
        &["satisfy"],
        &["satisfying"],
        &["satoshi"],
        &["satellite"],
        &["satellites"],
        &["saturation"],
        &["saturdays"],
    ],
    range: 3..=12,
};

static WORD_SAS_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_SAS_CHILDREN),
    value: None,
};

pub static WORD_SAS_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("auges"),
        dictgen::InsensitiveStr::Ascii("catchewan"),
        dictgen::InsensitiveStr::Ascii("katcehwan"),
        dictgen::InsensitiveStr::Ascii("katchawan"),
        dictgen::InsensitiveStr::Ascii("katchewinian"),
        dictgen::InsensitiveStr::Ascii("katchewn"),
        dictgen::InsensitiveStr::Ascii("katchwan"),
        dictgen::InsensitiveStr::Ascii("katechwan"),
        dictgen::InsensitiveStr::Ascii("ketchawan"),
        dictgen::InsensitiveStr::Ascii("ketchewan"),
        dictgen::InsensitiveStr::Ascii("ktachewan"),
        dictgen::InsensitiveStr::Ascii("tified"),
        dictgen::InsensitiveStr::Ascii("tifies"),
        dictgen::InsensitiveStr::Ascii("tifying"),
        dictgen::InsensitiveStr::Ascii("uage"),
        dictgen::InsensitiveStr::Ascii("uages"),
        dictgen::InsensitiveStr::Ascii("y"),
    ],
    values: &[
        &["sausages"],
        &["saskatchewan"],
        &["saskatchewan"],
        &["saskatchewan"],
        &["saskatchewan"],
        &["saskatchewan"],
        &["saskatchewan"],
        &["saskatchewan"],
        &["saskatchewan"],
        &["saskatchewan"],
        &["saskatchewan"],
        &["satisfied"],
        &["satisfies"],
        &["satisfying"],
        &["sausage"],
        &["sausages"],
        &["says"],
    ],
    range: 1..=12,
};

static WORD_SAR_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_SAR_CHILDREN),
    value: None,
};

pub static WORD_SAR_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("cams"),
        dictgen::InsensitiveStr::Ascii("casam"),
        dictgen::InsensitiveStr::Ascii("casim"),
        dictgen::InsensitiveStr::Ascii("casitcally"),
        dictgen::InsensitiveStr::Ascii("castc"),
        dictgen::InsensitiveStr::Ascii("casticaly"),
        dictgen::InsensitiveStr::Ascii("casticlly"),
        dictgen::InsensitiveStr::Ascii("castisch"),
        dictgen::InsensitiveStr::Ascii("gant"),
        dictgen::InsensitiveStr::Ascii("geant"),
    ],
    values: &[
        &["sarcasm"],
        &["sarcasm"],
        &["sarcasm"],
        &["sarcastically"],
        &["sarcastic"],
        &["sarcastically"],
        &["sarcastically"],
        &["sarcastic"],
        &["sergeant"],
        &["sergeant"],
    ],
    range: 4..=10,
};

static WORD_SAP_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_SAP_CHILDREN),
    value: None,
};

pub static WORD_SAP_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("cebar"),
        dictgen::InsensitiveStr::Ascii("phie"),
        dictgen::InsensitiveStr::Ascii("phirre"),
        dictgen::InsensitiveStr::Ascii("phrie"),
    ],
    values: &[&["spacebar"], &["sapphire"], &["sapphire"], &["sapphire"]],
    range: 4..=6,
};

static WORD_SAN_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_SAN_CHILDREN),
    value: None,
};

pub static WORD_SAN_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ctiond"),
        dictgen::InsensitiveStr::Ascii("ctionne"),
        dictgen::InsensitiveStr::Ascii("ctionned"),
        dictgen::InsensitiveStr::Ascii("ctionning"),
        dictgen::InsensitiveStr::Ascii("cturay"),
        dictgen::InsensitiveStr::Ascii("cutary"),
        dictgen::InsensitiveStr::Ascii("dales"),
        dictgen::InsensitiveStr::Ascii("dalls"),
        dictgen::InsensitiveStr::Ascii("diwches"),
        dictgen::InsensitiveStr::Ascii("dlas"),
        dictgen::InsensitiveStr::Ascii("dnig"),
        dictgen::InsensitiveStr::Ascii("dstom"),
        dictgen::InsensitiveStr::Ascii("dstrom"),
        dictgen::InsensitiveStr::Ascii("dviches"),
        dictgen::InsensitiveStr::Ascii("dwhich"),
        dictgen::InsensitiveStr::Ascii("dwishes"),
        dictgen::InsensitiveStr::Ascii("hedrim"),
        dictgen::InsensitiveStr::Ascii("itazion"),
        dictgen::InsensitiveStr::Ascii("lder"),
        dictgen::InsensitiveStr::Ascii("otrum"),
        dictgen::InsensitiveStr::Ascii("tcuary"),
        dictgen::InsensitiveStr::Ascii("tiation"),
        dictgen::InsensitiveStr::Ascii("tioned"),
        dictgen::InsensitiveStr::Ascii("torm"),
        dictgen::InsensitiveStr::Ascii("tourm"),
        dictgen::InsensitiveStr::Ascii("troum"),
        dictgen::InsensitiveStr::Ascii("turom"),
    ],
    values: &[
        &["sanctioned"],
        &["sanctioned"],
        &["sanctioned"],
        &["sanctioning"],
        &["sanctuary"],
        &["sanctuary"],
        &["sandals"],
        &["sandals"],
        &["sandwiches"],
        &["sandals"],
        &["sanding"],
        &["sandstorm"],
        &["sandstorm"],
        &["sandwiches"],
        &["sandwich"],
        &["sandwiches"],
        &["sanhedrin"],
        &["sanitation"],
        &["sandler"],
        &["santorum"],
        &["sanctuary"],
        &["sanitation"],
        &["sanctioned"],
        &["santorum"],
        &["santorum"],
        &["santorum"],
        &["santorum"],
    ],
    range: 4..=9,
};

static WORD_SAM_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_SAM_CHILDREN),
    value: None,
};

pub static WORD_SAM_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ckdown"),
        dictgen::InsensitiveStr::Ascii("pels"),
        dictgen::InsensitiveStr::Ascii("ruai"),
        dictgen::InsensitiveStr::Ascii("uari"),
        dictgen::InsensitiveStr::Ascii("uria"),
    ],
    values: &[
        &["smackdown"],
        &["samples"],
        &["samurai"],
        &["samurai"],
        &["samurai"],
    ],
    range: 4..=6,
};

static WORD_SAL_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_SAL_CHILDREN),
    value: None,
};

pub static WORD_SAL_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("aires"),
        dictgen::InsensitiveStr::Ascii("aris"),
        dictgen::InsensitiveStr::Ascii("avge"),
        dictgen::InsensitiveStr::Ascii("ery"),
        dictgen::InsensitiveStr::Ascii("ughter"),
        dictgen::InsensitiveStr::Ascii("ughtered"),
        dictgen::InsensitiveStr::Ascii("ughtering"),
        dictgen::InsensitiveStr::Ascii("very"),
        dictgen::InsensitiveStr::Ascii("ying"),
    ],
    values: &[
        &["salaries"],
        &["salaries"],
        &["salvage"],
        &["salary"],
        &["slaughter"],
        &["slaughtered"],
        &["slaughtering"],
        &["slavery"],
        &["slaying"],
    ],
    range: 3..=9,
};

static WORD_SAK_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_SAK_CHILDREN),
    value: None,
};

pub static WORD_SAK_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("satchewan")],
    values: &[&["saskatchewan"]],
    range: 9..=9,
};

static WORD_SAF_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_SAF_CHILDREN),
    value: None,
};

pub static WORD_SAF_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("tey"),
        dictgen::InsensitiveStr::Ascii("ty"),
    ],
    values: &[&["safety"], &["safety"]],
    range: 2..=3,
};

static WORD_SAD_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_SAD_CHILDREN),
    value: None,
};

pub static WORD_SAD_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("dends"),
        dictgen::InsensitiveStr::Ascii("denes"),
        dictgen::InsensitiveStr::Ascii("dnes"),
        dictgen::InsensitiveStr::Ascii("isitc"),
        dictgen::InsensitiveStr::Ascii("istc"),
        dictgen::InsensitiveStr::Ascii("istisch"),
        dictgen::InsensitiveStr::Ascii("ning"),
    ],
    values: &[
        &["saddens"],
        &["saddens"],
        &["saddens"],
        &["sadistic"],
        &["sadistic"],
        &["sadistic"],
        &["sanding"],
    ],
    range: 4..=7,
};

static WORD_SAC_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_SAC_CHILDREN),
    value: None,
};

pub static WORD_SAC_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("armento"),
        dictgen::InsensitiveStr::Ascii("arstic"),
        dictgen::InsensitiveStr::Ascii("ksonville"),
        dictgen::InsensitiveStr::Ascii("ntioned"),
        dictgen::InsensitiveStr::Ascii("ntuary"),
        dictgen::InsensitiveStr::Ascii("rafice"),
        dictgen::InsensitiveStr::Ascii("raficed"),
        dictgen::InsensitiveStr::Ascii("rafices"),
        dictgen::InsensitiveStr::Ascii("ramenno"),
        dictgen::InsensitiveStr::Ascii("rasm"),
        dictgen::InsensitiveStr::Ascii("rastic"),
        dictgen::InsensitiveStr::Ascii("rastically"),
        dictgen::InsensitiveStr::Ascii("reficed"),
        dictgen::InsensitiveStr::Ascii("refices"),
        dictgen::InsensitiveStr::Ascii("religious"),
        dictgen::InsensitiveStr::Ascii("remento"),
        dictgen::InsensitiveStr::Ascii("rifaced"),
        dictgen::InsensitiveStr::Ascii("rifaces"),
        dictgen::InsensitiveStr::Ascii("rifacing"),
        dictgen::InsensitiveStr::Ascii("rifical"),
        dictgen::InsensitiveStr::Ascii("rificare"),
        dictgen::InsensitiveStr::Ascii("rificas"),
        dictgen::InsensitiveStr::Ascii("rificeing"),
        dictgen::InsensitiveStr::Ascii("rificie"),
        dictgen::InsensitiveStr::Ascii("rificied"),
        dictgen::InsensitiveStr::Ascii("rificies"),
        dictgen::InsensitiveStr::Ascii("rificng"),
        dictgen::InsensitiveStr::Ascii("rifie"),
        dictgen::InsensitiveStr::Ascii("rifieced"),
        dictgen::InsensitiveStr::Ascii("rifise"),
        dictgen::InsensitiveStr::Ascii("rifises"),
        dictgen::InsensitiveStr::Ascii("rifising"),
        dictgen::InsensitiveStr::Ascii("rifized"),
        dictgen::InsensitiveStr::Ascii("rifizes"),
        dictgen::InsensitiveStr::Ascii("rifizing"),
        dictgen::InsensitiveStr::Ascii("romento"),
    ],
    values: &[
        &["sacramento"],
        &["sarcastic"],
        &["jacksonville"],
        &["sanctioned"],
        &["sanctuary"],
        &["sacrifice"],
        &["sacrificed"],
        &["sacrifices"],
        &["sacramento"],
        &["sarcasm"],
        &["sarcastic"],
        &["sarcastically"],
        &["sacrificed"],
        &["sacrifices"],
        &["sacrilegious"],
        &["sacramento"],
        &["sacrificed"],
        &["sacrifices"],
        &["sacrificing"],
        &["sacrificial"],
        &["sacrifice"],
        &["sacrifices"],
        &["sacrificing"],
        &["sacrificed"],
        &["sacrifice"],
        &["sacrifice"],
        &["sacrificing"],
        &["sacrifice"],
        &["sacrificed"],
        &["sacrifices"],
        &["sacrifices"],
        &["sacrificing"],
        &["sacrificed"],
        &["sacrifices"],
        &["sacrificing"],
        &["sacramento"],
    ],
    range: 4..=10,
};

static WORD_R_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_R_CHILDREN),
    value: None,
};

static WORD_R_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    Some(&WORD_RA_NODE),
    None,
    None,
    None,
    Some(&WORD_RE_NODE),
    Some(&WORD_RF_NODE),
    None,
    Some(&WORD_RH_NODE),
    Some(&WORD_RI_NODE),
    None,
    None,
    None,
    None,
    None,
    Some(&WORD_RO_NODE),
    None,
    None,
    None,
    None,
    None,
    Some(&WORD_RU_NODE),
    None,
    Some(&WORD_RW_NODE),
    None,
    Some(&WORD_RY_NODE),
    None,
];

static WORD_RY_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_RY_CHILDREN),
    value: None,
};

pub static WORD_RY_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("enolds"),
        dictgen::InsensitiveStr::Ascii("surrection"),
        dictgen::InsensitiveStr::Ascii("them"),
        dictgen::InsensitiveStr::Ascii("thim"),
        dictgen::InsensitiveStr::Ascii("thm"),
        dictgen::InsensitiveStr::Ascii("thmic"),
        dictgen::InsensitiveStr::Ascii("thyms"),
    ],
    values: &[
        &["reynolds"],
        &["resurrection"],
        &["rhythm"],
        &["rhythm"],
        &["rhythm"],
        &["rhythmic"],
        &["rhythms"],
    ],
    range: 3..=10,
};

static WORD_RW_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_RW_CHILDREN),
    value: None,
};

pub static WORD_RW_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("ite")],
    values: &[&["write"]],
    range: 3..=3,
};

static WORD_RU_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_RU_CHILDREN),
    value: None,
};

pub static WORD_RU_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("cuperate"),
        dictgen::InsensitiveStr::Ascii("dimentatry"),
        dictgen::InsensitiveStr::Ascii("dimentery"),
        dictgen::InsensitiveStr::Ascii("dimentory"),
        dictgen::InsensitiveStr::Ascii("dimentry"),
        dictgen::InsensitiveStr::Ascii("gters"),
        dictgen::InsensitiveStr::Ascii("idmentary"),
        dictgen::InsensitiveStr::Ascii("lebok"),
        dictgen::InsensitiveStr::Ascii("leboook"),
        dictgen::InsensitiveStr::Ascii("lle"),
        dictgen::InsensitiveStr::Ascii("morus"),
        dictgen::InsensitiveStr::Ascii("muors"),
        dictgen::InsensitiveStr::Ascii("ning"),
        dictgen::InsensitiveStr::Ascii("nnung"),
        dictgen::InsensitiveStr::Ascii("slted"),
        dictgen::InsensitiveStr::Ascii("ssina"),
        dictgen::InsensitiveStr::Ascii("ssion"),
        dictgen::InsensitiveStr::Ascii("steld"),
        dictgen::InsensitiveStr::Ascii("tgerus"),
    ],
    values: &[
        &["recuperate"],
        &["rudimentary"],
        &["rudimentary"],
        &["rudimentary"],
        &["rudimentary"],
        &["rutgers"],
        &["rudimentary"],
        &["rulebook"],
        &["rulebook"],
        &["rule"],
        &["rumors"],
        &["rumors"],
        &["running"],
        &["running"],
        &["rustled"],
        &["russian"],
        &["russian"],
        &["rustled"],
        &["rutgers"],
    ],
    range: 3..=10,
};

static WORD_RO_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_RO_CHILDREN),
    value: None,
};

pub static WORD_RO_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("achers"),
        dictgen::InsensitiveStr::Ascii("ahces"),
        dictgen::InsensitiveStr::Ascii("aylties"),
        dictgen::InsensitiveStr::Ascii("bberts"),
        dictgen::InsensitiveStr::Ascii("bberys"),
        dictgen::InsensitiveStr::Ascii("bocoop"),
        dictgen::InsensitiveStr::Ascii("bocorp"),
        dictgen::InsensitiveStr::Ascii("bocoup"),
        dictgen::InsensitiveStr::Ascii("boticus"),
        dictgen::InsensitiveStr::Ascii("botis"),
        dictgen::InsensitiveStr::Ascii("ckerfeller"),
        dictgen::InsensitiveStr::Ascii("cocco"),
        dictgen::InsensitiveStr::Ascii("cord"),
        dictgen::InsensitiveStr::Ascii("elplay"),
        dictgen::InsensitiveStr::Ascii("estta"),
        dictgen::InsensitiveStr::Ascii("ganism"),
        dictgen::InsensitiveStr::Ascii("ganisms"),
        dictgen::InsensitiveStr::Ascii("iters"),
        dictgen::InsensitiveStr::Ascii("lepaly"),
        dictgen::InsensitiveStr::Ascii("lepalying"),
        dictgen::InsensitiveStr::Ascii("leplaing"),
        dictgen::InsensitiveStr::Ascii("leply"),
        dictgen::InsensitiveStr::Ascii("llarcoaster"),
        dictgen::InsensitiveStr::Ascii("llercaoster"),
        dictgen::InsensitiveStr::Ascii("llercoaser"),
        dictgen::InsensitiveStr::Ascii("llercoater"),
        dictgen::InsensitiveStr::Ascii("llercoaters"),
        dictgen::InsensitiveStr::Ascii("llercoatser"),
        dictgen::InsensitiveStr::Ascii("llerocaster"),
        dictgen::InsensitiveStr::Ascii("llertoaster"),
        dictgen::InsensitiveStr::Ascii("llorcoaster"),
        dictgen::InsensitiveStr::Ascii("maanin"),
        dictgen::InsensitiveStr::Ascii("maina"),
        dictgen::InsensitiveStr::Ascii("mainan"),
        dictgen::InsensitiveStr::Ascii("maing"),
        dictgen::InsensitiveStr::Ascii("manain"),
        dictgen::InsensitiveStr::Ascii("manica"),
        dictgen::InsensitiveStr::Ascii("manin"),
        dictgen::InsensitiveStr::Ascii("manitcally"),
        dictgen::InsensitiveStr::Ascii("manmania"),
        dictgen::InsensitiveStr::Ascii("manna"),
        dictgen::InsensitiveStr::Ascii("manticaly"),
        dictgen::InsensitiveStr::Ascii("omate"),
        dictgen::InsensitiveStr::Ascii("settta"),
        dictgen::InsensitiveStr::Ascii("staing"),
        dictgen::InsensitiveStr::Ascii("tuers"),
        dictgen::InsensitiveStr::Ascii("ugly"),
        dictgen::InsensitiveStr::Ascii("undabaout"),
        dictgen::InsensitiveStr::Ascii("undaboot"),
        dictgen::InsensitiveStr::Ascii("undabount"),
        dictgen::InsensitiveStr::Ascii("undabounts"),
        dictgen::InsensitiveStr::Ascii("uteros"),
        dictgen::InsensitiveStr::Ascii("yalites"),
        dictgen::InsensitiveStr::Ascii("ylaties"),
    ],
    values: &[
        &["roaches"],
        &["roaches"],
        &["royalties"],
        &["robbers"],
        &["robbers"],
        &["robocop"],
        &["robocop"],
        &["robocop"],
        &["robotics"],
        &["robotics"],
        &["rockefeller"],
        &["rococo"],
        &["record"],
        &["roleplay"],
        &["rosetta"],
        &["organism"],
        &["organisms"],
        &["rioters"],
        &["roleplay"],
        &["roleplaying"],
        &["roleplaying"],
        &["roleplay"],
        &["rollercoaster"],
        &["rollercoaster"],
        &["rollercoaster"],
        &["rollercoaster"],
        &["rollercoaster"],
        &["rollercoaster"],
        &["rollercoaster"],
        &["rollercoaster"],
        &["rollercoaster"],
        &["romanian"],
        &["romania"],
        &["romanian"],
        &["roaming"],
        &["romanian"],
        &["romania"],
        &["romanian"],
        &["romantically"],
        &["romanian"],
        &["romanian"],
        &["romantically"],
        &["roommate"],
        &["rosetta"],
        &["roasting"],
        &["routers"],
        &["roughly"],
        &["roundabout"],
        &["roundabout"],
        &["roundabout"],
        &["roundabout"],
        &["routers"],
        &["royalties"],
        &["royalties"],
    ],
    range: 4..=11,
};

static WORD_RI_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_RI_CHILDREN),
    value: None,
};

pub static WORD_RI_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("aders"),
        dictgen::InsensitiveStr::Ascii("ctatorship"),
        dictgen::InsensitiveStr::Ascii("dicilous"),
        dictgen::InsensitiveStr::Ascii("dicilously"),
        dictgen::InsensitiveStr::Ascii("dicilousness"),
        dictgen::InsensitiveStr::Ascii("dicoulus"),
        dictgen::InsensitiveStr::Ascii("dicoulusly"),
        dictgen::InsensitiveStr::Ascii("dicoulusness"),
        dictgen::InsensitiveStr::Ascii("diculious"),
        dictgen::InsensitiveStr::Ascii("diculled"),
        dictgen::InsensitiveStr::Ascii("diculos"),
        dictgen::InsensitiveStr::Ascii("diculose"),
        dictgen::InsensitiveStr::Ascii("diculosly"),
        dictgen::InsensitiveStr::Ascii("diculouly"),
        dictgen::InsensitiveStr::Ascii("diculouness"),
        dictgen::InsensitiveStr::Ascii("diculoussness"),
        dictgen::InsensitiveStr::Ascii("diculousy"),
        dictgen::InsensitiveStr::Ascii("diculue"),
        dictgen::InsensitiveStr::Ascii("diculued"),
        dictgen::InsensitiveStr::Ascii("diculus"),
        dictgen::InsensitiveStr::Ascii("enforced"),
        dictgen::InsensitiveStr::Ascii("enforcement"),
        dictgen::InsensitiveStr::Ascii("enforcements"),
        dictgen::InsensitiveStr::Ascii("geur"),
        dictgen::InsensitiveStr::Ascii("ghetous"),
        dictgen::InsensitiveStr::Ascii("ghetousness"),
        dictgen::InsensitiveStr::Ascii("ghteos"),
        dictgen::InsensitiveStr::Ascii("ghteouness"),
        dictgen::InsensitiveStr::Ascii("ghteoussness"),
        dictgen::InsensitiveStr::Ascii("ghtfullly"),
        dictgen::InsensitiveStr::Ascii("ghtfuly"),
        dictgen::InsensitiveStr::Ascii("ghtiousness"),
        dictgen::InsensitiveStr::Ascii("ghtoues"),
        dictgen::InsensitiveStr::Ascii("gntone"),
        dictgen::InsensitiveStr::Ascii("gourous"),
        dictgen::InsensitiveStr::Ascii("gtheous"),
        dictgen::InsensitiveStr::Ascii("gtheousness"),
        dictgen::InsensitiveStr::Ascii("gthfully"),
        dictgen::InsensitiveStr::Ascii("lvaries"),
        dictgen::InsensitiveStr::Ascii("ngotne"),
        dictgen::InsensitiveStr::Ascii("ninging"),
        dictgen::InsensitiveStr::Ascii("sed"),
        dictgen::InsensitiveStr::Ascii("talian"),
        dictgen::InsensitiveStr::Ascii("tlain"),
        dictgen::InsensitiveStr::Ascii("toers"),
        dictgen::InsensitiveStr::Ascii("valrly"),
        dictgen::InsensitiveStr::Ascii("varlies"),
        dictgen::InsensitiveStr::Ascii("varly"),
        dictgen::InsensitiveStr::Ascii("vlaries"),
        dictgen::InsensitiveStr::Ascii("vlary"),
    ],
    values: &[
        &["raiders"],
        &["dictatorship"],
        &["ridiculous"],
        &["ridiculously"],
        &["ridiculousness"],
        &["ridiculous"],
        &["ridiculously"],
        &["ridiculousness"],
        &["ridiculous"],
        &["ridicule"],
        &["ridiculous"],
        &["ridicule"],
        &["ridiculously"],
        &["ridiculously"],
        &["ridiculousness"],
        &["ridiculousness"],
        &["ridiculously"],
        &["ridicule"],
        &["ridicule"],
        &["ridiculous"],
        &["reenforced"],
        &["reinforcements"],
        &["reinforcements"],
        &["rigueur"],
        &["righteous"],
        &["righteousness"],
        &["righteous"],
        &["righteousness"],
        &["righteousness"],
        &["rightfully"],
        &["rightfully"],
        &["righteousness"],
        &["righteous"],
        &["ringtone"],
        &["rigorous"],
        &["righteous"],
        &["righteousness"],
        &["rightfully"],
        &["rivalries"],
        &["ringtone"],
        &["ringing"],
        &["raised"],
        &["ritalin"],
        &["ritalin"],
        &["rioters"],
        &["rivalry"],
        &["rivalries"],
        &["rivalry"],
        &["rivalries"],
        &["rivalry"],
    ],
    range: 3..=13,
};

static WORD_RH_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_RH_CHILDREN),
    value: None,
};

pub static WORD_RH_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("aposdy"),
        dictgen::InsensitiveStr::Ascii("apsodomy"),
        dictgen::InsensitiveStr::Ascii("apsoy"),
        dictgen::InsensitiveStr::Ascii("aspody"),
        dictgen::InsensitiveStr::Ascii("eotric"),
        dictgen::InsensitiveStr::Ascii("etorisch"),
        dictgen::InsensitiveStr::Ascii("ymme"),
        dictgen::InsensitiveStr::Ascii("ythem"),
        dictgen::InsensitiveStr::Ascii("ythim"),
        dictgen::InsensitiveStr::Ascii("ytmic"),
    ],
    values: &[
        &["rhapsody"],
        &["rhapsody"],
        &["rhapsody"],
        &["rhapsody"],
        &["rhetoric"],
        &["rhetoric"],
        &["rhyme"],
        &["rhythm"],
        &["rhythm"],
        &["rhythmic"],
    ],
    range: 4..=8,
};

static WORD_RF_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_RF_CHILDREN),
    value: None,
};

pub static WORD_RF_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("erences")],
    values: &[&["references"]],
    range: 7..=7,
};

static WORD_RE_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_RE_CHILDREN),
    value: None,
};

static WORD_RE_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    Some(&WORD_REA_NODE),
    Some(&WORD_REB_NODE),
    Some(&WORD_REC_NODE),
    Some(&WORD_RED_NODE),
    Some(&WORD_REE_NODE),
    Some(&WORD_REF_NODE),
    Some(&WORD_REG_NODE),
    Some(&WORD_REH_NODE),
    Some(&WORD_REI_NODE),
    None,
    Some(&WORD_REK_NODE),
    Some(&WORD_REL_NODE),
    Some(&WORD_REM_NODE),
    Some(&WORD_REN_NODE),
    Some(&WORD_REO_NODE),
    Some(&WORD_REP_NODE),
    Some(&WORD_REQ_NODE),
    None,
    Some(&WORD_RES_NODE),
    Some(&WORD_RET_NODE),
    Some(&WORD_REU_NODE),
    Some(&WORD_REV_NODE),
    Some(&WORD_REW_NODE),
    None,
    Some(&WORD_REY_NODE),
    Some(&WORD_REZ_NODE),
];

static WORD_REZ_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_REZ_CHILDREN),
    value: None,
};

pub static WORD_REZ_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("urrection")],
    values: &[&["resurrection"]],
    range: 9..=9,
};

static WORD_REY_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_REY_CHILDREN),
    value: None,
};

pub static WORD_REY_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("nlods"),
        dictgen::InsensitiveStr::Ascii("nols"),
        dictgen::InsensitiveStr::Ascii("onlds"),
    ],
    values: &[&["reynolds"], &["reynolds"], &["reynolds"]],
    range: 4..=5,
};

static WORD_REW_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_REW_CHILDREN),
    value: None,
};

pub static WORD_REW_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("achted"),
        dictgen::InsensitiveStr::Ascii("arching"),
        dictgen::InsensitiveStr::Ascii("atchd"),
        dictgen::InsensitiveStr::Ascii("atchibg"),
        dictgen::InsensitiveStr::Ascii("atchig"),
        dictgen::InsensitiveStr::Ascii("atchign"),
        dictgen::InsensitiveStr::Ascii("atchimg"),
        dictgen::InsensitiveStr::Ascii("irte"),
        dictgen::InsensitiveStr::Ascii("itten"),
        dictgen::InsensitiveStr::Ascii("orkd"),
        dictgen::InsensitiveStr::Ascii("riet"),
        dictgen::InsensitiveStr::Ascii("ritte"),
        dictgen::InsensitiveStr::Ascii("tched"),
    ],
    values: &[
        &["rewatched"],
        &["rewatching"],
        &["rewatched"],
        &["rewatching"],
        &["rewatching"],
        &["rewatching"],
        &["rewatching"],
        &["rewrite"],
        &["rewritten"],
        &["reworked"],
        &["rewrite"],
        &["rewrite"],
        &["wretched"],
    ],
    range: 4..=7,
};

static WORD_REV_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_REV_CHILDREN),
    value: None,
};

pub static WORD_REV_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("aluated"),
        dictgen::InsensitiveStr::Ascii("eald"),
        dictgen::InsensitiveStr::Ascii("eales"),
        dictgen::InsensitiveStr::Ascii("ealtion"),
        dictgen::InsensitiveStr::Ascii("ealtions"),
        dictgen::InsensitiveStr::Ascii("eiw"),
        dictgen::InsensitiveStr::Ascii("eiwed"),
        dictgen::InsensitiveStr::Ascii("eiwer"),
        dictgen::InsensitiveStr::Ascii("eiwers"),
        dictgen::InsensitiveStr::Ascii("eiws"),
        dictgen::InsensitiveStr::Ascii("elaed"),
        dictgen::InsensitiveStr::Ascii("elaing"),
        dictgen::InsensitiveStr::Ascii("elaiton"),
        dictgen::InsensitiveStr::Ascii("elaitons"),
        dictgen::InsensitiveStr::Ascii("elance"),
        dictgen::InsensitiveStr::Ascii("elant"),
        dictgen::InsensitiveStr::Ascii("elas"),
        dictgen::InsensitiveStr::Ascii("elatons"),
        dictgen::InsensitiveStr::Ascii("elead"),
        dictgen::InsensitiveStr::Ascii("elution"),
        dictgen::InsensitiveStr::Ascii("elutionary"),
        dictgen::InsensitiveStr::Ascii("eral"),
        dictgen::InsensitiveStr::Ascii("erals"),
        dictgen::InsensitiveStr::Ascii("ersable"),
        dictgen::InsensitiveStr::Ascii("ersably"),
        dictgen::InsensitiveStr::Ascii("iere"),
        dictgen::InsensitiveStr::Ascii("iewd"),
        dictgen::InsensitiveStr::Ascii("iewes"),
        dictgen::InsensitiveStr::Ascii("iewr"),
        dictgen::InsensitiveStr::Ascii("iewtrue"),
        dictgen::InsensitiveStr::Ascii("isiones"),
        dictgen::InsensitiveStr::Ascii("isionis"),
        dictgen::InsensitiveStr::Ascii("lover"),
        dictgen::InsensitiveStr::Ascii("loves"),
        dictgen::InsensitiveStr::Ascii("olations"),
        dictgen::InsensitiveStr::Ascii("oltuion"),
        dictgen::InsensitiveStr::Ascii("oluiton"),
        dictgen::InsensitiveStr::Ascii("olutin"),
        dictgen::InsensitiveStr::Ascii("olutionair"),
        dictgen::InsensitiveStr::Ascii("olutionairy"),
        dictgen::InsensitiveStr::Ascii("olutionay"),
        dictgen::InsensitiveStr::Ascii("olutionens"),
        dictgen::InsensitiveStr::Ascii("olutioners"),
        dictgen::InsensitiveStr::Ascii("olutionnary"),
        dictgen::InsensitiveStr::Ascii("olutionos"),
        dictgen::InsensitiveStr::Ascii("olutoin"),
        dictgen::InsensitiveStr::Ascii("olvr"),
        dictgen::InsensitiveStr::Ascii("olvs"),
        dictgen::InsensitiveStr::Ascii("oultion"),
        dictgen::InsensitiveStr::Ascii("oultionary"),
        dictgen::InsensitiveStr::Ascii("oultions"),
        dictgen::InsensitiveStr::Ascii("ovler"),
        dictgen::InsensitiveStr::Ascii("ovles"),
    ],
    values: &[
        &["reevaluated"],
        &["revealed"],
        &["reveals"],
        &["revelations"],
        &["revelations"],
        &["review"],
        &["reviewed"],
        &["reviewer"],
        &["reviewers"],
        &["reviews"],
        &["revealed"],
        &["revealing"],
        &["revelations"],
        &["revelations"],
        &["relevance"],
        &["relevant"],
        &["reveals"],
        &["revelations"],
        &["revealed"],
        &["revelation"],
        &["revolutionary"],
        &["reversal"],
        &["reversal"],
        &["reversible"],
        &["reversal"],
        &["reviewer"],
        &["reviewed"],
        &["reviewers"],
        &["reviewer"],
        &["reviewer"],
        &["revisions"],
        &["revisions"],
        &["revolver"],
        &["revolves"],
        &["revolutions"],
        &["revolution"],
        &["revolutions"],
        &["revolutions"],
        &["revolutionary"],
        &["revolutionary"],
        &["revolutionary"],
        &["revolutions"],
        &["revolutions"],
        &["revolutionary"],
        &["revolutions"],
        &["revolutions"],
        &["revolver"],
        &["revolves"],
        &["revolution"],
        &["revolutionary"],
        &["revolutions"],
        &["revolver"],
        &["revolves"],
    ],
    range: 3..=11,
};

static WORD_REU_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_REU_CHILDREN),
    value: None,
};

pub static WORD_REU_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("asble"),
        dictgen::InsensitiveStr::Ascii("inon"),
        dictgen::InsensitiveStr::Ascii("ptable"),
    ],
    values: &[&["reusable"], &["reunion"], &["reputable"]],
    range: 4..=6,
};

static WORD_RET_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_RET_CHILDREN),
    value: None,
};

pub static WORD_RET_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ailate"),
        dictgen::InsensitiveStr::Ascii("ailation"),
        dictgen::InsensitiveStr::Ascii("ailes"),
        dictgen::InsensitiveStr::Ascii("alaite"),
        dictgen::InsensitiveStr::Ascii("aliaton"),
        dictgen::InsensitiveStr::Ascii("alier"),
        dictgen::InsensitiveStr::Ascii("aliers"),
        dictgen::InsensitiveStr::Ascii("alitated"),
        dictgen::InsensitiveStr::Ascii("alitation"),
        dictgen::InsensitiveStr::Ascii("ardathon"),
        dictgen::InsensitiveStr::Ascii("ardating"),
        dictgen::InsensitiveStr::Ascii("ardatron"),
        dictgen::InsensitiveStr::Ascii("artation"),
        dictgen::InsensitiveStr::Ascii("eriver"),
        dictgen::InsensitiveStr::Ascii("horic"),
        dictgen::InsensitiveStr::Ascii("horical"),
        dictgen::InsensitiveStr::Ascii("ierment"),
        dictgen::InsensitiveStr::Ascii("irase"),
        dictgen::InsensitiveStr::Ascii("irbution"),
        dictgen::InsensitiveStr::Ascii("ireds"),
        dictgen::InsensitiveStr::Ascii("ireus"),
        dictgen::InsensitiveStr::Ascii("ireve"),
        dictgen::InsensitiveStr::Ascii("irever"),
        dictgen::InsensitiveStr::Ascii("oractively"),
        dictgen::InsensitiveStr::Ascii("rebution"),
        dictgen::InsensitiveStr::Ascii("reive"),
        dictgen::InsensitiveStr::Ascii("revier"),
        dictgen::InsensitiveStr::Ascii("ribucion"),
        dictgen::InsensitiveStr::Ascii("ribuito"),
        dictgen::InsensitiveStr::Ascii("ribuiton"),
        dictgen::InsensitiveStr::Ascii("ributioon"),
        dictgen::InsensitiveStr::Ascii("ributivo"),
        dictgen::InsensitiveStr::Ascii("ribvtion"),
        dictgen::InsensitiveStr::Ascii("rived"),
        dictgen::InsensitiveStr::Ascii("roactivelly"),
        dictgen::InsensitiveStr::Ascii("roactivily"),
        dictgen::InsensitiveStr::Ascii("roactivley"),
        dictgen::InsensitiveStr::Ascii("roactivly"),
        dictgen::InsensitiveStr::Ascii("robution"),
        dictgen::InsensitiveStr::Ascii("rocatively"),
        dictgen::InsensitiveStr::Ascii("rosepct"),
        dictgen::InsensitiveStr::Ascii("rospekt"),
        dictgen::InsensitiveStr::Ascii("rubution"),
        dictgen::InsensitiveStr::Ascii("unred"),
        dictgen::InsensitiveStr::Ascii("uns"),
        dictgen::InsensitiveStr::Ascii("urnd"),
    ],
    values: &[
        &["retaliate"],
        &["retaliation"],
        &["retailers"],
        &["retaliate"],
        &["retaliation"],
        &["retailer"],
        &["retailers"],
        &["retaliated"],
        &["retaliation"],
        &["retardation"],
        &["retardation"],
        &["retardation"],
        &["retardation"],
        &["retriever"],
        &["rhetoric"],
        &["rhetorical"],
        &["retirement"],
        &["retires"],
        &["retribution"],
        &["retires"],
        &["retires"],
        &["retrieve"],
        &["retriever"],
        &["retroactively"],
        &["retribution"],
        &["retrieve"],
        &["retriever"],
        &["retribution"],
        &["retribution"],
        &["retribution"],
        &["retribution"],
        &["retribution"],
        &["retribution"],
        &["retrieved"],
        &["retroactively"],
        &["retroactively"],
        &["retroactively"],
        &["retroactively"],
        &["retribution"],
        &["retroactively"],
        &["retrospect"],
        &["retrospect"],
        &["retribution"],
        &["returned"],
        &["returns"],
        &["returned"],
    ],
    range: 3..=11,
};

static WORD_RES_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_RES_CHILDREN),
    value: None,
};

static WORD_RES_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    Some(&WORD_RESA_NODE),
    None,
    Some(&WORD_RESC_NODE),
    None,
    Some(&WORD_RESE_NODE),
    None,
    Some(&WORD_RESG_NODE),
    None,
    Some(&WORD_RESI_NODE),
    None,
    None,
    Some(&WORD_RESL_NODE),
    Some(&WORD_RESM_NODE),
    None,
    Some(&WORD_RESO_NODE),
    Some(&WORD_RESP_NODE),
    None,
    None,
    Some(&WORD_RESS_NODE),
    Some(&WORD_REST_NODE),
    Some(&WORD_RESU_NODE),
    None,
    None,
    None,
    None,
    None,
];

static WORD_RESU_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_RESU_CHILDREN),
    value: None,
};

pub static WORD_RESU_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("able"),
        dictgen::InsensitiveStr::Ascii("ced"),
        dictgen::InsensitiveStr::Ascii("ces"),
        dictgen::InsensitiveStr::Ascii("recting"),
        dictgen::InsensitiveStr::Ascii("rreccion"),
        dictgen::InsensitiveStr::Ascii("rrecion"),
        dictgen::InsensitiveStr::Ascii("rrektion"),
    ],
    values: &[
        &["reusable"],
        &["rescued"],
        &["rescues"],
        &["resurrecting"],
        &["resurrection"],
        &["resurrection"],
        &["resurrection"],
    ],
    range: 3..=8,
};

static WORD_REST_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_REST_CHILDREN),
    value: None,
};

static WORD_REST_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    Some(&WORD_RESTA_NODE),
    None,
    None,
    None,
    Some(&WORD_RESTE_NODE),
    None,
    None,
    None,
    Some(&WORD_RESTI_NODE),
    None,
    None,
    None,
    None,
    None,
    Some(&WORD_RESTO_NODE),
    None,
    None,
    Some(&WORD_RESTR_NODE),
    None,
    None,
    Some(&WORD_RESTU_NODE),
    None,
    None,
    None,
    None,
    None,
];

static WORD_RESTU_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_RESTU_CHILDREN),
    value: None,
};

pub static WORD_RESTU_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("arant"),
        dictgen::InsensitiveStr::Ascii("arants"),
        dictgen::InsensitiveStr::Ascii("rant"),
        dictgen::InsensitiveStr::Ascii("rants"),
        dictgen::InsensitiveStr::Ascii("raunt"),
        dictgen::InsensitiveStr::Ascii("raunts"),
    ],
    values: &[
        &["restaurant"],
        &["restaurants"],
        &["restaurant"],
        &["restaurants"],
        &["restaurant"],
        &["restaurants"],
    ],
    range: 4..=6,
};

static WORD_RESTR_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_RESTR_CHILDREN),
    value: None,
};

pub static WORD_RESTR_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("aind"),
        dictgen::InsensitiveStr::Ascii("aing"),
        dictgen::InsensitiveStr::Ascii("ainig"),
        dictgen::InsensitiveStr::Ascii("ainted"),
        dictgen::InsensitiveStr::Ascii("ainting"),
        dictgen::InsensitiveStr::Ascii("ait"),
        dictgen::InsensitiveStr::Ascii("aunt"),
        dictgen::InsensitiveStr::Ascii("cited"),
        dictgen::InsensitiveStr::Ascii("citions"),
        dictgen::InsensitiveStr::Ascii("cting"),
        dictgen::InsensitiveStr::Ascii("ective"),
        dictgen::InsensitiveStr::Ascii("iant"),
        dictgen::InsensitiveStr::Ascii("iccion"),
        dictgen::InsensitiveStr::Ascii("icing"),
        dictgen::InsensitiveStr::Ascii("icion"),
        dictgen::InsensitiveStr::Ascii("icitng"),
        dictgen::InsensitiveStr::Ascii("iciton"),
        dictgen::InsensitiveStr::Ascii("icitons"),
        dictgen::InsensitiveStr::Ascii("icitve"),
        dictgen::InsensitiveStr::Ascii("icive"),
        dictgen::InsensitiveStr::Ascii("ics"),
        dictgen::InsensitiveStr::Ascii("icte"),
        dictgen::InsensitiveStr::Ascii("icteds"),
        dictgen::InsensitiveStr::Ascii("icters"),
        dictgen::InsensitiveStr::Ascii("ictes"),
        dictgen::InsensitiveStr::Ascii("ictie"),
        dictgen::InsensitiveStr::Ascii("ictied"),
        dictgen::InsensitiveStr::Ascii("ictifs"),
        dictgen::InsensitiveStr::Ascii("ictins"),
        dictgen::InsensitiveStr::Ascii("ictios"),
        dictgen::InsensitiveStr::Ascii("ictivo"),
        dictgen::InsensitiveStr::Ascii("icton"),
        dictgen::InsensitiveStr::Ascii("ictons"),
        dictgen::InsensitiveStr::Ascii("iktion"),
        dictgen::InsensitiveStr::Ascii("iktive"),
        dictgen::InsensitiveStr::Ascii("ittive"),
        dictgen::InsensitiveStr::Ascii("ucted"),
        dictgen::InsensitiveStr::Ascii("ucting"),
        dictgen::InsensitiveStr::Ascii("uction"),
    ],
    values: &[
        &["restrained"],
        &["restraining"],
        &["restraining"],
        &["restrained"],
        &["restraining"],
        &["restraint"],
        &["restraint"],
        &["restricted"],
        &["restriction"],
        &["restarting"],
        &["restrictive"],
        &["restraint"],
        &["restriction"],
        &["restricting"],
        &["restriction"],
        &["restricting"],
        &["restrictions"],
        &["restrictions"],
        &["restrictive"],
        &["restrictive"],
        &["restricts"],
        &["restrictive"],
        &["restricts"],
        &["restricts"],
        &["restricts"],
        &["restrictive"],
        &["restrictive"],
        &["restricts"],
        &["restricts"],
        &["restricts"],
        &["restriction"],
        &["restriction"],
        &["restricts"],
        &["restriction"],
        &["restrictive"],
        &["restrictive"],
        &["restricted"],
        &["restricting"],
        &["restriction"],
    ],
    range: 3..=7,
};

static WORD_RESTO_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_RESTO_CHILDREN),
    value: None,
};

pub static WORD_RESTO_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("rani"),
        dictgen::InsensitiveStr::Ascii("rarion"),
        dictgen::InsensitiveStr::Ascii("rating"),
        dictgen::InsensitiveStr::Ascii("rd"),
        dictgen::InsensitiveStr::Ascii("rting"),
    ],
    values: &[
        &["restoration"],
        &["restoration"],
        &["restoration"],
        &["restored"],
        &["restarting"],
    ],
    range: 2..=6,
};

static WORD_RESTI_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_RESTI_CHILDREN),
    value: None,
};

pub static WORD_RESTI_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("cted"),
        dictgen::InsensitiveStr::Ascii("rcted"),
        dictgen::InsensitiveStr::Ascii("rction"),
        dictgen::InsensitiveStr::Ascii("rctions"),
        dictgen::InsensitiveStr::Ascii("rcts"),
    ],
    values: &[
        &["restricted"],
        &["restricted"],
        &["restriction"],
        &["restrictions"],
        &["restricts"],
    ],
    range: 4..=7,
};

static WORD_RESTE_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_RESTE_CHILDREN),
    value: None,
};

pub static WORD_RESTE_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("raunt"),
        dictgen::InsensitiveStr::Ascii("raunts"),
    ],
    values: &[&["restaurant"], &["restaurants"]],
    range: 5..=6,
};

static WORD_RESTA_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_RESTA_CHILDREN),
    value: None,
};

pub static WORD_RESTA_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("nti"),
        dictgen::InsensitiveStr::Ascii("rant"),
        dictgen::InsensitiveStr::Ascii("rants"),
        dictgen::InsensitiveStr::Ascii("raunt"),
        dictgen::InsensitiveStr::Ascii("raunteur"),
        dictgen::InsensitiveStr::Ascii("raunteurs"),
        dictgen::InsensitiveStr::Ascii("raunts"),
        dictgen::InsensitiveStr::Ascii("ruant"),
        dictgen::InsensitiveStr::Ascii("ruants"),
        dictgen::InsensitiveStr::Ascii("tting"),
        dictgen::InsensitiveStr::Ascii("urantes"),
        dictgen::InsensitiveStr::Ascii("uration"),
        dictgen::InsensitiveStr::Ascii("uraunt"),
        dictgen::InsensitiveStr::Ascii("uraunts"),
        dictgen::InsensitiveStr::Ascii("urent"),
        dictgen::InsensitiveStr::Ascii("urents"),
        dictgen::InsensitiveStr::Ascii("uring"),
    ],
    values: &[
        &["restarting"],
        &["restaurant"],
        &["restaurants"],
        &["restaurant"],
        &["restauranteur"],
        &["restauranteurs"],
        &["restaurants"],
        &["restaurant"],
        &["restaurants"],
        &["restarting"],
        &["restaurants"],
        &["restoration"],
        &["restaurant"],
        &["restaurants"],
        &["restaurant"],
        &["restaurants"],
        &["restarting"],
    ],
    range: 3..=9,
};

static WORD_RESS_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_RESS_CHILDREN),
    value: None,
};

pub static WORD_RESS_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("emblance"),
        dictgen::InsensitiveStr::Ascii("emble"),
        dictgen::InsensitiveStr::Ascii("embled"),
        dictgen::InsensitiveStr::Ascii("emblence"),
        dictgen::InsensitiveStr::Ascii("embling"),
        dictgen::InsensitiveStr::Ascii("its"),
        dictgen::InsensitiveStr::Ascii("surecting"),
        dictgen::InsensitiveStr::Ascii("urect"),
        dictgen::InsensitiveStr::Ascii("urected"),
        dictgen::InsensitiveStr::Ascii("urection"),
        dictgen::InsensitiveStr::Ascii("urrection"),
    ],
    values: &[
        &["resemblance"],
        &["resemble"],
        &["resembled"],
        &["resemblance"],
        &["resembling"],
        &["resists"],
        &["resurrecting"],
        &["resurrect"],
        &["resurrected"],
        &["resurrection"],
        &["resurrection"],
    ],
    range: 3..=9,
};

static WORD_RESP_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_RESP_CHILDREN),
    value: None,
};

static WORD_RESP_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    None,
    None,
    None,
    None,
    Some(&WORD_RESPE_NODE),
    None,
    None,
    None,
    Some(&WORD_RESPI_NODE),
    None,
    None,
    None,
    None,
    None,
    Some(&WORD_RESPO_NODE),
    None,
    None,
    Some(&WORD_RESPR_NODE),
    None,
    None,
    None,
    None,
    Some(&WORD_RESPW_NODE),
    None,
    None,
    None,
];

static WORD_RESPW_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_RESPW_CHILDREN),
    value: None,
};

pub static WORD_RESPW_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("an")],
    values: &[&["respawn"]],
    range: 2..=2,
};

static WORD_RESPR_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_RESPR_CHILDREN),
    value: None,
};

pub static WORD_RESPR_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("iatory")],
    values: &[&["respiratory"]],
    range: 6..=6,
};

static WORD_RESPO_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_RESPO_CHILDREN),
    value: None,
};

pub static WORD_RESPO_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("nce"),
        dictgen::InsensitiveStr::Ascii("nces"),
        dictgen::InsensitiveStr::Ascii("ncibilities"),
        dictgen::InsensitiveStr::Ascii("ncibility"),
        dictgen::InsensitiveStr::Ascii("ncible"),
        dictgen::InsensitiveStr::Ascii("ncibly"),
        dictgen::InsensitiveStr::Ascii("ncive"),
        dictgen::InsensitiveStr::Ascii("ndas"),
        dictgen::InsensitiveStr::Ascii("ndendo"),
        dictgen::InsensitiveStr::Ascii("ndis"),
        dictgen::InsensitiveStr::Ascii("ndus"),
        dictgen::InsensitiveStr::Ascii("ne"),
        dictgen::InsensitiveStr::Ascii("ned"),
        dictgen::InsensitiveStr::Ascii("nes"),
        dictgen::InsensitiveStr::Ascii("nibilities"),
        dictgen::InsensitiveStr::Ascii("nisbilities"),
        dictgen::InsensitiveStr::Ascii("nisbility"),
        dictgen::InsensitiveStr::Ascii("nisble"),
        dictgen::InsensitiveStr::Ascii("nisbly"),
        dictgen::InsensitiveStr::Ascii("nisve"),
        dictgen::InsensitiveStr::Ascii("nnsibilty"),
        dictgen::InsensitiveStr::Ascii("nsabile"),
        dictgen::InsensitiveStr::Ascii("nsabilities"),
        dictgen::InsensitiveStr::Ascii("nsability"),
        dictgen::InsensitiveStr::Ascii("nsable"),
        dictgen::InsensitiveStr::Ascii("nsably"),
        dictgen::InsensitiveStr::Ascii("nsaveis"),
        dictgen::InsensitiveStr::Ascii("nsbile"),
        dictgen::InsensitiveStr::Ascii("nsbilty"),
        dictgen::InsensitiveStr::Ascii("nsbily"),
        dictgen::InsensitiveStr::Ascii("nsd"),
        dictgen::InsensitiveStr::Ascii("nsebilities"),
        dictgen::InsensitiveStr::Ascii("nsibe"),
        dictgen::InsensitiveStr::Ascii("nsibel"),
        dictgen::InsensitiveStr::Ascii("nsibil"),
        dictgen::InsensitiveStr::Ascii("nsibile"),
        dictgen::InsensitiveStr::Ascii("nsibilies"),
        dictgen::InsensitiveStr::Ascii("nsibilites"),
        dictgen::InsensitiveStr::Ascii("nsibilitys"),
        dictgen::InsensitiveStr::Ascii("nsibiliy"),
        dictgen::InsensitiveStr::Ascii("nsibillities"),
        dictgen::InsensitiveStr::Ascii("nsibillity"),
        dictgen::InsensitiveStr::Ascii("nsibilties"),
        dictgen::InsensitiveStr::Ascii("nsibilty"),
        dictgen::InsensitiveStr::Ascii("nsibily"),
        dictgen::InsensitiveStr::Ascii("nsibities"),
        dictgen::InsensitiveStr::Ascii("nsibley"),
        dictgen::InsensitiveStr::Ascii("nsiblities"),
        dictgen::InsensitiveStr::Ascii("nsiblity"),
        dictgen::InsensitiveStr::Ascii("nsibliy"),
        dictgen::InsensitiveStr::Ascii("nsiblty"),
        dictgen::InsensitiveStr::Ascii("nsiby"),
        dictgen::InsensitiveStr::Ascii("nsile"),
        dictgen::InsensitiveStr::Ascii("nsing"),
        dictgen::InsensitiveStr::Ascii("nsivle"),
        dictgen::InsensitiveStr::Ascii("ratory"),
        dictgen::InsensitiveStr::Ascii("sitories"),
        dictgen::InsensitiveStr::Ascii("sitory"),
        dictgen::InsensitiveStr::Ascii("ted"),
        dictgen::InsensitiveStr::Ascii("ting"),
    ],
    values: &[
        &["response"],
        &["response"],
        &["responsibilities"],
        &["responsibility"],
        &["responsible"],
        &["responsibly"],
        &["responsive"],
        &["responds"],
        &["responded"],
        &["responds"],
        &["responds"],
        &["response"],
        &["respond"],
        &["response"],
        &["responsibilities"],
        &["responsibilities"],
        &["responsibility"],
        &["responsible"],
        &["responsibly"],
        &["responsive"],
        &["responsibility"],
        &["responsible"],
        &["responsibilities"],
        &["responsibility"],
        &["responsible"],
        &["responsibly"],
        &["responsive"],
        &["responsible"],
        &["responsibly"],
        &["responsibly"],
        &["responds"],
        &["responsibilities"],
        &["responsive"],
        &["responsibly"],
        &["responsibly"],
        &["responsible"],
        &["responsibilities"],
        &["responsibilities"],
        &["responsibilities"],
        &["responsibility"],
        &["responsibilities"],
        &["responsibility"],
        &["responsibilities"],
        &["responsibility"],
        &["responsibility"],
        &["responsibilities"],
        &["responsibly"],
        &["responsibilities"],
        &["responsibility"],
        &["responsibly"],
        &["responsibly"],
        &["responsibly"],
        &["responsive"],
        &["responding"],
        &["responsive"],
        &["respiratory"],
        &["repositories"],
        &["repository"],
        &["reposted"],
        &["reposting"],
    ],
    range: 2..=12,
};

static WORD_RESPI_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_RESPI_CHILDREN),
    value: None,
};

pub static WORD_RESPI_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ratiory"),
        dictgen::InsensitiveStr::Ascii("ratoy"),
        dictgen::InsensitiveStr::Ascii("ritory"),
        dictgen::InsensitiveStr::Ascii("tatory"),
    ],
    values: &[
        &["respiratory"],
        &["respiratory"],
        &["respiratory"],
        &["respiratory"],
    ],
    range: 5..=7,
};

static WORD_RESPE_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_RESPE_CHILDREN),
    value: None,
};

pub static WORD_RESPE_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("catble"),
        dictgen::InsensitiveStr::Ascii("citve"),
        dictgen::InsensitiveStr::Ascii("citvely"),
        dictgen::InsensitiveStr::Ascii("ctabil"),
        dictgen::InsensitiveStr::Ascii("ctabile"),
        dictgen::InsensitiveStr::Ascii("cte"),
        dictgen::InsensitiveStr::Ascii("ctes"),
        dictgen::InsensitiveStr::Ascii("ctfuly"),
        dictgen::InsensitiveStr::Ascii("ctible"),
        dictgen::InsensitiveStr::Ascii("ctifs"),
        dictgen::InsensitiveStr::Ascii("ction"),
        dictgen::InsensitiveStr::Ascii("ctivelly"),
        dictgen::InsensitiveStr::Ascii("ctivily"),
        dictgen::InsensitiveStr::Ascii("ctivley"),
        dictgen::InsensitiveStr::Ascii("ctivly"),
        dictgen::InsensitiveStr::Ascii("ctons"),
        dictgen::InsensitiveStr::Ascii("ctos"),
        dictgen::InsensitiveStr::Ascii("ctuflly"),
        dictgen::InsensitiveStr::Ascii("ctuful"),
        dictgen::InsensitiveStr::Ascii("ctuos"),
        dictgen::InsensitiveStr::Ascii("ktable"),
        dictgen::InsensitiveStr::Ascii("ktive"),
        dictgen::InsensitiveStr::Ascii("ratory"),
        dictgen::InsensitiveStr::Ascii("ritory"),
        dictgen::InsensitiveStr::Ascii("sct"),
        dictgen::InsensitiveStr::Ascii("st"),
    ],
    values: &[
        &["respectable"],
        &["respective"],
        &["respectively"],
        &["respectable"],
        &["respectable"],
        &["respective"],
        &["respects"],
        &["respectfully"],
        &["respectable"],
        &["respects"],
        &["respecting"],
        &["respectively"],
        &["respectively"],
        &["respectively"],
        &["respectively"],
        &["respects"],
        &["respects"],
        &["respectfully"],
        &["respectful"],
        &["respects"],
        &["respectable"],
        &["respective"],
        &["respiratory"],
        &["respiratory"],
        &["respects"],
        &["respects"],
    ],
    range: 2..=8,
};

static WORD_RESO_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_RESO_CHILDREN),
    value: None,
};

pub static WORD_RESO_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ltuion"),
        dictgen::InsensitiveStr::Ascii("ltuions"),
        dictgen::InsensitiveStr::Ascii("lucion"),
        dictgen::InsensitiveStr::Ascii("lutin"),
        dictgen::InsensitiveStr::Ascii("lutino"),
        dictgen::InsensitiveStr::Ascii("lutionary"),
        dictgen::InsensitiveStr::Ascii("lutoin"),
        dictgen::InsensitiveStr::Ascii("lutons"),
        dictgen::InsensitiveStr::Ascii("lvemos"),
        dictgen::InsensitiveStr::Ascii("lvendo"),
        dictgen::InsensitiveStr::Ascii("lveres"),
        dictgen::InsensitiveStr::Ascii("lverse"),
        dictgen::InsensitiveStr::Ascii("lviste"),
        dictgen::InsensitiveStr::Ascii("lvs"),
        dictgen::InsensitiveStr::Ascii("nabelt"),
        dictgen::InsensitiveStr::Ascii("net"),
        dictgen::InsensitiveStr::Ascii("ruces"),
        dictgen::InsensitiveStr::Ascii("tration"),
        dictgen::InsensitiveStr::Ascii("tred"),
        dictgen::InsensitiveStr::Ascii("ultion"),
        dictgen::InsensitiveStr::Ascii("ultions"),
        dictgen::InsensitiveStr::Ascii("urse"),
        dictgen::InsensitiveStr::Ascii("vle"),
        dictgen::InsensitiveStr::Ascii("vled"),
        dictgen::InsensitiveStr::Ascii("vles"),
    ],
    values: &[
        &["resolutions"],
        &["resolutions"],
        &["resolution"],
        &["resolutions"],
        &["resolutions"],
        &["revolutionary"],
        &["resolutions"],
        &["resolutions"],
        &["resolves"],
        &["resolved"],
        &["resolves"],
        &["resolves"],
        &["resolves"],
        &["resolves"],
        &["resonate"],
        &["resonate"],
        &["resources"],
        &["restoration"],
        &["restored"],
        &["resolution"],
        &["resolutions"],
        &["resources"],
        &["resolve"],
        &["resolved"],
        &["resolves"],
    ],
    range: 3..=9,
};

static WORD_RESM_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_RESM_CHILDREN),
    value: None,
};

pub static WORD_RESM_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("eble"),
        dictgen::InsensitiveStr::Ascii("ebles"),
    ],
    values: &[&["resemble"], &["resembles"]],
    range: 4..=5,
};

static WORD_RESL_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_RESL_CHILDREN),
    value: None,
};

pub static WORD_RESL_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ove"),
        dictgen::InsensitiveStr::Ascii("oved"),
        dictgen::InsensitiveStr::Ascii("oves"),
    ],
    values: &[&["resolve"], &["resolved"], &["resolves"]],
    range: 3..=4,
};

static WORD_RESI_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_RESI_CHILDREN),
    value: None,
};

pub static WORD_RESI_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("dencial"),
        dictgen::InsensitiveStr::Ascii("dentail"),
        dictgen::InsensitiveStr::Ascii("dental"),
        dictgen::InsensitiveStr::Ascii("dentual"),
        dictgen::InsensitiveStr::Ascii("dude"),
        dictgen::InsensitiveStr::Ascii("dule"),
        dictgen::InsensitiveStr::Ascii("gnacion"),
        dictgen::InsensitiveStr::Ascii("gnating"),
        dictgen::InsensitiveStr::Ascii("gnement"),
        dictgen::InsensitiveStr::Ascii("gnition"),
        dictgen::InsensitiveStr::Ascii("nged"),
        dictgen::InsensitiveStr::Ascii("ntall"),
        dictgen::InsensitiveStr::Ascii("ntalled"),
        dictgen::InsensitiveStr::Ascii("ntalling"),
        dictgen::InsensitiveStr::Ascii("stable"),
        dictgen::InsensitiveStr::Ascii("stancies"),
        dictgen::InsensitiveStr::Ascii("stane"),
        dictgen::InsensitiveStr::Ascii("stanes"),
        dictgen::InsensitiveStr::Ascii("stans"),
        dictgen::InsensitiveStr::Ascii("stanse"),
        dictgen::InsensitiveStr::Ascii("stansen"),
        dictgen::InsensitiveStr::Ascii("stanses"),
        dictgen::InsensitiveStr::Ascii("stas"),
        dictgen::InsensitiveStr::Ascii("sten"),
        dictgen::InsensitiveStr::Ascii("stence"),
        dictgen::InsensitiveStr::Ascii("stences"),
        dictgen::InsensitiveStr::Ascii("stencias"),
        dictgen::InsensitiveStr::Ascii("stend"),
        dictgen::InsensitiveStr::Ascii("stendo"),
        dictgen::InsensitiveStr::Ascii("stent"),
        dictgen::InsensitiveStr::Ascii("stered"),
        dictgen::InsensitiveStr::Ascii("stes"),
        dictgen::InsensitiveStr::Ascii("stnace"),
        dictgen::InsensitiveStr::Ascii("stnaces"),
        dictgen::InsensitiveStr::Ascii("stribution"),
        dictgen::InsensitiveStr::Ascii("tsance"),
    ],
    values: &[
        &["residential"],
        &["residential"],
        &["residential"],
        &["residential"],
        &["residue"],
        &["residue"],
        &["resignation"],
        &["resignation"],
        &["resignment"],
        &["resignation"],
        &["resigned"],
        &["reinstall"],
        &["reinstalled"],
        &["reinstalling"],
        &["resistible"],
        &["resistances"],
        &["resistances"],
        &["resistances"],
        &["resistances"],
        &["resistances"],
        &["resistances"],
        &["resistances"],
        &["resists"],
        &["resistance"],
        &["resistance"],
        &["resistances"],
        &["resistances"],
        &["resisted"],
        &["resisted"],
        &["resistant"],
        &["resisted"],
        &["resists"],
        &["resistances"],
        &["resistances"],
        &["redistribution"],
        &["resistances"],
    ],
    range: 4..=10,
};

static WORD_RESG_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_RESG_CHILDREN),
    value: None,
};

pub static WORD_RESG_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ination"),
        dictgen::InsensitiveStr::Ascii("ined"),
    ],
    values: &[&["resignation"], &["resigned"]],
    range: 4..=7,
};

static WORD_RESE_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_RESE_CHILDREN),
    value: None,
};

pub static WORD_RESE_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("arce"),
        dictgen::InsensitiveStr::Ascii("archs"),
        dictgen::InsensitiveStr::Ascii("mbe"),
        dictgen::InsensitiveStr::Ascii("mbelance"),
        dictgen::InsensitiveStr::Ascii("mbels"),
        dictgen::InsensitiveStr::Ascii("mbes"),
        dictgen::InsensitiveStr::Ascii("mblace"),
        dictgen::InsensitiveStr::Ascii("mblence"),
        dictgen::InsensitiveStr::Ascii("mblense"),
        dictgen::InsensitiveStr::Ascii("ptionist"),
        dictgen::InsensitiveStr::Ascii("rach"),
        dictgen::InsensitiveStr::Ascii("rached"),
        dictgen::InsensitiveStr::Ascii("racher"),
        dictgen::InsensitiveStr::Ascii("rachers"),
        dictgen::InsensitiveStr::Ascii("raching"),
        dictgen::InsensitiveStr::Ascii("rrection"),
        dictgen::InsensitiveStr::Ascii("rverad"),
        dictgen::InsensitiveStr::Ascii("rverd"),
        dictgen::InsensitiveStr::Ascii("rvered"),
        dictgen::InsensitiveStr::Ascii("voir"),
    ],
    values: &[
        &["researcher"],
        &["researchers"],
        &["resemble"],
        &["resemblance"],
        &["resembles"],
        &["resembles"],
        &["resemble"],
        &["resemblance"],
        &["resembles"],
        &["receptionist"],
        &["research"],
        &["researched"],
        &["researchers"],
        &["researchers"],
        &["researching"],
        &["resurrection"],
        &["reserved"],
        &["reserved"],
        &["reserved"],
        &["reservoir"],
    ],
    range: 3..=8,
};

static WORD_RESC_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_RESC_CHILDREN),
    value: None,
};

pub static WORD_RESC_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("uecd"),
        dictgen::InsensitiveStr::Ascii("use"),
    ],
    values: &[&["rescued"], &["rescues"]],
    range: 3..=4,
};

static WORD_RESA_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_RESA_CHILDREN),
    value: None,
};

pub static WORD_RESA_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("pwn"),
        dictgen::InsensitiveStr::Ascii("urant"),
    ],
    values: &[&["respawn"], &["restaurant"]],
    range: 3..=5,
};

static WORD_REQ_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_REQ_CHILDREN),
    value: None,
};

pub static WORD_REQ_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("iuem"),
        dictgen::InsensitiveStr::Ascii("ueim"),
        dictgen::InsensitiveStr::Ascii("ueriment"),
        dictgen::InsensitiveStr::Ascii("uerimento"),
        dictgen::InsensitiveStr::Ascii("ueriments"),
        dictgen::InsensitiveStr::Ascii("uierment"),
        dictgen::InsensitiveStr::Ascii("uierments"),
        dictgen::InsensitiveStr::Ascii("uiers"),
        dictgen::InsensitiveStr::Ascii("uieum"),
        dictgen::InsensitiveStr::Ascii("uilme"),
        dictgen::InsensitiveStr::Ascii("uime"),
        dictgen::InsensitiveStr::Ascii("uirment"),
        dictgen::InsensitiveStr::Ascii("ured"),
        dictgen::InsensitiveStr::Ascii("urement"),
        dictgen::InsensitiveStr::Ascii("uried"),
        dictgen::InsensitiveStr::Ascii("uriements"),
        dictgen::InsensitiveStr::Ascii("uries"),
    ],
    values: &[
        &["requiem"],
        &["requiem"],
        &["requirement"],
        &["requirement"],
        &["requirements"],
        &["requirements"],
        &["requirements"],
        &["requires"],
        &["requiem"],
        &["requiem"],
        &["requiem"],
        &["requirement"],
        &["required"],
        &["requirement"],
        &["required"],
        &["requirements"],
        &["requires"],
    ],
    range: 4..=9,
};

static WORD_REP_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_REP_CHILDREN),
    value: None,
};

static WORD_REP_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    Some(&WORD_REPA_NODE),
    Some(&WORD_REPB_NODE),
    None,
    None,
    Some(&WORD_REPE_NODE),
    None,
    None,
    Some(&WORD_REPH_NODE),
    Some(&WORD_REPI_NODE),
    None,
    None,
    Some(&WORD_REPL_NODE),
    None,
    None,
    Some(&WORD_REPO_NODE),
    None,
    None,
    Some(&WORD_REPR_NODE),
    Some(&WORD_REPS_NODE),
    Some(&WORD_REPT_NODE),
    Some(&WORD_REPU_NODE),
    None,
    None,
    None,
    None,
    None,
];

static WORD_REPU_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_REPU_CHILDREN),
    value: None,
};

pub static WORD_REPU_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("bic"),
        dictgen::InsensitiveStr::Ascii("bican"),
        dictgen::InsensitiveStr::Ascii("bicans"),
        dictgen::InsensitiveStr::Ascii("bics"),
        dictgen::InsensitiveStr::Ascii("blcian"),
        dictgen::InsensitiveStr::Ascii("blcians"),
        dictgen::InsensitiveStr::Ascii("bli"),
        dictgen::InsensitiveStr::Ascii("blian"),
        dictgen::InsensitiveStr::Ascii("blians"),
        dictgen::InsensitiveStr::Ascii("blicanas"),
        dictgen::InsensitiveStr::Ascii("blicanos"),
        dictgen::InsensitiveStr::Ascii("blicants"),
        dictgen::InsensitiveStr::Ascii("blician"),
        dictgen::InsensitiveStr::Ascii("blicians"),
        dictgen::InsensitiveStr::Ascii("blicon"),
        dictgen::InsensitiveStr::Ascii("blicons"),
        dictgen::InsensitiveStr::Ascii("blis"),
        dictgen::InsensitiveStr::Ascii("glican"),
        dictgen::InsensitiveStr::Ascii("glicans"),
        dictgen::InsensitiveStr::Ascii("lic"),
        dictgen::InsensitiveStr::Ascii("lican"),
        dictgen::InsensitiveStr::Ascii("licans"),
        dictgen::InsensitiveStr::Ascii("lics"),
        dictgen::InsensitiveStr::Ascii("lisve"),
        dictgen::InsensitiveStr::Ascii("lsie"),
        dictgen::InsensitiveStr::Ascii("slive"),
        dictgen::InsensitiveStr::Ascii("tacion"),
    ],
    values: &[
        &["republic"],
        &["republican"],
        &["republicans"],
        &["republics"],
        &["republican"],
        &["republicans"],
        &["republic"],
        &["republican"],
        &["republicans"],
        &["republicans"],
        &["republicans"],
        &["republicans"],
        &["republican"],
        &["republicans"],
        &["republican"],
        &["republicans"],
        &["republics"],
        &["republican"],
        &["republicans"],
        &["republic"],
        &["republican"],
        &["republicans"],
        &["republics"],
        &["repulsive"],
        &["repulsive"],
        &["repulsive"],
        &["reputation"],
    ],
    range: 3..=8,
};

static WORD_REPT_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_REPT_CHILDREN),
    value: None,
};

pub static WORD_REPT_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("iel"),
        dictgen::InsensitiveStr::Ascii("ils"),
        dictgen::InsensitiveStr::Ascii("ition"),
        dictgen::InsensitiveStr::Ascii("uable"),
        dictgen::InsensitiveStr::Ascii("uation"),
    ],
    values: &[
        &["reptile"],
        &["reptiles"],
        &["repetition"],
        &["reputable"],
        &["reputation"],
    ],
    range: 3..=6,
};

static WORD_REPS_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_REPS_CHILDREN),
    value: None,
};

pub static WORD_REPS_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("awn"),
        dictgen::InsensitiveStr::Ascii("ectable"),
        dictgen::InsensitiveStr::Ascii("ectful"),
        dictgen::InsensitiveStr::Ascii("ectfully"),
        dictgen::InsensitiveStr::Ascii("ecting"),
        dictgen::InsensitiveStr::Ascii("ective"),
        dictgen::InsensitiveStr::Ascii("ectively"),
        dictgen::InsensitiveStr::Ascii("ects"),
        dictgen::InsensitiveStr::Ascii("ond"),
        dictgen::InsensitiveStr::Ascii("onded"),
        dictgen::InsensitiveStr::Ascii("onding"),
        dictgen::InsensitiveStr::Ascii("onds"),
        dictgen::InsensitiveStr::Ascii("onse"),
        dictgen::InsensitiveStr::Ascii("onsibilities"),
        dictgen::InsensitiveStr::Ascii("onsibility"),
        dictgen::InsensitiveStr::Ascii("onsible"),
        dictgen::InsensitiveStr::Ascii("onsibly"),
        dictgen::InsensitiveStr::Ascii("onsive"),
        dictgen::InsensitiveStr::Ascii("oted"),
        dictgen::InsensitiveStr::Ascii("ots"),
    ],
    values: &[
        &["respawn"],
        &["respectable"],
        &["respectful"],
        &["respectfully"],
        &["respecting"],
        &["respective"],
        &["respectively"],
        &["respects"],
        &["respond"],
        &["responded"],
        &["responding"],
        &["responds"],
        &["response"],
        &["responsibilities"],
        &["responsibility"],
        &["responsible"],
        &["responsibly"],
        &["responsive"],
        &["reposted"],
        &["reposts"],
    ],
    range: 3..=12,
};

static WORD_REPR_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_REPR_CHILDREN),
    value: None,
};

pub static WORD_REPR_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ecussion"),
        dictgen::InsensitiveStr::Ascii("ehenisble"),
        dictgen::InsensitiveStr::Ascii("ehensable"),
        dictgen::InsensitiveStr::Ascii("ehinsible"),
        dictgen::InsensitiveStr::Ascii("esantation"),
        dictgen::InsensitiveStr::Ascii("esantations"),
        dictgen::InsensitiveStr::Ascii("esantative"),
        dictgen::InsensitiveStr::Ascii("esantatives"),
        dictgen::InsensitiveStr::Ascii("esenation"),
        dictgen::InsensitiveStr::Ascii("esend"),
        dictgen::InsensitiveStr::Ascii("esensible"),
        dictgen::InsensitiveStr::Ascii("esentacion"),
        dictgen::InsensitiveStr::Ascii("esentaciones"),
        dictgen::InsensitiveStr::Ascii("esentaion"),
        dictgen::InsensitiveStr::Ascii("esentaiton"),
        dictgen::InsensitiveStr::Ascii("esentas"),
        dictgen::InsensitiveStr::Ascii("esentate"),
        dictgen::InsensitiveStr::Ascii("esentatie"),
        dictgen::InsensitiveStr::Ascii("esentatief"),
        dictgen::InsensitiveStr::Ascii("esentatieve"),
        dictgen::InsensitiveStr::Ascii("esentatin"),
        dictgen::InsensitiveStr::Ascii("esentating"),
        dictgen::InsensitiveStr::Ascii("esentationen"),
        dictgen::InsensitiveStr::Ascii("esentationer"),
        dictgen::InsensitiveStr::Ascii("esentativas"),
        dictgen::InsensitiveStr::Ascii("esentativo"),
        dictgen::InsensitiveStr::Ascii("esenterad"),
        dictgen::InsensitiveStr::Ascii("esentes"),
        dictgen::InsensitiveStr::Ascii("esentetive"),
        dictgen::InsensitiveStr::Ascii("esentetives"),
        dictgen::InsensitiveStr::Ascii("esention"),
        dictgen::InsensitiveStr::Ascii("esentitive"),
        dictgen::InsensitiveStr::Ascii("esentitives"),
        dictgen::InsensitiveStr::Ascii("esentitve"),
        dictgen::InsensitiveStr::Ascii("esentive"),
        dictgen::InsensitiveStr::Ascii("esentives"),
        dictgen::InsensitiveStr::Ascii("esentn"),
        dictgen::InsensitiveStr::Ascii("esentstion"),
        dictgen::InsensitiveStr::Ascii("esentstive"),
        dictgen::InsensitiveStr::Ascii("eset"),
        dictgen::InsensitiveStr::Ascii("esetnation"),
        dictgen::InsensitiveStr::Ascii("esnetation"),
        dictgen::InsensitiveStr::Ascii("essent"),
        dictgen::InsensitiveStr::Ascii("essin"),
        dictgen::InsensitiveStr::Ascii("essivo"),
        dictgen::InsensitiveStr::Ascii("esso"),
        dictgen::InsensitiveStr::Ascii("esssion"),
        dictgen::InsensitiveStr::Ascii("ezentative"),
        dictgen::InsensitiveStr::Ascii("hase"),
        dictgen::InsensitiveStr::Ascii("icussions"),
        dictgen::InsensitiveStr::Ascii("ihensible"),
        dictgen::InsensitiveStr::Ascii("oducable"),
        dictgen::InsensitiveStr::Ascii("oduccion"),
        dictgen::InsensitiveStr::Ascii("oducion"),
        dictgen::InsensitiveStr::Ascii("oduciton"),
        dictgen::InsensitiveStr::Ascii("oducive"),
        dictgen::InsensitiveStr::Ascii("oducting"),
        dictgen::InsensitiveStr::Ascii("oductivo"),
        dictgen::InsensitiveStr::Ascii("oduktion"),
        dictgen::InsensitiveStr::Ascii("toire"),
    ],
    values: &[
        &["repercussions"],
        &["reprehensible"],
        &["reprehensible"],
        &["reprehensible"],
        &["representation"],
        &["representations"],
        &["representative"],
        &["representatives"],
        &["representation"],
        &["represented"],
        &["reprehensible"],
        &["representation"],
        &["representations"],
        &["representation"],
        &["representations"],
        &["represents"],
        &["representative"],
        &["representatives"],
        &["representative"],
        &["representative"],
        &["representations"],
        &["representation"],
        &["representations"],
        &["representations"],
        &["representatives"],
        &["representation"],
        &["represented"],
        &["represents"],
        &["representative"],
        &["representatives"],
        &["representing"],
        &["representative"],
        &["representatives"],
        &["representative"],
        &["representative"],
        &["representatives"],
        &["representing"],
        &["representations"],
        &["representatives"],
        &["represents"],
        &["representations"],
        &["representations"],
        &["represents"],
        &["repression"],
        &["repression"],
        &["repression"],
        &["repression"],
        &["representative"],
        &["rephrase"],
        &["repercussions"],
        &["reprehensible"],
        &["reproducible"],
        &["reproduction"],
        &["reproduction"],
        &["reproduction"],
        &["reproductive"],
        &["reproduction"],
        &["reproduction"],
        &["reproduction"],
        &["repertoire"],
    ],
    range: 4..=12,
};

static WORD_REPO_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_REPO_CHILDREN),
    value: None,
};

pub static WORD_REPO_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("istory"),
        dictgen::InsensitiveStr::Ascii("nse"),
        dictgen::InsensitiveStr::Ascii("nsible"),
        dictgen::InsensitiveStr::Ascii("rduction"),
        dictgen::InsensitiveStr::Ascii("rductive"),
        dictgen::InsensitiveStr::Ascii("rtadly"),
        dictgen::InsensitiveStr::Ascii("rtedy"),
        dictgen::InsensitiveStr::Ascii("rteros"),
        dictgen::InsensitiveStr::Ascii("rtes"),
        dictgen::InsensitiveStr::Ascii("rtidly"),
        dictgen::InsensitiveStr::Ascii("sitary"),
        dictgen::InsensitiveStr::Ascii("sitiory"),
        dictgen::InsensitiveStr::Ascii("sity"),
        dictgen::InsensitiveStr::Ascii("sotory"),
        dictgen::InsensitiveStr::Ascii("stas"),
        dictgen::InsensitiveStr::Ascii("std"),
        dictgen::InsensitiveStr::Ascii("stes"),
        dictgen::InsensitiveStr::Ascii("stig"),
        dictgen::InsensitiveStr::Ascii("stiory"),
        dictgen::InsensitiveStr::Ascii("stus"),
    ],
    values: &[
        &["repository"],
        &["response"],
        &["responsible"],
        &["reproduction"],
        &["reproductive"],
        &["reportedly"],
        &["reportedly"],
        &["reporters"],
        &["reporters"],
        &["reportedly"],
        &["repository"],
        &["repository"],
        &["repository"],
        &["repository"],
        &["reposts"],
        &["reposted"],
        &["reposts"],
        &["reposting"],
        &["repository"],
        &["reposts"],
    ],
    range: 3..=8,
};

static WORD_REPL_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_REPL_CHILDREN),
    value: None,
};

pub static WORD_REPL_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("acated"),
        dictgen::InsensitiveStr::Ascii("aceble"),
        dictgen::InsensitiveStr::Ascii("acemet"),
        dictgen::InsensitiveStr::Ascii("acemnet"),
        dictgen::InsensitiveStr::Ascii("acemnt"),
        dictgen::InsensitiveStr::Ascii("acemnts"),
        dictgen::InsensitiveStr::Ascii("acemtn"),
        dictgen::InsensitiveStr::Ascii("ase"),
        dictgen::InsensitiveStr::Ascii("ased"),
        dictgen::InsensitiveStr::Ascii("ayd"),
        dictgen::InsensitiveStr::Ascii("ayes"),
        dictgen::InsensitiveStr::Ascii("eacable"),
        dictgen::InsensitiveStr::Ascii("ecated"),
        dictgen::InsensitiveStr::Ascii("icae"),
        dictgen::InsensitiveStr::Ascii("ubic"),
        dictgen::InsensitiveStr::Ascii("usive"),
    ],
    values: &[
        &["replicated"],
        &["replaceable"],
        &["replacements"],
        &["replacements"],
        &["replacement"],
        &["replacements"],
        &["replacements"],
        &["replaces"],
        &["relapsed"],
        &["replayed"],
        &["replays"],
        &["replaceable"],
        &["replicated"],
        &["replicated"],
        &["republic"],
        &["repulsive"],
    ],
    range: 3..=7,
};

static WORD_REPI_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_REPI_CHILDREN),
    value: None,
};

pub static WORD_REPI_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("d"),
        dictgen::InsensitiveStr::Ascii("tle"),
        dictgen::InsensitiveStr::Ascii("tles"),
    ],
    values: &[&["rapid"], &["reptile"], &["reptiles"]],
    range: 1..=4,
};

static WORD_REPH_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_REPH_CHILDREN),
    value: None,
};

pub static WORD_REPH_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("arse"),
        dictgen::InsensitiveStr::Ascii("rasse"),
    ],
    values: &[&["rephrase"], &["rephrase"]],
    range: 4..=5,
};

static WORD_REPE_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_REPE_CHILDREN),
    value: None,
};

pub static WORD_REPE_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("adedly"),
        dictgen::InsensitiveStr::Ascii("adetly"),
        dictgen::InsensitiveStr::Ascii("arable"),
        dictgen::InsensitiveStr::Ascii("aredly"),
        dictgen::InsensitiveStr::Ascii("ast"),
        dictgen::InsensitiveStr::Ascii("atadly"),
        dictgen::InsensitiveStr::Ascii("atae"),
        dictgen::InsensitiveStr::Ascii("ateadly"),
        dictgen::InsensitiveStr::Ascii("atedlt"),
        dictgen::InsensitiveStr::Ascii("atedy"),
        dictgen::InsensitiveStr::Ascii("ates"),
        dictgen::InsensitiveStr::Ascii("atetly"),
        dictgen::InsensitiveStr::Ascii("atible"),
        dictgen::InsensitiveStr::Ascii("atidly"),
        dictgen::InsensitiveStr::Ascii("ctable"),
        dictgen::InsensitiveStr::Ascii("ctive"),
        dictgen::InsensitiveStr::Ascii("ctively"),
        dictgen::InsensitiveStr::Ascii("ition"),
        dictgen::InsensitiveStr::Ascii("ntable"),
        dictgen::InsensitiveStr::Ascii("ntence"),
        dictgen::InsensitiveStr::Ascii("ntent"),
        dictgen::InsensitiveStr::Ascii("rsentation"),
        dictgen::InsensitiveStr::Ascii("rsentations"),
        dictgen::InsensitiveStr::Ascii("rsented"),
        dictgen::InsensitiveStr::Ascii("rsenting"),
        dictgen::InsensitiveStr::Ascii("rsents"),
        dictgen::InsensitiveStr::Ascii("tation"),
        dictgen::InsensitiveStr::Ascii("teadly"),
        dictgen::InsensitiveStr::Ascii("tetion"),
        dictgen::InsensitiveStr::Ascii("ticion"),
        dictgen::InsensitiveStr::Ascii("tion"),
        dictgen::InsensitiveStr::Ascii("titivo"),
    ],
    values: &[
        &["repeatedly"],
        &["repeatedly"],
        &["repeatable"],
        &["repealed"],
        &["repeats"],
        &["repeatedly"],
        &["repeatable"],
        &["repeatedly"],
        &["repealed"],
        &["repeatedly"],
        &["repeats"],
        &["repeatedly"],
        &["repeatable"],
        &["repeatedly"],
        &["repeatable"],
        &["receptive"],
        &["respectively"],
        &["repetition"],
        &["repeatable"],
        &["repentance"],
        &["repentant"],
        &["representation"],
        &["representations"],
        &["represented"],
        &["representing"],
        &["represents"],
        &["repetition"],
        &["repeatedly"],
        &["repetition"],
        &["repetition"],
        &["repetition"],
        &["repetition"],
    ],
    range: 3..=11,
};

static WORD_REPB_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_REPB_CHILDREN),
    value: None,
};

pub static WORD_REPB_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("lic"),
        dictgen::InsensitiveStr::Ascii("lican"),
        dictgen::InsensitiveStr::Ascii("licans"),
        dictgen::InsensitiveStr::Ascii("lics"),
        dictgen::InsensitiveStr::Ascii("ulic"),
        dictgen::InsensitiveStr::Ascii("ulican"),
        dictgen::InsensitiveStr::Ascii("ulicans"),
    ],
    values: &[
        &["republic"],
        &["republican"],
        &["republicans"],
        &["republics"],
        &["republic"],
        &["republican"],
        &["republicans"],
    ],
    range: 3..=7,
};

static WORD_REPA_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_REPA_CHILDREN),
    value: None,
};

pub static WORD_REPA_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ird"),
        dictgen::InsensitiveStr::Ascii("ires"),
        dictgen::InsensitiveStr::Ascii("lcement"),
        dictgen::InsensitiveStr::Ascii("lcements"),
        dictgen::InsensitiveStr::Ascii("lces"),
        dictgen::InsensitiveStr::Ascii("lying"),
        dictgen::InsensitiveStr::Ascii("lys"),
        dictgen::InsensitiveStr::Ascii("ried"),
        dictgen::InsensitiveStr::Ascii("tition"),
    ],
    values: &[
        &["repaired"],
        &["repairs"],
        &["replacement"],
        &["replacements"],
        &["replaces"],
        &["replaying"],
        &["replays"],
        &["repaired"],
        &["repetition"],
    ],
    range: 3..=8,
};

static WORD_REO_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_REO_CHILDREN),
    value: None,
};

pub static WORD_REO_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("rganision"),
        dictgen::InsensitiveStr::Ascii("wrked"),
    ],
    values: &[&["reorganisation"], &["reworked"]],
    range: 5..=9,
};

static WORD_REN_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_REN_CHILDREN),
    value: None,
};

pub static WORD_REN_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("aiisance"),
        dictgen::InsensitiveStr::Ascii("aiscance"),
        dictgen::InsensitiveStr::Ascii("aissace"),
        dictgen::InsensitiveStr::Ascii("aissaince"),
        dictgen::InsensitiveStr::Ascii("aissanse"),
        dictgen::InsensitiveStr::Ascii("aissence"),
        dictgen::InsensitiveStr::Ascii("assaince"),
        dictgen::InsensitiveStr::Ascii("assiance"),
        dictgen::InsensitiveStr::Ascii("derd"),
        dictgen::InsensitiveStr::Ascii("derered"),
        dictgen::InsensitiveStr::Ascii("deres"),
        dictgen::InsensitiveStr::Ascii("devous"),
        dictgen::InsensitiveStr::Ascii("dezous"),
        dictgen::InsensitiveStr::Ascii("eagde"),
        dictgen::InsensitiveStr::Ascii("edered"),
        dictgen::InsensitiveStr::Ascii("egae"),
        dictgen::InsensitiveStr::Ascii("egated"),
        dictgen::InsensitiveStr::Ascii("egerate"),
        dictgen::InsensitiveStr::Ascii("egeration"),
        dictgen::InsensitiveStr::Ascii("etkon"),
        dictgen::InsensitiveStr::Ascii("ewabe"),
        dictgen::InsensitiveStr::Ascii("ewabels"),
        dictgen::InsensitiveStr::Ascii("ewebles"),
        dictgen::InsensitiveStr::Ascii("ewl"),
        dictgen::InsensitiveStr::Ascii("iassance"),
        dictgen::InsensitiveStr::Ascii("iforcements"),
        dictgen::InsensitiveStr::Ascii("keton"),
        dictgen::InsensitiveStr::Ascii("mant"),
        dictgen::InsensitiveStr::Ascii("mants"),
        dictgen::InsensitiveStr::Ascii("novate"),
        dictgen::InsensitiveStr::Ascii("novated"),
        dictgen::InsensitiveStr::Ascii("novating"),
        dictgen::InsensitiveStr::Ascii("novation"),
        dictgen::InsensitiveStr::Ascii("oylds"),
        dictgen::InsensitiveStr::Ascii("teris"),
        dictgen::InsensitiveStr::Ascii("tors"),
        dictgen::InsensitiveStr::Ascii("tres"),
        dictgen::InsensitiveStr::Ascii("uion"),
        dictgen::InsensitiveStr::Ascii("weables"),
        dictgen::InsensitiveStr::Ascii("yolds"),
    ],
    values: &[
        &["renaissance"],
        &["renaissance"],
        &["renaissance"],
        &["renaissance"],
        &["renaissance"],
        &["renaissance"],
        &["renaissance"],
        &["renaissance"],
        &["rendered"],
        &["rendered"],
        &["renders"],
        &["rendezvous"],
        &["rendezvous"],
        &["renegade"],
        &["rende"],
        &["renegade"],
        &["renegade"],
        &["regenerate"],
        &["regeneration"],
        &["renekton"],
        &["renewables"],
        &["renewables"],
        &["renewables"],
        &["renewal"],
        &["renaissance"],
        &["reinforcements"],
        &["renekton"],
        &["remnant"],
        &["remnants"],
        &["renovate"],
        &["renovated"],
        &["renovating"],
        &["renovation"],
        &["reynolds"],
        &["renters"],
        &["renters"],
        &["renters"],
        &["reunion"],
        &["renewables"],
        &["reynolds"],
    ],
    range: 3..=11,
};

static WORD_REM_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_REM_CHILDREN),
    value: None,
};

pub static WORD_REM_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("aind"),
        dictgen::InsensitiveStr::Ascii("ainds"),
        dictgen::InsensitiveStr::Ascii("aing"),
        dictgen::InsensitiveStr::Ascii("ainig"),
        dictgen::InsensitiveStr::Ascii("akrs"),
        dictgen::InsensitiveStr::Ascii("annt"),
        dictgen::InsensitiveStr::Ascii("annts"),
        dictgen::InsensitiveStr::Ascii("arcably"),
        dictgen::InsensitiveStr::Ascii("arkablely"),
        dictgen::InsensitiveStr::Ascii("arkabley"),
        dictgen::InsensitiveStr::Ascii("arkablly"),
        dictgen::InsensitiveStr::Ascii("arkes"),
        dictgen::InsensitiveStr::Ascii("arkibly"),
        dictgen::InsensitiveStr::Ascii("asterd"),
        dictgen::InsensitiveStr::Ascii("asterred"),
        dictgen::InsensitiveStr::Ascii("eber"),
        dictgen::InsensitiveStr::Ascii("embed"),
        dictgen::InsensitiveStr::Ascii("embee"),
        dictgen::InsensitiveStr::Ascii("emberance"),
        dictgen::InsensitiveStr::Ascii("emberd"),
        dictgen::InsensitiveStr::Ascii("emberes"),
        dictgen::InsensitiveStr::Ascii("embrence"),
        dictgen::InsensitiveStr::Ascii("emebr"),
        dictgen::InsensitiveStr::Ascii("emebrs"),
        dictgen::InsensitiveStr::Ascii("enant"),
        dictgen::InsensitiveStr::Ascii("enicent"),
        dictgen::InsensitiveStr::Ascii("ianing"),
        dictgen::InsensitiveStr::Ascii("ians"),
        dictgen::InsensitiveStr::Ascii("ifications"),
        dictgen::InsensitiveStr::Ascii("ignton"),
        dictgen::InsensitiveStr::Ascii("inent"),
        dictgen::InsensitiveStr::Ascii("inescent"),
        dictgen::InsensitiveStr::Ascii("ingotn"),
        dictgen::InsensitiveStr::Ascii("inicient"),
        dictgen::InsensitiveStr::Ascii("iniscant"),
        dictgen::InsensitiveStr::Ascii("iniscient"),
        dictgen::InsensitiveStr::Ascii("iniscint"),
        dictgen::InsensitiveStr::Ascii("inisent"),
        dictgen::InsensitiveStr::Ascii("inscent"),
        dictgen::InsensitiveStr::Ascii("inscient"),
        dictgen::InsensitiveStr::Ascii("insicent"),
        dictgen::InsensitiveStr::Ascii("meber"),
        dictgen::InsensitiveStr::Ascii("mebered"),
        dictgen::InsensitiveStr::Ascii("mebers"),
        dictgen::InsensitiveStr::Ascii("nans"),
        dictgen::InsensitiveStr::Ascii("otelly"),
        dictgen::InsensitiveStr::Ascii("otley"),
    ],
    values: &[
        &["remained"],
        &["remains"],
        &["remaining"],
        &["remaining"],
        &["remarks"],
        &["remnant"],
        &["remnants"],
        &["remarkably"],
        &["remarkably"],
        &["remarkably"],
        &["remarkably"],
        &["remarks"],
        &["remarkably"],
        &["remastered"],
        &["remastered"],
        &["remember"],
        &["remembered"],
        &["remembered"],
        &["remembrance"],
        &["remembered"],
        &["remembers"],
        &["remembrance"],
        &["remember"],
        &["remembers"],
        &["remnant"],
        &["reminiscent"],
        &["remaining"],
        &["remains"],
        &["ramifications"],
        &["remington"],
        &["remnant"],
        &["reminiscent"],
        &["remington"],
        &["reminiscent"],
        &["reminiscent"],
        &["reminiscent"],
        &["reminiscent"],
        &["reminiscent"],
        &["reminiscent"],
        &["reminiscent"],
        &["reminiscent"],
        &["remember"],
        &["remembered"],
        &["remembers"],
        &["remnants"],
        &["remotely"],
        &["remotely"],
    ],
    range: 4..=10,
};

static WORD_REL_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_REL_CHILDREN),
    value: None,
};

static WORD_REL_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    Some(&WORD_RELA_NODE),
    None,
    Some(&WORD_RELC_NODE),
    None,
    Some(&WORD_RELE_NODE),
    Some(&WORD_RELF_NODE),
    None,
    None,
    Some(&WORD_RELI_NODE),
    None,
    None,
    None,
    None,
    None,
    None,
    Some(&WORD_RELP_NODE),
    None,
    None,
    None,
    None,
    Some(&WORD_RELU_NODE),
    None,
    None,
    None,
    None,
    None,
];

static WORD_RELU_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_RELU_CHILDREN),
    value: None,
};

pub static WORD_RELU_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ctanct"),
        dictgen::InsensitiveStr::Ascii("ctanctly"),
        dictgen::InsensitiveStr::Ascii("ctanly"),
        dictgen::InsensitiveStr::Ascii("ctanty"),
        dictgen::InsensitiveStr::Ascii("ctently"),
    ],
    values: &[
        &["reluctant"],
        &["reluctantly"],
        &["reluctantly"],
        &["reluctantly"],
        &["reluctantly"],
    ],
    range: 6..=8,
};

static WORD_RELP_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_RELP_CHILDREN),
    value: None,
};

pub static WORD_RELP_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("acement"),
        dictgen::InsensitiveStr::Ascii("ase"),
        dictgen::InsensitiveStr::Ascii("ased"),
    ],
    values: &[&["replacement"], &["relapse"], &["relapsed"]],
    range: 3..=7,
};

static WORD_RELI_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_RELI_CHILDREN),
    value: None,
};

pub static WORD_RELI_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("abe"),
        dictgen::InsensitiveStr::Ascii("abillity"),
        dictgen::InsensitiveStr::Ascii("abilty"),
        dictgen::InsensitiveStr::Ascii("abily"),
        dictgen::InsensitiveStr::Ascii("ablely"),
        dictgen::InsensitiveStr::Ascii("abley"),
        dictgen::InsensitiveStr::Ascii("ased"),
        dictgen::InsensitiveStr::Ascii("ent"),
        dictgen::InsensitiveStr::Ascii("geous"),
        dictgen::InsensitiveStr::Ascii("geously"),
        dictgen::InsensitiveStr::Ascii("gionens"),
        dictgen::InsensitiveStr::Ascii("gioners"),
        dictgen::InsensitiveStr::Ascii("giones"),
        dictgen::InsensitiveStr::Ascii("giosly"),
        dictgen::InsensitiveStr::Ascii("giousy"),
        dictgen::InsensitiveStr::Ascii("gous"),
        dictgen::InsensitiveStr::Ascii("gously"),
        dictgen::InsensitiveStr::Ascii("nqushment"),
        dictgen::InsensitiveStr::Ascii("tavely"),
        dictgen::InsensitiveStr::Ascii("zed"),
    ],
    values: &[
        &["reliable"],
        &["reliability"],
        &["reliability"],
        &["reliability"],
        &["reliably"],
        &["reliably"],
        &["realised"],
        &["reliant"],
        &["religious"],
        &["religiously"],
        &["religions"],
        &["religions"],
        &["religions"],
        &["religiously"],
        &["religiously"],
        &["religious"],
        &["religiously"],
        &["relinquishment"],
        &["relatively"],
        &["realized"],
    ],
    range: 3..=9,
};

static WORD_RELF_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_RELF_CHILDREN),
    value: None,
};

pub static WORD_RELF_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ect"),
        dictgen::InsensitiveStr::Ascii("ected"),
        dictgen::InsensitiveStr::Ascii("ecting"),
        dictgen::InsensitiveStr::Ascii("ection"),
        dictgen::InsensitiveStr::Ascii("ections"),
        dictgen::InsensitiveStr::Ascii("ective"),
        dictgen::InsensitiveStr::Ascii("ects"),
        dictgen::InsensitiveStr::Ascii("exes"),
    ],
    values: &[
        &["reflect"],
        &["reflected"],
        &["reflecting"],
        &["reflection"],
        &["reflections"],
        &["reflective"],
        &["reflects"],
        &["reflexes"],
    ],
    range: 3..=7,
};

static WORD_RELE_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_RELE_CHILDREN),
    value: None,
};

pub static WORD_RELE_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("agtion"),
        dictgen::InsensitiveStr::Ascii("cted"),
        dictgen::InsensitiveStr::Ascii("gato"),
        dictgen::InsensitiveStr::Ascii("getion"),
        dictgen::InsensitiveStr::Ascii("ive"),
        dictgen::InsensitiveStr::Ascii("ived"),
        dictgen::InsensitiveStr::Ascii("iver"),
        dictgen::InsensitiveStr::Ascii("ntlesly"),
        dictgen::InsensitiveStr::Ascii("ntlessely"),
        dictgen::InsensitiveStr::Ascii("ntlessley"),
        dictgen::InsensitiveStr::Ascii("ntlessy"),
        dictgen::InsensitiveStr::Ascii("ntness"),
        dictgen::InsensitiveStr::Ascii("ses"),
        dictgen::InsensitiveStr::Ascii("tnless"),
        dictgen::InsensitiveStr::Ascii("vation"),
        dictgen::InsensitiveStr::Ascii("vations"),
        dictgen::InsensitiveStr::Ascii("vence"),
        dictgen::InsensitiveStr::Ascii("vent"),
        dictgen::InsensitiveStr::Ascii("xation"),
    ],
    values: &[
        &["relegation"],
        &["reelected"],
        &["relegation"],
        &["relegation"],
        &["relieve"],
        &["relieved"],
        &["reliever"],
        &["relentlessly"],
        &["relentlessly"],
        &["relentlessly"],
        &["relentlessly"],
        &["relentless"],
        &["releases"],
        &["relentless"],
        &["revelation"],
        &["revelations"],
        &["relevance"],
        &["relevant"],
        &["relegation"],
    ],
    range: 3..=9,
};

static WORD_RELC_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_RELC_CHILDREN),
    value: None,
};

pub static WORD_RELC_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("aim"),
        dictgen::InsensitiveStr::Ascii("utant"),
        dictgen::InsensitiveStr::Ascii("utantly"),
    ],
    values: &[&["reclaim"], &["reluctant"], &["reluctantly"]],
    range: 3..=7,
};

static WORD_RELA_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_RELA_CHILDREN),
    value: Some(&["real"]),
};

pub static WORD_RELA_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("gation"),
        dictgen::InsensitiveStr::Ascii("ibility"),
        dictgen::InsensitiveStr::Ascii("ible"),
        dictgen::InsensitiveStr::Ascii("ibly"),
        dictgen::InsensitiveStr::Ascii("ise"),
        dictgen::InsensitiveStr::Ascii("ised"),
        dictgen::InsensitiveStr::Ascii("itonship"),
        dictgen::InsensitiveStr::Ascii("ly"),
        dictgen::InsensitiveStr::Ascii("oded"),
        dictgen::InsensitiveStr::Ascii("oding"),
        dictgen::InsensitiveStr::Ascii("pes"),
        dictgen::InsensitiveStr::Ascii("spe"),
        dictgen::InsensitiveStr::Ascii("sped"),
        dictgen::InsensitiveStr::Ascii("tabe"),
        dictgen::InsensitiveStr::Ascii("tation"),
        dictgen::InsensitiveStr::Ascii("teds"),
        dictgen::InsensitiveStr::Ascii("tiate"),
        dictgen::InsensitiveStr::Ascii("tiation"),
        dictgen::InsensitiveStr::Ascii("tie"),
        dictgen::InsensitiveStr::Ascii("tin"),
        dictgen::InsensitiveStr::Ascii("tinoship"),
        dictgen::InsensitiveStr::Ascii("tionshits"),
        dictgen::InsensitiveStr::Ascii("tionshp"),
        dictgen::InsensitiveStr::Ascii("tionsship"),
        dictgen::InsensitiveStr::Ascii("tiopnship"),
        dictgen::InsensitiveStr::Ascii("tivety"),
        dictgen::InsensitiveStr::Ascii("tivily"),
        dictgen::InsensitiveStr::Ascii("tiviser"),
        dictgen::InsensitiveStr::Ascii("tivisme"),
        dictgen::InsensitiveStr::Ascii("tivitiy"),
        dictgen::InsensitiveStr::Ascii("tivitly"),
        dictgen::InsensitiveStr::Ascii("tiviy"),
        dictgen::InsensitiveStr::Ascii("tivley"),
        dictgen::InsensitiveStr::Ascii("tivly"),
        dictgen::InsensitiveStr::Ascii("tivno"),
        dictgen::InsensitiveStr::Ascii("tivy"),
        dictgen::InsensitiveStr::Ascii("vation"),
        dictgen::InsensitiveStr::Ascii("vence"),
        dictgen::InsensitiveStr::Ascii("vent"),
        dictgen::InsensitiveStr::Ascii("xating"),
        dictgen::InsensitiveStr::Ascii("zation"),
    ],
    values: &[
        &["relaxation"],
        &["reliability"],
        &["reliable"],
        &["reliably"],
        &["realise"],
        &["realised"],
        &["relationships"],
        &["really"],
        &["reloaded"],
        &["reloading"],
        &["relapse"],
        &["relapse"],
        &["relapsed"],
        &["relatable"],
        &["relaxation"],
        &["relates"],
        &["retaliate"],
        &["retaliation"],
        &["relative"],
        &["relation"],
        &["relationships"],
        &["relationships"],
        &["relationships"],
        &["relationships"],
        &["relationship"],
        &["relativity"],
        &["relativity"],
        &["relatives"],
        &["relatives"],
        &["relativity"],
        &["relativity"],
        &["relativity"],
        &["relatively"],
        &["relatively"],
        &["relation"],
        &["relativity"],
        &["relaxation"],
        &["relevance"],
        &["relevant"],
        &["relaxation"],
        &["relaxation"],
    ],
    range: 2..=9,
};

static WORD_REK_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_REK_CHILDREN),
    value: None,
};

pub static WORD_REK_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("enton"),
        dictgen::InsensitiveStr::Ascii("nown"),
        dictgen::InsensitiveStr::Ascii("nowned"),
        dictgen::InsensitiveStr::Ascii("ommendation"),
        dictgen::InsensitiveStr::Ascii("tifications"),
    ],
    values: &[
        &["renekton"],
        &["renown"],
        &["renowned"],
        &["recommendation"],
        &["certifications"],
    ],
    range: 4..=11,
};

static WORD_REI_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_REI_CHILDREN),
    value: None,
};

pub static WORD_REI_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("carnation"),
        dictgen::InsensitiveStr::Ascii("ceved"),
        dictgen::InsensitiveStr::Ascii("gining"),
        dictgen::InsensitiveStr::Ascii("gment"),
        dictgen::InsensitiveStr::Ascii("gmes"),
        dictgen::InsensitiveStr::Ascii("gonal"),
        dictgen::InsensitiveStr::Ascii("gons"),
        dictgen::InsensitiveStr::Ascii("nassance"),
        dictgen::InsensitiveStr::Ascii("ncarantion"),
        dictgen::InsensitiveStr::Ascii("ncatnation"),
        dictgen::InsensitiveStr::Ascii("nforcemens"),
        dictgen::InsensitiveStr::Ascii("nforcemnets"),
        dictgen::InsensitiveStr::Ascii("nforcemnt"),
        dictgen::InsensitiveStr::Ascii("nforcemnts"),
        dictgen::InsensitiveStr::Ascii("nforcemt"),
        dictgen::InsensitiveStr::Ascii("nfornced"),
        dictgen::InsensitiveStr::Ascii("nitalise"),
        dictgen::InsensitiveStr::Ascii("nitalised"),
        dictgen::InsensitiveStr::Ascii("nitalises"),
        dictgen::InsensitiveStr::Ascii("nitalising"),
        dictgen::InsensitiveStr::Ascii("nitalization"),
        dictgen::InsensitiveStr::Ascii("nitalizations"),
        dictgen::InsensitiveStr::Ascii("nitalize"),
        dictgen::InsensitiveStr::Ascii("nitalized"),
        dictgen::InsensitiveStr::Ascii("nitalizes"),
        dictgen::InsensitiveStr::Ascii("nitalizing"),
        dictgen::InsensitiveStr::Ascii("nkarnation"),
        dictgen::InsensitiveStr::Ascii("nstale"),
        dictgen::InsensitiveStr::Ascii("nstaled"),
        dictgen::InsensitiveStr::Ascii("nstaling"),
        dictgen::InsensitiveStr::Ascii("nstallled"),
        dictgen::InsensitiveStr::Ascii("nstallling"),
        dictgen::InsensitiveStr::Ascii("nstallng"),
        dictgen::InsensitiveStr::Ascii("ntarnation"),
        dictgen::InsensitiveStr::Ascii("sntall"),
        dictgen::InsensitiveStr::Ascii("sntalled"),
        dictgen::InsensitiveStr::Ascii("sntalling"),
        dictgen::InsensitiveStr::Ascii("trement"),
        dictgen::InsensitiveStr::Ascii("tres"),
        dictgen::InsensitiveStr::Ascii("vews"),
    ],
    values: &[
        &["reincarnation"],
        &["recieved"],
        &["reigning"],
        &["regiment"],
        &["regimes"],
        &["regional"],
        &["regions"],
        &["renaissance"],
        &["reincarnation"],
        &["reincarnation"],
        &["reinforcements"],
        &["reinforcements"],
        &["reinforcement"],
        &["reinforcements"],
        &["reinforcement"],
        &["reinforced"],
        &["reinitialise"],
        &["reinitialised"],
        &["reinitialises"],
        &["reinitialising"],
        &["reinitialization"],
        &["reinitializations"],
        &["reinitialize"],
        &["reinitialized"],
        &["reinitializes"],
        &["reinitializing"],
        &["reincarnation"],
        &["reinstalled"],
        &["reinstalled"],
        &["reinstalling"],
        &["reinstalled"],
        &["reinstalling"],
        &["reinstalling"],
        &["reincarnation"],
        &["reinstall"],
        &["reinstalled"],
        &["reinstalling"],
        &["retirement"],
        &["retires"],
        &["reviews"],
    ],
    range: 4..=13,
};

static WORD_REH_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_REH_CHILDREN),
    value: None,
};

pub static WORD_REH_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("abilitacion"),
        dictgen::InsensitiveStr::Ascii("abilitaion"),
        dictgen::InsensitiveStr::Ascii("abilitaiton"),
        dictgen::InsensitiveStr::Ascii("abilitatin"),
        dictgen::InsensitiveStr::Ascii("abilitaton"),
        dictgen::InsensitiveStr::Ascii("ersal"),
        dictgen::InsensitiveStr::Ascii("toric"),
        dictgen::InsensitiveStr::Ascii("torical"),
    ],
    values: &[
        &["rehabilitation"],
        &["rehabilitation"],
        &["rehabilitation"],
        &["rehabilitation"],
        &["rehabilitation"],
        &["rehearsal"],
        &["rhetoric"],
        &["rhetorical"],
    ],
    range: 5..=11,
};

static WORD_REG_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_REG_CHILDREN),
    value: None,
};

static WORD_REG_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    Some(&WORD_REGA_NODE),
    None,
    None,
    None,
    Some(&WORD_REGE_NODE),
    None,
    None,
    None,
    Some(&WORD_REGI_NODE),
    None,
    None,
    Some(&WORD_REGL_NODE),
    None,
    None,
    Some(&WORD_REGO_NODE),
    None,
    None,
    Some(&WORD_REGR_NODE),
    Some(&WORD_REGS_NODE),
    None,
    Some(&WORD_REGU_NODE),
    None,
    None,
    None,
    None,
    None,
];

static WORD_REGU_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_REGU_CHILDREN),
    value: None,
};

pub static WORD_REGU_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("alrly"),
        dictgen::InsensitiveStr::Ascii("alrs"),
        dictgen::InsensitiveStr::Ascii("alte"),
        dictgen::InsensitiveStr::Ascii("alting"),
        dictgen::InsensitiveStr::Ascii("altion"),
        dictgen::InsensitiveStr::Ascii("altions"),
        dictgen::InsensitiveStr::Ascii("altor"),
        dictgen::InsensitiveStr::Ascii("altors"),
        dictgen::InsensitiveStr::Ascii("arly"),
        dictgen::InsensitiveStr::Ascii("lacion"),
        dictgen::InsensitiveStr::Ascii("lae"),
        dictgen::InsensitiveStr::Ascii("laion"),
        dictgen::InsensitiveStr::Ascii("lalry"),
        dictgen::InsensitiveStr::Ascii("lament"),
        dictgen::InsensitiveStr::Ascii("laotrs"),
        dictgen::InsensitiveStr::Ascii("lares"),
        dictgen::InsensitiveStr::Ascii("larily"),
        dictgen::InsensitiveStr::Ascii("laring"),
        dictgen::InsensitiveStr::Ascii("laris"),
        dictgen::InsensitiveStr::Ascii("larlas"),
        dictgen::InsensitiveStr::Ascii("larlos"),
        dictgen::InsensitiveStr::Ascii("lary"),
        dictgen::InsensitiveStr::Ascii("las"),
        dictgen::InsensitiveStr::Ascii("laters"),
        dictgen::InsensitiveStr::Ascii("latin"),
        dictgen::InsensitiveStr::Ascii("lationg"),
        dictgen::InsensitiveStr::Ascii("latiors"),
        dictgen::InsensitiveStr::Ascii("latios"),
        dictgen::InsensitiveStr::Ascii("latons"),
        dictgen::InsensitiveStr::Ascii("latorias"),
        dictgen::InsensitiveStr::Ascii("latories"),
        dictgen::InsensitiveStr::Ascii("latorios"),
        dictgen::InsensitiveStr::Ascii("latr"),
        dictgen::InsensitiveStr::Ascii("lats"),
        dictgen::InsensitiveStr::Ascii("lsr"),
        dictgen::InsensitiveStr::Ascii("rally"),
    ],
    values: &[
        &["regularly"],
        &["regulars"],
        &["regulate"],
        &["regulating"],
        &["regulations"],
        &["regulations"],
        &["regulator"],
        &["regulators"],
        &["regularly"],
        &["regulation"],
        &["regulate"],
        &["regulation"],
        &["regularly"],
        &["regulate"],
        &["regulators"],
        &["regulars"],
        &["regularly"],
        &["regulating"],
        &["regulars"],
        &["regulars"],
        &["regulars"],
        &["regularly"],
        &["regulars"],
        &["regulators"],
        &["regulations"],
        &["regulating"],
        &["regulators"],
        &["regulators"],
        &["regulations"],
        &["regulators"],
        &["regulators"],
        &["regulators"],
        &["regulator"],
        &["regulators"],
        &["regulars"],
        &["regularly"],
    ],
    range: 3..=8,
};

static WORD_REGS_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_REGS_CHILDREN),
    value: None,
};

pub static WORD_REGS_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("itry")],
    values: &[&["registry"]],
    range: 4..=4,
};

static WORD_REGR_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_REGR_CHILDREN),
    value: None,
};

pub static WORD_REGR_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("esas"),
        dictgen::InsensitiveStr::Ascii("eses"),
        dictgen::InsensitiveStr::Ascii("esives"),
        dictgen::InsensitiveStr::Ascii("esos"),
        dictgen::InsensitiveStr::Ascii("esse"),
        dictgen::InsensitiveStr::Ascii("essivo"),
        dictgen::InsensitiveStr::Ascii("esso"),
        dictgen::InsensitiveStr::Ascii("esssion"),
        dictgen::InsensitiveStr::Ascii("esssive"),
        dictgen::InsensitiveStr::Ascii("est"),
        dictgen::InsensitiveStr::Ascii("ests"),
        dictgen::InsensitiveStr::Ascii("etts"),
        dictgen::InsensitiveStr::Ascii("igerator"),
    ],
    values: &[
        &["regress"],
        &["regress"],
        &["regressive"],
        &["regress"],
        &["regressive"],
        &["regression"],
        &["regression"],
        &["regression"],
        &["regressive"],
        &["regrets"],
        &["regress"],
        &["regrets"],
        &["refrigerator"],
    ],
    range: 3..=8,
};

static WORD_REGO_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_REGO_CHILDREN),
    value: None,
};

pub static WORD_REGO_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("cnition")],
    values: &[&["recognition"]],
    range: 7..=7,
};

static WORD_REGL_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_REGL_CHILDREN),
    value: None,
};

pub static WORD_REGL_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("uar")],
    values: &[&["regular"]],
    range: 3..=3,
};

static WORD_REGI_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_REGI_CHILDREN),
    value: None,
};

pub static WORD_REGI_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ems"),
        dictgen::InsensitiveStr::Ascii("met"),
        dictgen::InsensitiveStr::Ascii("onaal"),
        dictgen::InsensitiveStr::Ascii("ones"),
        dictgen::InsensitiveStr::Ascii("srty"),
        dictgen::InsensitiveStr::Ascii("startion"),
        dictgen::InsensitiveStr::Ascii("sted"),
        dictgen::InsensitiveStr::Ascii("sterd"),
        dictgen::InsensitiveStr::Ascii("sterdns"),
        dictgen::InsensitiveStr::Ascii("steres"),
        dictgen::InsensitiveStr::Ascii("steries"),
        dictgen::InsensitiveStr::Ascii("sterred"),
        dictgen::InsensitiveStr::Ascii("stery"),
        dictgen::InsensitiveStr::Ascii("straion"),
        dictgen::InsensitiveStr::Ascii("strating"),
        dictgen::InsensitiveStr::Ascii("strato"),
        dictgen::InsensitiveStr::Ascii("sty"),
    ],
    values: &[
        &["regimes"],
        &["regiment"],
        &["regional"],
        &["regions"],
        &["registry"],
        &["registration"],
        &["registered"],
        &["registered"],
        &["registers"],
        &["registers"],
        &["registers"],
        &["registered"],
        &["registry"],
        &["registration"],
        &["registration"],
        &["registration"],
        &["registry"],
    ],
    range: 3..=8,
};

static WORD_REGE_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_REGE_CHILDREN),
    value: None,
};

pub static WORD_REGE_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("nade"),
        dictgen::InsensitiveStr::Ascii("narate"),
        dictgen::InsensitiveStr::Ascii("naration"),
        dictgen::InsensitiveStr::Ascii("neracion"),
        dictgen::InsensitiveStr::Ascii("neratin"),
        dictgen::InsensitiveStr::Ascii("neraton"),
        dictgen::InsensitiveStr::Ascii("nere"),
        dictgen::InsensitiveStr::Ascii("rts"),
        dictgen::InsensitiveStr::Ascii("stration"),
    ],
    values: &[
        &["renegade"],
        &["regenerate"],
        &["regeneration"],
        &["regeneration"],
        &["regeneration"],
        &["regeneration"],
        &["regenerate"],
        &["regrets"],
        &["registration"],
    ],
    range: 3..=8,
};

static WORD_REGA_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_REGA_CHILDREN),
    value: None,
};

pub static WORD_REGA_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("rdes")],
    values: &[&["regards"]],
    range: 4..=4,
};

static WORD_REF_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_REF_CHILDREN),
    value: None,
};

static WORD_REF_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    None,
    None,
    None,
    None,
    Some(&WORD_REFE_NODE),
    Some(&WORD_REFF_NODE),
    None,
    None,
    Some(&WORD_REFI_NODE),
    None,
    None,
    Some(&WORD_REFL_NODE),
    None,
    None,
    Some(&WORD_REFO_NODE),
    None,
    None,
    Some(&WORD_REFR_NODE),
    None,
    None,
    Some(&WORD_REFU_NODE),
    None,
    None,
    None,
    None,
    None,
];

static WORD_REFU_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_REFU_CHILDREN),
    value: None,
};

pub static WORD_REFU_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("brished"),
        dictgen::InsensitiveStr::Ascii("rbised"),
        dictgen::InsensitiveStr::Ascii("rbushed"),
        dictgen::InsensitiveStr::Ascii("sla"),
    ],
    values: &[
        &["refurbished"],
        &["refurbished"],
        &["refurbished"],
        &["refusal"],
    ],
    range: 3..=7,
};

static WORD_REFR_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_REFR_CHILDREN),
    value: None,
};

pub static WORD_REFR_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ehser"),
        dictgen::InsensitiveStr::Ascii("eing"),
        dictgen::InsensitiveStr::Ascii("ence"),
        dictgen::InsensitiveStr::Ascii("ences"),
        dictgen::InsensitiveStr::Ascii("ers"),
        dictgen::InsensitiveStr::Ascii("eshd"),
        dictgen::InsensitiveStr::Ascii("eshener"),
        dictgen::InsensitiveStr::Ascii("eshr"),
        dictgen::InsensitiveStr::Ascii("iderator"),
        dictgen::InsensitiveStr::Ascii("idgeration"),
        dictgen::InsensitiveStr::Ascii("idgerator"),
        dictgen::InsensitiveStr::Ascii("igarator"),
        dictgen::InsensitiveStr::Ascii("igerador"),
        dictgen::InsensitiveStr::Ascii("igerar"),
        dictgen::InsensitiveStr::Ascii("igerater"),
        dictgen::InsensitiveStr::Ascii("igirator"),
        dictgen::InsensitiveStr::Ascii("omed"),
        dictgen::InsensitiveStr::Ascii("omist"),
        dictgen::InsensitiveStr::Ascii("oms"),
        dictgen::InsensitiveStr::Ascii("ubished"),
    ],
    values: &[
        &["refresher"],
        &["refering"],
        &["reference"],
        &["references"],
        &["refers"],
        &["refreshed"],
        &["refresher"],
        &["refresher"],
        &["refrigerator"],
        &["refrigeration"],
        &["refrigerator"],
        &["refrigerator"],
        &["refrigerator"],
        &["refrigerator"],
        &["refrigerator"],
        &["refrigerator"],
        &["reformed"],
        &["reformist"],
        &["reforms"],
        &["refurbished"],
    ],
    range: 3..=10,
};

static WORD_REFO_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_REFO_CHILDREN),
    value: None,
};

pub static WORD_REFO_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("rmerad"),
        dictgen::InsensitiveStr::Ascii("rmes"),
    ],
    values: &[&["reformed"], &["reforms"]],
    range: 4..=6,
};

static WORD_REFL_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_REFL_CHILDREN),
    value: None,
};

pub static WORD_REFL_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("eciton"),
        dictgen::InsensitiveStr::Ascii("ecte"),
        dictgen::InsensitiveStr::Ascii("ecters"),
        dictgen::InsensitiveStr::Ascii("ectie"),
        dictgen::InsensitiveStr::Ascii("ectivos"),
        dictgen::InsensitiveStr::Ascii("ecto"),
        dictgen::InsensitiveStr::Ascii("ektion"),
        dictgen::InsensitiveStr::Ascii("exs"),
        dictgen::InsensitiveStr::Ascii("extion"),
    ],
    values: &[
        &["reflections"],
        &["reflective"],
        &["reflects"],
        &["reflective"],
        &["reflections"],
        &["reflection"],
        &["reflection"],
        &["reflexes"],
        &["reflection"],
    ],
    range: 3..=7,
};

static WORD_REFI_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_REFI_CHILDREN),
    value: None,
};

pub static WORD_REFI_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("lles"),
        dictgen::InsensitiveStr::Ascii("llls"),
        dictgen::InsensitiveStr::Ascii("rgerator"),
    ],
    values: &[&["refills"], &["refills"], &["refrigerator"]],
    range: 4..=8,
};

static WORD_REFF_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_REFF_CHILDREN),
    value: None,
};

pub static WORD_REFF_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ered"),
        dictgen::InsensitiveStr::Ascii("erence"),
        dictgen::InsensitiveStr::Ascii("ering"),
    ],
    values: &[&["referred"], &["reference"], &["referring"]],
    range: 4..=6,
};

static WORD_REFE_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_REFE_CHILDREN),
    value: None,
};

pub static WORD_REFE_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ct"),
        dictgen::InsensitiveStr::Ascii("dendum"),
        dictgen::InsensitiveStr::Ascii("eres"),
        dictgen::InsensitiveStr::Ascii("lct"),
        dictgen::InsensitiveStr::Ascii("lcted"),
        dictgen::InsensitiveStr::Ascii("lcting"),
        dictgen::InsensitiveStr::Ascii("lction"),
        dictgen::InsensitiveStr::Ascii("lctions"),
        dictgen::InsensitiveStr::Ascii("lctive"),
        dictgen::InsensitiveStr::Ascii("lcts"),
        dictgen::InsensitiveStr::Ascii("lxes"),
        dictgen::InsensitiveStr::Ascii("ral"),
        dictgen::InsensitiveStr::Ascii("rances"),
        dictgen::InsensitiveStr::Ascii("rancing"),
        dictgen::InsensitiveStr::Ascii("randum"),
        dictgen::InsensitiveStr::Ascii("reces"),
        dictgen::InsensitiveStr::Ascii("red"),
        dictgen::InsensitiveStr::Ascii("rede"),
        dictgen::InsensitiveStr::Ascii("reees"),
        dictgen::InsensitiveStr::Ascii("reers"),
        dictgen::InsensitiveStr::Ascii("remce"),
        dictgen::InsensitiveStr::Ascii("remces"),
        dictgen::InsensitiveStr::Ascii("remdum"),
        dictgen::InsensitiveStr::Ascii("renceing"),
        dictgen::InsensitiveStr::Ascii("rencs"),
        dictgen::InsensitiveStr::Ascii("rendim"),
        dictgen::InsensitiveStr::Ascii("rendom"),
        dictgen::InsensitiveStr::Ascii("rene"),
        dictgen::InsensitiveStr::Ascii("renece"),
        dictgen::InsensitiveStr::Ascii("reneced"),
        dictgen::InsensitiveStr::Ascii("reneces"),
        dictgen::InsensitiveStr::Ascii("rening"),
        dictgen::InsensitiveStr::Ascii("rens"),
        dictgen::InsensitiveStr::Ascii("rense"),
        dictgen::InsensitiveStr::Ascii("renses"),
        dictgen::InsensitiveStr::Ascii("rentes"),
        dictgen::InsensitiveStr::Ascii("rere"),
        dictgen::InsensitiveStr::Ascii("riang"),
        dictgen::InsensitiveStr::Ascii("rig"),
        dictgen::InsensitiveStr::Ascii("rign"),
        dictgen::InsensitiveStr::Ascii("rincing"),
        dictgen::InsensitiveStr::Ascii("ring"),
        dictgen::InsensitiveStr::Ascii("rinng"),
        dictgen::InsensitiveStr::Ascii("rnce"),
        dictgen::InsensitiveStr::Ascii("rnces"),
        dictgen::InsensitiveStr::Ascii("rnece"),
        dictgen::InsensitiveStr::Ascii("rneces"),
        dictgen::InsensitiveStr::Ascii("rrence"),
        dictgen::InsensitiveStr::Ascii("rrences"),
        dictgen::InsensitiveStr::Ascii("rrs"),
        dictgen::InsensitiveStr::Ascii("rshed"),
        dictgen::InsensitiveStr::Ascii("rsher"),
        dictgen::InsensitiveStr::Ascii("rundum"),
    ],
    values: &[
        &["reflect"],
        &["referendum"],
        &["referees"],
        &["reflect"],
        &["reflected"],
        &["reflecting"],
        &["reflection"],
        &["reflections"],
        &["reflective"],
        &["reflects"],
        &["reflexes"],
        &["referral"],
        &["references"],
        &["referencing"],
        &["referendum"],
        &["references"],
        &["referred"],
        &["referee"],
        &["referees"],
        &["referees"],
        &["reference"],
        &["references"],
        &["referendum"],
        &["referencing"],
        &["references"],
        &["referendum"],
        &["referendum"],
        &["referee"],
        &["reference"],
        &["referenced"],
        &["references"],
        &["referencing"],
        &["references"],
        &["references"],
        &["referees"],
        &["references"],
        &["referee"],
        &["referring"],
        &["refering"],
        &["refering"],
        &["referencing"],
        &["referring"],
        &["refering"],
        &["reference"],
        &["references"],
        &["reference"],
        &["references"],
        &["reference"],
        &["references"],
        &["refers"],
        &["refreshed"],
        &["refresher"],
        &["referendum"],
    ],
    range: 2..=8,
};

static WORD_REE_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_REE_CHILDREN),
    value: None,
};

pub static WORD_REE_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("demed"),
        dictgen::InsensitiveStr::Ascii("deming"),
        dictgen::InsensitiveStr::Ascii("ncarnation"),
        dictgen::InsensitiveStr::Ascii("valulate"),
        dictgen::InsensitiveStr::Ascii("valutate"),
        dictgen::InsensitiveStr::Ascii("vaulate"),
        dictgen::InsensitiveStr::Ascii("vaulated"),
    ],
    values: &[
        &["redeemed"],
        &["redeeming"],
        &["reincarnation"],
        &["reevaluate"],
        &["reevaluate"],
        &["reevaluate"],
        &["reevaluate"],
    ],
    range: 5..=10,
};

static WORD_RED_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_RED_CHILDREN),
    value: None,
};

pub static WORD_RED_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("eemd"),
        dictgen::InsensitiveStr::Ascii("eemeed"),
        dictgen::InsensitiveStr::Ascii("efinied"),
        dictgen::InsensitiveStr::Ascii("efinine"),
        dictgen::InsensitiveStr::Ascii("eisgn"),
        dictgen::InsensitiveStr::Ascii("emeed"),
        dictgen::InsensitiveStr::Ascii("emtpion"),
        dictgen::InsensitiveStr::Ascii("epmtion"),
        dictgen::InsensitiveStr::Ascii("esgin"),
        dictgen::InsensitiveStr::Ascii("esiging"),
        dictgen::InsensitiveStr::Ascii("esing"),
        dictgen::InsensitiveStr::Ascii("iculous"),
        dictgen::InsensitiveStr::Ascii("istirbution"),
        dictgen::InsensitiveStr::Ascii("istribucion"),
        dictgen::InsensitiveStr::Ascii("istribuito"),
        dictgen::InsensitiveStr::Ascii("istributin"),
        dictgen::InsensitiveStr::Ascii("istributivo"),
        dictgen::InsensitiveStr::Ascii("istrubition"),
        dictgen::InsensitiveStr::Ascii("meption"),
        dictgen::InsensitiveStr::Ascii("neckers"),
        dictgen::InsensitiveStr::Ascii("neckese"),
        dictgen::InsensitiveStr::Ascii("neckest"),
        dictgen::InsensitiveStr::Ascii("ners"),
        dictgen::InsensitiveStr::Ascii("uncancy"),
        dictgen::InsensitiveStr::Ascii("undantcy"),
        dictgen::InsensitiveStr::Ascii("undany"),
        dictgen::InsensitiveStr::Ascii("undency"),
        dictgen::InsensitiveStr::Ascii("undent"),
        dictgen::InsensitiveStr::Ascii("undnacy"),
        dictgen::InsensitiveStr::Ascii("unduncy"),
    ],
    values: &[
        &["redeemed"],
        &["redeemed"],
        &["redefine"],
        &["redefine"],
        &["redesign"],
        &["redeemed"],
        &["redemption"],
        &["redemption"],
        &["redesign"],
        &["redesign"],
        &["redesign"],
        &["ridiculous"],
        &["redistribution"],
        &["redistribution"],
        &["redistribution"],
        &["redistribution"],
        &["redistribution"],
        &["redistribution"],
        &["redemption"],
        &["rednecks"],
        &["rednecks"],
        &["rednecks"],
        &["renders"],
        &["redundancy"],
        &["redundancy"],
        &["redundancy"],
        &["redundancy"],
        &["redundant"],
        &["redundancy"],
        &["redundancy"],
    ],
    range: 4..=11,
};

static WORD_REC_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_REC_CHILDREN),
    value: None,
};

static WORD_REC_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    Some(&WORD_RECA_NODE),
    None,
    Some(&WORD_RECC_NODE),
    None,
    Some(&WORD_RECE_NODE),
    None,
    Some(&WORD_RECG_NODE),
    Some(&WORD_RECH_NODE),
    Some(&WORD_RECI_NODE),
    None,
    None,
    Some(&WORD_RECL_NODE),
    None,
    None,
    Some(&WORD_RECO_NODE),
    Some(&WORD_RECP_NODE),
    Some(&WORD_RECQ_NODE),
    Some(&WORD_RECR_NODE),
    None,
    Some(&WORD_RECT_NODE),
    Some(&WORD_RECU_NODE),
    None,
    None,
    None,
    None,
    None,
];

static WORD_RECU_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_RECU_CHILDREN),
    value: None,
};

pub static WORD_RECU_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("iting"),
        dictgen::InsensitiveStr::Ascii("ring"),
        dictgen::InsensitiveStr::Ascii("rison"),
        dictgen::InsensitiveStr::Ascii("rited"),
        dictgen::InsensitiveStr::Ascii("riter"),
        dictgen::InsensitiveStr::Ascii("riters"),
        dictgen::InsensitiveStr::Ascii("ritment"),
        dictgen::InsensitiveStr::Ascii("rits"),
        dictgen::InsensitiveStr::Ascii("rrance"),
        dictgen::InsensitiveStr::Ascii("rsivly"),
        dictgen::InsensitiveStr::Ascii("srion"),
    ],
    values: &[
        &["recruiting"],
        &["recurring"],
        &["recursion"],
        &["recruited"],
        &["recruiter"],
        &["recruiters"],
        &["recruitment"],
        &["recruits"],
        &["recurrence"],
        &["recursively"],
        &["recursion"],
    ],
    range: 4..=7,
};

static WORD_RECT_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_RECT_CHILDREN),
    value: None,
};

pub static WORD_RECT_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ange"),
        dictgen::InsensitiveStr::Ascii("angel"),
        dictgen::InsensitiveStr::Ascii("anglar"),
        dictgen::InsensitiveStr::Ascii("angluar"),
        dictgen::InsensitiveStr::Ascii("angual"),
        dictgen::InsensitiveStr::Ascii("angualr"),
        dictgen::InsensitiveStr::Ascii("anguar"),
        dictgen::InsensitiveStr::Ascii("angulaire"),
        dictgen::InsensitiveStr::Ascii("anlge"),
        dictgen::InsensitiveStr::Ascii("engular"),
        dictgen::InsensitiveStr::Ascii("ifiy"),
    ],
    values: &[
        &["rectangle"],
        &["rectangle"],
        &["rectangular"],
        &["rectangular"],
        &["rectangular"],
        &["rectangular"],
        &["rectangular"],
        &["rectangular"],
        &["rectangle"],
        &["rectangular"],
        &["rectify"],
    ],
    range: 4..=9,
};

static WORD_RECR_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_RECR_CHILDREN),
    value: None,
};

pub static WORD_RECR_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ational"),
        dictgen::InsensitiveStr::Ascii("eacion"),
        dictgen::InsensitiveStr::Ascii("eacional"),
        dictgen::InsensitiveStr::Ascii("eatie"),
        dictgen::InsensitiveStr::Ascii("eatief"),
        dictgen::InsensitiveStr::Ascii("eationnal"),
        dictgen::InsensitiveStr::Ascii("eativo"),
        dictgen::InsensitiveStr::Ascii("iational"),
        dictgen::InsensitiveStr::Ascii("od"),
        dictgen::InsensitiveStr::Ascii("uitcs"),
        dictgen::InsensitiveStr::Ascii("uites"),
        dictgen::InsensitiveStr::Ascii("usion"),
        dictgen::InsensitiveStr::Ascii("utied"),
        dictgen::InsensitiveStr::Ascii("utier"),
        dictgen::InsensitiveStr::Ascii("utiers"),
        dictgen::InsensitiveStr::Ascii("utiment"),
    ],
    values: &[
        &["recreational"],
        &["recreation"],
        &["recreational"],
        &["recreate"],
        &["recreate"],
        &["recreational"],
        &["recreation"],
        &["recreational"],
        &["record"],
        &["recruits"],
        &["recruits"],
        &["recursion"],
        &["recruited"],
        &["recruiter"],
        &["recruiters"],
        &["recruitment"],
    ],
    range: 2..=9,
};

static WORD_RECQ_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_RECQ_CHILDREN),
    value: None,
};

pub static WORD_RECQ_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("uired")],
    values: &[&["required"]],
    range: 5..=5,
};

static WORD_RECP_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_RECP_CHILDREN),
    value: None,
};

pub static WORD_RECP_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("etionist"),
        dictgen::InsensitiveStr::Ascii("etive"),
        dictgen::InsensitiveStr::Ascii("etors"),
        dictgen::InsensitiveStr::Ascii("ies"),
    ],
    values: &[
        &["receptionist"],
        &["receptive"],
        &["receptors"],
        &["recipes"],
    ],
    range: 3..=8,
};

static WORD_RECO_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_RECO_CHILDREN),
    value: None,
};

static WORD_RECO_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    None,
    None,
    Some(&WORD_RECOC_NODE),
    None,
    None,
    None,
    Some(&WORD_RECOG_NODE),
    None,
    None,
    None,
    None,
    Some(&WORD_RECOL_NODE),
    Some(&WORD_RECOM_NODE),
    Some(&WORD_RECON_NODE),
    None,
    None,
    None,
    Some(&WORD_RECOR_NODE),
    None,
    None,
    None,
    Some(&WORD_RECOV_NODE),
    None,
    None,
    None,
    None,
];

static WORD_RECOV_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_RECOV_CHILDREN),
    value: None,
};

pub static WORD_RECOV_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("eres"),
        dictgen::InsensitiveStr::Ascii("erys"),
        dictgen::InsensitiveStr::Ascii("es"),
    ],
    values: &[&["recovers"], &["recovers"], &["recovers"]],
    range: 2..=4,
};

static WORD_RECOR_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_RECOR_CHILDREN),
    value: None,
};

pub static WORD_RECOR_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("dare"),
        dictgen::InsensitiveStr::Ascii("darle"),
        dictgen::InsensitiveStr::Ascii("darme"),
        dictgen::InsensitiveStr::Ascii("darse"),
        dictgen::InsensitiveStr::Ascii("darte"),
        dictgen::InsensitiveStr::Ascii("re"),
    ],
    values: &[
        &["recorder"],
        &["recorder"],
        &["recorder"],
        &["recorder"],
        &["recorder"],
        &["recorder"],
    ],
    range: 2..=5,
};

static WORD_RECON_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_RECON_CHILDREN),
    value: None,
};

pub static WORD_RECON_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("aissance"),
        dictgen::InsensitiveStr::Ascii("cider"),
        dictgen::InsensitiveStr::Ascii("cilation"),
        dictgen::InsensitiveStr::Ascii("cille"),
        dictgen::InsensitiveStr::Ascii("cilled"),
        dictgen::InsensitiveStr::Ascii("enct"),
        dictgen::InsensitiveStr::Ascii("gise"),
        dictgen::InsensitiveStr::Ascii("gised"),
        dictgen::InsensitiveStr::Ascii("gition"),
        dictgen::InsensitiveStr::Ascii("gizable"),
        dictgen::InsensitiveStr::Ascii("gize"),
        dictgen::InsensitiveStr::Ascii("gized"),
        dictgen::InsensitiveStr::Ascii("gizes"),
        dictgen::InsensitiveStr::Ascii("gizing"),
        dictgen::InsensitiveStr::Ascii("icle"),
        dictgen::InsensitiveStr::Ascii("isder"),
        dictgen::InsensitiveStr::Ascii("ized"),
        dictgen::InsensitiveStr::Ascii("naisance"),
        dictgen::InsensitiveStr::Ascii("naissence"),
        dictgen::InsensitiveStr::Ascii("net"),
        dictgen::InsensitiveStr::Ascii("sidder"),
        dictgen::InsensitiveStr::Ascii("siled"),
        dictgen::InsensitiveStr::Ascii("struccion"),
        dictgen::InsensitiveStr::Ascii("strucion"),
        dictgen::InsensitiveStr::Ascii("sturction"),
        dictgen::InsensitiveStr::Ascii("tructed"),
    ],
    values: &[
        &["reconnaissance"],
        &["reconsider"],
        &["reconciliation"],
        &["reconcile"],
        &["reconcile"],
        &["reconnect"],
        &["recognise"],
        &["recognised"],
        &["recognition"],
        &["recognizable"],
        &["recognize"],
        &["recognized"],
        &["recognizes"],
        &["recognizing"],
        &["reconcile"],
        &["reconsider"],
        &["recognized"],
        &["reconnaissance"],
        &["reconnaissance"],
        &["reconnect"],
        &["reconsider"],
        &["reconsider"],
        &["reconstruction"],
        &["reconstruction"],
        &["reconstruction"],
        &["reconstructed"],
    ],
    range: 3..=9,
};

static WORD_RECOM_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_RECOM_CHILDREN),
    value: None,
};

pub static WORD_RECOM_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("end"),
        dictgen::InsensitiveStr::Ascii("ended"),
        dictgen::InsensitiveStr::Ascii("ending"),
        dictgen::InsensitiveStr::Ascii("ends"),
        dictgen::InsensitiveStr::Ascii("mandation"),
        dictgen::InsensitiveStr::Ascii("mandations"),
        dictgen::InsensitiveStr::Ascii("mande"),
        dictgen::InsensitiveStr::Ascii("mandes"),
        dictgen::InsensitiveStr::Ascii("manding"),
        dictgen::InsensitiveStr::Ascii("mands"),
        dictgen::InsensitiveStr::Ascii("med"),
        dictgen::InsensitiveStr::Ascii("medations"),
        dictgen::InsensitiveStr::Ascii("meded"),
        dictgen::InsensitiveStr::Ascii("mendeds"),
        dictgen::InsensitiveStr::Ascii("mendes"),
        dictgen::InsensitiveStr::Ascii("mendors"),
        dictgen::InsensitiveStr::Ascii("mened"),
        dictgen::InsensitiveStr::Ascii("meneded"),
        dictgen::InsensitiveStr::Ascii("mennd"),
        dictgen::InsensitiveStr::Ascii("mens"),
        dictgen::InsensitiveStr::Ascii("mented"),
        dictgen::InsensitiveStr::Ascii("menting"),
        dictgen::InsensitiveStr::Ascii("ments"),
        dictgen::InsensitiveStr::Ascii("mondation"),
        dictgen::InsensitiveStr::Ascii("mondations"),
        dictgen::InsensitiveStr::Ascii("pence"),
    ],
    values: &[
        &["recommend"],
        &["recommended"],
        &["recommending"],
        &["recommends"],
        &["recommendation"],
        &["recommendations"],
        &["recommend"],
        &["recommends"],
        &["recommending"],
        &["recommends"],
        &["recommend"],
        &["recommendations"],
        &["recommended"],
        &["recommends"],
        &["recommends"],
        &["recommends"],
        &["recommend"],
        &["recommended"],
        &["recommends"],
        &["recommends"],
        &["recommended"],
        &["recommending"],
        &["recommends"],
        &["recommendation"],
        &["recommendations"],
        &["recompense"],
    ],
    range: 3..=10,
};

static WORD_RECOL_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_RECOL_CHILDREN),
    value: None,
};

pub static WORD_RECOL_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("leciton")],
    values: &[&["recollection"]],
    range: 7..=7,
};

static WORD_RECOG_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_RECOG_CHILDREN),
    value: None,
};

pub static WORD_RECOG_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("inse"),
        dictgen::InsensitiveStr::Ascii("insed"),
        dictgen::InsensitiveStr::Ascii("inze"),
        dictgen::InsensitiveStr::Ascii("inzed"),
        dictgen::InsensitiveStr::Ascii("ise"),
        dictgen::InsensitiveStr::Ascii("ize"),
        dictgen::InsensitiveStr::Ascii("nices"),
        dictgen::InsensitiveStr::Ascii("nicing"),
        dictgen::InsensitiveStr::Ascii("nie"),
        dictgen::InsensitiveStr::Ascii("nision"),
        dictgen::InsensitiveStr::Ascii("niton"),
        dictgen::InsensitiveStr::Ascii("nizible"),
        dictgen::InsensitiveStr::Ascii("nzied"),
    ],
    values: &[
        &["recognise"],
        &["recognised"],
        &["recognize"],
        &["recognized"],
        &["recognise"],
        &["recognize"],
        &["recognizes"],
        &["recognizing"],
        &["recognizes"],
        &["recognition"],
        &["recognition"],
        &["recognizable"],
        &["recognised"],
    ],
    range: 3..=7,
};

static WORD_RECOC_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_RECOC_CHILDREN),
    value: None,
};

pub static WORD_RECOC_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("nised")],
    values: &[&["recognised"]],
    range: 5..=5,
};

static WORD_RECL_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_RECL_CHILDREN),
    value: None,
};

pub static WORD_RECL_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ami"),
        dictgen::InsensitiveStr::Ascii("iam"),
        dictgen::InsensitiveStr::Ascii("utant"),
        dictgen::InsensitiveStr::Ascii("utantly"),
    ],
    values: &[&["reclaim"], &["reclaim"], &["reluctant"], &["reluctantly"]],
    range: 3..=7,
};

static WORD_RECI_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_RECI_CHILDREN),
    value: None,
};

pub static WORD_RECI_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("de"),
        dictgen::InsensitiveStr::Ascii("ded"),
        dictgen::InsensitiveStr::Ascii("dent"),
        dictgen::InsensitiveStr::Ascii("dents"),
        dictgen::InsensitiveStr::Ascii("ding"),
        dictgen::InsensitiveStr::Ascii("epents"),
        dictgen::InsensitiveStr::Ascii("ept"),
        dictgen::InsensitiveStr::Ascii("evd"),
        dictgen::InsensitiveStr::Ascii("eve"),
        dictgen::InsensitiveStr::Ascii("eved"),
        dictgen::InsensitiveStr::Ascii("ever"),
        dictgen::InsensitiveStr::Ascii("evers"),
        dictgen::InsensitiveStr::Ascii("eves"),
        dictgen::InsensitiveStr::Ascii("eving"),
        dictgen::InsensitiveStr::Ascii("pees"),
        dictgen::InsensitiveStr::Ascii("peints"),
        dictgen::InsensitiveStr::Ascii("pets"),
        dictgen::InsensitiveStr::Ascii("piant"),
        dictgen::InsensitiveStr::Ascii("piants"),
        dictgen::InsensitiveStr::Ascii("pientes"),
        dictgen::InsensitiveStr::Ascii("porcate"),
        dictgen::InsensitiveStr::Ascii("porcated"),
        dictgen::InsensitiveStr::Ascii("pricate"),
        dictgen::InsensitiveStr::Ascii("procant"),
        dictgen::InsensitiveStr::Ascii("proce"),
        dictgen::InsensitiveStr::Ascii("prociate"),
        dictgen::InsensitiveStr::Ascii("procite"),
        dictgen::InsensitiveStr::Ascii("procrate"),
        dictgen::InsensitiveStr::Ascii("tfy"),
        dictgen::InsensitiveStr::Ascii("ved"),
        dictgen::InsensitiveStr::Ascii("vership"),
    ],
    values: &[
        &["reside"],
        &["resided"],
        &["resident"],
        &["residents"],
        &["residing"],
        &["recipients"],
        &["receipt"],
        &["recieved"],
        &["receive"],
        &["received"],
        &["receiver"],
        &["receivers"],
        &["receives"],
        &["receiving"],
        &["recipes"],
        &["recipients"],
        &["recipes"],
        &["recipient"],
        &["recipients"],
        &["recipients"],
        &["reciprocate"],
        &["reciprocate"],
        &["reciprocate"],
        &["reciprocate"],
        &["reciprocate"],
        &["reciprocate"],
        &["reciprocate"],
        &["reciprocate"],
        &["rectify"],
        &["received"],
        &["receivership"],
    ],
    range: 2..=8,
};

static WORD_RECH_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_RECH_CHILDREN),
    value: None,
};

pub static WORD_RECH_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("argable"),
        dictgen::InsensitiveStr::Ascii("ed"),
    ],
    values: &[&["rechargeable"], &["reached"]],
    range: 2..=7,
};

static WORD_RECG_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_RECG_CHILDREN),
    value: None,
};

pub static WORD_RECG_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("onise"),
        dictgen::InsensitiveStr::Ascii("onised"),
        dictgen::InsensitiveStr::Ascii("onition"),
        dictgen::InsensitiveStr::Ascii("onizable"),
        dictgen::InsensitiveStr::Ascii("onize"),
        dictgen::InsensitiveStr::Ascii("onized"),
        dictgen::InsensitiveStr::Ascii("onizes"),
        dictgen::InsensitiveStr::Ascii("onizing"),
    ],
    values: &[
        &["recognise"],
        &["recognised"],
        &["recognition"],
        &["recognizable"],
        &["recognize"],
        &["recognized"],
        &["recognizes"],
        &["recognizing"],
    ],
    range: 5..=8,
};

static WORD_RECE_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_RECE_CHILDREN),
    value: None,
};

pub static WORD_RECE_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("eded"),
        dictgen::InsensitiveStr::Ascii("eding"),
        dictgen::InsensitiveStr::Ascii("ips"),
        dictgen::InsensitiveStr::Ascii("pcionist"),
        dictgen::InsensitiveStr::Ascii("pient"),
        dictgen::InsensitiveStr::Ascii("pients"),
        dictgen::InsensitiveStr::Ascii("pits"),
        dictgen::InsensitiveStr::Ascii("ptie"),
        dictgen::InsensitiveStr::Ascii("ptionest"),
        dictgen::InsensitiveStr::Ascii("ptionnist"),
        dictgen::InsensitiveStr::Ascii("ptionsist"),
        dictgen::InsensitiveStr::Ascii("ptionst"),
        dictgen::InsensitiveStr::Ascii("ptoras"),
        dictgen::InsensitiveStr::Ascii("ptores"),
        dictgen::InsensitiveStr::Ascii("ptos"),
        dictgen::InsensitiveStr::Ascii("ving"),
    ],
    values: &[
        &["receded"],
        &["receding"],
        &["receipts"],
        &["receptionist"],
        &["recipient"],
        &["recipients"],
        &["receipts"],
        &["receptive"],
        &["receptionist"],
        &["receptionist"],
        &["receptionist"],
        &["receptionist"],
        &["receptors"],
        &["receptors"],
        &["receptors"],
        &["receiving"],
    ],
    range: 3..=9,
};

static WORD_RECC_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_RECC_CHILDREN),
    value: None,
};

pub static WORD_RECC_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("omend"),
        dictgen::InsensitiveStr::Ascii("omendations"),
        dictgen::InsensitiveStr::Ascii("omended"),
        dictgen::InsensitiveStr::Ascii("omending"),
        dictgen::InsensitiveStr::Ascii("ommend"),
        dictgen::InsensitiveStr::Ascii("ommended"),
        dictgen::InsensitiveStr::Ascii("ommending"),
        dictgen::InsensitiveStr::Ascii("uring"),
    ],
    values: &[
        &["recommend"],
        &["recommendations"],
        &["recommended"],
        &["recommending"],
        &["recommend"],
        &["recommended"],
        &["recommending"],
        &["recurring"],
    ],
    range: 5..=11,
};

static WORD_RECA_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_RECA_CHILDREN),
    value: None,
};

pub static WORD_RECA_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("lim"),
        dictgen::InsensitiveStr::Ascii("llection"),
        dictgen::InsensitiveStr::Ascii("tions"),
    ],
    values: &[&["reclaim"], &["recollection"], &["creations"]],
    range: 3..=8,
};

static WORD_REB_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_REB_CHILDREN),
    value: None,
};

pub static WORD_REB_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ellios"),
        dictgen::InsensitiveStr::Ascii("ellis"),
        dictgen::InsensitiveStr::Ascii("iulding"),
        dictgen::InsensitiveStr::Ascii("llions"),
        dictgen::InsensitiveStr::Ascii("oudning"),
        dictgen::InsensitiveStr::Ascii("oudns"),
        dictgen::InsensitiveStr::Ascii("ounce"),
        dictgen::InsensitiveStr::Ascii("ouncing"),
        dictgen::InsensitiveStr::Ascii("ouns"),
        dictgen::InsensitiveStr::Ascii("uidling"),
        dictgen::InsensitiveStr::Ascii("uildling"),
        dictgen::InsensitiveStr::Ascii("uildt"),
        dictgen::InsensitiveStr::Ascii("uliding"),
        dictgen::InsensitiveStr::Ascii("ulit"),
        dictgen::InsensitiveStr::Ascii("uplic"),
        dictgen::InsensitiveStr::Ascii("uplican"),
        dictgen::InsensitiveStr::Ascii("uplicans"),
    ],
    values: &[
        &["rebellious"],
        &["rebellious"],
        &["rebuilding"],
        &["rebellions"],
        &["rebounding"],
        &["rebounds"],
        &["rebound"],
        &["rebounding"],
        &["rebounds"],
        &["rebuilding"],
        &["rebuilding"],
        &["rebuilt"],
        &["rebuilding"],
        &["rebuilt"],
        &["republic"],
        &["republican"],
        &["republicans"],
    ],
    range: 4..=8,
};

static WORD_REA_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_REA_CHILDREN),
    value: None,
};

static WORD_REA_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    None,
    None,
    Some(&WORD_REAC_NODE),
    Some(&WORD_READ_NODE),
    None,
    None,
    Some(&WORD_REAG_NODE),
    None,
    None,
    None,
    None,
    Some(&WORD_REAL_NODE),
    Some(&WORD_REAM_NODE),
    None,
    None,
    Some(&WORD_REAP_NODE),
    None,
    None,
    Some(&WORD_REAS_NODE),
    Some(&WORD_REAT_NODE),
    None,
    Some(&WORD_REAV_NODE),
    None,
    None,
    None,
    None,
];

static WORD_REAV_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_REAV_CHILDREN),
    value: None,
};

pub static WORD_REAV_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("eled"),
        dictgen::InsensitiveStr::Ascii("eling"),
    ],
    values: &[&["revealed"], &["revealing"]],
    range: 4..=5,
};

static WORD_REAT_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_REAT_CHILDREN),
    value: None,
};

pub static WORD_REAT_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("iler")],
    values: &[&["retailer"]],
    range: 4..=4,
};

static WORD_REAS_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_REAS_CHILDREN),
    value: None,
};

pub static WORD_REAS_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("earch"),
        dictgen::InsensitiveStr::Ascii("erch"),
        dictgen::InsensitiveStr::Ascii("erched"),
        dictgen::InsensitiveStr::Ascii("ercher"),
        dictgen::InsensitiveStr::Ascii("erchers"),
        dictgen::InsensitiveStr::Ascii("erching"),
        dictgen::InsensitiveStr::Ascii("onablely"),
        dictgen::InsensitiveStr::Ascii("onabley"),
        dictgen::InsensitiveStr::Ascii("onablly"),
        dictgen::InsensitiveStr::Ascii("onal"),
        dictgen::InsensitiveStr::Ascii("sureing"),
        dictgen::InsensitiveStr::Ascii("surring"),
    ],
    values: &[
        &["research"],
        &["research"],
        &["researched"],
        &["researcher"],
        &["researchers"],
        &["researching"],
        &["reasonably"],
        &["reasonably"],
        &["reasonably"],
        &["reasonably"],
        &["reassuring"],
        &["reassuring"],
    ],
    range: 4..=8,
};

static WORD_REAP_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_REAP_CHILDREN),
    value: None,
};

pub static WORD_REAP_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ired"),
        dictgen::InsensitiveStr::Ascii("irs"),
        dictgen::InsensitiveStr::Ascii("lugs"),
        dictgen::InsensitiveStr::Ascii("lying"),
        dictgen::InsensitiveStr::Ascii("onsibilities"),
        dictgen::InsensitiveStr::Ascii("onsibility"),
    ],
    values: &[
        &["repaired"],
        &["repairs"],
        &["earplugs"],
        &["replaying"],
        &["responsibilities"],
        &["responsibility"],
    ],
    range: 3..=12,
};

static WORD_REAM_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_REAM_CHILDREN),
    value: None,
};

pub static WORD_REAM_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ined"),
        dictgen::InsensitiveStr::Ascii("ining"),
        dictgen::InsensitiveStr::Ascii("ins"),
    ],
    values: &[&["remained"], &["remaining"], &["remains"]],
    range: 3..=5,
};

static WORD_REAL_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_REAL_CHILDREN),
    value: None,
};

pub static WORD_REAL_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ibility"),
        dictgen::InsensitiveStr::Ascii("ible"),
        dictgen::InsensitiveStr::Ascii("ibly"),
        dictgen::InsensitiveStr::Ascii("ies"),
        dictgen::InsensitiveStr::Ascii("iest"),
        dictgen::InsensitiveStr::Ascii("isim"),
        dictgen::InsensitiveStr::Ascii("isitc"),
        dictgen::InsensitiveStr::Ascii("isitcally"),
        dictgen::InsensitiveStr::Ascii("isme"),
        dictgen::InsensitiveStr::Ascii("istc"),
        dictgen::InsensitiveStr::Ascii("iste"),
        dictgen::InsensitiveStr::Ascii("isticaly"),
        dictgen::InsensitiveStr::Ascii("isticlly"),
        dictgen::InsensitiveStr::Ascii("istisch"),
        dictgen::InsensitiveStr::Ascii("itvely"),
        dictgen::InsensitiveStr::Ascii("oded"),
        dictgen::InsensitiveStr::Ascii("oding"),
        dictgen::InsensitiveStr::Ascii("sie"),
        dictgen::InsensitiveStr::Ascii("sied"),
        dictgen::InsensitiveStr::Ascii("sim"),
        dictgen::InsensitiveStr::Ascii("sitic"),
        dictgen::InsensitiveStr::Ascii("table"),
        dictgen::InsensitiveStr::Ascii("tes"),
        dictgen::InsensitiveStr::Ascii("tion"),
        dictgen::InsensitiveStr::Ascii("tions"),
        dictgen::InsensitiveStr::Ascii("tionships"),
        dictgen::InsensitiveStr::Ascii("tive"),
        dictgen::InsensitiveStr::Ascii("tively"),
        dictgen::InsensitiveStr::Ascii("tives"),
        dictgen::InsensitiveStr::Ascii("tivity"),
        dictgen::InsensitiveStr::Ascii("y"),
        dictgen::InsensitiveStr::Ascii("yl"),
    ],
    values: &[
        &["reliability"],
        &["reliable"],
        &["reliably"],
        &["realise"],
        &["earliest"],
        &["realism"],
        &["realistic"],
        &["realistically"],
        &["realise"],
        &["realistic"],
        &["realise"],
        &["realistically"],
        &["realistically"],
        &["realistic"],
        &["relatively"],
        &["reloaded"],
        &["reloading"],
        &["realise"],
        &["realised"],
        &["realism"],
        &["realistic"],
        &["relatable"],
        &["relates"],
        &["relation"],
        &["relations"],
        &["relationships"],
        &["relative"],
        &["relatively"],
        &["relatives"],
        &["relativity"],
        &["really"],
        &["really"],
    ],
    range: 1..=9,
};

static WORD_REAG_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_REAG_CHILDREN),
    value: None,
};

pub static WORD_REAG_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("rds")],
    values: &[&["regards"]],
    range: 3..=3,
};

static WORD_READ_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_READ_CHILDREN),
    value: None,
};

pub static WORD_READ_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("mition")],
    values: &[&["readmission"]],
    range: 6..=6,
};

static WORD_REAC_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_REAC_CHILDREN),
    value: None,
};

pub static WORD_REAC_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("curring"),
        dictgen::InsensitiveStr::Ascii("ing"),
        dictgen::InsensitiveStr::Ascii("ll"),
        dictgen::InsensitiveStr::Ascii("tionair"),
        dictgen::InsensitiveStr::Ascii("tionairy"),
        dictgen::InsensitiveStr::Ascii("tionnary"),
        dictgen::InsensitiveStr::Ascii("tiony"),
    ],
    values: &[
        &["recurring"],
        &["reaching"],
        &["recall"],
        &["reactionary"],
        &["reactionary"],
        &["reactionary"],
        &["reactionary"],
    ],
    range: 2..=8,
};

static WORD_RA_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_RA_CHILDREN),
    value: None,
};

static WORD_RA_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    None,
    Some(&WORD_RAB_NODE),
    Some(&WORD_RAC_NODE),
    Some(&WORD_RAD_NODE),
    Some(&WORD_RAE_NODE),
    None,
    None,
    Some(&WORD_RAH_NODE),
    Some(&WORD_RAI_NODE),
    None,
    None,
    None,
    Some(&WORD_RAM_NODE),
    Some(&WORD_RAN_NODE),
    Some(&WORD_RAO_NODE),
    Some(&WORD_RAP_NODE),
    None,
    None,
    Some(&WORD_RAS_NODE),
    Some(&WORD_RAT_NODE),
    None,
    None,
    None,
    None,
    None,
    None,
];

static WORD_RAT_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_RAT_CHILDREN),
    value: None,
};

pub static WORD_RAT_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("hcet"),
        dictgen::InsensitiveStr::Ascii("ionalizaiton"),
        dictgen::InsensitiveStr::Ascii("ionalizating"),
        dictgen::InsensitiveStr::Ascii("ionalizaton"),
        dictgen::InsensitiveStr::Ascii("ionalle"),
        dictgen::InsensitiveStr::Ascii("ionallity"),
        dictgen::InsensitiveStr::Ascii("ionaly"),
        dictgen::InsensitiveStr::Ascii("ionel"),
        dictgen::InsensitiveStr::Ascii("pure"),
    ],
    values: &[
        &["ratchet"],
        &["rationalization"],
        &["rationalization"],
        &["rationalization"],
        &["rationale"],
        &["rationally"],
        &["rationally"],
        &["rationale"],
        &["rapture"],
    ],
    range: 4..=12,
};

static WORD_RAS_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_RAS_CHILDREN),
    value: None,
};

pub static WORD_RAS_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("bperry"),
        dictgen::InsensitiveStr::Ascii("pberrry"),
        dictgen::InsensitiveStr::Ascii("pbery"),
    ],
    values: &[&["raspberry"], &["raspberry"], &["raspberry"]],
    range: 5..=7,
};

static WORD_RAP_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_RAP_CHILDREN),
    value: None,
};

pub static WORD_RAP_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("hsody"),
        dictgen::InsensitiveStr::Ascii("sberry"),
        dictgen::InsensitiveStr::Ascii("tores"),
        dictgen::InsensitiveStr::Ascii("tros"),
        dictgen::InsensitiveStr::Ascii("utre"),
    ],
    values: &[
        &["rhapsody"],
        &["raspberry"],
        &["raptors"],
        &["raptors"],
        &["rapture"],
    ],
    range: 4..=6,
};

static WORD_RAO_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_RAO_CHILDREN),
    value: None,
};

pub static WORD_RAO_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ches"),
        dictgen::InsensitiveStr::Ascii("ming"),
        dictgen::InsensitiveStr::Ascii("sting"),
    ],
    values: &[&["roaches"], &["roaming"], &["roasting"]],
    range: 4..=5,
};

static WORD_RAN_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_RAN_CHILDREN),
    value: None,
};

pub static WORD_RAN_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("dmoness"),
        dictgen::InsensitiveStr::Ascii("domes"),
        dictgen::InsensitiveStr::Ascii("domez"),
        dictgen::InsensitiveStr::Ascii("domns"),
        dictgen::InsensitiveStr::Ascii("domrs"),
        dictgen::InsensitiveStr::Ascii("domus"),
        dictgen::InsensitiveStr::Ascii("domzied"),
        dictgen::InsensitiveStr::Ascii("donmess"),
        dictgen::InsensitiveStr::Ascii("dumness"),
    ],
    values: &[
        &["randomness"],
        &["randoms"],
        &["randomized"],
        &["randoms"],
        &["randoms"],
        &["randoms"],
        &["randomized"],
        &["randomness"],
        &["randomness"],
    ],
    range: 5..=7,
};

static WORD_RAM_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_RAM_CHILDREN),
    value: None,
};

pub static WORD_RAM_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("ificaitons")],
    values: &[&["ramifications"]],
    range: 10..=10,
};

static WORD_RAI_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_RAI_CHILDREN),
    value: None,
};

pub static WORD_RAI_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("dance"),
        dictgen::InsensitiveStr::Ascii("dant"),
        dictgen::InsensitiveStr::Ascii("doactive"),
        dictgen::InsensitiveStr::Ascii("lraod"),
        dictgen::InsensitiveStr::Ascii("lrod"),
        dictgen::InsensitiveStr::Ascii("nbos"),
        dictgen::InsensitiveStr::Ascii("nbowers"),
    ],
    values: &[
        &["radiance"],
        &["radiant"],
        &["radioactive"],
        &["railroad"],
        &["railroad"],
        &["rainbows"],
        &["rainbows"],
    ],
    range: 4..=8,
};

static WORD_RAH_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_RAH_CHILDREN),
    value: None,
};

pub static WORD_RAH_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("psody")],
    values: &[&["rhapsody"]],
    range: 5..=5,
};

static WORD_RAE_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_RAE_CHILDREN),
    value: None,
};

pub static WORD_RAE_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("lism"),
        dictgen::InsensitiveStr::Ascii("lly"),
    ],
    values: &[&["realism"], &["really"]],
    range: 3..=4,
};

static WORD_RAD_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_RAD_CHILDREN),
    value: None,
};

pub static WORD_RAD_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("aince"),
        dictgen::InsensitiveStr::Ascii("aint"),
        dictgen::InsensitiveStr::Ascii("iactive"),
        dictgen::InsensitiveStr::Ascii("iane"),
        dictgen::InsensitiveStr::Ascii("iaoctive"),
        dictgen::InsensitiveStr::Ascii("icalis"),
        dictgen::InsensitiveStr::Ascii("icas"),
        dictgen::InsensitiveStr::Ascii("iers"),
        dictgen::InsensitiveStr::Ascii("ify"),
        dictgen::InsensitiveStr::Ascii("ioacive"),
        dictgen::InsensitiveStr::Ascii("ioactice"),
        dictgen::InsensitiveStr::Ascii("ioactief"),
        dictgen::InsensitiveStr::Ascii("ioactieve"),
        dictgen::InsensitiveStr::Ascii("ioaktive"),
        dictgen::InsensitiveStr::Ascii("iocative"),
    ],
    values: &[
        &["radiance"],
        &["radiant"],
        &["radioactive"],
        &["radiance"],
        &["radioactive"],
        &["radicals"],
        &["radicals"],
        &["raiders"],
        &["ratify"],
        &["radioactive"],
        &["radioactive"],
        &["radioactive"],
        &["radioactive"],
        &["radioactive"],
        &["radioactive"],
    ],
    range: 3..=9,
};

static WORD_RAC_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_RAC_CHILDREN),
    value: None,
};

pub static WORD_RAC_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("aus"),
        dictgen::InsensitiveStr::Ascii("ionalization"),
        dictgen::InsensitiveStr::Ascii("isst"),
        dictgen::InsensitiveStr::Ascii("istas"),
        dictgen::InsensitiveStr::Ascii("istes"),
        dictgen::InsensitiveStr::Ascii("thet"),
    ],
    values: &[
        &["raucous"],
        &["rationalization"],
        &["racists"],
        &["racists"],
        &["racists"],
        &["ratchet"],
    ],
    range: 3..=12,
};

static WORD_RAB_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_RAB_CHILDREN),
    value: None,
};

pub static WORD_RAB_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("bitos"),
        dictgen::InsensitiveStr::Ascii("bitts"),
        dictgen::InsensitiveStr::Ascii("innical"),
    ],
    values: &[&["rabbits"], &["rabbits"], &["rabbinical"]],
    range: 5..=7,
};

static WORD_Q_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_Q_CHILDREN),
    value: None,
};

static WORD_Q_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    Some(&WORD_QA_NODE),
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    Some(&WORD_QT_NODE),
    Some(&WORD_QU_NODE),
    None,
    None,
    None,
    None,
    None,
];

static WORD_QU_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_QU_CHILDREN),
    value: None,
};

static WORD_QU_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    Some(&WORD_QUA_NODE),
    None,
    Some(&WORD_QUC_NODE),
    None,
    Some(&WORD_QUE_NODE),
    None,
    None,
    None,
    Some(&WORD_QUI_NODE),
    None,
    None,
    None,
    None,
    Some(&WORD_QUN_NODE),
    None,
    None,
    None,
    None,
    None,
    Some(&WORD_QUT_NODE),
    Some(&WORD_QUU_NODE),
    None,
    None,
    None,
    None,
    None,
];

static WORD_QUU_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_QUU_CHILDREN),
    value: None,
};

pub static WORD_QUU_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("ery")],
    values: &[&["query"]],
    range: 3..=3,
};

static WORD_QUT_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_QUT_CHILDREN),
    value: None,
};

pub static WORD_QUT_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("ie")],
    values: &[&["quite"]],
    range: 2..=2,
};

static WORD_QUN_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_QUN_CHILDREN),
    value: None,
};

pub static WORD_QUN_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("atum"),
        dictgen::InsensitiveStr::Ascii("etin"),
    ],
    values: &[&["quantum"], &["quentin"]],
    range: 4..=4,
};

static WORD_QUI_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_QUI_CHILDREN),
    value: None,
};

pub static WORD_QUI_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("cket"),
        dictgen::InsensitiveStr::Ascii("ckets"),
        dictgen::InsensitiveStr::Ascii("cklyu"),
        dictgen::InsensitiveStr::Ascii("elty"),
        dictgen::InsensitiveStr::Ascii("nessential"),
        dictgen::InsensitiveStr::Ascii("tely"),
        dictgen::InsensitiveStr::Ascii("zes"),
    ],
    values: &[
        &["quickest"],
        &["quickest"],
        &["quickly"],
        &["quietly"],
        &["quintessential"],
        &["quietly"],
        &["quizzes"],
    ],
    range: 3..=10,
};

static WORD_QUE_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_QUE_CHILDREN),
    value: None,
};

pub static WORD_QUE_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ation"),
        dictgen::InsensitiveStr::Ascii("ations"),
        dictgen::InsensitiveStr::Ascii("enland"),
        dictgen::InsensitiveStr::Ascii("ires"),
        dictgen::InsensitiveStr::Ascii("itly"),
        dictgen::InsensitiveStr::Ascii("ntion"),
        dictgen::InsensitiveStr::Ascii("reis"),
        dictgen::InsensitiveStr::Ascii("sitonable"),
        dictgen::InsensitiveStr::Ascii("sitoned"),
        dictgen::InsensitiveStr::Ascii("sitoning"),
        dictgen::InsensitiveStr::Ascii("stional"),
        dictgen::InsensitiveStr::Ascii("stionalbe"),
        dictgen::InsensitiveStr::Ascii("stionalble"),
        dictgen::InsensitiveStr::Ascii("stiond"),
        dictgen::InsensitiveStr::Ascii("stiong"),
        dictgen::InsensitiveStr::Ascii("stionn"),
        dictgen::InsensitiveStr::Ascii("stionne"),
        dictgen::InsensitiveStr::Ascii("stionned"),
        dictgen::InsensitiveStr::Ascii("stionning"),
        dictgen::InsensitiveStr::Ascii("stionsign"),
        dictgen::InsensitiveStr::Ascii("stonable"),
    ],
    values: &[
        &["equation"],
        &["equations"],
        &["queensland"],
        &["queries"],
        &["quietly"],
        &["quentin"],
        &["queries"],
        &["questionable"],
        &["questioned"],
        &["questioning"],
        &["questionable"],
        &["questionable"],
        &["questionable"],
        &["questioned"],
        &["questioning"],
        &["questioning"],
        &["questioned"],
        &["questioned"],
        &["questioning"],
        &["questioning"],
        &["questionable"],
    ],
    range: 4..=10,
};

static WORD_QUC_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_QUC_CHILDREN),
    value: None,
};

pub static WORD_QUC_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("ikest")],
    values: &[&["quickest"]],
    range: 5..=5,
};

static WORD_QUA_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_QUA_CHILDREN),
    value: None,
};

pub static WORD_QUA_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ilfiers"),
        dictgen::InsensitiveStr::Ascii("ilfy"),
        dictgen::InsensitiveStr::Ascii("ilty"),
        dictgen::InsensitiveStr::Ascii("lfiiers"),
        dictgen::InsensitiveStr::Ascii("lifiaction"),
        dictgen::InsensitiveStr::Ascii("lifiactions"),
        dictgen::InsensitiveStr::Ascii("lificaiton"),
        dictgen::InsensitiveStr::Ascii("lificaitons"),
        dictgen::InsensitiveStr::Ascii("lificato"),
        dictgen::InsensitiveStr::Ascii("lificaton"),
        dictgen::InsensitiveStr::Ascii("lificatons"),
        dictgen::InsensitiveStr::Ascii("lifieds"),
        dictgen::InsensitiveStr::Ascii("lifierais"),
        dictgen::InsensitiveStr::Ascii("lifieres"),
        dictgen::InsensitiveStr::Ascii("lifiies"),
        dictgen::InsensitiveStr::Ascii("lifiing"),
        dictgen::InsensitiveStr::Ascii("lifikation"),
        dictgen::InsensitiveStr::Ascii("lifires"),
        dictgen::InsensitiveStr::Ascii("lifiy"),
        dictgen::InsensitiveStr::Ascii("lifyers"),
        dictgen::InsensitiveStr::Ascii("litying"),
        dictgen::InsensitiveStr::Ascii("ltitative"),
        dictgen::InsensitiveStr::Ascii("nitfy"),
        dictgen::InsensitiveStr::Ascii("nitites"),
        dictgen::InsensitiveStr::Ascii("ntaties"),
        dictgen::InsensitiveStr::Ascii("ntatitive"),
        dictgen::InsensitiveStr::Ascii("ntaty"),
        dictgen::InsensitiveStr::Ascii("ntifiy"),
        dictgen::InsensitiveStr::Ascii("ntitaive"),
        dictgen::InsensitiveStr::Ascii("ntitatve"),
        dictgen::InsensitiveStr::Ascii("ntite"),
        dictgen::InsensitiveStr::Ascii("ntitites"),
        dictgen::InsensitiveStr::Ascii("ntititive"),
        dictgen::InsensitiveStr::Ascii("ntitiy"),
        dictgen::InsensitiveStr::Ascii("ntitize"),
        dictgen::InsensitiveStr::Ascii("ntitties"),
        dictgen::InsensitiveStr::Ascii("ntitty"),
        dictgen::InsensitiveStr::Ascii("ntuum"),
        dictgen::InsensitiveStr::Ascii("rantaine"),
        dictgen::InsensitiveStr::Ascii("rante"),
        dictgen::InsensitiveStr::Ascii("rantena"),
        dictgen::InsensitiveStr::Ascii("rantene"),
        dictgen::InsensitiveStr::Ascii("rantenni"),
        dictgen::InsensitiveStr::Ascii("rantied"),
        dictgen::InsensitiveStr::Ascii("rintine"),
        dictgen::InsensitiveStr::Ascii("rterbackers"),
        dictgen::InsensitiveStr::Ascii("rterblack"),
        dictgen::InsensitiveStr::Ascii("rtercask"),
        dictgen::InsensitiveStr::Ascii("rtery"),
        dictgen::InsensitiveStr::Ascii("rtlery"),
        dictgen::InsensitiveStr::Ascii("runtine"),
    ],
    values: &[
        &["qualifiers"],
        &["qualify"],
        &["quality"],
        &["qualifiers"],
        &["qualification"],
        &["qualification"],
        &["qualifications"],
        &["qualifications"],
        &["qualification"],
        &["qualification"],
        &["qualifications"],
        &["qualifies"],
        &["qualifiers"],
        &["qualifiers"],
        &["qualifiers"],
        &["qualifying"],
        &["qualification"],
        &["qualifiers"],
        &["qualify"],
        &["qualifiers"],
        &["qualifying"],
        &["quantitative"],
        &["quantify"],
        &["quantities"],
        &["quantities"],
        &["quantitative"],
        &["quantity"],
        &["quantify"],
        &["quantitative"],
        &["quantitative"],
        &["quantities"],
        &["quantities"],
        &["quantitative"],
        &["quantity"],
        &["quantities"],
        &["quantities"],
        &["quantity"],
        &["quantum"],
        &["quarantine"],
        &["quarantine"],
        &["quarantine"],
        &["quarantine"],
        &["quarantine"],
        &["quarantine"],
        &["quarantine"],
        &["quarterbacks"],
        &["quarterback"],
        &["quarterbacks"],
        &["quarterly"],
        &["quarterly"],
        &["quarantine"],
    ],
    range: 4..=11,
};

static WORD_QT_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_QT_CHILDREN),
    value: None,
};

pub static WORD_QT_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("uie")],
    values: &[&["quite"]],
    range: 3..=3,
};

static WORD_QA_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_QA_CHILDREN),
    value: None,
};

pub static WORD_QA_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ulification"),
        dictgen::InsensitiveStr::Ascii("ulifications"),
        dictgen::InsensitiveStr::Ascii("ulifiers"),
        dictgen::InsensitiveStr::Ascii("ulifies"),
        dictgen::InsensitiveStr::Ascii("ulify"),
        dictgen::InsensitiveStr::Ascii("ulity"),
        dictgen::InsensitiveStr::Ascii("untity"),
        dictgen::InsensitiveStr::Ascii("untum"),
        dictgen::InsensitiveStr::Ascii("urterback"),
    ],
    values: &[
        &["qualification"],
        &["qualification"],
        &["qualifiers"],
        &["qualifies"],
        &["qualify"],
        &["quality"],
        &["quantity"],
        &["quantum"],
        &["quarterback"],
    ],
    range: 5..=12,
};

static WORD_P_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_P_CHILDREN),
    value: None,
};

static WORD_P_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    Some(&WORD_PA_NODE),
    Some(&WORD_PB_NODE),
    None,
    None,
    Some(&WORD_PE_NODE),
    None,
    None,
    Some(&WORD_PH_NODE),
    Some(&WORD_PI_NODE),
    None,
    Some(&WORD_PK_NODE),
    Some(&WORD_PL_NODE),
    None,
    Some(&WORD_PN_NODE),
    Some(&WORD_PO_NODE),
    Some(&WORD_PP_NODE),
    None,
    Some(&WORD_PR_NODE),
    Some(&WORD_PS_NODE),
    Some(&WORD_PT_NODE),
    Some(&WORD_PU_NODE),
    None,
    Some(&WORD_PW_NODE),
    None,
    Some(&WORD_PY_NODE),
    None,
];

static WORD_PY_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_PY_CHILDREN),
    value: None,
};

pub static WORD_PY_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("armid"),
        dictgen::InsensitiveStr::Ascii("ramidas"),
        dictgen::InsensitiveStr::Ascii("ramides"),
        dictgen::InsensitiveStr::Ascii("ramind"),
        dictgen::InsensitiveStr::Ascii("ramis"),
        dictgen::InsensitiveStr::Ascii("rimads"),
        dictgen::InsensitiveStr::Ascii("rmaid"),
        dictgen::InsensitiveStr::Ascii("rmaids"),
        dictgen::InsensitiveStr::Ascii("sched"),
        dictgen::InsensitiveStr::Ascii("schedelic"),
        dictgen::InsensitiveStr::Ascii("schedelics"),
        dictgen::InsensitiveStr::Ascii("schiatric"),
        dictgen::InsensitiveStr::Ascii("schiatrist"),
        dictgen::InsensitiveStr::Ascii("schiatrists"),
        dictgen::InsensitiveStr::Ascii("schological"),
        dictgen::InsensitiveStr::Ascii("schologically"),
        dictgen::InsensitiveStr::Ascii("schologist"),
        dictgen::InsensitiveStr::Ascii("schologists"),
        dictgen::InsensitiveStr::Ascii("schology"),
        dictgen::InsensitiveStr::Ascii("schopath"),
        dictgen::InsensitiveStr::Ascii("schopathic"),
        dictgen::InsensitiveStr::Ascii("schopaths"),
        dictgen::InsensitiveStr::Ascii("schosis"),
        dictgen::InsensitiveStr::Ascii("schotic"),
        dictgen::InsensitiveStr::Ascii("scic"),
    ],
    values: &[
        &["pyramid"],
        &["pyramids"],
        &["pyramids"],
        &["pyramid"],
        &["pyramids"],
        &["pyramids"],
        &["pyramid"],
        &["pyramids"],
        &["psyched"],
        &["psychedelic"],
        &["psychedelics"],
        &["psychiatric"],
        &["psychiatrist"],
        &["psychiatrists"],
        &["psychological"],
        &["psychologically"],
        &["psychologist"],
        &["psychologists"],
        &["psychology"],
        &["psychopath"],
        &["psychopathic"],
        &["psychopaths"],
        &["psychosis"],
        &["psychotic"],
        &["psychic"],
    ],
    range: 4..=13,
};

static WORD_PW_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_PW_CHILDREN),
    value: None,
};

pub static WORD_PW_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("oer")],
    values: &[&["power"]],
    range: 3..=3,
};

static WORD_PU_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_PU_CHILDREN),
    value: None,
};

static WORD_PU_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    Some(&WORD_PUA_NODE),
    Some(&WORD_PUB_NODE),
    Some(&WORD_PUC_NODE),
    None,
    None,
    None,
    None,
    Some(&WORD_PUH_NODE),
    Some(&WORD_PUI_NODE),
    None,
    None,
    Some(&WORD_PUL_NODE),
    Some(&WORD_PUM_NODE),
    Some(&WORD_PUN_NODE),
    None,
    Some(&WORD_PUP_NODE),
    None,
    Some(&WORD_PUR_NODE),
    Some(&WORD_PUS_NODE),
    Some(&WORD_PUT_NODE),
    None,
    None,
    None,
    None,
    None,
    None,
];

static WORD_PUT_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_PUT_CHILDREN),
    value: None,
};

pub static WORD_PUT_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("ing")],
    values: &[&["putting"]],
    range: 3..=3,
};

static WORD_PUS_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_PUS_CHILDREN),
    value: None,
};

pub static WORD_PUS_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("hpus"),
        dictgen::InsensitiveStr::Ascii("usading"),
    ],
    values: &[&["pushups"], &["persuading"]],
    range: 4..=7,
};

static WORD_PUR_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_PUR_CHILDREN),
    value: None,
};

pub static WORD_PUR_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("agtory"),
        dictgen::InsensitiveStr::Ascii("cahse"),
        dictgen::InsensitiveStr::Ascii("cahsed"),
        dictgen::InsensitiveStr::Ascii("cahses"),
        dictgen::InsensitiveStr::Ascii("chacing"),
        dictgen::InsensitiveStr::Ascii("chaseing"),
        dictgen::InsensitiveStr::Ascii("chashing"),
        dictgen::InsensitiveStr::Ascii("hcased"),
        dictgen::InsensitiveStr::Ascii("itannical"),
        dictgen::InsensitiveStr::Ascii("pendicular"),
        dictgen::InsensitiveStr::Ascii("petrators"),
        dictgen::InsensitiveStr::Ascii("petuating"),
        dictgen::InsensitiveStr::Ascii("polsion"),
        dictgen::InsensitiveStr::Ascii("posedly"),
        dictgen::InsensitiveStr::Ascii("posefuly"),
        dictgen::InsensitiveStr::Ascii("poselly"),
        dictgen::InsensitiveStr::Ascii("posley"),
        dictgen::InsensitiveStr::Ascii("potedly"),
        dictgen::InsensitiveStr::Ascii("pusefully"),
        dictgen::InsensitiveStr::Ascii("siut"),
        dictgen::InsensitiveStr::Ascii("suaded"),
        dictgen::InsensitiveStr::Ascii("suades"),
        dictgen::InsensitiveStr::Ascii("sude"),
        dictgen::InsensitiveStr::Ascii("used"),
    ],
    values: &[
        &["purgatory"],
        &["purchase"],
        &["purchased"],
        &["purchases"],
        &["purchasing"],
        &["purchasing"],
        &["purchasing"],
        &["purchased"],
        &["puritanical"],
        &["perpendicular"],
        &["perpetrators"],
        &["perpetuating"],
        &["propulsion"],
        &["purposely"],
        &["purposefully"],
        &["purposely"],
        &["purposely"],
        &["purportedly"],
        &["purposefully"],
        &["pursuit"],
        &["persuaded"],
        &["persuades"],
        &["pursued"],
        &["pursued"],
    ],
    range: 4..=10,
};

static WORD_PUP_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_PUP_CHILDREN),
    value: None,
};

pub static WORD_PUP_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("lications"),
        dictgen::InsensitiveStr::Ascii("lisher"),
    ],
    values: &[&["publications"], &["publisher"]],
    range: 6..=9,
};

static WORD_PUN_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_PUN_CHILDREN),
    value: None,
};

pub static WORD_PUN_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ctiation"),
        dictgen::InsensitiveStr::Ascii("cutation"),
        dictgen::InsensitiveStr::Ascii("ihsment"),
        dictgen::InsensitiveStr::Ascii("ishemnt"),
        dictgen::InsensitiveStr::Ascii("ishible"),
        dictgen::InsensitiveStr::Ascii("ishmet"),
        dictgen::InsensitiveStr::Ascii("ishmnet"),
        dictgen::InsensitiveStr::Ascii("ishs"),
        dictgen::InsensitiveStr::Ascii("issable"),
        dictgen::InsensitiveStr::Ascii("isse"),
        dictgen::InsensitiveStr::Ascii("shier"),
        dictgen::InsensitiveStr::Ascii("shiments"),
        dictgen::InsensitiveStr::Ascii("sihable"),
        dictgen::InsensitiveStr::Ascii("siher"),
        dictgen::InsensitiveStr::Ascii("sihes"),
        dictgen::InsensitiveStr::Ascii("sihments"),
    ],
    values: &[
        &["punctuation"],
        &["punctuation"],
        &["punishments"],
        &["punishments"],
        &["punishable"],
        &["punishments"],
        &["punishments"],
        &["punishes"],
        &["punishable"],
        &["punishes"],
        &["punisher"],
        &["punishments"],
        &["punishable"],
        &["punisher"],
        &["punishes"],
        &["punishments"],
    ],
    range: 4..=8,
};

static WORD_PUM_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_PUM_CHILDREN),
    value: None,
};

pub static WORD_PUM_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("kin"),
        dictgen::InsensitiveStr::Ascii("kpins"),
        dictgen::InsensitiveStr::Ascii("pinks"),
        dictgen::InsensitiveStr::Ascii("pknis"),
    ],
    values: &[&["pumpkin"], &["pumpkins"], &["pumpkins"], &["pumpkins"]],
    range: 3..=5,
};

static WORD_PUL_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_PUL_CHILDREN),
    value: None,
};

pub static WORD_PUL_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("isher")],
    values: &[&["publisher"]],
    range: 5..=5,
};

static WORD_PUI_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_PUI_CHILDREN),
    value: None,
};

pub static WORD_PUI_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("nsher")],
    values: &[&["punisher"]],
    range: 5..=5,
};

static WORD_PUH_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_PUH_CHILDREN),
    value: None,
};

pub static WORD_PUH_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("sups")],
    values: &[&["pushups"]],
    range: 4..=4,
};

static WORD_PUC_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_PUC_CHILDREN),
    value: None,
};

pub static WORD_PUC_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("hasing"),
        dictgen::InsensitiveStr::Ascii("ini"),
    ],
    values: &[&["purchasing"], &["puccini"]],
    range: 3..=6,
};

static WORD_PUB_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_PUB_CHILDREN),
    value: None,
};

pub static WORD_PUB_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ilsher"),
        dictgen::InsensitiveStr::Ascii("isher"),
        dictgen::InsensitiveStr::Ascii("liaher"),
        dictgen::InsensitiveStr::Ascii("licaly"),
        dictgen::InsensitiveStr::Ascii("licani"),
        dictgen::InsensitiveStr::Ascii("licher"),
        dictgen::InsensitiveStr::Ascii("licitan"),
        dictgen::InsensitiveStr::Ascii("liclly"),
        dictgen::InsensitiveStr::Ascii("licy"),
        dictgen::InsensitiveStr::Ascii("lihser"),
        dictgen::InsensitiveStr::Ascii("likation"),
        dictgen::InsensitiveStr::Ascii("lisehr"),
        dictgen::InsensitiveStr::Ascii("liser"),
        dictgen::InsensitiveStr::Ascii("lisger"),
        dictgen::InsensitiveStr::Ascii("lisheed"),
        dictgen::InsensitiveStr::Ascii("lisherr"),
        dictgen::InsensitiveStr::Ascii("lishher"),
        dictgen::InsensitiveStr::Ascii("lishor"),
        dictgen::InsensitiveStr::Ascii("lishre"),
        dictgen::InsensitiveStr::Ascii("lissher"),
        dictgen::InsensitiveStr::Ascii("llisher"),
        dictgen::InsensitiveStr::Ascii("lsih"),
        dictgen::InsensitiveStr::Ascii("lsiher"),
        dictgen::InsensitiveStr::Ascii("lusher"),
    ],
    values: &[
        &["publisher"],
        &["publisher"],
        &["publisher"],
        &["publicly"],
        &["publication"],
        &["publisher"],
        &["publication"],
        &["publicly"],
        &["publicly"],
        &["publisher"],
        &["publication"],
        &["publisher"],
        &["publisher"],
        &["publisher"],
        &["published"],
        &["publisher"],
        &["publisher"],
        &["publisher"],
        &["publisher"],
        &["publisher"],
        &["publisher"],
        &["publish"],
        &["publisher"],
        &["publisher"],
    ],
    range: 4..=8,
};

static WORD_PUA_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_PUA_CHILDREN),
    value: None,
};

pub static WORD_PUA_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("sing")],
    values: &[&["pausing"]],
    range: 4..=4,
};

static WORD_PT_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_PT_CHILDREN),
    value: None,
};

pub static WORD_PT_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("iched"),
        dictgen::InsensitiveStr::Ascii("icher"),
        dictgen::InsensitiveStr::Ascii("ichers"),
        dictgen::InsensitiveStr::Ascii("ichfork"),
        dictgen::InsensitiveStr::Ascii("ichforks"),
    ],
    values: &[
        &["pitched"],
        &["pitcher"],
        &["pitchers"],
        &["pitchfork"],
        &["pitchforks"],
    ],
    range: 5..=8,
};

static WORD_PS_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_PS_CHILDREN),
    value: None,
};

static WORD_PS_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    None,
    None,
    Some(&WORD_PSC_NODE),
    None,
    Some(&WORD_PSE_NODE),
    None,
    None,
    Some(&WORD_PSH_NODE),
    Some(&WORD_PSI_NODE),
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    Some(&WORD_PSU_NODE),
    None,
    None,
    None,
    Some(&WORD_PSY_NODE),
    None,
];

static WORD_PSY_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_PSY_CHILDREN),
    value: None,
};

pub static WORD_PSY_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("chaitric"),
        dictgen::InsensitiveStr::Ascii("chaitrist"),
        dictgen::InsensitiveStr::Ascii("chaitrists"),
        dictgen::InsensitiveStr::Ascii("chedelicious"),
        dictgen::InsensitiveStr::Ascii("chedelicness"),
        dictgen::InsensitiveStr::Ascii("chedellic"),
        dictgen::InsensitiveStr::Ascii("chedellics"),
        dictgen::InsensitiveStr::Ascii("chedilic"),
        dictgen::InsensitiveStr::Ascii("chedilics"),
        dictgen::InsensitiveStr::Ascii("chedleic"),
        dictgen::InsensitiveStr::Ascii("chedlic"),
        dictgen::InsensitiveStr::Ascii("chemedics"),
        dictgen::InsensitiveStr::Ascii("chiatic"),
        dictgen::InsensitiveStr::Ascii("chiatirst"),
        dictgen::InsensitiveStr::Ascii("chiatist"),
        dictgen::InsensitiveStr::Ascii("chiatrics"),
        dictgen::InsensitiveStr::Ascii("chiatrict"),
        dictgen::InsensitiveStr::Ascii("chiatrisch"),
        dictgen::InsensitiveStr::Ascii("chiatrits"),
        dictgen::InsensitiveStr::Ascii("chidelic"),
        dictgen::InsensitiveStr::Ascii("chistrist"),
        dictgen::InsensitiveStr::Ascii("chodelic"),
        dictgen::InsensitiveStr::Ascii("chodelics"),
        dictgen::InsensitiveStr::Ascii("choligical"),
        dictgen::InsensitiveStr::Ascii("choligically"),
        dictgen::InsensitiveStr::Ascii("choligist"),
        dictgen::InsensitiveStr::Ascii("choligists"),
        dictgen::InsensitiveStr::Ascii("chologial"),
        dictgen::InsensitiveStr::Ascii("chologicaly"),
        dictgen::InsensitiveStr::Ascii("chologits"),
        dictgen::InsensitiveStr::Ascii("chologycal"),
        dictgen::InsensitiveStr::Ascii("chologyst"),
        dictgen::InsensitiveStr::Ascii("chologysts"),
        dictgen::InsensitiveStr::Ascii("choloog"),
        dictgen::InsensitiveStr::Ascii("chopaat"),
        dictgen::InsensitiveStr::Ascii("chopants"),
        dictgen::InsensitiveStr::Ascii("chopatch"),
        dictgen::InsensitiveStr::Ascii("chopathes"),
        dictgen::InsensitiveStr::Ascii("chopathische"),
        dictgen::InsensitiveStr::Ascii("chopatic"),
        dictgen::InsensitiveStr::Ascii("chopats"),
        dictgen::InsensitiveStr::Ascii("chotisch"),
        dictgen::InsensitiveStr::Ascii("chriatic"),
        dictgen::InsensitiveStr::Ascii("chyatrist"),
        dictgen::InsensitiveStr::Ascii("chyatrists"),
        dictgen::InsensitiveStr::Ascii("cology"),
        dictgen::InsensitiveStr::Ascii("cothic"),
        dictgen::InsensitiveStr::Ascii("hic"),
        dictgen::InsensitiveStr::Ascii("siological"),
    ],
    values: &[
        &["psychiatric"],
        &["psychiatrist"],
        &["psychiatrists"],
        &["psychedelics"],
        &["psychedelics"],
        &["psychedelic"],
        &["psychedelics"],
        &["psychedelic"],
        &["psychedelics"],
        &["psychedelics"],
        &["psychedelic"],
        &["psychedelics"],
        &["psychiatric"],
        &["psychiatrists"],
        &["psychiatrist"],
        &["psychiatrist"],
        &["psychiatrist"],
        &["psychiatric"],
        &["psychiatrists"],
        &["psychedelic"],
        &["psychiatrist"],
        &["psychedelic"],
        &["psychedelics"],
        &["psychological"],
        &["psychologically"],
        &["psychologist"],
        &["psychologists"],
        &["psychological"],
        &["psychologically"],
        &["psychologists"],
        &["psychologically"],
        &["psychologist"],
        &["psychologists"],
        &["psychology"],
        &["psychopath"],
        &["psychopaths"],
        &["psychopath"],
        &["psychopaths"],
        &["psychopathic"],
        &["psychopathic"],
        &["psychopaths"],
        &["psychotic"],
        &["psychiatric"],
        &["psychiatrist"],
        &["psychiatrists"],
        &["psychology"],
        &["psychotic"],
        &["psychic"],
        &["physiological"],
    ],
    range: 3..=12,
};

static WORD_PSU_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_PSU_CHILDREN),
    value: None,
};

pub static WORD_PSU_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("edo")],
    values: &[&["pseudo"]],
    range: 3..=3,
};

static WORD_PSI_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_PSI_CHILDREN),
    value: None,
};

pub static WORD_PSI_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("chological"),
        dictgen::InsensitiveStr::Ascii("chologically"),
        dictgen::InsensitiveStr::Ascii("chologist"),
    ],
    values: &[&["psychological"], &["psychologically"], &["psychologist"]],
    range: 9..=12,
};

static WORD_PSH_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_PSH_CHILDREN),
    value: None,
};

pub static WORD_PSH_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("yciatric"),
        dictgen::InsensitiveStr::Ascii("yciatrist"),
        dictgen::InsensitiveStr::Ascii("ycological"),
        dictgen::InsensitiveStr::Ascii("ycologically"),
        dictgen::InsensitiveStr::Ascii("ycologist"),
        dictgen::InsensitiveStr::Ascii("ycologists"),
        dictgen::InsensitiveStr::Ascii("ycology"),
        dictgen::InsensitiveStr::Ascii("ycopath"),
        dictgen::InsensitiveStr::Ascii("ycopathic"),
        dictgen::InsensitiveStr::Ascii("ycopaths"),
        dictgen::InsensitiveStr::Ascii("ycosis"),
        dictgen::InsensitiveStr::Ascii("ycotic"),
    ],
    values: &[
        &["psychiatric"],
        &["psychiatrist"],
        &["psychological"],
        &["psychologically"],
        &["psychologist"],
        &["psychologists"],
        &["psychology"],
        &["psychopath"],
        &["psychopathic"],
        &["psychopaths"],
        &["psychosis"],
        &["psychotic"],
    ],
    range: 6..=12,
};

static WORD_PSE_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_PSE_CHILDREN),
    value: None,
};

pub static WORD_PSE_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("udononymous"),
        dictgen::InsensitiveStr::Ascii("udonyn"),
    ],
    values: &[&["pseudonymous"], &["pseudonym"]],
    range: 6..=11,
};

static WORD_PSC_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_PSC_CHILDREN),
    value: None,
};

pub static WORD_PSC_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("yhed"),
        dictgen::InsensitiveStr::Ascii("yhedelic"),
        dictgen::InsensitiveStr::Ascii("yhiatric"),
        dictgen::InsensitiveStr::Ascii("yhiatrists"),
        dictgen::InsensitiveStr::Ascii("yhological"),
        dictgen::InsensitiveStr::Ascii("yhologically"),
        dictgen::InsensitiveStr::Ascii("yhologist"),
        dictgen::InsensitiveStr::Ascii("yhologists"),
        dictgen::InsensitiveStr::Ascii("yhology"),
        dictgen::InsensitiveStr::Ascii("yhopath"),
        dictgen::InsensitiveStr::Ascii("yhopathic"),
        dictgen::InsensitiveStr::Ascii("yhopaths"),
        dictgen::InsensitiveStr::Ascii("yhotic"),
    ],
    values: &[
        &["psyched"],
        &["psychedelic"],
        &["psychiatric"],
        &["psychiatrists"],
        &["psychological"],
        &["psychologically"],
        &["psychologist"],
        &["psychologists"],
        &["psychology"],
        &["psychopath"],
        &["psychopathic"],
        &["psychopaths"],
        &["psychotic"],
    ],
    range: 4..=12,
};

static WORD_PR_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_PR_CHILDREN),
    value: None,
};

static WORD_PR_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    Some(&WORD_PRA_NODE),
    None,
    Some(&WORD_PRC_NODE),
    None,
    Some(&WORD_PRE_NODE),
    None,
    None,
    None,
    Some(&WORD_PRI_NODE),
    None,
    None,
    None,
    None,
    None,
    Some(&WORD_PRO_NODE),
    None,
    None,
    None,
    None,
    None,
    Some(&WORD_PRU_NODE),
    None,
    None,
    None,
    Some(&WORD_PRY_NODE),
    None,
];

static WORD_PRY_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_PRY_CHILDREN),
    value: None,
};

pub static WORD_PRY_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("amid"),
        dictgen::InsensitiveStr::Ascii("amids"),
    ],
    values: &[&["pyramid"], &["pyramids"]],
    range: 4..=5,
};

static WORD_PRU_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_PRU_CHILDREN),
    value: None,
};

pub static WORD_PRU_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("chase"),
        dictgen::InsensitiveStr::Ascii("chased"),
        dictgen::InsensitiveStr::Ascii("chases"),
        dictgen::InsensitiveStr::Ascii("gatory"),
        dictgen::InsensitiveStr::Ascii("posefully"),
        dictgen::InsensitiveStr::Ascii("posely"),
        dictgen::InsensitiveStr::Ascii("suit"),
    ],
    values: &[
        &["purchase"],
        &["purchased"],
        &["purchases"],
        &["purgatory"],
        &["purposefully"],
        &["purposely"],
        &["pursuit"],
    ],
    range: 4..=9,
};

static WORD_PRO_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_PRO_CHILDREN),
    value: None,
};

static WORD_PRO_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    Some(&WORD_PROA_NODE),
    Some(&WORD_PROB_NODE),
    Some(&WORD_PROC_NODE),
    Some(&WORD_PROD_NODE),
    None,
    Some(&WORD_PROF_NODE),
    Some(&WORD_PROG_NODE),
    Some(&WORD_PROH_NODE),
    None,
    Some(&WORD_PROJ_NODE),
    Some(&WORD_PROK_NODE),
    Some(&WORD_PROL_NODE),
    Some(&WORD_PROM_NODE),
    Some(&WORD_PRON_NODE),
    Some(&WORD_PROO_NODE),
    Some(&WORD_PROP_NODE),
    None,
    None,
    Some(&WORD_PROS_NODE),
    Some(&WORD_PROT_NODE),
    Some(&WORD_PROU_NODE),
    Some(&WORD_PROV_NODE),
    None,
    Some(&WORD_PROX_NODE),
    None,
    None,
];

static WORD_PROX_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_PROX_CHILDREN),
    value: None,
};

pub static WORD_PROX_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("imty")],
    values: &[&["proximity"]],
    range: 4..=4,
};

static WORD_PROV_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_PROV_CHILDREN),
    value: None,
};

pub static WORD_PROV_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("acative"),
        dictgen::InsensitiveStr::Ascii("acotive"),
        dictgen::InsensitiveStr::Ascii("ded"),
        dictgen::InsensitiveStr::Ascii("encial"),
        dictgen::InsensitiveStr::Ascii("erai"),
        dictgen::InsensitiveStr::Ascii("eribal"),
        dictgen::InsensitiveStr::Ascii("ervial"),
        dictgen::InsensitiveStr::Ascii("icative"),
        dictgen::InsensitiveStr::Ascii("icial"),
        dictgen::InsensitiveStr::Ascii("idance"),
        dictgen::InsensitiveStr::Ascii("idee"),
        dictgen::InsensitiveStr::Ascii("idencie"),
        dictgen::InsensitiveStr::Ascii("idince"),
        dictgen::InsensitiveStr::Ascii("inciaal"),
        dictgen::InsensitiveStr::Ascii("inciae"),
        dictgen::InsensitiveStr::Ascii("incie"),
        dictgen::InsensitiveStr::Ascii("incies"),
        dictgen::InsensitiveStr::Ascii("incija"),
        dictgen::InsensitiveStr::Ascii("ine"),
        dictgen::InsensitiveStr::Ascii("inence"),
        dictgen::InsensitiveStr::Ascii("inical"),
        dictgen::InsensitiveStr::Ascii("inicial"),
        dictgen::InsensitiveStr::Ascii("intial"),
        dictgen::InsensitiveStr::Ascii("invial"),
        dictgen::InsensitiveStr::Ascii("isiones"),
        dictgen::InsensitiveStr::Ascii("isios"),
        dictgen::InsensitiveStr::Ascii("isiosn"),
        dictgen::InsensitiveStr::Ascii("isonal"),
        dictgen::InsensitiveStr::Ascii("oactive"),
        dictgen::InsensitiveStr::Ascii("ocatie"),
        dictgen::InsensitiveStr::Ascii("ocatief"),
        dictgen::InsensitiveStr::Ascii("ocativley"),
        dictgen::InsensitiveStr::Ascii("ocitive"),
        dictgen::InsensitiveStr::Ascii("ocotive"),
        dictgen::InsensitiveStr::Ascii("okative"),
    ],
    values: &[
        &["provocative"],
        &["provocative"],
        &["provided"],
        &["provincial"],
        &["proverbial"],
        &["proverbial"],
        &["proverbial"],
        &["provocative"],
        &["provincial"],
        &["providence"],
        &["providence"],
        &["providence"],
        &["providence"],
        &["provincial"],
        &["province"],
        &["province"],
        &["province"],
        &["provincial"],
        &["province"],
        &["providence"],
        &["provincial"],
        &["provincial"],
        &["provincial"],
        &["provincial"],
        &["provisions"],
        &["provisions"],
        &["provision"],
        &["provisional"],
        &["provocative"],
        &["provocative"],
        &["provocative"],
        &["provocative"],
        &["provocative"],
        &["provocative"],
        &["provocative"],
    ],
    range: 3..=9,
};

static WORD_PROU_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_PROU_CHILDREN),
    value: None,
};

pub static WORD_PROU_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ldy"),
        dictgen::InsensitiveStr::Ascii("ncements"),
    ],
    values: &[&["proudly"], &["pronouncements"]],
    range: 3..=8,
};

static WORD_PROT_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_PROT_CHILDREN),
    value: None,
};

static WORD_PROT_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    Some(&WORD_PROTA_NODE),
    None,
    None,
    None,
    Some(&WORD_PROTE_NODE),
    Some(&WORD_PROTF_NODE),
    None,
    Some(&WORD_PROTH_NODE),
    Some(&WORD_PROTI_NODE),
    None,
    None,
    None,
    None,
    None,
    Some(&WORD_PROTO_NODE),
    None,
    None,
    Some(&WORD_PROTR_NODE),
    None,
    None,
    Some(&WORD_PROTU_NODE),
    None,
    None,
    None,
    None,
    None,
];

static WORD_PROTU_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_PROTU_CHILDREN),
    value: None,
};

pub static WORD_PROTU_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("gal"),
        dictgen::InsensitiveStr::Ascii("guese"),
    ],
    values: &[&["portugal"], &["portuguese"]],
    range: 3..=5,
};

static WORD_PROTR_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_PROTR_CHILDREN),
    value: None,
};

pub static WORD_PROTR_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ait"),
        dictgen::InsensitiveStr::Ascii("aits"),
        dictgen::InsensitiveStr::Ascii("ay"),
        dictgen::InsensitiveStr::Ascii("ayal"),
        dictgen::InsensitiveStr::Ascii("ayed"),
        dictgen::InsensitiveStr::Ascii("aying"),
        dictgen::InsensitiveStr::Ascii("ays"),
        dictgen::InsensitiveStr::Ascii("uberance"),
        dictgen::InsensitiveStr::Ascii("uberances"),
    ],
    values: &[
        &["portrait"],
        &["portraits"],
        &["portray"],
        &["portrayal"],
        &["portrayed"],
        &["portraying"],
        &["portrays"],
        &["protuberance"],
        &["protuberances"],
    ],
    range: 2..=9,
};

static WORD_PROTO_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_PROTO_CHILDREN),
    value: None,
};

pub static WORD_PROTO_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("cal"),
        dictgen::InsensitiveStr::Ascii("cl"),
        dictgen::InsensitiveStr::Ascii("coles"),
        dictgen::InsensitiveStr::Ascii("colls"),
        dictgen::InsensitiveStr::Ascii("colos"),
        dictgen::InsensitiveStr::Ascii("cool"),
        dictgen::InsensitiveStr::Ascii("ganist"),
        dictgen::InsensitiveStr::Ascii("ganists"),
        dictgen::InsensitiveStr::Ascii("gonist"),
        dictgen::InsensitiveStr::Ascii("hypes"),
        dictgen::InsensitiveStr::Ascii("stant"),
        dictgen::InsensitiveStr::Ascii("stants"),
        dictgen::InsensitiveStr::Ascii("tipes"),
        dictgen::InsensitiveStr::Ascii("totype"),
        dictgen::InsensitiveStr::Ascii("tpye"),
        dictgen::InsensitiveStr::Ascii("tpyes"),
        dictgen::InsensitiveStr::Ascii("tye"),
        dictgen::InsensitiveStr::Ascii("typs"),
    ],
    values: &[
        &["protocol"],
        &["protocol"],
        &["protocols"],
        &["protocols"],
        &["protocols"],
        &["protocol"],
        &["protagonist"],
        &["protagonists"],
        &["protagonist"],
        &["prototypes"],
        &["protestant"],
        &["protestants"],
        &["prototypes"],
        &["prototype"],
        &["prototype"],
        &["prototypes"],
        &["prototype"],
        &["prototypes"],
    ],
    range: 2..=7,
};

static WORD_PROTI_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_PROTI_CHILDREN),
    value: None,
};

pub static WORD_PROTI_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ens"),
        dictgen::InsensitiveStr::Ascii("nes"),
        dictgen::InsensitiveStr::Ascii("stant"),
        dictgen::InsensitiveStr::Ascii("stants"),
    ],
    values: &[
        &["proteins"],
        &["proteins"],
        &["protestant"],
        &["protestants"],
    ],
    range: 3..=6,
};

static WORD_PROTH_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_PROTH_CHILDREN),
    value: None,
};

pub static WORD_PROTH_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("setic")],
    values: &[&["prosthetic"]],
    range: 5..=5,
};

static WORD_PROTF_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_PROTF_CHILDREN),
    value: None,
};

pub static WORD_PROTF_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("olio")],
    values: &[&["portfolio"]],
    range: 4..=4,
};

static WORD_PROTE_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_PROTE_CHILDREN),
    value: None,
};

pub static WORD_PROTE_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ccion"),
        dictgen::InsensitiveStr::Ascii("citon"),
        dictgen::InsensitiveStr::Ascii("cs"),
        dictgen::InsensitiveStr::Ascii("cte"),
        dictgen::InsensitiveStr::Ascii("ctes"),
        dictgen::InsensitiveStr::Ascii("ctice"),
        dictgen::InsensitiveStr::Ascii("ctie"),
        dictgen::InsensitiveStr::Ascii("ctiei"),
        dictgen::InsensitiveStr::Ascii("ctings"),
        dictgen::InsensitiveStr::Ascii("ctoin"),
        dictgen::InsensitiveStr::Ascii("ctons"),
        dictgen::InsensitiveStr::Ascii("ctoras"),
        dictgen::InsensitiveStr::Ascii("ctores"),
        dictgen::InsensitiveStr::Ascii("ctos"),
        dictgen::InsensitiveStr::Ascii("ctron"),
        dictgen::InsensitiveStr::Ascii("ctrons"),
        dictgen::InsensitiveStr::Ascii("inas"),
        dictgen::InsensitiveStr::Ascii("ines"),
        dictgen::InsensitiveStr::Ascii("lariat"),
        dictgen::InsensitiveStr::Ascii("ss"),
        dictgen::InsensitiveStr::Ascii("stans"),
        dictgen::InsensitiveStr::Ascii("stantes"),
        dictgen::InsensitiveStr::Ascii("stantisk"),
        dictgen::InsensitiveStr::Ascii("stare"),
        dictgen::InsensitiveStr::Ascii("stas"),
        dictgen::InsensitiveStr::Ascii("stat"),
        dictgen::InsensitiveStr::Ascii("stato"),
        dictgen::InsensitiveStr::Ascii("stent"),
        dictgen::InsensitiveStr::Ascii("stents"),
        dictgen::InsensitiveStr::Ascii("stes"),
        dictgen::InsensitiveStr::Ascii("stina"),
        dictgen::InsensitiveStr::Ascii("stos"),
    ],
    values: &[
        &["protection"],
        &["protections"],
        &["protects"],
        &["protective"],
        &["protects"],
        &["protective"],
        &["protective"],
        &["protective"],
        &["protections"],
        &["protections"],
        &["protectors"],
        &["protectors"],
        &["protectors"],
        &["protectors"],
        &["protection"],
        &["protections"],
        &["proteins"],
        &["proteins"],
        &["proletariat"],
        &["protests"],
        &["protests"],
        &["protestants"],
        &["protestants"],
        &["protesters"],
        &["protests"],
        &["protestant"],
        &["protestant"],
        &["protestant"],
        &["protestants"],
        &["protests"],
        &["protestant"],
        &["protests"],
    ],
    range: 2..=8,
};

static WORD_PROTA_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_PROTA_CHILDREN),
    value: None,
};

pub static WORD_PROTA_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("bility"),
        dictgen::InsensitiveStr::Ascii("ble"),
        dictgen::InsensitiveStr::Ascii("ganist"),
        dictgen::InsensitiveStr::Ascii("ganists"),
        dictgen::InsensitiveStr::Ascii("ginist"),
        dictgen::InsensitiveStr::Ascii("ginists"),
        dictgen::InsensitiveStr::Ascii("ginst"),
        dictgen::InsensitiveStr::Ascii("gnoist"),
        dictgen::InsensitiveStr::Ascii("gnoists"),
        dictgen::InsensitiveStr::Ascii("goinst"),
        dictgen::InsensitiveStr::Ascii("gonistas"),
        dictgen::InsensitiveStr::Ascii("gonistes"),
        dictgen::InsensitiveStr::Ascii("gonits"),
        dictgen::InsensitiveStr::Ascii("gonsit"),
        dictgen::InsensitiveStr::Ascii("ls"),
        dictgen::InsensitiveStr::Ascii("stant"),
    ],
    values: &[
        &["portability"],
        &["portable"],
        &["protagonist"],
        &["protagonists"],
        &["protagonist"],
        &["protagonists"],
        &["protagonist"],
        &["protagonist"],
        &["protagonists"],
        &["protagonists"],
        &["protagonists"],
        &["protagonists"],
        &["protagonists"],
        &["protagonists"],
        &["portals"],
        &["protestant"],
    ],
    range: 2..=8,
};

static WORD_PROS_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_PROS_CHILDREN),
    value: None,
};

pub static WORD_PROS_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("cratination"),
        dictgen::InsensitiveStr::Ascii("ectued"),
        dictgen::InsensitiveStr::Ascii("ectuion"),
        dictgen::InsensitiveStr::Ascii("ectuor"),
        dictgen::InsensitiveStr::Ascii("ectuors"),
        dictgen::InsensitiveStr::Ascii("ecuter"),
        dictgen::InsensitiveStr::Ascii("ecuters"),
        dictgen::InsensitiveStr::Ascii("ecutie"),
        dictgen::InsensitiveStr::Ascii("eletyzing"),
        dictgen::InsensitiveStr::Ascii("epct"),
        dictgen::InsensitiveStr::Ascii("icuted"),
        dictgen::InsensitiveStr::Ascii("icution"),
        dictgen::InsensitiveStr::Ascii("icutor"),
        dictgen::InsensitiveStr::Ascii("ocuted"),
        dictgen::InsensitiveStr::Ascii("ocution"),
        dictgen::InsensitiveStr::Ascii("parity"),
        dictgen::InsensitiveStr::Ascii("pectos"),
        dictgen::InsensitiveStr::Ascii("perety"),
        dictgen::InsensitiveStr::Ascii("perious"),
        dictgen::InsensitiveStr::Ascii("peros"),
        dictgen::InsensitiveStr::Ascii("pertity"),
        dictgen::InsensitiveStr::Ascii("pertiy"),
        dictgen::InsensitiveStr::Ascii("pettive"),
        dictgen::InsensitiveStr::Ascii("phetic"),
        dictgen::InsensitiveStr::Ascii("porous"),
        dictgen::InsensitiveStr::Ascii("tehtic"),
        dictgen::InsensitiveStr::Ascii("terity"),
        dictgen::InsensitiveStr::Ascii("tethic"),
        dictgen::InsensitiveStr::Ascii("tethics"),
        dictgen::InsensitiveStr::Ascii("tetution"),
        dictgen::InsensitiveStr::Ascii("thethic"),
        dictgen::InsensitiveStr::Ascii("tite"),
        dictgen::InsensitiveStr::Ascii("titite"),
        dictgen::InsensitiveStr::Ascii("titites"),
        dictgen::InsensitiveStr::Ascii("titition"),
        dictgen::InsensitiveStr::Ascii("titiute"),
        dictgen::InsensitiveStr::Ascii("tituate"),
        dictgen::InsensitiveStr::Ascii("titucion"),
        dictgen::InsensitiveStr::Ascii("titude"),
        dictgen::InsensitiveStr::Ascii("titudes"),
        dictgen::InsensitiveStr::Ascii("titue"),
        dictgen::InsensitiveStr::Ascii("tituee"),
        dictgen::InsensitiveStr::Ascii("tituees"),
        dictgen::InsensitiveStr::Ascii("tituer"),
        dictgen::InsensitiveStr::Ascii("titues"),
        dictgen::InsensitiveStr::Ascii("tituion"),
        dictgen::InsensitiveStr::Ascii("tituiton"),
        dictgen::InsensitiveStr::Ascii("titure"),
        dictgen::InsensitiveStr::Ascii("titures"),
        dictgen::InsensitiveStr::Ascii("titutas"),
        dictgen::InsensitiveStr::Ascii("titutie"),
        dictgen::InsensitiveStr::Ascii("titutiei"),
        dictgen::InsensitiveStr::Ascii("titutin"),
        dictgen::InsensitiveStr::Ascii("titutke"),
        dictgen::InsensitiveStr::Ascii("tituto"),
        dictgen::InsensitiveStr::Ascii("tituton"),
        dictgen::InsensitiveStr::Ascii("titutos"),
        dictgen::InsensitiveStr::Ascii("tituye"),
    ],
    values: &[
        &["procrastination"],
        &["prosecuted"],
        &["prosecution"],
        &["prosecutor"],
        &["prosecutors"],
        &["prosecutor"],
        &["prosecutors"],
        &["prosecuted"],
        &["proselytizing"],
        &["prospect"],
        &["prosecuted"],
        &["prosecution"],
        &["prosecutor"],
        &["prosecuted"],
        &["prosecution"],
        &["prosperity"],
        &["prospects"],
        &["prosperity"],
        &["prosperous"],
        &["prosperous"],
        &["prosperity"],
        &["prosperity"],
        &["prospective"],
        &["prosthetic"],
        &["prosperous"],
        &["prosthetic"],
        &["prosperity"],
        &["prosthetic"],
        &["prosthetic"],
        &["prostitution"],
        &["prosthetic"],
        &["prostitute"],
        &["prostitute"],
        &["prostitutes"],
        &["prostitution"],
        &["prostitute"],
        &["prostitute"],
        &["prostitution"],
        &["prostitute"],
        &["prostitutes"],
        &["prostitute"],
        &["prostitute"],
        &["prostitutes"],
        &["prostitute"],
        &["prostitutes"],
        &["prostitution"],
        &["prostitution"],
        &["prostitute"],
        &["prostitutes"],
        &["prostitutes"],
        &["prostitute"],
        &["prostitute"],
        &["prostitution"],
        &["prostitutes"],
        &["prostitution"],
        &["prostitution"],
        &["prostitutes"],
        &["prostitute"],
    ],
    range: 4..=11,
};

static WORD_PROP_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_PROP_CHILDREN),
    value: None,
};

static WORD_PROP_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    Some(&WORD_PROPA_NODE),
    None,
    None,
    None,
    Some(&WORD_PROPE_NODE),
    None,
    None,
    Some(&WORD_PROPH_NODE),
    Some(&WORD_PROPI_NODE),
    None,
    None,
    Some(&WORD_PROPL_NODE),
    Some(&WORD_PROPM_NODE),
    None,
    Some(&WORD_PROPO_NODE),
    Some(&WORD_PROPP_NODE),
    None,
    Some(&WORD_PROPR_NODE),
    Some(&WORD_PROPS_NODE),
    None,
    Some(&WORD_PROPU_NODE),
    None,
    None,
    None,
    None,
    None,
];

static WORD_PROPU_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_PROPU_CHILDREN),
    value: None,
};

pub static WORD_PROPU_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("laios"),
        dictgen::InsensitiveStr::Ascii("lsing"),
        dictgen::InsensitiveStr::Ascii("lstion"),
        dictgen::InsensitiveStr::Ascii("ltion"),
        dictgen::InsensitiveStr::Ascii("slion"),
    ],
    values: &[
        &["propulsion"],
        &["propulsion"],
        &["propulsion"],
        &["propulsion"],
        &["propulsion"],
    ],
    range: 5..=6,
};

static WORD_PROPS_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_PROPS_CHILDREN),
    value: None,
};

pub static WORD_PROPS_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ect"),
        dictgen::InsensitiveStr::Ascii("ective"),
        dictgen::InsensitiveStr::Ascii("ects"),
        dictgen::InsensitiveStr::Ascii("erity"),
        dictgen::InsensitiveStr::Ascii("erous"),
    ],
    values: &[
        &["prospect"],
        &["prospective"],
        &["prospects"],
        &["prosperity"],
        &["prosperous"],
    ],
    range: 3..=6,
};

static WORD_PROPR_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_PROPR_CHILDREN),
    value: None,
};

pub static WORD_PROPR_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("eitary"),
        dictgen::InsensitiveStr::Ascii("ety"),
        dictgen::InsensitiveStr::Ascii("iatary"),
        dictgen::InsensitiveStr::Ascii("iatery"),
        dictgen::InsensitiveStr::Ascii("iatory"),
        dictgen::InsensitiveStr::Ascii("ietery"),
        dictgen::InsensitiveStr::Ascii("ietory"),
        dictgen::InsensitiveStr::Ascii("ietry"),
        dictgen::InsensitiveStr::Ascii("iotary"),
        dictgen::InsensitiveStr::Ascii("otion"),
        dictgen::InsensitiveStr::Ascii("otional"),
        dictgen::InsensitiveStr::Ascii("otionally"),
        dictgen::InsensitiveStr::Ascii("otions"),
    ],
    values: &[
        &["proprietary"],
        &["property"],
        &["proprietary"],
        &["proprietary"],
        &["proprietary"],
        &["proprietary"],
        &["proprietary"],
        &["proprietary"],
        &["proprietary"],
        &["proportion"],
        &["proportional"],
        &["proportionally"],
        &["proportions"],
    ],
    range: 3..=9,
};

static WORD_PROPP_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_PROPP_CHILDREN),
    value: None,
};

pub static WORD_PROPP_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("er"),
        dictgen::InsensitiveStr::Ascii("erly"),
    ],
    values: &[&["proper"], &["properly"]],
    range: 2..=4,
};

static WORD_PROPO_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_PROPO_CHILDREN),
    value: None,
};

pub static WORD_PROPO_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ganda"),
        dictgen::InsensitiveStr::Ascii("gate"),
        dictgen::InsensitiveStr::Ascii("gates"),
        dictgen::InsensitiveStr::Ascii("gation"),
        dictgen::InsensitiveStr::Ascii("lsion"),
        dictgen::InsensitiveStr::Ascii("nants"),
        dictgen::InsensitiveStr::Ascii("nenet"),
        dictgen::InsensitiveStr::Ascii("nenets"),
        dictgen::InsensitiveStr::Ascii("nentes"),
        dictgen::InsensitiveStr::Ascii("net"),
        dictgen::InsensitiveStr::Ascii("rcion"),
        dictgen::InsensitiveStr::Ascii("rition"),
        dictgen::InsensitiveStr::Ascii("rtianal"),
        dictgen::InsensitiveStr::Ascii("rtianally"),
        dictgen::InsensitiveStr::Ascii("rtians"),
        dictgen::InsensitiveStr::Ascii("rties"),
        dictgen::InsensitiveStr::Ascii("rtinal"),
        dictgen::InsensitiveStr::Ascii("rting"),
        dictgen::InsensitiveStr::Ascii("rtionallity"),
        dictgen::InsensitiveStr::Ascii("rtionallly"),
        dictgen::InsensitiveStr::Ascii("rtionalty"),
        dictgen::InsensitiveStr::Ascii("rtionaly"),
        dictgen::InsensitiveStr::Ascii("rtionel"),
        dictgen::InsensitiveStr::Ascii("rtionella"),
        dictgen::InsensitiveStr::Ascii("rtionnal"),
        dictgen::InsensitiveStr::Ascii("sels"),
        dictgen::InsensitiveStr::Ascii("sicion"),
        dictgen::InsensitiveStr::Ascii("sitivo"),
        dictgen::InsensitiveStr::Ascii("sito"),
        dictgen::InsensitiveStr::Ascii("siton"),
        dictgen::InsensitiveStr::Ascii("sse"),
        dictgen::InsensitiveStr::Ascii("ste"),
        dictgen::InsensitiveStr::Ascii("sterous"),
        dictgen::InsensitiveStr::Ascii("stions"),
        dictgen::InsensitiveStr::Ascii("tions"),
    ],
    values: &[
        &["propaganda"],
        &["propagate"],
        &["propagates"],
        &["propagation"],
        &["propulsion"],
        &["proponents"],
        &["proponent"],
        &["proponents"],
        &["proponents"],
        &["proponents"],
        &["proportion"],
        &["proposition"],
        &["proportional"],
        &["proportionally"],
        &["proportions"],
        &["properties"],
        &["proportional"],
        &["proportion"],
        &["proportionally"],
        &["proportionally"],
        &["proportionally"],
        &["proportionally"],
        &["proportional"],
        &["proportionally"],
        &["proportional"],
        &["proposes"],
        &["proposition"],
        &["proposition"],
        &["proposition"],
        &["proposition"],
        &["proposes"],
        &["propose"],
        &["preposterous"],
        &["proportions"],
        &["proportions"],
    ],
    range: 3..=11,
};

static WORD_PROPM_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_PROPM_CHILDREN),
    value: None,
};

pub static WORD_PROPM_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ted"),
        dictgen::InsensitiveStr::Ascii("tly"),
    ],
    values: &[&["prompted"], &["promptly"]],
    range: 3..=3,
};

static WORD_PROPL_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_PROPL_CHILDREN),
    value: None,
};

pub static WORD_PROPL_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("usion")],
    values: &[&["propulsion"]],
    range: 5..=5,
};

static WORD_PROPI_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_PROPI_CHILDREN),
    value: None,
};

pub static WORD_PROPI_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ertary"),
        dictgen::InsensitiveStr::Ascii("etary"),
    ],
    values: &[&["proprietary"], &["proprietary"]],
    range: 5..=6,
};

static WORD_PROPH_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_PROPH_CHILDREN),
    value: None,
};

pub static WORD_PROPH_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("acies"),
        dictgen::InsensitiveStr::Ascii("acy"),
        dictgen::InsensitiveStr::Ascii("echies"),
        dictgen::InsensitiveStr::Ascii("esie"),
        dictgen::InsensitiveStr::Ascii("etes"),
        dictgen::InsensitiveStr::Ascii("ey"),
        dictgen::InsensitiveStr::Ascii("ocies"),
    ],
    values: &[
        &["prophecies"],
        &["prophecy"],
        &["prophecies"],
        &["prophecies"],
        &["prophets"],
        &["prophecy"],
        &["prophecies"],
    ],
    range: 2..=6,
};

static WORD_PROPE_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_PROPE_CHILDREN),
    value: None,
};

pub static WORD_PROPE_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("chies"),
        dictgen::InsensitiveStr::Ascii("chy"),
        dictgen::InsensitiveStr::Ascii("hcy"),
        dictgen::InsensitiveStr::Ascii("ht"),
        dictgen::InsensitiveStr::Ascii("hts"),
        dictgen::InsensitiveStr::Ascii("ncity"),
        dictgen::InsensitiveStr::Ascii("nents"),
        dictgen::InsensitiveStr::Ascii("ries"),
        dictgen::InsensitiveStr::Ascii("ritary"),
        dictgen::InsensitiveStr::Ascii("rites"),
        dictgen::InsensitiveStr::Ascii("rsity"),
        dictgen::InsensitiveStr::Ascii("rtiary"),
        dictgen::InsensitiveStr::Ascii("rtion"),
        dictgen::InsensitiveStr::Ascii("rtional"),
        dictgen::InsensitiveStr::Ascii("rtions"),
        dictgen::InsensitiveStr::Ascii("rtius"),
        dictgen::InsensitiveStr::Ascii("rtly"),
        dictgen::InsensitiveStr::Ascii("sterous"),
        dictgen::InsensitiveStr::Ascii("ties"),
    ],
    values: &[
        &["prophecies"],
        &["prophecy"],
        &["prophecy"],
        &["prophet"],
        &["prophets"],
        &["propensity"],
        &["proponents"],
        &["properties"],
        &["proprietary"],
        &["properties"],
        &["propensity"],
        &["proprietary"],
        &["proportion"],
        &["proportional"],
        &["proportions"],
        &["properties"],
        &["property"],
        &["preposterous"],
        &["properties"],
    ],
    range: 2..=7,
};

static WORD_PROPA_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_PROPA_CHILDREN),
    value: None,
};

pub static WORD_PROPA_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("bilities"),
        dictgen::InsensitiveStr::Ascii("gana"),
        dictgen::InsensitiveStr::Ascii("ganada"),
    ],
    values: &[&["probabilities"], &["propaganda"], &["propaganda"]],
    range: 4..=8,
};

static WORD_PROO_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_PROO_CHILDREN),
    value: None,
};

pub static WORD_PROO_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ve"),
        dictgen::InsensitiveStr::Ascii("ved"),
    ],
    values: &[&["prove"], &["proved"]],
    range: 2..=3,
};

static WORD_PRON_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_PRON_CHILDREN),
    value: None,
};

pub static WORD_PRON_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ography"),
        dictgen::InsensitiveStr::Ascii("omial"),
        dictgen::InsensitiveStr::Ascii("onciation"),
        dictgen::InsensitiveStr::Ascii("ouced"),
        dictgen::InsensitiveStr::Ascii("ouciation"),
        dictgen::InsensitiveStr::Ascii("oucned"),
        dictgen::InsensitiveStr::Ascii("oucning"),
        dictgen::InsensitiveStr::Ascii("ounceing"),
        dictgen::InsensitiveStr::Ascii("ounched"),
        dictgen::InsensitiveStr::Ascii("ounciation"),
        dictgen::InsensitiveStr::Ascii("ounds"),
        dictgen::InsensitiveStr::Ascii("oune"),
        dictgen::InsensitiveStr::Ascii("ounes"),
        dictgen::InsensitiveStr::Ascii("ouning"),
        dictgen::InsensitiveStr::Ascii("ous"),
        dictgen::InsensitiveStr::Ascii("unciacion"),
        dictgen::InsensitiveStr::Ascii("unciating"),
        dictgen::InsensitiveStr::Ascii("unciato"),
        dictgen::InsensitiveStr::Ascii("unciaton"),
        dictgen::InsensitiveStr::Ascii("uncuation"),
        dictgen::InsensitiveStr::Ascii("unication"),
        dictgen::InsensitiveStr::Ascii("untiation"),
    ],
    values: &[
        &["pornography"],
        &["pronominal"],
        &["pronunciation"],
        &["pronounced"],
        &["pronunciation"],
        &["pronounced"],
        &["pronouncing"],
        &["pronouncing"],
        &["pronounced"],
        &["pronunciation"],
        &["pronouns"],
        &["pronounced"],
        &["pronouns"],
        &["pronouncing"],
        &["pronouns"],
        &["pronunciation"],
        &["pronunciation"],
        &["pronunciation"],
        &["pronunciation"],
        &["pronunciation"],
        &["pronunciation"],
        &["pronunciation"],
    ],
    range: 3..=10,
};

static WORD_PROM_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_PROM_CHILDREN),
    value: None,
};

pub static WORD_PROM_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("enantly"),
        dictgen::InsensitiveStr::Ascii("enently"),
        dictgen::InsensitiveStr::Ascii("etheas"),
        dictgen::InsensitiveStr::Ascii("etheius"),
        dictgen::InsensitiveStr::Ascii("etheous"),
        dictgen::InsensitiveStr::Ascii("ethese"),
        dictgen::InsensitiveStr::Ascii("ethesus"),
        dictgen::InsensitiveStr::Ascii("etheyus"),
        dictgen::InsensitiveStr::Ascii("ethius"),
        dictgen::InsensitiveStr::Ascii("ethous"),
        dictgen::InsensitiveStr::Ascii("ethues"),
        dictgen::InsensitiveStr::Ascii("imently"),
        dictgen::InsensitiveStr::Ascii("inance"),
        dictgen::InsensitiveStr::Ascii("inant"),
        dictgen::InsensitiveStr::Ascii("inantely"),
        dictgen::InsensitiveStr::Ascii("inantly"),
        dictgen::InsensitiveStr::Ascii("inately"),
        dictgen::InsensitiveStr::Ascii("inenty"),
        dictgen::InsensitiveStr::Ascii("inetly"),
        dictgen::InsensitiveStr::Ascii("iscious"),
        dictgen::InsensitiveStr::Ascii("iscous"),
        dictgen::InsensitiveStr::Ascii("iscuious"),
        dictgen::InsensitiveStr::Ascii("isculous"),
        dictgen::InsensitiveStr::Ascii("iscuos"),
        dictgen::InsensitiveStr::Ascii("iscus"),
        dictgen::InsensitiveStr::Ascii("ocional"),
        dictgen::InsensitiveStr::Ascii("ose"),
        dictgen::InsensitiveStr::Ascii("oteurs"),
        dictgen::InsensitiveStr::Ascii("otheus"),
        dictgen::InsensitiveStr::Ascii("otinal"),
        dictgen::InsensitiveStr::Ascii("otionnal"),
        dictgen::InsensitiveStr::Ascii("ots"),
        dictgen::InsensitiveStr::Ascii("otted"),
        dictgen::InsensitiveStr::Ascii("plty"),
        dictgen::InsensitiveStr::Ascii("ptes"),
        dictgen::InsensitiveStr::Ascii("ptus"),
        dictgen::InsensitiveStr::Ascii("pty"),
        dictgen::InsensitiveStr::Ascii("sicuous"),
        dictgen::InsensitiveStr::Ascii("tply"),
        dictgen::InsensitiveStr::Ascii("tps"),
    ],
    values: &[
        &["prominently"],
        &["prominently"],
        &["prometheus"],
        &["prometheus"],
        &["prometheus"],
        &["prometheus"],
        &["prometheus"],
        &["prometheus"],
        &["prometheus"],
        &["prometheus"],
        &["prometheus"],
        &["prominently"],
        &["prominence"],
        &["prominent"],
        &["prominently"],
        &["prominently"],
        &["prominently"],
        &["prominently"],
        &["prominently"],
        &["promiscuous"],
        &["promiscuous"],
        &["promiscuous"],
        &["promiscuous"],
        &["promiscuous"],
        &["promiscuous"],
        &["promotional"],
        &["promotes"],
        &["promotes"],
        &["prometheus"],
        &["promotional"],
        &["promotional"],
        &["promotes"],
        &["promoted"],
        &["promptly"],
        &["prompts"],
        &["prompts"],
        &["promptly"],
        &["promiscuous"],
        &["promptly"],
        &["prompts"],
    ],
    range: 3..=8,
};

static WORD_PROL_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_PROL_CHILDREN),
    value: None,
};

pub static WORD_PROL_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ateriat"),
        dictgen::InsensitiveStr::Ascii("etariaat"),
        dictgen::InsensitiveStr::Ascii("etariant"),
        dictgen::InsensitiveStr::Ascii("etaricat"),
        dictgen::InsensitiveStr::Ascii("etariet"),
        dictgen::InsensitiveStr::Ascii("etariot"),
        dictgen::InsensitiveStr::Ascii("etaryat"),
        dictgen::InsensitiveStr::Ascii("eteriat"),
        dictgen::InsensitiveStr::Ascii("itariat"),
        dictgen::InsensitiveStr::Ascii("oge"),
        dictgen::InsensitiveStr::Ascii("ogomena"),
        dictgen::InsensitiveStr::Ascii("ouge"),
    ],
    values: &[
        &["proletariat"],
        &["proletariat"],
        &["proletariat"],
        &["proletariat"],
        &["proletariat"],
        &["proletariat"],
        &["proletariat"],
        &["proletariat"],
        &["proletariat"],
        &["prologue"],
        &["prolegomena"],
        &["prologue"],
    ],
    range: 3..=8,
};

static WORD_PROK_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_PROK_CHILDREN),
    value: None,
};

pub static WORD_PROK_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("rastination")],
    values: &[&["procrastination"]],
    range: 11..=11,
};

static WORD_PROJ_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_PROJ_CHILDREN),
    value: None,
};

pub static WORD_PROJ_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ecitle"),
        dictgen::InsensitiveStr::Ascii("ecte"),
        dictgen::InsensitiveStr::Ascii("ecticle"),
        dictgen::InsensitiveStr::Ascii("ecticles"),
        dictgen::InsensitiveStr::Ascii("ectie"),
        dictgen::InsensitiveStr::Ascii("ectiel"),
        dictgen::InsensitiveStr::Ascii("ecties"),
        dictgen::InsensitiveStr::Ascii("ectils"),
        dictgen::InsensitiveStr::Ascii("ectin"),
        dictgen::InsensitiveStr::Ascii("ectives"),
        dictgen::InsensitiveStr::Ascii("ectles"),
        dictgen::InsensitiveStr::Ascii("ectlie"),
        dictgen::InsensitiveStr::Ascii("ectlies"),
        dictgen::InsensitiveStr::Ascii("ecto"),
        dictgen::InsensitiveStr::Ascii("ectyle"),
        dictgen::InsensitiveStr::Ascii("ektile"),
        dictgen::InsensitiveStr::Ascii("ektion"),
    ],
    values: &[
        &["projectiles"],
        &["projectile"],
        &["projectile"],
        &["projectiles"],
        &["projectile"],
        &["projectiles"],
        &["projectiles"],
        &["projectiles"],
        &["projection"],
        &["projectiles"],
        &["projectiles"],
        &["projectiles"],
        &["projectiles"],
        &["projection"],
        &["projectile"],
        &["projectile"],
        &["projection"],
    ],
    range: 4..=8,
};

static WORD_PROH_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_PROH_CHILDREN),
    value: None,
};

pub static WORD_PROH_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("abition"),
        dictgen::InsensitiveStr::Ascii("ibation"),
        dictgen::InsensitiveStr::Ascii("ibicion"),
        dictgen::InsensitiveStr::Ascii("ibirte"),
        dictgen::InsensitiveStr::Ascii("ibis"),
        dictgen::InsensitiveStr::Ascii("ibiteds"),
        dictgen::InsensitiveStr::Ascii("ibites"),
        dictgen::InsensitiveStr::Ascii("ibitied"),
        dictgen::InsensitiveStr::Ascii("ibitifs"),
        dictgen::InsensitiveStr::Ascii("ibitivo"),
        dictgen::InsensitiveStr::Ascii("ibitng"),
        dictgen::InsensitiveStr::Ascii("ibiton"),
        dictgen::InsensitiveStr::Ascii("ibitons"),
        dictgen::InsensitiveStr::Ascii("ibitted"),
        dictgen::InsensitiveStr::Ascii("ibitting"),
        dictgen::InsensitiveStr::Ascii("ibitus"),
        dictgen::InsensitiveStr::Ascii("ibitve"),
        dictgen::InsensitiveStr::Ascii("ibt"),
        dictgen::InsensitiveStr::Ascii("obited"),
        dictgen::InsensitiveStr::Ascii("pecies"),
        dictgen::InsensitiveStr::Ascii("pecy"),
        dictgen::InsensitiveStr::Ascii("pet"),
        dictgen::InsensitiveStr::Ascii("pets"),
    ],
    values: &[
        &["prohibition"],
        &["prohibition"],
        &["prohibition"],
        &["prohibit"],
        &["prohibits"],
        &["prohibits"],
        &["prohibits"],
        &["prohibited"],
        &["prohibits"],
        &["prohibition"],
        &["prohibiting"],
        &["prohibition"],
        &["prohibits"],
        &["prohibited"],
        &["prohibiting"],
        &["prohibits"],
        &["prohibited"],
        &["prohibit"],
        &["prohibited"],
        &["prophecies"],
        &["prophecy"],
        &["prophet"],
        &["prophets"],
    ],
    range: 3..=8,
};

static WORD_PROG_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_PROG_CHILDREN),
    value: None,
};

pub static WORD_PROG_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("atonists"),
        dictgen::InsensitiveStr::Ascii("erssion"),
        dictgen::InsensitiveStr::Ascii("erssive"),
        dictgen::InsensitiveStr::Ascii("essed"),
        dictgen::InsensitiveStr::Ascii("idy"),
        dictgen::InsensitiveStr::Ascii("ramable"),
        dictgen::InsensitiveStr::Ascii("ramas"),
        dictgen::InsensitiveStr::Ascii("ramattically"),
        dictgen::InsensitiveStr::Ascii("ramem"),
        dictgen::InsensitiveStr::Ascii("rames"),
        dictgen::InsensitiveStr::Ascii("rammar"),
        dictgen::InsensitiveStr::Ascii("rammare"),
        dictgen::InsensitiveStr::Ascii("rammars"),
        dictgen::InsensitiveStr::Ascii("rammate"),
        dictgen::InsensitiveStr::Ascii("rammets"),
        dictgen::InsensitiveStr::Ascii("rammeur"),
        dictgen::InsensitiveStr::Ascii("rammeurs"),
        dictgen::InsensitiveStr::Ascii("rammier"),
        dictgen::InsensitiveStr::Ascii("rammme"),
        dictgen::InsensitiveStr::Ascii("rammmed"),
        dictgen::InsensitiveStr::Ascii("rammmer"),
        dictgen::InsensitiveStr::Ascii("ramms"),
        dictgen::InsensitiveStr::Ascii("rastination"),
        dictgen::InsensitiveStr::Ascii("resing"),
        dictgen::InsensitiveStr::Ascii("resion"),
        dictgen::InsensitiveStr::Ascii("resison"),
        dictgen::InsensitiveStr::Ascii("resive"),
        dictgen::InsensitiveStr::Ascii("ressers"),
        dictgen::InsensitiveStr::Ascii("ressie"),
        dictgen::InsensitiveStr::Ascii("ressief"),
        dictgen::InsensitiveStr::Ascii("ressieve"),
        dictgen::InsensitiveStr::Ascii("ressin"),
        dictgen::InsensitiveStr::Ascii("ressino"),
        dictgen::InsensitiveStr::Ascii("ressioin"),
        dictgen::InsensitiveStr::Ascii("ressiong"),
        dictgen::InsensitiveStr::Ascii("ressionists"),
        dictgen::InsensitiveStr::Ascii("ressionwise"),
        dictgen::InsensitiveStr::Ascii("ressisme"),
        dictgen::InsensitiveStr::Ascii("ressiste"),
        dictgen::InsensitiveStr::Ascii("ressivas"),
        dictgen::InsensitiveStr::Ascii("ressivelly"),
        dictgen::InsensitiveStr::Ascii("ressivey"),
        dictgen::InsensitiveStr::Ascii("ressivily"),
        dictgen::InsensitiveStr::Ascii("ressivisme"),
        dictgen::InsensitiveStr::Ascii("ressivley"),
        dictgen::InsensitiveStr::Ascii("ressivly"),
        dictgen::InsensitiveStr::Ascii("ressivo"),
        dictgen::InsensitiveStr::Ascii("ressivsm"),
        dictgen::InsensitiveStr::Ascii("resso"),
        dictgen::InsensitiveStr::Ascii("ressoin"),
        dictgen::InsensitiveStr::Ascii("resson"),
        dictgen::InsensitiveStr::Ascii("ressos"),
        dictgen::InsensitiveStr::Ascii("resss"),
        dictgen::InsensitiveStr::Ascii("resssing"),
        dictgen::InsensitiveStr::Ascii("resssion"),
        dictgen::InsensitiveStr::Ascii("resssive"),
        dictgen::InsensitiveStr::Ascii("ressus"),
        dictgen::InsensitiveStr::Ascii("ressvie"),
        dictgen::InsensitiveStr::Ascii("rom"),
        dictgen::InsensitiveStr::Ascii("roms"),
    ],
    values: &[
        &["protagonists"],
        &["progressions"],
        &["progressives"],
        &["progressed"],
        &["prodigy"],
        &["programmable"],
        &["programs"],
        &["programmatically"],
        &["programme"],
        &["programs"],
        &["programmer"],
        &["programmer"],
        &["programmers"],
        &["programme"],
        &["programmers"],
        &["programmer"],
        &["programmer"],
        &["programmer"],
        &["programme"],
        &["programme"],
        &["programme"],
        &["programs"],
        &["procrastination"],
        &["progressing"],
        &["progression"],
        &["progressions"],
        &["progressive"],
        &["progresses"],
        &["progressives"],
        &["progressive"],
        &["progressive"],
        &["progression"],
        &["progressions"],
        &["progressions"],
        &["progressing"],
        &["progressions"],
        &["progressions"],
        &["progresses"],
        &["progresses"],
        &["progressives"],
        &["progressively"],
        &["progressively"],
        &["progressively"],
        &["progressives"],
        &["progressively"],
        &["progressively"],
        &["progression"],
        &["progressives"],
        &["progression"],
        &["progressions"],
        &["progression"],
        &["progresses"],
        &["progresses"],
        &["progressing"],
        &["progressions"],
        &["progressives"],
        &["progresses"],
        &["progressives"],
        &["pogrom"],
        &["pogroms"],
    ],
    range: 3..=12,
};

static WORD_PROF_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_PROF_CHILDREN),
    value: None,
};

pub static WORD_PROF_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("esion"),
        dictgen::InsensitiveStr::Ascii("esions"),
        dictgen::InsensitiveStr::Ascii("esisonal"),
        dictgen::InsensitiveStr::Ascii("esor"),
        dictgen::InsensitiveStr::Ascii("esser"),
        dictgen::InsensitiveStr::Ascii("essers"),
        dictgen::InsensitiveStr::Ascii("essiinal"),
        dictgen::InsensitiveStr::Ascii("essin"),
        dictgen::InsensitiveStr::Ascii("essinal"),
        dictgen::InsensitiveStr::Ascii("essioanl"),
        dictgen::InsensitiveStr::Ascii("essiomal"),
        dictgen::InsensitiveStr::Ascii("essionalisim"),
        dictgen::InsensitiveStr::Ascii("essionalisme"),
        dictgen::InsensitiveStr::Ascii("essionallism"),
        dictgen::InsensitiveStr::Ascii("essionalsim"),
        dictgen::InsensitiveStr::Ascii("essionel"),
        dictgen::InsensitiveStr::Ascii("essionials"),
        dictgen::InsensitiveStr::Ascii("essionl"),
        dictgen::InsensitiveStr::Ascii("essionnal"),
        dictgen::InsensitiveStr::Ascii("essionnalism"),
        dictgen::InsensitiveStr::Ascii("essionnals"),
        dictgen::InsensitiveStr::Ascii("essionsl"),
        dictgen::InsensitiveStr::Ascii("essoinal"),
        dictgen::InsensitiveStr::Ascii("essonial"),
        dictgen::InsensitiveStr::Ascii("essoras"),
        dictgen::InsensitiveStr::Ascii("essores"),
        dictgen::InsensitiveStr::Ascii("essorin"),
        dictgen::InsensitiveStr::Ascii("essorn"),
        dictgen::InsensitiveStr::Ascii("esssion"),
        dictgen::InsensitiveStr::Ascii("esssor"),
        dictgen::InsensitiveStr::Ascii("fesed"),
        dictgen::InsensitiveStr::Ascii("fesion"),
        dictgen::InsensitiveStr::Ascii("fesional"),
        dictgen::InsensitiveStr::Ascii("fesor"),
        dictgen::InsensitiveStr::Ascii("iceint"),
        dictgen::InsensitiveStr::Ascii("iciancy"),
        dictgen::InsensitiveStr::Ascii("iciant"),
        dictgen::InsensitiveStr::Ascii("icienct"),
        dictgen::InsensitiveStr::Ascii("icientcy"),
        dictgen::InsensitiveStr::Ascii("icienty"),
        dictgen::InsensitiveStr::Ascii("icieny"),
        dictgen::InsensitiveStr::Ascii("icincy"),
        dictgen::InsensitiveStr::Ascii("icinecy"),
        dictgen::InsensitiveStr::Ascii("icit"),
        dictgen::InsensitiveStr::Ascii("ilic"),
        dictgen::InsensitiveStr::Ascii("issional"),
        dictgen::InsensitiveStr::Ascii("itabel"),
        dictgen::InsensitiveStr::Ascii("itabil"),
        dictgen::InsensitiveStr::Ascii("itabile"),
        dictgen::InsensitiveStr::Ascii("itabiliy"),
        dictgen::InsensitiveStr::Ascii("itabillity"),
        dictgen::InsensitiveStr::Ascii("itabilty"),
        dictgen::InsensitiveStr::Ascii("itiablity"),
        dictgen::InsensitiveStr::Ascii("itibality"),
        dictgen::InsensitiveStr::Ascii("itible"),
        dictgen::InsensitiveStr::Ascii("ressions"),
        dictgen::InsensitiveStr::Ascii("tiable"),
    ],
    values: &[
        &["profusion"],
        &["profession"],
        &["professionals"],
        &["professor"],
        &["professor"],
        &["professors"],
        &["professionalism"],
        &["professions"],
        &["professional"],
        &["professionals"],
        &["professionalism"],
        &["professionalism"],
        &["professionals"],
        &["professionalism"],
        &["professionalism"],
        &["professional"],
        &["professionalism"],
        &["professionals"],
        &["professional"],
        &["professionalism"],
        &["professionals"],
        &["professionalism"],
        &["professionals"],
        &["professionals"],
        &["professors"],
        &["professors"],
        &["profession"],
        &["profession"],
        &["professions"],
        &["professors"],
        &["professed"],
        &["profession"],
        &["professional"],
        &["professor"],
        &["proficient"],
        &["proficiency"],
        &["proficient"],
        &["proficient"],
        &["proficiency"],
        &["proficiency"],
        &["proficiency"],
        &["proficiency"],
        &["proficiency"],
        &["proficient"],
        &["prolific"],
        &["professional"],
        &["profitable"],
        &["profitable"],
        &["profitable"],
        &["profitability"],
        &["profitability"],
        &["profitability"],
        &["profitability"],
        &["profitability"],
        &["profitable"],
        &["progressions"],
        &["profitable"],
    ],
    range: 4..=12,
};

static WORD_PROD_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_PROD_CHILDREN),
    value: None,
};

pub static WORD_PROD_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("cution"),
        dictgen::InsensitiveStr::Ascii("cutions"),
        dictgen::InsensitiveStr::Ascii("cuts"),
        dictgen::InsensitiveStr::Ascii("ecural"),
        dictgen::InsensitiveStr::Ascii("ecure"),
        dictgen::InsensitiveStr::Ascii("ecures"),
        dictgen::InsensitiveStr::Ascii("ictions"),
        dictgen::InsensitiveStr::Ascii("ominantly"),
        dictgen::InsensitiveStr::Ascii("uccion"),
        dictgen::InsensitiveStr::Ascii("uceras"),
        dictgen::InsensitiveStr::Ascii("ucerats"),
        dictgen::InsensitiveStr::Ascii("uceres"),
        dictgen::InsensitiveStr::Ascii("ucirse"),
        dictgen::InsensitiveStr::Ascii("uciton"),
        dictgen::InsensitiveStr::Ascii("ucitons"),
        dictgen::InsensitiveStr::Ascii("uctie"),
        dictgen::InsensitiveStr::Ascii("uctin"),
        dictgen::InsensitiveStr::Ascii("ucting"),
        dictgen::InsensitiveStr::Ascii("uctino"),
        dictgen::InsensitiveStr::Ascii("uctioin"),
        dictgen::InsensitiveStr::Ascii("uctivo"),
        dictgen::InsensitiveStr::Ascii("uctivos"),
        dictgen::InsensitiveStr::Ascii("uctivty"),
        dictgen::InsensitiveStr::Ascii("uctivy"),
        dictgen::InsensitiveStr::Ascii("ucto"),
        dictgen::InsensitiveStr::Ascii("uctoin"),
        dictgen::InsensitiveStr::Ascii("uctos"),
        dictgen::InsensitiveStr::Ascii("uktion"),
        dictgen::InsensitiveStr::Ascii("uktions"),
        dictgen::InsensitiveStr::Ascii("uktive"),
        dictgen::InsensitiveStr::Ascii("uly"),
        dictgen::InsensitiveStr::Ascii("use"),
        dictgen::InsensitiveStr::Ascii("utcion"),
    ],
    values: &[
        &["production"],
        &["productions"],
        &["products"],
        &["procedural"],
        &["procedure"],
        &["procedures"],
        &["productions"],
        &["predominantly"],
        &["production"],
        &["produces"],
        &["producers"],
        &["produces"],
        &["producers"],
        &["production"],
        &["productions"],
        &["productive"],
        &["productions"],
        &["production"],
        &["productions"],
        &["productions"],
        &["production"],
        &["productions"],
        &["productivity"],
        &["productivity"],
        &["production"],
        &["productions"],
        &["products"],
        &["production"],
        &["productions"],
        &["productive"],
        &["proudly"],
        &["produces"],
        &["productions"],
    ],
    range: 3..=9,
};

static WORD_PROC_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_PROC_CHILDREN),
    value: None,
};

static WORD_PROC_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    Some(&WORD_PROCA_NODE),
    None,
    Some(&WORD_PROCC_NODE),
    None,
    Some(&WORD_PROCE_NODE),
    None,
    None,
    None,
    None,
    None,
    None,
    Some(&WORD_PROCL_NODE),
    None,
    None,
    Some(&WORD_PROCO_NODE),
    None,
    None,
    Some(&WORD_PROCR_NODE),
    None,
    None,
    Some(&WORD_PROCU_NODE),
    None,
    None,
    None,
    None,
    None,
];

static WORD_PROCU_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_PROCU_CHILDREN),
    value: None,
};

pub static WORD_PROCU_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("dures")],
    values: &[&["procedures"]],
    range: 5..=5,
};

static WORD_PROCR_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_PROCR_CHILDREN),
    value: None,
};

pub static WORD_PROCR_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ascinating"),
        dictgen::InsensitiveStr::Ascii("astenating"),
        dictgen::InsensitiveStr::Ascii("astiantion"),
        dictgen::InsensitiveStr::Ascii("astibating"),
        dictgen::InsensitiveStr::Ascii("astibation"),
        dictgen::InsensitiveStr::Ascii("astinarting"),
        dictgen::InsensitiveStr::Ascii("astinatin"),
        dictgen::InsensitiveStr::Ascii("astinationg"),
        dictgen::InsensitiveStr::Ascii("astinaton"),
        dictgen::InsensitiveStr::Ascii("astinazione"),
        dictgen::InsensitiveStr::Ascii("astion"),
        dictgen::InsensitiveStr::Ascii("astonating"),
        dictgen::InsensitiveStr::Ascii("eatin"),
        dictgen::InsensitiveStr::Ascii("estinating"),
        dictgen::InsensitiveStr::Ascii("estination"),
        dictgen::InsensitiveStr::Ascii("iation"),
    ],
    values: &[
        &["procrastinating"],
        &["procrastinating"],
        &["procrastination"],
        &["procrastinating"],
        &["procrastination"],
        &["procrastinating"],
        &["procrastination"],
        &["procrastinating"],
        &["procrastination"],
        &["procrastination"],
        &["procreation"],
        &["procrastinating"],
        &["procreation"],
        &["procrastinating"],
        &["procrastination"],
        &["procreation"],
    ],
    range: 5..=11,
};

static WORD_PROCO_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_PROCO_CHILDREN),
    value: None,
};

pub static WORD_PROCO_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("nceived"),
        dictgen::InsensitiveStr::Ascii("tol"),
        dictgen::InsensitiveStr::Ascii("tols"),
    ],
    values: &[&["preconceived"], &["protocol"], &["protocols"]],
    range: 3..=7,
};

static WORD_PROCL_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_PROCL_CHILDREN),
    value: None,
};

pub static WORD_PROCL_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("aimation"),
        dictgen::InsensitiveStr::Ascii("am"),
        dictgen::InsensitiveStr::Ascii("amed"),
        dictgen::InsensitiveStr::Ascii("ami"),
        dictgen::InsensitiveStr::Ascii("amied"),
        dictgen::InsensitiveStr::Ascii("aming"),
        dictgen::InsensitiveStr::Ascii("iam"),
        dictgen::InsensitiveStr::Ascii("iamed"),
        dictgen::InsensitiveStr::Ascii("omation"),
    ],
    values: &[
        &["proclamation"],
        &["proclaim"],
        &["proclaimed"],
        &["proclaim"],
        &["proclaimed"],
        &["proclaiming"],
        &["proclaim"],
        &["proclaimed"],
        &["proclamation"],
    ],
    range: 2..=8,
};

static WORD_PROCE_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_PROCE_CHILDREN),
    value: None,
};

pub static WORD_PROCE_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("dding"),
        dictgen::InsensitiveStr::Ascii("ddings"),
        dictgen::InsensitiveStr::Ascii("de"),
        dictgen::InsensitiveStr::Ascii("ded"),
        dictgen::InsensitiveStr::Ascii("der"),
        dictgen::InsensitiveStr::Ascii("deral"),
        dictgen::InsensitiveStr::Ascii("des"),
        dictgen::InsensitiveStr::Ascii("dger"),
        dictgen::InsensitiveStr::Ascii("ding"),
        dictgen::InsensitiveStr::Ascii("dings"),
        dictgen::InsensitiveStr::Ascii("drual"),
        dictgen::InsensitiveStr::Ascii("due"),
        dictgen::InsensitiveStr::Ascii("dureal"),
        dictgen::InsensitiveStr::Ascii("durial"),
        dictgen::InsensitiveStr::Ascii("durile"),
        dictgen::InsensitiveStr::Ascii("ededs"),
        dictgen::InsensitiveStr::Ascii("edes"),
        dictgen::InsensitiveStr::Ascii("edure"),
        dictgen::InsensitiveStr::Ascii("eed"),
        dictgen::InsensitiveStr::Ascii("es"),
        dictgen::InsensitiveStr::Ascii("esing"),
        dictgen::InsensitiveStr::Ascii("lain"),
        dictgen::InsensitiveStr::Ascii("s"),
        dictgen::InsensitiveStr::Ascii("sd"),
        dictgen::InsensitiveStr::Ascii("sed"),
        dictgen::InsensitiveStr::Ascii("sess"),
        dictgen::InsensitiveStr::Ascii("sser"),
        dictgen::InsensitiveStr::Ascii("ssesor"),
        dictgen::InsensitiveStr::Ascii("sseurs"),
        dictgen::InsensitiveStr::Ascii("ssos"),
        dictgen::InsensitiveStr::Ascii("sss"),
        dictgen::InsensitiveStr::Ascii("sssor"),
        dictgen::InsensitiveStr::Ascii("sssors"),
    ],
    values: &[
        &["proceeding"],
        &["proceedings"],
        &["proceed"],
        &["proceeded"],
        &["procedure"],
        &["procedural"],
        &["proceeds"],
        &["procedure"],
        &["proceeding"],
        &["proceedings"],
        &["procedural"],
        &["procedure"],
        &["procedural"],
        &["procedural"],
        &["procedure"],
        &["proceeds"],
        &["proceeds"],
        &["procedure"],
        &["proceed"],
        &["proceeds"],
        &["proceeding"],
        &["porcelain"],
        &["process"],
        &["proceeds"],
        &["proceeds"],
        &["processes"],
        &["processor"],
        &["processors"],
        &["processes"],
        &["processors"],
        &["processes"],
        &["processors"],
        &["processors"],
    ],
    range: 1..=6,
};

static WORD_PROCC_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_PROCC_CHILDREN),
    value: None,
};

pub static WORD_PROCC_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("eding"),
        dictgen::InsensitiveStr::Ascii("edings"),
        dictgen::InsensitiveStr::Ascii("ess"),
        dictgen::InsensitiveStr::Ascii("essing"),
    ],
    values: &[
        &["proceeding"],
        &["proceedings"],
        &["process"],
        &["processing"],
    ],
    range: 3..=6,
};

static WORD_PROCA_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_PROCA_CHILDREN),
    value: None,
};

pub static WORD_PROCA_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("lim"),
        dictgen::InsensitiveStr::Ascii("limed"),
        dictgen::InsensitiveStr::Ascii("strinating"),
        dictgen::InsensitiveStr::Ascii("strination"),
        dictgen::InsensitiveStr::Ascii("tive"),
    ],
    values: &[
        &["proclaim"],
        &["proclaimed"],
        &["procrastinating"],
        &["procrastination"],
        &["proactive"],
    ],
    range: 3..=10,
};

static WORD_PROB_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_PROB_CHILDREN),
    value: None,
};

pub static WORD_PROB_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("abe"),
        dictgen::InsensitiveStr::Ascii("abilaty"),
        dictgen::InsensitiveStr::Ascii("abiliste"),
        dictgen::InsensitiveStr::Ascii("abilite"),
        dictgen::InsensitiveStr::Ascii("abilites"),
        dictgen::InsensitiveStr::Ascii("abiliy"),
        dictgen::InsensitiveStr::Ascii("abillity"),
        dictgen::InsensitiveStr::Ascii("abilty"),
        dictgen::InsensitiveStr::Ascii("abily"),
        dictgen::InsensitiveStr::Ascii("ablies"),
        dictgen::InsensitiveStr::Ascii("ablistic"),
        dictgen::InsensitiveStr::Ascii("ablly"),
        dictgen::InsensitiveStr::Ascii("ablybe"),
        dictgen::InsensitiveStr::Ascii("alibity"),
        dictgen::InsensitiveStr::Ascii("aly"),
        dictgen::InsensitiveStr::Ascii("elm"),
        dictgen::InsensitiveStr::Ascii("elmatic"),
        dictgen::InsensitiveStr::Ascii("elms"),
        dictgen::InsensitiveStr::Ascii("lamatic"),
        dictgen::InsensitiveStr::Ascii("leem"),
        dictgen::InsensitiveStr::Ascii("lemas"),
        dictgen::InsensitiveStr::Ascii("lematisch"),
        dictgen::InsensitiveStr::Ascii("lemita"),
        dictgen::InsensitiveStr::Ascii("limatic"),
        dictgen::InsensitiveStr::Ascii("lomatic"),
    ],
    values: &[
        &["probable"],
        &["probability"],
        &["probabilities"],
        &["probabilities"],
        &["probabilities"],
        &["probability"],
        &["probability"],
        &["probability"],
        &["probability"],
        &["probable"],
        &["probabilistic"],
        &["probably"],
        &["probable"],
        &["probability"],
        &["probably"],
        &["problem"],
        &["problematic"],
        &["problems"],
        &["problematic"],
        &["problem"],
        &["problems"],
        &["problematic"],
        &["problematic"],
        &["problematic"],
        &["problematic"],
    ],
    range: 3..=9,
};

static WORD_PROA_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_PROA_CHILDREN),
    value: None,
};

pub static WORD_PROA_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("ctivley")],
    values: &[&["proactive"]],
    range: 7..=7,
};

static WORD_PRI_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_PRI_CHILDREN),
    value: None,
};

static WORD_PRI_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    Some(&WORD_PRIA_NODE),
    None,
    Some(&WORD_PRIC_NODE),
    None,
    Some(&WORD_PRIE_NODE),
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    Some(&WORD_PRIM_NODE),
    Some(&WORD_PRIN_NODE),
    Some(&WORD_PRIO_NODE),
    None,
    None,
    None,
    Some(&WORD_PRIS_NODE),
    None,
    None,
    Some(&WORD_PRIV_NODE),
    None,
    None,
    None,
    None,
];

static WORD_PRIV_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_PRIV_CHILDREN),
    value: None,
};

pub static WORD_PRIV_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("alege"),
        dictgen::InsensitiveStr::Ascii("aleged"),
        dictgen::InsensitiveStr::Ascii("aleges"),
        dictgen::InsensitiveStr::Ascii("aticed"),
        dictgen::InsensitiveStr::Ascii("atizied"),
        dictgen::InsensitiveStr::Ascii("elaged"),
        dictgen::InsensitiveStr::Ascii("elages"),
        dictgen::InsensitiveStr::Ascii("eldges"),
        dictgen::InsensitiveStr::Ascii("eledges"),
        dictgen::InsensitiveStr::Ascii("elege"),
        dictgen::InsensitiveStr::Ascii("eleged"),
        dictgen::InsensitiveStr::Ascii("eleges"),
        dictgen::InsensitiveStr::Ascii("elidge"),
        dictgen::InsensitiveStr::Ascii("elige"),
        dictgen::InsensitiveStr::Ascii("eliged"),
        dictgen::InsensitiveStr::Ascii("eliges"),
        dictgen::InsensitiveStr::Ascii("elleges"),
        dictgen::InsensitiveStr::Ascii("etized"),
        dictgen::InsensitiveStr::Ascii("ilage"),
        dictgen::InsensitiveStr::Ascii("ilaged"),
        dictgen::InsensitiveStr::Ascii("ilages"),
        dictgen::InsensitiveStr::Ascii("iledge"),
        dictgen::InsensitiveStr::Ascii("ilegde"),
        dictgen::InsensitiveStr::Ascii("ilegeds"),
        dictgen::InsensitiveStr::Ascii("ilegie"),
        dictgen::InsensitiveStr::Ascii("ilegied"),
        dictgen::InsensitiveStr::Ascii("ilegien"),
        dictgen::InsensitiveStr::Ascii("ilegier"),
        dictgen::InsensitiveStr::Ascii("ilegies"),
        dictgen::InsensitiveStr::Ascii("ilegs"),
        dictgen::InsensitiveStr::Ascii("iliged"),
        dictgen::InsensitiveStr::Ascii("iliges"),
        dictgen::InsensitiveStr::Ascii("itazed"),
        dictgen::InsensitiveStr::Ascii("itized"),
        dictgen::InsensitiveStr::Ascii("ledge"),
        dictgen::InsensitiveStr::Ascii("te"),
    ],
    values: &[
        &["privilege"],
        &["privileged"],
        &["privileges"],
        &["privatized"],
        &["privatized"],
        &["privileged"],
        &["privileges"],
        &["privileges"],
        &["privileges"],
        &["privilege"],
        &["privileged"],
        &["privileges"],
        &["privileged"],
        &["privilege"],
        &["privileged"],
        &["privileges"],
        &["privileges"],
        &["privatized"],
        &["privilege"],
        &["privileged"],
        &["privileges"],
        &["privilege"],
        &["privileges"],
        &["privileges"],
        &["privilege"],
        &["privileged"],
        &["privilege"],
        &["privilege"],
        &["privilege"],
        &["privileges"],
        &["privileged"],
        &["privileges"],
        &["privatized"],
        &["privatized"],
        &["privilege"],
        &["private"],
    ],
    range: 2..=7,
};

static WORD_PRIS_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_PRIS_CHILDREN),
    value: None,
};

pub static WORD_PRIS_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("itne"),
        dictgen::InsensitiveStr::Ascii("ten"),
    ],
    values: &[&["pristine"], &["pristine"]],
    range: 3..=4,
};

static WORD_PRIO_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_PRIO_CHILDREN),
    value: None,
};

pub static WORD_PRIO_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ratize"),
        dictgen::InsensitiveStr::Ascii("retize"),
        dictgen::InsensitiveStr::Ascii("ritice"),
        dictgen::InsensitiveStr::Ascii("ritie"),
        dictgen::InsensitiveStr::Ascii("ritied"),
        dictgen::InsensitiveStr::Ascii("ritse"),
        dictgen::InsensitiveStr::Ascii("roties"),
        dictgen::InsensitiveStr::Ascii("rotize"),
        dictgen::InsensitiveStr::Ascii("tities"),
        dictgen::InsensitiveStr::Ascii("titize"),
    ],
    values: &[
        &["prioritize"],
        &["prioritize"],
        &["prioritize"],
        &["prioritize"],
        &["prioritize"],
        &["priorities"],
        &["priorities"],
        &["prioritize"],
        &["priorities"],
        &["prioritize"],
    ],
    range: 5..=6,
};

static WORD_PRIN_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_PRIN_CHILDREN),
    value: None,
};

pub static WORD_PRIN_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("cepals"),
        dictgen::InsensitiveStr::Ascii("cesas"),
        dictgen::InsensitiveStr::Ascii("ceses"),
        dictgen::InsensitiveStr::Ascii("cesess"),
        dictgen::InsensitiveStr::Ascii("cesss"),
        dictgen::InsensitiveStr::Ascii("cessses"),
        dictgen::InsensitiveStr::Ascii("cibles"),
        dictgen::InsensitiveStr::Ascii("cila"),
        dictgen::InsensitiveStr::Ascii("cipales"),
        dictgen::InsensitiveStr::Ascii("cipalis"),
        dictgen::InsensitiveStr::Ascii("cipaly"),
        dictgen::InsensitiveStr::Ascii("cipas"),
        dictgen::InsensitiveStr::Ascii("cipels"),
        dictgen::InsensitiveStr::Ascii("cipial"),
        dictgen::InsensitiveStr::Ascii("cipias"),
        dictgen::InsensitiveStr::Ascii("cipielt"),
        dictgen::InsensitiveStr::Ascii("cipl"),
        dictgen::InsensitiveStr::Ascii("ciplaity"),
        dictgen::InsensitiveStr::Ascii("ciplas"),
        dictgen::InsensitiveStr::Ascii("ciply"),
        dictgen::InsensitiveStr::Ascii("icipal"),
        dictgen::InsensitiveStr::Ascii("icpals"),
        dictgen::InsensitiveStr::Ascii("icple"),
        dictgen::InsensitiveStr::Ascii("icples"),
        dictgen::InsensitiveStr::Ascii("terest"),
        dictgen::InsensitiveStr::Ascii("tes"),
    ],
    values: &[
        &["principals"],
        &["princess"],
        &["princess"],
        &["princesses"],
        &["princesses"],
        &["princesses"],
        &["principles"],
        &["principals"],
        &["principles"],
        &["principals"],
        &["principality"],
        &["principals"],
        &["principals"],
        &["principal"],
        &["principals"],
        &["principle"],
        &["principals"],
        &["principality"],
        &["principals"],
        &["principally"],
        &["principal"],
        &["principals"],
        &["principle"],
        &["principles"],
        &["printers"],
        &["printers"],
    ],
    range: 3..=8,
};

static WORD_PRIM_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_PRIM_CHILDREN),
    value: None,
};

pub static WORD_PRIM_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("aires"),
        dictgen::InsensitiveStr::Ascii("airly"),
        dictgen::InsensitiveStr::Ascii("arilly"),
        dictgen::InsensitiveStr::Ascii("aris"),
        dictgen::InsensitiveStr::Ascii("arliy"),
        dictgen::InsensitiveStr::Ascii("arly"),
        dictgen::InsensitiveStr::Ascii("ative"),
        dictgen::InsensitiveStr::Ascii("atively"),
        dictgen::InsensitiveStr::Ascii("atives"),
        dictgen::InsensitiveStr::Ascii("ordal"),
    ],
    values: &[
        &["primaries"],
        &["primarily"],
        &["primarily"],
        &["primaries"],
        &["primarily"],
        &["primarily"],
        &["primitive"],
        &["primitively"],
        &["primitives"],
        &["primordial"],
    ],
    range: 4..=7,
};

static WORD_PRIE_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_PRIE_CHILDREN),
    value: None,
};

pub static WORD_PRIE_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("mere"),
        dictgen::InsensitiveStr::Ascii("stes"),
        dictgen::InsensitiveStr::Ascii("sthod"),
        dictgen::InsensitiveStr::Ascii("stood"),
    ],
    values: &[
        &["premiere"],
        &["priests"],
        &["priesthood"],
        &["priesthood"],
    ],
    range: 4..=5,
};

static WORD_PRIC_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_PRIC_CHILDREN),
    value: None,
};

pub static WORD_PRIC_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("inpals"),
        dictgen::InsensitiveStr::Ascii("ipal"),
        dictgen::InsensitiveStr::Ascii("iple"),
    ],
    values: &[&["principals"], &["principal"], &["principle"]],
    range: 4..=6,
};

static WORD_PRIA_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_PRIA_CHILDREN),
    value: None,
};

pub static WORD_PRIA_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("sed"),
        dictgen::InsensitiveStr::Ascii("ses"),
    ],
    values: &[&["praised"], &["praises"]],
    range: 3..=3,
};

static WORD_PRE_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_PRE_CHILDREN),
    value: None,
};

static WORD_PRE_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    Some(&WORD_PREA_NODE),
    None,
    Some(&WORD_PREC_NODE),
    Some(&WORD_PRED_NODE),
    Some(&WORD_PREE_NODE),
    Some(&WORD_PREF_NODE),
    Some(&WORD_PREG_NODE),
    Some(&WORD_PREH_NODE),
    Some(&WORD_PREI_NODE),
    Some(&WORD_PREJ_NODE),
    None,
    Some(&WORD_PREL_NODE),
    Some(&WORD_PREM_NODE),
    None,
    Some(&WORD_PREO_NODE),
    Some(&WORD_PREP_NODE),
    Some(&WORD_PREQ_NODE),
    Some(&WORD_PRER_NODE),
    Some(&WORD_PRES_NODE),
    Some(&WORD_PRET_NODE),
    None,
    Some(&WORD_PREV_NODE),
    None,
    None,
    None,
    Some(&WORD_PREZ_NODE),
];

static WORD_PREZ_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_PREZ_CHILDREN),
    value: None,
};

pub static WORD_PREZ_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("idential")],
    values: &[&["presidential"]],
    range: 8..=8,
};

static WORD_PREV_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_PREV_CHILDREN),
    value: None,
};

pub static WORD_PREV_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ailaing"),
        dictgen::InsensitiveStr::Ascii("ailling"),
        dictgen::InsensitiveStr::Ascii("alecen"),
        dictgen::InsensitiveStr::Ascii("alente"),
        dictgen::InsensitiveStr::Ascii("antative"),
        dictgen::InsensitiveStr::Ascii("eiw"),
        dictgen::InsensitiveStr::Ascii("eiws"),
        dictgen::InsensitiveStr::Ascii("elant"),
        dictgen::InsensitiveStr::Ascii("encion"),
        dictgen::InsensitiveStr::Ascii("entation"),
        dictgen::InsensitiveStr::Ascii("entetive"),
        dictgen::InsensitiveStr::Ascii("entin"),
        dictgen::InsensitiveStr::Ascii("entitive"),
        dictgen::InsensitiveStr::Ascii("entitve"),
        dictgen::InsensitiveStr::Ascii("entivno"),
        dictgen::InsensitiveStr::Ascii("entivo"),
        dictgen::InsensitiveStr::Ascii("entors"),
        dictgen::InsensitiveStr::Ascii("erse"),
        dictgen::InsensitiveStr::Ascii("ert"),
        dictgen::InsensitiveStr::Ascii("ial"),
        dictgen::InsensitiveStr::Ascii("ialing"),
        dictgen::InsensitiveStr::Ascii("ies"),
        dictgen::InsensitiveStr::Ascii("ios"),
        dictgen::InsensitiveStr::Ascii("iosuly"),
        dictgen::InsensitiveStr::Ascii("ioulsy"),
        dictgen::InsensitiveStr::Ascii("ivous"),
        dictgen::InsensitiveStr::Ascii("iwes"),
        dictgen::InsensitiveStr::Ascii("olence"),
    ],
    values: &[
        &["prevailing"],
        &["prevailing"],
        &["prevalence"],
        &["prevalence"],
        &["preventative"],
        &["preview"],
        &["previews"],
        &["prevalent"],
        &["prevention"],
        &["presentation"],
        &["preventative"],
        &["prevention"],
        &["preventative"],
        &["preventative"],
        &["prevention"],
        &["prevention"],
        &["prevents"],
        &["perverse"],
        &["pervert"],
        &["prevail"],
        &["prevailing"],
        &["previews"],
        &["previous"],
        &["previously"],
        &["previously"],
        &["previous"],
        &["previews"],
        &["prevalence"],
    ],
    range: 3..=8,
};

static WORD_PRET_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_PRET_CHILDREN),
    value: None,
};

pub static WORD_PRET_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ador"),
        dictgen::InsensitiveStr::Ascii("aining"),
        dictgen::InsensitiveStr::Ascii("ains"),
        dictgen::InsensitiveStr::Ascii("ection"),
        dictgen::InsensitiveStr::Ascii("edermined"),
        dictgen::InsensitiveStr::Ascii("encious"),
        dictgen::InsensitiveStr::Ascii("endas"),
        dictgen::InsensitiveStr::Ascii("endendo"),
        dictgen::InsensitiveStr::Ascii("endias"),
        dictgen::InsensitiveStr::Ascii("ene"),
        dictgen::InsensitiveStr::Ascii("ens"),
        dictgen::InsensitiveStr::Ascii("ensious"),
        dictgen::InsensitiveStr::Ascii("ensje"),
        dictgen::InsensitiveStr::Ascii("entieus"),
        dictgen::InsensitiveStr::Ascii("entios"),
        dictgen::InsensitiveStr::Ascii("entous"),
        dictgen::InsensitiveStr::Ascii("inent"),
    ],
    values: &[
        &["predator"],
        &["pertaining"],
        &["pertains"],
        &["protection"],
        &["predetermined"],
        &["pretentious"],
        &["pretends"],
        &["pretended"],
        &["pretends"],
        &["pretense"],
        &["pretends"],
        &["pretentious"],
        &["pretense"],
        &["pretentious"],
        &["pretentious"],
        &["pretentious"],
        &["pertinent"],
    ],
    range: 3..=9,
};

static WORD_PRES_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_PRES_CHILDREN),
    value: None,
};

static WORD_PRES_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    None,
    None,
    Some(&WORD_PRESC_NODE),
    None,
    Some(&WORD_PRESE_NODE),
    None,
    None,
    None,
    Some(&WORD_PRESI_NODE),
    None,
    None,
    None,
    None,
    Some(&WORD_PRESN_NODE),
    Some(&WORD_PRESO_NODE),
    Some(&WORD_PRESP_NODE),
    None,
    Some(&WORD_PRESR_NODE),
    Some(&WORD_PRESS_NODE),
    Some(&WORD_PREST_NODE),
    Some(&WORD_PRESU_NODE),
    None,
    None,
    None,
    None,
    None,
];

static WORD_PRESU_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_PRESU_CHILDREN),
    value: None,
};

pub static WORD_PRESU_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ade"),
        dictgen::InsensitiveStr::Ascii("aded"),
        dictgen::InsensitiveStr::Ascii("ambly"),
        dictgen::InsensitiveStr::Ascii("asion"),
        dictgen::InsensitiveStr::Ascii("asive"),
        dictgen::InsensitiveStr::Ascii("de"),
        dictgen::InsensitiveStr::Ascii("mabely"),
        dictgen::InsensitiveStr::Ascii("mabley"),
        dictgen::InsensitiveStr::Ascii("mebly"),
        dictgen::InsensitiveStr::Ascii("mendo"),
        dictgen::InsensitiveStr::Ascii("mibly"),
        dictgen::InsensitiveStr::Ascii("mpteous"),
        dictgen::InsensitiveStr::Ascii("mpton"),
        dictgen::InsensitiveStr::Ascii("mptous"),
        dictgen::InsensitiveStr::Ascii("mptuious"),
        dictgen::InsensitiveStr::Ascii("mptuos"),
        dictgen::InsensitiveStr::Ascii("mputous"),
    ],
    values: &[
        &["persuade"],
        &["persuaded"],
        &["presumably"],
        &["persuasion"],
        &["persuasive"],
        &["presumed"],
        &["presumably"],
        &["presumably"],
        &["presumably"],
        &["presumed"],
        &["presumably"],
        &["presumptuous"],
        &["presumption"],
        &["presumptuous"],
        &["presumptuous"],
        &["presumptuous"],
        &["presumptuous"],
    ],
    range: 2..=8,
};

static WORD_PREST_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_PREST_CHILDREN),
    value: None,
};

pub static WORD_PREST_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("egious"),
        dictgen::InsensitiveStr::Ascii("es"),
        dictgen::InsensitiveStr::Ascii("igeous"),
        dictgen::InsensitiveStr::Ascii("igieus"),
        dictgen::InsensitiveStr::Ascii("igios"),
        dictgen::InsensitiveStr::Ascii("igiosa"),
        dictgen::InsensitiveStr::Ascii("igiose"),
        dictgen::InsensitiveStr::Ascii("igiosi"),
        dictgen::InsensitiveStr::Ascii("igioso"),
        dictgen::InsensitiveStr::Ascii("igiu"),
        dictgen::InsensitiveStr::Ascii("igous"),
        dictgen::InsensitiveStr::Ascii("igue"),
        dictgen::InsensitiveStr::Ascii("iguous"),
    ],
    values: &[
        &["prestigious"],
        &["presets"],
        &["prestigious"],
        &["prestigious"],
        &["prestigious"],
        &["prestigious"],
        &["prestigious"],
        &["prestigious"],
        &["prestigious"],
        &["prestigious"],
        &["prestigious"],
        &["prestige"],
        &["prestigious"],
    ],
    range: 2..=6,
};

static WORD_PRESS_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_PRESS_CHILDREN),
    value: None,
};

pub static WORD_PRESS_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("uming"),
        dictgen::InsensitiveStr::Ascii("ureing"),
    ],
    values: &[&["pressuring"], &["pressuring"]],
    range: 5..=6,
};

static WORD_PRESR_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_PRESR_CHILDREN),
    value: None,
};

pub static WORD_PRESR_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("ciption")],
    values: &[&["prescriptions"]],
    range: 7..=7,
};

static WORD_PRESP_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_PRESP_CHILDREN),
    value: None,
};

pub static WORD_PRESP_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ective"),
        dictgen::InsensitiveStr::Ascii("ectives"),
    ],
    values: &[&["perspective"], &["perspectives"]],
    range: 6..=7,
};

static WORD_PRESO_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_PRESO_CHILDREN),
    value: None,
};

pub static WORD_PRESO_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("mption"),
        dictgen::InsensitiveStr::Ascii("nalized"),
        dictgen::InsensitiveStr::Ascii("nally"),
        dictgen::InsensitiveStr::Ascii("nas"),
        dictgen::InsensitiveStr::Ascii("nhood"),
    ],
    values: &[
        &["presumption"],
        &["personalized"],
        &["personally"],
        &["personas"],
        &["personhood"],
    ],
    range: 3..=7,
};

static WORD_PRESN_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_PRESN_CHILDREN),
    value: None,
};

pub static WORD_PRESN_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("etation")],
    values: &[&["presentations"]],
    range: 7..=7,
};

static WORD_PRESI_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_PRESI_CHILDREN),
    value: None,
};

pub static WORD_PRESI_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("cely"),
        dictgen::InsensitiveStr::Ascii("cion"),
        dictgen::InsensitiveStr::Ascii("dancy"),
        dictgen::InsensitiveStr::Ascii("dante"),
        dictgen::InsensitiveStr::Ascii("dencey"),
        dictgen::InsensitiveStr::Ascii("dencial"),
        dictgen::InsensitiveStr::Ascii("denital"),
        dictgen::InsensitiveStr::Ascii("denta"),
        dictgen::InsensitiveStr::Ascii("dentail"),
        dictgen::InsensitiveStr::Ascii("dental"),
        dictgen::InsensitiveStr::Ascii("dentcy"),
        dictgen::InsensitiveStr::Ascii("denty"),
        dictgen::InsensitiveStr::Ascii("deny"),
        dictgen::InsensitiveStr::Ascii("det"),
        dictgen::InsensitiveStr::Ascii("dunce"),
        dictgen::InsensitiveStr::Ascii("st"),
        dictgen::InsensitiveStr::Ascii("stence"),
        dictgen::InsensitiveStr::Ascii("stent"),
        dictgen::InsensitiveStr::Ascii("sts"),
        dictgen::InsensitiveStr::Ascii("tge"),
        dictgen::InsensitiveStr::Ascii("tgious"),
        dictgen::InsensitiveStr::Ascii("tigous"),
    ],
    values: &[
        &["precisely"],
        &["precision"],
        &["presidency"],
        &["presidents"],
        &["presidency"],
        &["presidential"],
        &["presidential"],
        &["presidential"],
        &["presidential"],
        &["presidential"],
        &["presidency"],
        &["presidency"],
        &["presidency"],
        &["presidents"],
        &["presidency"],
        &["persist"],
        &["persistence"],
        &["persistent"],
        &["persists"],
        &["prestige"],
        &["prestigious"],
        &["prestigious"],
    ],
    range: 2..=7,
};

static WORD_PRESE_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_PRESE_CHILDREN),
    value: None,
};

pub static WORD_PRESE_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("aring"),
        dictgen::InsensitiveStr::Ascii("cuted"),
        dictgen::InsensitiveStr::Ascii("cution"),
        dictgen::InsensitiveStr::Ascii("dency"),
        dictgen::InsensitiveStr::Ascii("dential"),
        dictgen::InsensitiveStr::Ascii("dents"),
        dictgen::InsensitiveStr::Ascii("dintia"),
        dictgen::InsensitiveStr::Ascii("nning"),
        dictgen::InsensitiveStr::Ascii("ns"),
        dictgen::InsensitiveStr::Ascii("nse"),
        dictgen::InsensitiveStr::Ascii("nst"),
        dictgen::InsensitiveStr::Ascii("ntacion"),
        dictgen::InsensitiveStr::Ascii("ntaion"),
        dictgen::InsensitiveStr::Ascii("ntaiton"),
        dictgen::InsensitiveStr::Ascii("ntas"),
        dictgen::InsensitiveStr::Ascii("ntase"),
        dictgen::InsensitiveStr::Ascii("ntatin"),
        dictgen::InsensitiveStr::Ascii("ntato"),
        dictgen::InsensitiveStr::Ascii("ntes"),
        dictgen::InsensitiveStr::Ascii("ntion"),
        dictgen::InsensitiveStr::Ascii("ntors"),
        dictgen::InsensitiveStr::Ascii("rvacion"),
        dictgen::InsensitiveStr::Ascii("rvare"),
        dictgen::InsensitiveStr::Ascii("rvating"),
        dictgen::InsensitiveStr::Ascii("rvativo"),
        dictgen::InsensitiveStr::Ascii("rvato"),
        dictgen::InsensitiveStr::Ascii("rvaton"),
        dictgen::InsensitiveStr::Ascii("rverd"),
        dictgen::InsensitiveStr::Ascii("rvered"),
        dictgen::InsensitiveStr::Ascii("st"),
    ],
    values: &[
        &["preserving"],
        &["persecuted"],
        &["persecution"],
        &["presidency"],
        &["presidential"],
        &["presidents"],
        &["presidential"],
        &["presenting"],
        &["presents"],
        &["presence"],
        &["presets"],
        &["presentation"],
        &["presentation"],
        &["presentations"],
        &["presents"],
        &["presents"],
        &["presentations"],
        &["presentation"],
        &["presents"],
        &["presenting"],
        &["presents"],
        &["preservation"],
        &["preserve"],
        &["preservation"],
        &["preservation"],
        &["preservation"],
        &["preservation"],
        &["preserved"],
        &["preserved"],
        &["presets"],
    ],
    range: 2..=7,
};

static WORD_PRESC_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_PRESC_CHILDREN),
    value: None,
};

pub static WORD_PRESC_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ients"),
        dictgen::InsensitiveStr::Ascii("irbed"),
        dictgen::InsensitiveStr::Ascii("irption"),
        dictgen::InsensitiveStr::Ascii("ribtion"),
        dictgen::InsensitiveStr::Ascii("ribtions"),
        dictgen::InsensitiveStr::Ascii("rie"),
        dictgen::InsensitiveStr::Ascii("ripcion"),
        dictgen::InsensitiveStr::Ascii("riped"),
        dictgen::InsensitiveStr::Ascii("riptionists"),
        dictgen::InsensitiveStr::Ascii("ripton"),
        dictgen::InsensitiveStr::Ascii("riptons"),
        dictgen::InsensitiveStr::Ascii("ritpion"),
    ],
    values: &[
        &["presidents"],
        &["prescribed"],
        &["prescriptions"],
        &["prescription"],
        &["prescriptions"],
        &["prescribed"],
        &["prescription"],
        &["prescribed"],
        &["prescriptions"],
        &["prescription"],
        &["prescriptions"],
        &["prescriptions"],
    ],
    range: 3..=11,
};

static WORD_PRER_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_PRER_CHILDREN),
    value: None,
};

pub static WORD_PRER_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("equesit"),
        dictgen::InsensitiveStr::Ascii("equisets"),
        dictgen::InsensitiveStr::Ascii("equisities"),
        dictgen::InsensitiveStr::Ascii("equiste"),
        dictgen::InsensitiveStr::Ascii("equisties"),
        dictgen::InsensitiveStr::Ascii("equistite"),
        dictgen::InsensitiveStr::Ascii("equites"),
        dictgen::InsensitiveStr::Ascii("iod"),
        dictgen::InsensitiveStr::Ascii("ogitive"),
        dictgen::InsensitiveStr::Ascii("ogotive"),
    ],
    values: &[
        &["prerequisite"],
        &["prerequisite"],
        &["prerequisite"],
        &["prerequisite"],
        &["prerequisite"],
        &["prerequisite"],
        &["prerequisite"],
        &["period"],
        &["prerogative"],
        &["prerogative"],
    ],
    range: 3..=10,
};

static WORD_PREQ_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_PREQ_CHILDREN),
    value: None,
};

pub static WORD_PREQ_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("euls"),
        dictgen::InsensitiveStr::Ascii("ules"),
    ],
    values: &[&["prequels"], &["prequels"]],
    range: 4..=4,
};

static WORD_PREP_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_PREP_CHILDREN),
    value: None,
};

pub static WORD_PREP_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("air"),
        dictgen::InsensitiveStr::Ascii("aird"),
        dictgen::InsensitiveStr::Ascii("aracion"),
        dictgen::InsensitiveStr::Ascii("arato"),
        dictgen::InsensitiveStr::Ascii("artion"),
        dictgen::InsensitiveStr::Ascii("atory"),
        dictgen::InsensitiveStr::Ascii("endicular"),
        dictgen::InsensitiveStr::Ascii("eration"),
        dictgen::InsensitiveStr::Ascii("erations"),
        dictgen::InsensitiveStr::Ascii("etrated"),
        dictgen::InsensitiveStr::Ascii("etrator"),
        dictgen::InsensitiveStr::Ascii("etrators"),
        dictgen::InsensitiveStr::Ascii("etually"),
        dictgen::InsensitiveStr::Ascii("etuate"),
        dictgen::InsensitiveStr::Ascii("etuated"),
        dictgen::InsensitiveStr::Ascii("etuates"),
        dictgen::InsensitiveStr::Ascii("etuating"),
        dictgen::InsensitiveStr::Ascii("oration"),
        dictgen::InsensitiveStr::Ascii("osterious"),
        dictgen::InsensitiveStr::Ascii("osters"),
        dictgen::InsensitiveStr::Ascii("osterus"),
        dictgen::InsensitiveStr::Ascii("ostorous"),
        dictgen::InsensitiveStr::Ascii("osturous"),
    ],
    values: &[
        &["prepare"],
        &["prepaid"],
        &["preparation"],
        &["preparation"],
        &["preparation"],
        &["preparatory"],
        &["perpendicular"],
        &["preparation"],
        &["preparations"],
        &["perpetrated"],
        &["perpetrator"],
        &["perpetrators"],
        &["perpetually"],
        &["perpetuate"],
        &["perpetuated"],
        &["perpetuates"],
        &["perpetuating"],
        &["preparation"],
        &["preposterous"],
        &["preposterous"],
        &["preposterous"],
        &["preposterous"],
        &["preposterous"],
    ],
    range: 3..=9,
};

static WORD_PREO_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_PREO_CHILDREN),
    value: None,
};

pub static WORD_PREO_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("cupation"),
        dictgen::InsensitiveStr::Ascii("rded"),
        dictgen::InsensitiveStr::Ascii("rderd"),
        dictgen::InsensitiveStr::Ascii("rderded"),
        dictgen::InsensitiveStr::Ascii("rderers"),
        dictgen::InsensitiveStr::Ascii("rderes"),
        dictgen::InsensitiveStr::Ascii("rdes"),
        dictgen::InsensitiveStr::Ascii("xide"),
    ],
    values: &[
        &["preoccupation"],
        &["preordered"],
        &["preordered"],
        &["preordered"],
        &["preorders"],
        &["preorders"],
        &["preorders"],
        &["peroxide"],
    ],
    range: 4..=8,
};

static WORD_PREM_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_PREM_CHILDREN),
    value: None,
};

pub static WORD_PREM_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("anent"),
        dictgen::InsensitiveStr::Ascii("anently"),
        dictgen::InsensitiveStr::Ascii("aturaly"),
        dictgen::InsensitiveStr::Ascii("aturelly"),
        dictgen::InsensitiveStr::Ascii("aturily"),
        dictgen::InsensitiveStr::Ascii("aturley"),
        dictgen::InsensitiveStr::Ascii("aturly"),
        dictgen::InsensitiveStr::Ascii("eir"),
        dictgen::InsensitiveStr::Ascii("eire"),
        dictgen::InsensitiveStr::Ascii("eired"),
        dictgen::InsensitiveStr::Ascii("esis"),
        dictgen::InsensitiveStr::Ascii("iare"),
        dictgen::InsensitiveStr::Ascii("iee"),
        dictgen::InsensitiveStr::Ascii("ilinary"),
        dictgen::InsensitiveStr::Ascii("illenial"),
        dictgen::InsensitiveStr::Ascii("inence"),
        dictgen::InsensitiveStr::Ascii("ines"),
        dictgen::InsensitiveStr::Ascii("ire"),
        dictgen::InsensitiveStr::Ascii("issible"),
        dictgen::InsensitiveStr::Ascii("ission"),
        dictgen::InsensitiveStr::Ascii("issions"),
        dictgen::InsensitiveStr::Ascii("its"),
        dictgen::InsensitiveStr::Ascii("ius"),
        dictgen::InsensitiveStr::Ascii("onasterians"),
        dictgen::InsensitiveStr::Ascii("uim"),
        dictgen::InsensitiveStr::Ascii("uims"),
    ],
    values: &[
        &["permanent"],
        &["permanently"],
        &["prematurely"],
        &["prematurely"],
        &["prematurely"],
        &["prematurely"],
        &["prematurely"],
        &["premier"],
        &["premiere"],
        &["premiered"],
        &["premises"],
        &["premier"],
        &["premiere"],
        &["preliminary"],
        &["premillennial"],
        &["preeminence"],
        &["premise"],
        &["premier"],
        &["permissible"],
        &["permission"],
        &["permissions"],
        &["permits"],
        &["premiums"],
        &["premonstratensians"],
        &["premium"],
        &["premiums"],
    ],
    range: 3..=11,
};

static WORD_PREL_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_PREL_CHILDREN),
    value: None,
};

pub static WORD_PREL_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ayed"),
        dictgen::InsensitiveStr::Ascii("eminary"),
        dictgen::InsensitiveStr::Ascii("iferation"),
        dictgen::InsensitiveStr::Ascii("imanary"),
        dictgen::InsensitiveStr::Ascii("imenary"),
        dictgen::InsensitiveStr::Ascii("imiary"),
        dictgen::InsensitiveStr::Ascii("iminarly"),
    ],
    values: &[
        &["replayed"],
        &["preliminary"],
        &["proliferation"],
        &["preliminary"],
        &["preliminary"],
        &["preliminary"],
        &["preliminary"],
    ],
    range: 4..=9,
};

static WORD_PREJ_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_PREJ_CHILDREN),
    value: None,
};

pub static WORD_PREJ_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("educed"),
        dictgen::InsensitiveStr::Ascii("educes"),
        dictgen::InsensitiveStr::Ascii("iduce"),
        dictgen::InsensitiveStr::Ascii("iduced"),
        dictgen::InsensitiveStr::Ascii("iduces"),
        dictgen::InsensitiveStr::Ascii("ucide"),
        dictgen::InsensitiveStr::Ascii("ucided"),
        dictgen::InsensitiveStr::Ascii("ucides"),
        dictgen::InsensitiveStr::Ascii("udicies"),
        dictgen::InsensitiveStr::Ascii("udis"),
        dictgen::InsensitiveStr::Ascii("uduced"),
        dictgen::InsensitiveStr::Ascii("uduces"),
    ],
    values: &[
        &["prejudiced"],
        &["prejudices"],
        &["prejudice"],
        &["prejudiced"],
        &["prejudices"],
        &["prejudice"],
        &["prejudiced"],
        &["prejudices"],
        &["prejudice"],
        &["prejudices"],
        &["prejudiced"],
        &["prejudices"],
    ],
    range: 4..=7,
};

static WORD_PREI_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_PREI_CHILDREN),
    value: None,
};

pub static WORD_PREI_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("mer"),
        dictgen::InsensitiveStr::Ascii("mere"),
        dictgen::InsensitiveStr::Ascii("meter"),
        dictgen::InsensitiveStr::Ascii("mum"),
        dictgen::InsensitiveStr::Ascii("mums"),
        dictgen::InsensitiveStr::Ascii("nitalization"),
        dictgen::InsensitiveStr::Ascii("nitalize"),
        dictgen::InsensitiveStr::Ascii("nitalized"),
        dictgen::InsensitiveStr::Ascii("nitalizes"),
        dictgen::InsensitiveStr::Ascii("nitalizing"),
        dictgen::InsensitiveStr::Ascii("od"),
        dictgen::InsensitiveStr::Ascii("odic"),
        dictgen::InsensitiveStr::Ascii("pheral"),
        dictgen::InsensitiveStr::Ascii("pherals"),
        dictgen::InsensitiveStr::Ascii("sdents"),
        dictgen::InsensitiveStr::Ascii("sthood"),
        dictgen::InsensitiveStr::Ascii("sts"),
        dictgen::InsensitiveStr::Ascii("vew"),
        dictgen::InsensitiveStr::Ascii("vews"),
    ],
    values: &[
        &["premier"],
        &["premiere"],
        &["perimeter"],
        &["premium"],
        &["premiums"],
        &["preinitialization"],
        &["preinitialize"],
        &["preinitialized"],
        &["preinitializes"],
        &["preinitializing"],
        &["period"],
        &["periodic"],
        &["peripheral"],
        &["peripherals"],
        &["presidents"],
        &["priesthood"],
        &["priests"],
        &["preview"],
        &["previews"],
    ],
    range: 2..=12,
};

static WORD_PREH_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_PREH_CHILDREN),
    value: None,
};

pub static WORD_PREH_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("aps")],
    values: &[&["perhaps"]],
    range: 3..=3,
};

static WORD_PREG_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_PREG_CHILDREN),
    value: None,
};

pub static WORD_PREG_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ancies"),
        dictgen::InsensitiveStr::Ascii("nance"),
        dictgen::InsensitiveStr::Ascii("nanices"),
        dictgen::InsensitiveStr::Ascii("nanies"),
        dictgen::InsensitiveStr::Ascii("nencies"),
        dictgen::InsensitiveStr::Ascii("orative"),
        dictgen::InsensitiveStr::Ascii("ressively"),
    ],
    values: &[
        &["pregnancies"],
        &["pregnancies"],
        &["pregnancies"],
        &["pregnancies"],
        &["pregnancies"],
        &["prerogative"],
        &["progressively"],
    ],
    range: 5..=9,
};

static WORD_PREF_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_PREF_CHILDREN),
    value: None,
};

pub static WORD_PREF_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("arable"),
        dictgen::InsensitiveStr::Ascii("arably"),
        dictgen::InsensitiveStr::Ascii("ection"),
        dictgen::InsensitiveStr::Ascii("ectly"),
        dictgen::InsensitiveStr::Ascii("erabbly"),
        dictgen::InsensitiveStr::Ascii("erabely"),
        dictgen::InsensitiveStr::Ascii("erabley"),
        dictgen::InsensitiveStr::Ascii("erablly"),
        dictgen::InsensitiveStr::Ascii("erance"),
        dictgen::InsensitiveStr::Ascii("erances"),
        dictgen::InsensitiveStr::Ascii("erantial"),
        dictgen::InsensitiveStr::Ascii("eras"),
        dictgen::InsensitiveStr::Ascii("ereble"),
        dictgen::InsensitiveStr::Ascii("ered"),
        dictgen::InsensitiveStr::Ascii("erens"),
        dictgen::InsensitiveStr::Ascii("erenser"),
        dictgen::InsensitiveStr::Ascii("erentail"),
        dictgen::InsensitiveStr::Ascii("erental"),
        dictgen::InsensitiveStr::Ascii("erente"),
        dictgen::InsensitiveStr::Ascii("erentes"),
        dictgen::InsensitiveStr::Ascii("erenze"),
        dictgen::InsensitiveStr::Ascii("eres"),
        dictgen::InsensitiveStr::Ascii("erible"),
        dictgen::InsensitiveStr::Ascii("eribly"),
        dictgen::InsensitiveStr::Ascii("ering"),
        dictgen::InsensitiveStr::Ascii("eris"),
        dictgen::InsensitiveStr::Ascii("ernece"),
        dictgen::InsensitiveStr::Ascii("errably"),
        dictgen::InsensitiveStr::Ascii("errring"),
        dictgen::InsensitiveStr::Ascii("errs"),
        dictgen::InsensitiveStr::Ascii("essionalism"),
        dictgen::InsensitiveStr::Ascii("ormance"),
        dictgen::InsensitiveStr::Ascii("ormances"),
        dictgen::InsensitiveStr::Ascii("ormer"),
        dictgen::InsensitiveStr::Ascii("ormers"),
    ],
    values: &[
        &["preferable"],
        &["preferably"],
        &["perfection"],
        &["perfectly"],
        &["preferably"],
        &["preferable"],
        &["preferably"],
        &["preferably"],
        &["preference"],
        &["preferences"],
        &["preferential"],
        &["prefers"],
        &["preferable"],
        &["preferred"],
        &["preferences"],
        &["preferences"],
        &["preferential"],
        &["preferential"],
        &["preference"],
        &["preferences"],
        &["preference"],
        &["prefers"],
        &["preferable"],
        &["preferably"],
        &["preferring"],
        &["prefers"],
        &["preferences"],
        &["preferably"],
        &["preferring"],
        &["prefers"],
        &["professionalism"],
        &["performance"],
        &["performances"],
        &["performer"],
        &["performers"],
    ],
    range: 4..=11,
};

static WORD_PREE_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_PREE_CHILDREN),
    value: None,
};

pub static WORD_PREE_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("sts")],
    values: &[&["presets"]],
    range: 3..=3,
};

static WORD_PRED_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_PRED_CHILDREN),
    value: None,
};

static WORD_PRED_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    Some(&WORD_PREDA_NODE),
    None,
    None,
    None,
    Some(&WORD_PREDE_NODE),
    None,
    None,
    None,
    Some(&WORD_PREDI_NODE),
    Some(&WORD_PREDJ_NODE),
    None,
    None,
    None,
    None,
    Some(&WORD_PREDO_NODE),
    None,
    None,
    None,
    None,
    None,
    Some(&WORD_PREDU_NODE),
    None,
    None,
    None,
    None,
    None,
];

static WORD_PREDU_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_PREDU_CHILDREN),
    value: None,
};

pub static WORD_PREDU_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ction"),
        dictgen::InsensitiveStr::Ascii("ctive"),
        dictgen::InsensitiveStr::Ascii("jice"),
        dictgen::InsensitiveStr::Ascii("jiced"),
        dictgen::InsensitiveStr::Ascii("jices"),
    ],
    values: &[
        &["prediction"],
        &["predictive"],
        &["prejudice"],
        &["prejudiced"],
        &["prejudices"],
    ],
    range: 4..=5,
};

static WORD_PREDO_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_PREDO_CHILDREN),
    value: None,
};

pub static WORD_PREDO_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("cessor"),
        dictgen::InsensitiveStr::Ascii("cessors"),
        dictgen::InsensitiveStr::Ascii("menantly"),
        dictgen::InsensitiveStr::Ascii("miantly"),
        dictgen::InsensitiveStr::Ascii("minantely"),
        dictgen::InsensitiveStr::Ascii("minantley"),
        dictgen::InsensitiveStr::Ascii("minanty"),
        dictgen::InsensitiveStr::Ascii("minatly"),
        dictgen::InsensitiveStr::Ascii("minently"),
    ],
    values: &[
        &["predecessor"],
        &["predecessors"],
        &["predominantly"],
        &["predominately"],
        &["predominantly"],
        &["predominantly"],
        &["predominantly"],
        &["predominantly"],
        &["predominantly"],
    ],
    range: 6..=9,
};

static WORD_PREDJ_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_PREDJ_CHILDREN),
    value: None,
};

pub static WORD_PREDJ_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("uice"),
        dictgen::InsensitiveStr::Ascii("uiced"),
        dictgen::InsensitiveStr::Ascii("uices"),
    ],
    values: &[&["prejudice"], &["prejudiced"], &["prejudices"]],
    range: 4..=5,
};

static WORD_PREDI_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_PREDI_CHILDREN),
    value: None,
};

pub static WORD_PREDI_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("cat"),
        dictgen::InsensitiveStr::Ascii("catble"),
        dictgen::InsensitiveStr::Ascii("ccion"),
        dictgen::InsensitiveStr::Ascii("cement"),
        dictgen::InsensitiveStr::Ascii("cessor"),
        dictgen::InsensitiveStr::Ascii("cessors"),
        dictgen::InsensitiveStr::Ascii("ceted"),
        dictgen::InsensitiveStr::Ascii("ciment"),
        dictgen::InsensitiveStr::Ascii("cited"),
        dictgen::InsensitiveStr::Ascii("citng"),
        dictgen::InsensitiveStr::Ascii("citon"),
        dictgen::InsensitiveStr::Ascii("citons"),
        dictgen::InsensitiveStr::Ascii("citve"),
        dictgen::InsensitiveStr::Ascii("ckted"),
        dictgen::InsensitiveStr::Ascii("ctave"),
        dictgen::InsensitiveStr::Ascii("cte"),
        dictgen::InsensitiveStr::Ascii("ctible"),
        dictgen::InsensitiveStr::Ascii("ctie"),
        dictgen::InsensitiveStr::Ascii("ctin"),
        dictgen::InsensitiveStr::Ascii("ctious"),
        dictgen::InsensitiveStr::Ascii("ctivo"),
        dictgen::InsensitiveStr::Ascii("ctment"),
        dictgen::InsensitiveStr::Ascii("ctons"),
        dictgen::InsensitiveStr::Ascii("sposte"),
        dictgen::InsensitiveStr::Ascii("termined"),
    ],
    values: &[
        &["predict"],
        &["predictable"],
        &["prediction"],
        &["predicament"],
        &["predecessor"],
        &["predecessors"],
        &["predicated"],
        &["predicament"],
        &["predicated"],
        &["predicting"],
        &["prediction"],
        &["predictions"],
        &["predictive"],
        &["predicated"],
        &["predictive"],
        &["predictive"],
        &["predictable"],
        &["predictive"],
        &["prediction"],
        &["predictions"],
        &["prediction"],
        &["predicament"],
        &["predictions"],
        &["predisposed"],
        &["predetermined"],
    ],
    range: 3..=8,
};

static WORD_PREDE_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_PREDE_CHILDREN),
    value: None,
};

pub static WORD_PREDE_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("cated"),
        dictgen::InsensitiveStr::Ascii("ccesors"),
        dictgen::InsensitiveStr::Ascii("cence"),
        dictgen::InsensitiveStr::Ascii("cesor"),
        dictgen::InsensitiveStr::Ascii("cesores"),
        dictgen::InsensitiveStr::Ascii("cesser"),
        dictgen::InsensitiveStr::Ascii("cessores"),
        dictgen::InsensitiveStr::Ascii("ction"),
        dictgen::InsensitiveStr::Ascii("ctions"),
        dictgen::InsensitiveStr::Ascii("ctive"),
        dictgen::InsensitiveStr::Ascii("scesor"),
        dictgen::InsensitiveStr::Ascii("scesors"),
        dictgen::InsensitiveStr::Ascii("sessor"),
        dictgen::InsensitiveStr::Ascii("sposed"),
        dictgen::InsensitiveStr::Ascii("ssecor"),
        dictgen::InsensitiveStr::Ascii("ssecors"),
        dictgen::InsensitiveStr::Ascii("termiend"),
        dictgen::InsensitiveStr::Ascii("termind"),
        dictgen::InsensitiveStr::Ascii("terminded"),
        dictgen::InsensitiveStr::Ascii("tirmined"),
    ],
    values: &[
        &["predicated"],
        &["predecessor"],
        &["precedence"],
        &["predecessor"],
        &["predecessor"],
        &["predecessor"],
        &["predecessors"],
        &["prediction"],
        &["predictions"],
        &["predictive"],
        &["predecessors"],
        &["predecessors"],
        &["predecessors"],
        &["predisposed"],
        &["predecessor"],
        &["predecessors"],
        &["predetermined"],
        &["predetermined"],
        &["predetermined"],
        &["predetermined"],
    ],
    range: 5..=9,
};

static WORD_PREDA_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_PREDA_CHILDREN),
    value: None,
};

pub static WORD_PREDA_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("cessor"),
        dictgen::InsensitiveStr::Ascii("cessors"),
        dictgen::InsensitiveStr::Ascii("tobr"),
    ],
    values: &[&["predecessor"], &["predecessors"], &["predator"]],
    range: 4..=7,
};

static WORD_PREC_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_PREC_CHILDREN),
    value: None,
};

pub static WORD_PREC_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("aucion"),
        dictgen::InsensitiveStr::Ascii("ausion"),
        dictgen::InsensitiveStr::Ascii("ausions"),
        dictgen::InsensitiveStr::Ascii("autios"),
        dictgen::InsensitiveStr::Ascii("edance"),
        dictgen::InsensitiveStr::Ascii("edeed"),
        dictgen::InsensitiveStr::Ascii("edense"),
        dictgen::InsensitiveStr::Ascii("edessor"),
        dictgen::InsensitiveStr::Ascii("edessors"),
        dictgen::InsensitiveStr::Ascii("eed"),
        dictgen::InsensitiveStr::Ascii("eeded"),
        dictgen::InsensitiveStr::Ascii("eeding"),
        dictgen::InsensitiveStr::Ascii("eeds"),
        dictgen::InsensitiveStr::Ascii("eived"),
        dictgen::InsensitiveStr::Ascii("endece"),
        dictgen::InsensitiveStr::Ascii("endence"),
        dictgen::InsensitiveStr::Ascii("entage"),
        dictgen::InsensitiveStr::Ascii("entages"),
        dictgen::InsensitiveStr::Ascii("entile"),
        dictgen::InsensitiveStr::Ascii("ice"),
        dictgen::InsensitiveStr::Ascii("iesly"),
        dictgen::InsensitiveStr::Ascii("iselly"),
        dictgen::InsensitiveStr::Ascii("isie"),
        dictgen::InsensitiveStr::Ascii("isley"),
        dictgen::InsensitiveStr::Ascii("isly"),
        dictgen::InsensitiveStr::Ascii("isou"),
        dictgen::InsensitiveStr::Ascii("onceieved"),
        dictgen::InsensitiveStr::Ascii("onceved"),
        dictgen::InsensitiveStr::Ascii("oncieve"),
        dictgen::InsensitiveStr::Ascii("onveived"),
        dictgen::InsensitiveStr::Ascii("rastination"),
        dictgen::InsensitiveStr::Ascii("uation"),
        dictgen::InsensitiveStr::Ascii("uations"),
        dictgen::InsensitiveStr::Ascii("ulde"),
        dictgen::InsensitiveStr::Ascii("urors"),
        dictgen::InsensitiveStr::Ascii("urosr"),
        dictgen::InsensitiveStr::Ascii("urser"),
        dictgen::InsensitiveStr::Ascii("ussion"),
    ],
    values: &[
        &["precaution"],
        &["precaution"],
        &["precautions"],
        &["precautions"],
        &["precedence"],
        &["preceded"],
        &["precedence"],
        &["predecessor"],
        &["predecessors"],
        &["precede"],
        &["preceded"],
        &["preceding"],
        &["precedes"],
        &["perceived"],
        &["precedence"],
        &["precedence"],
        &["percentage"],
        &["percentages"],
        &["percentile"],
        &["precise"],
        &["precisely"],
        &["precisely"],
        &["precise"],
        &["precisely"],
        &["precisely"],
        &["precious"],
        &["preconceived"],
        &["preconceived"],
        &["preconceived"],
        &["preconceived"],
        &["procrastination"],
        &["precautions"],
        &["precautions"],
        &["preclude"],
        &["precursor"],
        &["precursor"],
        &["precursor"],
        &["percussion"],
    ],
    range: 3..=11,
};

static WORD_PREA_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_PREA_CHILDREN),
    value: None,
};

pub static WORD_PREA_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("dtor"),
        dictgen::InsensitiveStr::Ascii("dtors"),
        dictgen::InsensitiveStr::Ascii("mde"),
        dictgen::InsensitiveStr::Ascii("mple"),
    ],
    values: &[&["predator"], &["predators"], &["premade"], &["preamble"]],
    range: 3..=5,
};

static WORD_PRC_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_PRC_CHILDREN),
    value: None,
};

pub static WORD_PRC_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("eeded")],
    values: &[&["preceded"]],
    range: 5..=5,
};

static WORD_PRA_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_PRA_CHILDREN),
    value: None,
};

pub static WORD_PRA_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("citcal"),
        dictgen::InsensitiveStr::Ascii("citcally"),
        dictgen::InsensitiveStr::Ascii("citse"),
        dictgen::InsensitiveStr::Ascii("cthett"),
        dictgen::InsensitiveStr::Ascii("ctial"),
        dictgen::InsensitiveStr::Ascii("ctially"),
        dictgen::InsensitiveStr::Ascii("cticallity"),
        dictgen::InsensitiveStr::Ascii("cticaly"),
        dictgen::InsensitiveStr::Ascii("cticarlo"),
        dictgen::InsensitiveStr::Ascii("cticess"),
        dictgen::InsensitiveStr::Ascii("cticioner"),
        dictgen::InsensitiveStr::Ascii("cticioners"),
        dictgen::InsensitiveStr::Ascii("cticlly"),
        dictgen::InsensitiveStr::Ascii("cticly"),
        dictgen::InsensitiveStr::Ascii("ctie"),
        dictgen::InsensitiveStr::Ascii("cties"),
        dictgen::InsensitiveStr::Ascii("ctioner"),
        dictgen::InsensitiveStr::Ascii("ctioners"),
        dictgen::InsensitiveStr::Ascii("ctisioner"),
        dictgen::InsensitiveStr::Ascii("ctisioners"),
        dictgen::InsensitiveStr::Ascii("ctitioneer"),
        dictgen::InsensitiveStr::Ascii("ctitionner"),
        dictgen::InsensitiveStr::Ascii("ctitionners"),
        dictgen::InsensitiveStr::Ascii("ctitions"),
        dictgen::InsensitiveStr::Ascii("ctives"),
        dictgen::InsensitiveStr::Ascii("gamtic"),
        dictgen::InsensitiveStr::Ascii("gmatisch"),
        dictgen::InsensitiveStr::Ascii("iry"),
        dictgen::InsensitiveStr::Ascii("isse"),
        dictgen::InsensitiveStr::Ascii("rie"),
        dictgen::InsensitiveStr::Ascii("ries"),
        dictgen::InsensitiveStr::Ascii("sied"),
        dictgen::InsensitiveStr::Ascii("sies"),
        dictgen::InsensitiveStr::Ascii("tcise"),
        dictgen::InsensitiveStr::Ascii("tice"),
        dictgen::InsensitiveStr::Ascii("ticle"),
        dictgen::InsensitiveStr::Ascii("tictioner"),
        dictgen::InsensitiveStr::Ascii("tictioners"),
    ],
    values: &[
        &["practical"],
        &["practically"],
        &["practise"],
        &["pratchett"],
        &["practical"],
        &["practically"],
        &["practically"],
        &["practically"],
        &["practical"],
        &["practice"],
        &["practitioner"],
        &["practitioners"],
        &["practically"],
        &["practically"],
        &["practise"],
        &["practise"],
        &["practitioner"],
        &["practitioners"],
        &["practitioner"],
        &["practitioners"],
        &["practitioners"],
        &["practitioner"],
        &["practitioners"],
        &["practitioners"],
        &["practise"],
        &["pragmatic"],
        &["pragmatic"],
        &["prairie"],
        &["praises"],
        &["prairie"],
        &["prairies"],
        &["praised"],
        &["praises"],
        &["practise"],
        &["practice"],
        &["particle"],
        &["practitioners"],
        &["practitioners"],
    ],
    range: 3..=11,
};

static WORD_PP_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_PP_CHILDREN),
    value: None,
};

pub static WORD_PP_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("ublisher")],
    values: &[&["publisher"]],
    range: 8..=8,
};

static WORD_PO_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_PO_CHILDREN),
    value: None,
};

static WORD_PO_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    None,
    None,
    None,
    Some(&WORD_POD_NODE),
    Some(&WORD_POE_NODE),
    None,
    None,
    None,
    Some(&WORD_POI_NODE),
    None,
    None,
    Some(&WORD_POL_NODE),
    Some(&WORD_POM_NODE),
    None,
    None,
    Some(&WORD_POP_NODE),
    None,
    Some(&WORD_POR_NODE),
    Some(&WORD_POS_NODE),
    Some(&WORD_POT_NODE),
    Some(&WORD_POU_NODE),
    Some(&WORD_POV_NODE),
    Some(&WORD_POW_NODE),
    None,
    Some(&WORD_POY_NODE),
    None,
];

static WORD_POY_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_POY_CHILDREN),
    value: None,
};

pub static WORD_POY_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("lgon"),
        dictgen::InsensitiveStr::Ascii("lmer"),
    ],
    values: &[&["polygon"], &["polymer"]],
    range: 4..=4,
};

static WORD_POW_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_POW_CHILDREN),
    value: None,
};

pub static WORD_POW_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("derade"),
        dictgen::InsensitiveStr::Ascii("derd"),
        dictgen::InsensitiveStr::Ascii("eful"),
        dictgen::InsensitiveStr::Ascii("erded"),
        dictgen::InsensitiveStr::Ascii("erfisting"),
        dictgen::InsensitiveStr::Ascii("erfull"),
        dictgen::InsensitiveStr::Ascii("erhorse"),
        dictgen::InsensitiveStr::Ascii("erhosue"),
        dictgen::InsensitiveStr::Ascii("erhours"),
        dictgen::InsensitiveStr::Ascii("erhourse"),
        dictgen::InsensitiveStr::Ascii("erhsell"),
        dictgen::InsensitiveStr::Ascii("erlfiting"),
        dictgen::InsensitiveStr::Ascii("erlifing"),
        dictgen::InsensitiveStr::Ascii("erlifitng"),
        dictgen::InsensitiveStr::Ascii("erliftng"),
        dictgen::InsensitiveStr::Ascii("erlisting"),
        dictgen::InsensitiveStr::Ascii("erpot"),
        dictgen::InsensitiveStr::Ascii("erprint"),
        dictgen::InsensitiveStr::Ascii("ersehll"),
        dictgen::InsensitiveStr::Ascii("etlifting"),
        dictgen::InsensitiveStr::Ascii("rrlifting"),
    ],
    values: &[
        &["powdered"],
        &["powdered"],
        &["powerful"],
        &["powdered"],
        &["powerlifting"],
        &["powerful"],
        &["powerhouse"],
        &["powerhouse"],
        &["powerhouse"],
        &["powerhouse"],
        &["powershell"],
        &["powerlifting"],
        &["powerlifting"],
        &["powerlifting"],
        &["powerlifting"],
        &["powerlifting"],
        &["powerpoint"],
        &["powerpoint"],
        &["powershell"],
        &["powerlifting"],
        &["powerlifting"],
    ],
    range: 4..=9,
};

static WORD_POV_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_POV_CHILDREN),
    value: None,
};

pub static WORD_POV_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("erful")],
    values: &[&["powerful"]],
    range: 5..=5,
};

static WORD_POU_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_POU_CHILDREN),
    value: None,
};

pub static WORD_POU_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("lations")],
    values: &[&["populations"]],
    range: 7..=7,
};

static WORD_POT_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_POT_CHILDREN),
    value: None,
};

pub static WORD_POT_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("atos"),
        dictgen::InsensitiveStr::Ascii("encially"),
        dictgen::InsensitiveStr::Ascii("entailly"),
        dictgen::InsensitiveStr::Ascii("entialy"),
        dictgen::InsensitiveStr::Ascii("ical"),
        dictgen::InsensitiveStr::Ascii("rait"),
        dictgen::InsensitiveStr::Ascii("rayed"),
    ],
    values: &[
        &["potatoes"],
        &["potentially"],
        &["potentially"],
        &["potentially"],
        &["optical"],
        &["portrait"],
        &["portrayed"],
    ],
    range: 4..=8,
};

static WORD_POS_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_POS_CHILDREN),
    value: None,
};

static WORD_POS_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    None,
    None,
    None,
    None,
    Some(&WORD_POSE_NODE),
    None,
    None,
    None,
    Some(&WORD_POSI_NODE),
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    Some(&WORD_POSS_NODE),
    Some(&WORD_POST_NODE),
    None,
    None,
    None,
    None,
    None,
    None,
];

static WORD_POST_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_POST_CHILDREN),
    value: None,
};

pub static WORD_POST_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("dam"),
        dictgen::InsensitiveStr::Ascii("homous"),
        dictgen::InsensitiveStr::Ascii("ion"),
        dictgen::InsensitiveStr::Ascii("ive"),
    ],
    values: &[&["potsdam"], &["posthumous"], &["position"], &["positive"]],
    range: 3..=6,
};

static WORD_POSS_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_POSS_CHILDREN),
    value: None,
};

pub static WORD_POSS_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("able"),
        dictgen::InsensitiveStr::Ascii("ably"),
        dictgen::InsensitiveStr::Ascii("bily"),
        dictgen::InsensitiveStr::Ascii("eses"),
        dictgen::InsensitiveStr::Ascii("esess"),
        dictgen::InsensitiveStr::Ascii("esing"),
        dictgen::InsensitiveStr::Ascii("esion"),
        dictgen::InsensitiveStr::Ascii("esives"),
        dictgen::InsensitiveStr::Ascii("esse"),
        dictgen::InsensitiveStr::Ascii("essers"),
        dictgen::InsensitiveStr::Ascii("essess"),
        dictgen::InsensitiveStr::Ascii("esseurs"),
        dictgen::InsensitiveStr::Ascii("essin"),
        dictgen::InsensitiveStr::Ascii("essivize"),
        dictgen::InsensitiveStr::Ascii("esss"),
        dictgen::InsensitiveStr::Ascii("esssion"),
        dictgen::InsensitiveStr::Ascii("estions"),
        dictgen::InsensitiveStr::Ascii("ibile"),
        dictgen::InsensitiveStr::Ascii("ibiliy"),
        dictgen::InsensitiveStr::Ascii("ibillity"),
        dictgen::InsensitiveStr::Ascii("ibilty"),
        dictgen::InsensitiveStr::Ascii("ibily"),
        dictgen::InsensitiveStr::Ascii("ibley"),
        dictgen::InsensitiveStr::Ascii("iblility"),
        dictgen::InsensitiveStr::Ascii("iblilty"),
        dictgen::InsensitiveStr::Ascii("iblities"),
        dictgen::InsensitiveStr::Ascii("iblly"),
        dictgen::InsensitiveStr::Ascii("iby"),
        dictgen::InsensitiveStr::Ascii("issive"),
        dictgen::InsensitiveStr::Ascii("ition"),
    ],
    values: &[
        &["possible"],
        &["possibly"],
        &["possibly"],
        &["possesses"],
        &["possesses"],
        &["possessing"],
        &["possession"],
        &["possessive"],
        &["possessive"],
        &["possesses"],
        &["possesses"],
        &["possesses"],
        &["possessions"],
        &["possessive"],
        &["possesses"],
        &["possessions"],
        &["possessions"],
        &["possible"],
        &["possibility"],
        &["possibility"],
        &["possibility"],
        &["possibility"],
        &["possibly"],
        &["possibility"],
        &["possibility"],
        &["possibilities"],
        &["possibly"],
        &["possibly"],
        &["possessive"],
        &["position"],
    ],
    range: 3..=8,
};

static WORD_POSI_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_POSI_CHILDREN),
    value: None,
};

pub static WORD_POSI_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("cional"),
        dictgen::InsensitiveStr::Ascii("on"),
        dictgen::InsensitiveStr::Ascii("oned"),
        dictgen::InsensitiveStr::Ascii("ons"),
        dictgen::InsensitiveStr::Ascii("tevely"),
        dictgen::InsensitiveStr::Ascii("tioing"),
        dictgen::InsensitiveStr::Ascii("tiond"),
        dictgen::InsensitiveStr::Ascii("tiong"),
        dictgen::InsensitiveStr::Ascii("tionial"),
        dictgen::InsensitiveStr::Ascii("tionl"),
        dictgen::InsensitiveStr::Ascii("tionly"),
        dictgen::InsensitiveStr::Ascii("tionnal"),
        dictgen::InsensitiveStr::Ascii("tionne"),
        dictgen::InsensitiveStr::Ascii("tionned"),
        dictgen::InsensitiveStr::Ascii("tionning"),
        dictgen::InsensitiveStr::Ascii("tiveity"),
        dictgen::InsensitiveStr::Ascii("tiviely"),
        dictgen::InsensitiveStr::Ascii("tivisme"),
        dictgen::InsensitiveStr::Ascii("tivisty"),
        dictgen::InsensitiveStr::Ascii("tivitely"),
        dictgen::InsensitiveStr::Ascii("tivitey"),
        dictgen::InsensitiveStr::Ascii("tivitiy"),
        dictgen::InsensitiveStr::Ascii("tiviy"),
        dictgen::InsensitiveStr::Ascii("tivley"),
        dictgen::InsensitiveStr::Ascii("tivs"),
        dictgen::InsensitiveStr::Ascii("tivy"),
        dictgen::InsensitiveStr::Ascii("ton"),
        dictgen::InsensitiveStr::Ascii("tve"),
    ],
    values: &[
        &["positional"],
        &["poison"],
        &["poisoned"],
        &["poisons"],
        &["positively"],
        &["positioning"],
        &["positioned"],
        &["positioning"],
        &["positional"],
        &["positional"],
        &["positional"],
        &["positional"],
        &["positioned"],
        &["positioned"],
        &["positioning"],
        &["positivity"],
        &["positively"],
        &["positives"],
        &["positivity"],
        &["positivity"],
        &["positivity"],
        &["positivity"],
        &["positivity"],
        &["positively"],
        &["positives"],
        &["positivity"],
        &["position"],
        &["positive"],
    ],
    range: 2..=8,
};

static WORD_POSE_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_POSE_CHILDREN),
    value: None,
};

pub static WORD_POSE_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ss"),
        dictgen::InsensitiveStr::Ascii("ssed"),
        dictgen::InsensitiveStr::Ascii("sses"),
        dictgen::InsensitiveStr::Ascii("ssing"),
        dictgen::InsensitiveStr::Ascii("ssion"),
        dictgen::InsensitiveStr::Ascii("ssions"),
    ],
    values: &[
        &["possess"],
        &["possessed"],
        &["possesses"],
        &["possessing"],
        &["possession"],
        &["possessions"],
    ],
    range: 2..=6,
};

static WORD_POR_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_POR_CHILDREN),
    value: None,
};

pub static WORD_POR_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("alized"),
        dictgen::InsensitiveStr::Ascii("celan"),
        dictgen::InsensitiveStr::Ascii("celian"),
        dictgen::InsensitiveStr::Ascii("celina"),
        dictgen::InsensitiveStr::Ascii("eclain"),
        dictgen::InsensitiveStr::Ascii("ftolio"),
        dictgen::InsensitiveStr::Ascii("gramme"),
        dictgen::InsensitiveStr::Ascii("jectiles"),
        dictgen::InsensitiveStr::Ascii("letariat"),
        dictgen::InsensitiveStr::Ascii("metheus"),
        dictgen::InsensitiveStr::Ascii("nagraphy"),
        dictgen::InsensitiveStr::Ascii("nograghy"),
        dictgen::InsensitiveStr::Ascii("nograhpy"),
        dictgen::InsensitiveStr::Ascii("nograhy"),
        dictgen::InsensitiveStr::Ascii("nograpghy"),
        dictgen::InsensitiveStr::Ascii("nograpgy"),
        dictgen::InsensitiveStr::Ascii("nograpy"),
        dictgen::InsensitiveStr::Ascii("nogrophy"),
        dictgen::InsensitiveStr::Ascii("nogrpahy"),
        dictgen::InsensitiveStr::Ascii("nogrphy"),
        dictgen::InsensitiveStr::Ascii("portion"),
        dictgen::InsensitiveStr::Ascii("portional"),
        dictgen::InsensitiveStr::Ascii("portionally"),
        dictgen::InsensitiveStr::Ascii("portions"),
        dictgen::InsensitiveStr::Ascii("pose"),
        dictgen::InsensitiveStr::Ascii("poses"),
        dictgen::InsensitiveStr::Ascii("shan"),
        dictgen::InsensitiveStr::Ascii("shon"),
        dictgen::InsensitiveStr::Ascii("tabel"),
        dictgen::InsensitiveStr::Ascii("tabillity"),
        dictgen::InsensitiveStr::Ascii("tabilty"),
        dictgen::InsensitiveStr::Ascii("tagonists"),
        dictgen::InsensitiveStr::Ascii("tait"),
        dictgen::InsensitiveStr::Ascii("talis"),
        dictgen::InsensitiveStr::Ascii("talus"),
        dictgen::InsensitiveStr::Ascii("tary"),
        dictgen::InsensitiveStr::Ascii("tarying"),
        dictgen::InsensitiveStr::Ascii("tayed"),
        dictgen::InsensitiveStr::Ascii("testants"),
        dictgen::InsensitiveStr::Ascii("tfoilo"),
        dictgen::InsensitiveStr::Ascii("tgual"),
        dictgen::InsensitiveStr::Ascii("toflio"),
        dictgen::InsensitiveStr::Ascii("toguese"),
        dictgen::InsensitiveStr::Ascii("traiing"),
        dictgen::InsensitiveStr::Ascii("traing"),
        dictgen::InsensitiveStr::Ascii("trais"),
        dictgen::InsensitiveStr::Ascii("trary"),
        dictgen::InsensitiveStr::Ascii("tras"),
        dictgen::InsensitiveStr::Ascii("trat"),
        dictgen::InsensitiveStr::Ascii("trating"),
        dictgen::InsensitiveStr::Ascii("trayels"),
        dictgen::InsensitiveStr::Ascii("trayes"),
        dictgen::InsensitiveStr::Ascii("trayl"),
        dictgen::InsensitiveStr::Ascii("trayls"),
        dictgen::InsensitiveStr::Ascii("triat"),
        dictgen::InsensitiveStr::Ascii("triats"),
        dictgen::InsensitiveStr::Ascii("tugese"),
        dictgen::InsensitiveStr::Ascii("tugeuse"),
        dictgen::InsensitiveStr::Ascii("tuguease"),
        dictgen::InsensitiveStr::Ascii("tugues"),
        dictgen::InsensitiveStr::Ascii("tuguesse"),
        dictgen::InsensitiveStr::Ascii("tuguise"),
    ],
    values: &[
        &["polarized"],
        &["porcelain"],
        &["porcelain"],
        &["porcelain"],
        &["porcelain"],
        &["portfolio"],
        &["programme"],
        &["projectiles"],
        &["proletariat"],
        &["prometheus"],
        &["pornography"],
        &["pornography"],
        &["pornography"],
        &["pornography"],
        &["pornography"],
        &["pornography"],
        &["pornography"],
        &["pornography"],
        &["pornography"],
        &["pornography"],
        &["proportion"],
        &["proportional"],
        &["proportionally"],
        &["proportions"],
        &["propose"],
        &["proposes"],
        &["portion"],
        &["portion"],
        &["portable"],
        &["portability"],
        &["portability"],
        &["protagonists"],
        &["portrait"],
        &["portals"],
        &["portals"],
        &["portray"],
        &["portraying"],
        &["portrayed"],
        &["protestants"],
        &["portfolio"],
        &["portugal"],
        &["portfolio"],
        &["portuguese"],
        &["portraying"],
        &["portraying"],
        &["portraits"],
        &["portray"],
        &["portrays"],
        &["portrait"],
        &["portraying"],
        &["portrays"],
        &["portrays"],
        &["portrayal"],
        &["portrays"],
        &["portrait"],
        &["portraits"],
        &["portuguese"],
        &["portuguese"],
        &["portuguese"],
        &["portuguese"],
        &["portuguese"],
        &["portuguese"],
    ],
    range: 4..=11,
};

static WORD_POP_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_POP_CHILDREN),
    value: None,
};

pub static WORD_POP_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("luar"),
        dictgen::InsensitiveStr::Ascii("luations"),
        dictgen::InsensitiveStr::Ascii("ortional"),
        dictgen::InsensitiveStr::Ascii("oulation"),
        dictgen::InsensitiveStr::Ascii("oulus"),
        dictgen::InsensitiveStr::Ascii("ualtion"),
        dictgen::InsensitiveStr::Ascii("ulair"),
        dictgen::InsensitiveStr::Ascii("ulairty"),
        dictgen::InsensitiveStr::Ascii("ulaiton"),
        dictgen::InsensitiveStr::Ascii("ularaty"),
        dictgen::InsensitiveStr::Ascii("ulare"),
        dictgen::InsensitiveStr::Ascii("ularest"),
        dictgen::InsensitiveStr::Ascii("ularily"),
        dictgen::InsensitiveStr::Ascii("ulary"),
        dictgen::InsensitiveStr::Ascii("ulaties"),
        dictgen::InsensitiveStr::Ascii("ulatin"),
        dictgen::InsensitiveStr::Ascii("ulationes"),
        dictgen::InsensitiveStr::Ascii("ulatiry"),
        dictgen::InsensitiveStr::Ascii("ulative"),
        dictgen::InsensitiveStr::Ascii("ulatoin"),
        dictgen::InsensitiveStr::Ascii("uler"),
        dictgen::InsensitiveStr::Ascii("ulos"),
        dictgen::InsensitiveStr::Ascii("ultaion"),
    ],
    values: &[
        &["popular"],
        &["populations"],
        &["proportional"],
        &["population"],
        &["populous"],
        &["populations"],
        &["popular"],
        &["popularity"],
        &["populations"],
        &["popularity"],
        &["popular"],
        &["populate"],
        &["popularity"],
        &["popularity"],
        &["populate"],
        &["populations"],
        &["populations"],
        &["popularity"],
        &["populate"],
        &["populations"],
        &["popular"],
        &["populous"],
        &["populations"],
    ],
    range: 4..=9,
};

static WORD_POM_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_POM_CHILDREN),
    value: None,
};

pub static WORD_POM_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("egranite"),
        dictgen::InsensitiveStr::Ascii("otion"),
    ],
    values: &[&["pomegranate"], &["promotion"]],
    range: 5..=8,
};

static WORD_POL_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_POL_CHILDREN),
    value: None,
};

pub static WORD_POL_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("gyamy"),
        dictgen::InsensitiveStr::Ascii("gyon"),
        dictgen::InsensitiveStr::Ascii("ical"),
        dictgen::InsensitiveStr::Ascii("icitally"),
        dictgen::InsensitiveStr::Ascii("icitian"),
        dictgen::InsensitiveStr::Ascii("icitians"),
        dictgen::InsensitiveStr::Ascii("ietly"),
        dictgen::InsensitiveStr::Ascii("inator"),
        dictgen::InsensitiveStr::Ascii("inators"),
        dictgen::InsensitiveStr::Ascii("ishees"),
        dictgen::InsensitiveStr::Ascii("ishs"),
        dictgen::InsensitiveStr::Ascii("ishuset"),
        dictgen::InsensitiveStr::Ascii("isse"),
        dictgen::InsensitiveStr::Ascii("itelly"),
        dictgen::InsensitiveStr::Ascii("itessen"),
        dictgen::InsensitiveStr::Ascii("itey"),
        dictgen::InsensitiveStr::Ascii("iticain"),
        dictgen::InsensitiveStr::Ascii("iticains"),
        dictgen::InsensitiveStr::Ascii("iticaly"),
        dictgen::InsensitiveStr::Ascii("itican"),
        dictgen::InsensitiveStr::Ascii("iticanti"),
        dictgen::InsensitiveStr::Ascii("iticas"),
        dictgen::InsensitiveStr::Ascii("iticien"),
        dictgen::InsensitiveStr::Ascii("iticiens"),
        dictgen::InsensitiveStr::Ascii("iticin"),
        dictgen::InsensitiveStr::Ascii("iticing"),
        dictgen::InsensitiveStr::Ascii("iticion"),
        dictgen::InsensitiveStr::Ascii("itickin"),
        dictgen::InsensitiveStr::Ascii("iticus"),
        dictgen::InsensitiveStr::Ascii("itiicans"),
        dictgen::InsensitiveStr::Ascii("itiikan"),
        dictgen::InsensitiveStr::Ascii("itiness"),
        dictgen::InsensitiveStr::Ascii("iting"),
        dictgen::InsensitiveStr::Ascii("ititian"),
        dictgen::InsensitiveStr::Ascii("ititians"),
        dictgen::InsensitiveStr::Ascii("itley"),
        dictgen::InsensitiveStr::Ascii("tical"),
        dictgen::InsensitiveStr::Ascii("ute"),
        dictgen::InsensitiveStr::Ascii("uted"),
        dictgen::InsensitiveStr::Ascii("utes"),
        dictgen::InsensitiveStr::Ascii("uting"),
        dictgen::InsensitiveStr::Ascii("ution"),
        dictgen::InsensitiveStr::Ascii("ygammy"),
        dictgen::InsensitiveStr::Ascii("ygoon"),
        dictgen::InsensitiveStr::Ascii("ymore"),
        dictgen::InsensitiveStr::Ascii("yphonyic"),
        dictgen::InsensitiveStr::Ascii("ysaccaride"),
    ],
    values: &[
        &["polygamy"],
        &["polygon"],
        &["political"],
        &["politically"],
        &["politician"],
        &["politicians"],
        &["politely"],
        &["pollinator"],
        &["pollinators"],
        &["polishes"],
        &["polishes"],
        &["polishes"],
        &["polishes"],
        &["politely"],
        &["politeness"],
        &["politely"],
        &["politician"],
        &["politicians"],
        &["politically"],
        &["politician"],
        &["politician"],
        &["politics"],
        &["politician"],
        &["politicians"],
        &["politician"],
        &["politician"],
        &["politician"],
        &["politician"],
        &["politics"],
        &["politician"],
        &["politician"],
        &["politeness"],
        &["piloting"],
        &["politician"],
        &["politicians"],
        &["politely"],
        &["political"],
        &["pollute"],
        &["polluted"],
        &["pollutes"],
        &["polluting"],
        &["pollution"],
        &["polygamy"],
        &["polygon"],
        &["polymer"],
        &["polyphonic"],
        &["polysaccharide"],
    ],
    range: 3..=10,
};

static WORD_POI_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_POI_CHILDREN),
    value: None,
};

pub static WORD_POI_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("gnat"),
        dictgen::InsensitiveStr::Ascii("neer"),
        dictgen::InsensitiveStr::Ascii("ngant"),
        dictgen::InsensitiveStr::Ascii("nteres"),
        dictgen::InsensitiveStr::Ascii("ntes"),
        dictgen::InsensitiveStr::Ascii("nteur"),
        dictgen::InsensitiveStr::Ascii("nture"),
        dictgen::InsensitiveStr::Ascii("sin"),
        dictgen::InsensitiveStr::Ascii("sond"),
        dictgen::InsensitiveStr::Ascii("sones"),
        dictgen::InsensitiveStr::Ascii("sonis"),
        dictgen::InsensitiveStr::Ascii("sonos"),
        dictgen::InsensitiveStr::Ascii("sonus"),
    ],
    values: &[
        &["poignant"],
        &["pioneer"],
        &["poignant"],
        &["pointers"],
        &["pointers"],
        &["pointer"],
        &["pointer"],
        &["poison"],
        &["poisoned"],
        &["poisons"],
        &["poisons"],
        &["poisons"],
        &["poisons"],
    ],
    range: 3..=6,
};

static WORD_POE_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_POE_CHILDREN),
    value: None,
};

pub static WORD_POE_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("nis"),
        dictgen::InsensitiveStr::Ascii("oples"),
        dictgen::InsensitiveStr::Ascii("ples"),
        dictgen::InsensitiveStr::Ascii("ty"),
    ],
    values: &[&["penis"], &["peoples"], &["peoples"], &["poetry"]],
    range: 2..=5,
};

static WORD_POD_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_POD_CHILDREN),
    value: None,
};

pub static WORD_POD_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("emso"),
        dictgen::InsensitiveStr::Ascii("meos"),
    ],
    values: &[&["podemos"], &["podemos"]],
    range: 4..=4,
};

static WORD_PN_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_PN_CHILDREN),
    value: None,
};

pub static WORD_PN_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("atheon")],
    values: &[&["pantheon"]],
    range: 6..=6,
};

static WORD_PL_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_PL_CHILDREN),
    value: None,
};

static WORD_PL_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    Some(&WORD_PLA_NODE),
    None,
    None,
    None,
    Some(&WORD_PLE_NODE),
    None,
    None,
    None,
    Some(&WORD_PLI_NODE),
    None,
    None,
    None,
    None,
    None,
    Some(&WORD_PLO_NODE),
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
];

static WORD_PLO_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_PLO_CHILDREN),
    value: None,
};

pub static WORD_PLO_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("arized"),
        dictgen::InsensitiveStr::Ascii("retariat"),
        dictgen::InsensitiveStr::Ascii("ygamy"),
        dictgen::InsensitiveStr::Ascii("ygon"),
        dictgen::InsensitiveStr::Ascii("ymer"),
    ],
    values: &[
        &["polarized"],
        &["proletariat"],
        &["polygamy"],
        &["polygon"],
        &["polymer"],
    ],
    range: 4..=8,
};

static WORD_PLI_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_PLI_CHILDREN),
    value: None,
};

pub static WORD_PLI_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("grim")],
    values: &[&["pilgrim"]],
    range: 4..=4,
};

static WORD_PLE_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_PLE_CHILDREN),
    value: None,
};

pub static WORD_PLE_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("asent"),
        dictgen::InsensitiveStr::Ascii("bicite"),
        dictgen::InsensitiveStr::Ascii("htora"),
        dictgen::InsensitiveStr::Ascii("othra"),
        dictgen::InsensitiveStr::Ascii("sant"),
        dictgen::InsensitiveStr::Ascii("thoria"),
        dictgen::InsensitiveStr::Ascii("thorian"),
        dictgen::InsensitiveStr::Ascii("throa"),
    ],
    values: &[
        &["pleasant"],
        &["plebiscite"],
        &["plethora"],
        &["plethora"],
        &["pleasant"],
        &["plethora"],
        &["plethora"],
        &["plethora"],
    ],
    range: 4..=7,
};

static WORD_PLA_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_PLA_CHILDREN),
    value: None,
};

static WORD_PLA_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    None,
    Some(&WORD_PLAB_NODE),
    Some(&WORD_PLAC_NODE),
    None,
    Some(&WORD_PLAE_NODE),
    None,
    Some(&WORD_PLAG_NODE),
    None,
    Some(&WORD_PLAI_NODE),
    None,
    None,
    None,
    None,
    Some(&WORD_PLAN_NODE),
    None,
    None,
    None,
    None,
    Some(&WORD_PLAS_NODE),
    Some(&WORD_PLAT_NODE),
    Some(&WORD_PLAU_NODE),
    None,
    None,
    None,
    Some(&WORD_PLAY_NODE),
    None,
];

static WORD_PLAY_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_PLAY_CHILDREN),
    value: None,
};

pub static WORD_PLAY_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("abe"),
        dictgen::InsensitiveStr::Ascii("around"),
        dictgen::InsensitiveStr::Ascii("body"),
        dictgen::InsensitiveStr::Ascii("ersare"),
        dictgen::InsensitiveStr::Ascii("gorund"),
        dictgen::InsensitiveStr::Ascii("groud"),
        dictgen::InsensitiveStr::Ascii("htrough"),
        dictgen::InsensitiveStr::Ascii("htroughs"),
        dictgen::InsensitiveStr::Ascii("ofs"),
        dictgen::InsensitiveStr::Ascii("right"),
        dictgen::InsensitiveStr::Ascii("stlye"),
        dictgen::InsensitiveStr::Ascii("stye"),
        dictgen::InsensitiveStr::Ascii("tgroughs"),
        dictgen::InsensitiveStr::Ascii("thorugh"),
        dictgen::InsensitiveStr::Ascii("thorughs"),
        dictgen::InsensitiveStr::Ascii("thourgh"),
        dictgen::InsensitiveStr::Ascii("thourghs"),
        dictgen::InsensitiveStr::Ascii("throgh"),
        dictgen::InsensitiveStr::Ascii("throguh"),
        dictgen::InsensitiveStr::Ascii("throughers"),
        dictgen::InsensitiveStr::Ascii("throughts"),
        dictgen::InsensitiveStr::Ascii("througs"),
        dictgen::InsensitiveStr::Ascii("througth"),
        dictgen::InsensitiveStr::Ascii("throuh"),
        dictgen::InsensitiveStr::Ascii("throuhg"),
        dictgen::InsensitiveStr::Ascii("throuhgs"),
        dictgen::InsensitiveStr::Ascii("thtough"),
        dictgen::InsensitiveStr::Ascii("thtoughs"),
        dictgen::InsensitiveStr::Ascii("trhough"),
        dictgen::InsensitiveStr::Ascii("trhoughs"),
        dictgen::InsensitiveStr::Ascii("write"),
        dictgen::InsensitiveStr::Ascii("writes"),
    ],
    values: &[
        &["playable"],
        &["playground"],
        &["playboy"],
        &["playerbase"],
        &["playground"],
        &["playground"],
        &["playthrough"],
        &["playthroughs"],
        &["playoffs"],
        &["playwright"],
        &["playstyle"],
        &["playstyle"],
        &["playthroughs"],
        &["playthrough"],
        &["playthroughs"],
        &["playthrough"],
        &["playthroughs"],
        &["playthrough"],
        &["playthroughs"],
        &["playthroughs"],
        &["playthroughs"],
        &["playthroughs"],
        &["playthroughs"],
        &["playthrough"],
        &["playthroughs"],
        &["playthroughs"],
        &["playthrough"],
        &["playthroughs"],
        &["playthrough"],
        &["playthroughs"],
        &["playwright"],
        &["playwrights"],
    ],
    range: 3..=10,
};

static WORD_PLAU_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_PLAU_CHILDREN),
    value: None,
};

pub static WORD_PLAU_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("sable"),
        dictgen::InsensitiveStr::Ascii("sbile"),
        dictgen::InsensitiveStr::Ascii("sibe"),
        dictgen::InsensitiveStr::Ascii("sibel"),
        dictgen::InsensitiveStr::Ascii("throughs"),
    ],
    values: &[
        &["plausible"],
        &["plausible"],
        &["plausible"],
        &["plausible"],
        &["playthroughs"],
    ],
    range: 4..=8,
};

static WORD_PLAT_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_PLAT_CHILDREN),
    value: None,
};

pub static WORD_PLAT_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("aeu"),
        dictgen::InsensitiveStr::Ascii("eu"),
        dictgen::InsensitiveStr::Ascii("eua"),
        dictgen::InsensitiveStr::Ascii("farmer"),
        dictgen::InsensitiveStr::Ascii("formar"),
        dictgen::InsensitiveStr::Ascii("formie"),
        dictgen::InsensitiveStr::Ascii("fotmer"),
        dictgen::InsensitiveStr::Ascii("from"),
        dictgen::InsensitiveStr::Ascii("fromer"),
        dictgen::InsensitiveStr::Ascii("fromers"),
        dictgen::InsensitiveStr::Ascii("froms"),
        dictgen::InsensitiveStr::Ascii("imun"),
        dictgen::InsensitiveStr::Ascii("nium"),
        dictgen::InsensitiveStr::Ascii("nuim"),
        dictgen::InsensitiveStr::Ascii("ofrmer"),
        dictgen::InsensitiveStr::Ascii("ofrms"),
    ],
    values: &[
        &["plateau"],
        &["plateau"],
        &["plateau"],
        &["platformer"],
        &["platformer"],
        &["platformer"],
        &["platformer"],
        &["platform"],
        &["platformer"],
        &["platformer"],
        &["platforms"],
        &["platinum"],
        &["platinum"],
        &["platinum"],
        &["platformer"],
        &["platforms"],
    ],
    range: 2..=7,
};

static WORD_PLAS_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_PLAS_CHILDREN),
    value: None,
};

pub static WORD_PLAS_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("itcs"),
        dictgen::InsensitiveStr::Ascii("ticas"),
        dictgen::InsensitiveStr::Ascii("ticos"),
        dictgen::InsensitiveStr::Ascii("ticosa"),
        dictgen::InsensitiveStr::Ascii("ticus"),
        dictgen::InsensitiveStr::Ascii("tis"),
        dictgen::InsensitiveStr::Ascii("tre"),
    ],
    values: &[
        &["plastics"],
        &["plastics"],
        &["plastics"],
        &["plastics"],
        &["plastics"],
        &["plastics"],
        &["plaster"],
    ],
    range: 3..=6,
};

static WORD_PLAN_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_PLAN_CHILDREN),
    value: None,
};

pub static WORD_PLAN_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("atery"),
        dictgen::InsensitiveStr::Ascii("ation"),
        dictgen::InsensitiveStr::Ascii("eswaker"),
        dictgen::InsensitiveStr::Ascii("eswaler"),
        dictgen::InsensitiveStr::Ascii("eswalkr"),
        dictgen::InsensitiveStr::Ascii("eswaller"),
        dictgen::InsensitiveStr::Ascii("eswlaker"),
        dictgen::InsensitiveStr::Ascii("eswlakers"),
        dictgen::InsensitiveStr::Ascii("etas"),
        dictgen::InsensitiveStr::Ascii("etos"),
        dictgen::InsensitiveStr::Ascii("etwalker"),
        dictgen::InsensitiveStr::Ascii("sewalker"),
        dictgen::InsensitiveStr::Ascii("sewalkers"),
        dictgen::InsensitiveStr::Ascii("teary"),
        dictgen::InsensitiveStr::Ascii("tes"),
        dictgen::InsensitiveStr::Ascii("tiff"),
        dictgen::InsensitiveStr::Ascii("tium"),
    ],
    values: &[
        &["planetary"],
        &["plantation"],
        &["planeswalker"],
        &["planeswalker"],
        &["planeswalker"],
        &["planeswalker"],
        &["planeswalker"],
        &["planeswalker"],
        &["planets"],
        &["planets"],
        &["planeswalker"],
        &["planeswalker"],
        &["planeswalker"],
        &["planetary"],
        &["planets"],
        &["plaintiff"],
        &["platinum"],
    ],
    range: 3..=9,
};

static WORD_PLAI_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_PLAI_CHILDREN),
    value: None,
};

pub static WORD_PLAI_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("garism")],
    values: &[&["plagiarism"]],
    range: 6..=6,
};

static WORD_PLAG_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_PLAG_CHILDREN),
    value: None,
};

pub static WORD_PLAG_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("airism"),
        dictgen::InsensitiveStr::Ascii("arisim"),
        dictgen::InsensitiveStr::Ascii("arism"),
        dictgen::InsensitiveStr::Ascii("iariam"),
        dictgen::InsensitiveStr::Ascii("iariasm"),
        dictgen::InsensitiveStr::Ascii("iarios"),
        dictgen::InsensitiveStr::Ascii("iarius"),
        dictgen::InsensitiveStr::Ascii("iarizm"),
        dictgen::InsensitiveStr::Ascii("ierism"),
        dictgen::InsensitiveStr::Ascii("uarism"),
    ],
    values: &[
        &["plagiarism"],
        &["plagiarism"],
        &["plagiarism"],
        &["plagiarism"],
        &["plagiarism"],
        &["plagiarism"],
        &["plagiarism"],
        &["plagiarism"],
        &["plagiarism"],
        &["plagiarism"],
    ],
    range: 5..=7,
};

static WORD_PLAE_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_PLAE_CHILDREN),
    value: None,
};

pub static WORD_PLAE_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("stine"),
        dictgen::InsensitiveStr::Ascii("stinian"),
        dictgen::InsensitiveStr::Ascii("stinians"),
    ],
    values: &[&["palestine"], &["palestinian"], &["palestinians"]],
    range: 5..=8,
};

static WORD_PLAC_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_PLAC_CHILDREN),
    value: None,
};

pub static WORD_PLAC_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ebro"),
        dictgen::InsensitiveStr::Ascii("eheld"),
        dictgen::InsensitiveStr::Ascii("ehoder"),
        dictgen::InsensitiveStr::Ascii("eholdr"),
        dictgen::InsensitiveStr::Ascii("eholer"),
        dictgen::InsensitiveStr::Ascii("emenet"),
        dictgen::InsensitiveStr::Ascii("emens"),
        dictgen::InsensitiveStr::Ascii("emet"),
    ],
    values: &[
        &["placebo"],
        &["placeholder"],
        &["placeholder"],
        &["placeholder"],
        &["placeholder"],
        &["placements"],
        &["placements"],
        &["placements"],
    ],
    range: 4..=6,
};

static WORD_PLAB_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_PLAB_CHILDREN),
    value: None,
};

pub static WORD_PLAB_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("eswalker")],
    values: &[&["planeswalker"]],
    range: 8..=8,
};

static WORD_PK_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_PK_CHILDREN),
    value: None,
};

pub static WORD_PK_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("aythroughs")],
    values: &[&["playthroughs"]],
    range: 10..=10,
};

static WORD_PI_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_PI_CHILDREN),
    value: None,
};

pub static WORD_PI_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ankillers"),
        dictgen::InsensitiveStr::Ascii("blisher"),
        dictgen::InsensitiveStr::Ascii("ch"),
        dictgen::InsensitiveStr::Ascii("cthed"),
        dictgen::InsensitiveStr::Ascii("cther"),
        dictgen::InsensitiveStr::Ascii("cthers"),
        dictgen::InsensitiveStr::Ascii("cthes"),
        dictgen::InsensitiveStr::Ascii("cthfork"),
        dictgen::InsensitiveStr::Ascii("cthforks"),
        dictgen::InsensitiveStr::Ascii("egons"),
        dictgen::InsensitiveStr::Ascii("glrim"),
        dictgen::InsensitiveStr::Ascii("goens"),
        dictgen::InsensitiveStr::Ascii("lgirm"),
        dictgen::InsensitiveStr::Ascii("lgrimmage"),
        dictgen::InsensitiveStr::Ascii("lgrimmages"),
        dictgen::InsensitiveStr::Ascii("llards"),
        dictgen::InsensitiveStr::Ascii("llaris"),
        dictgen::InsensitiveStr::Ascii("lrgim"),
        dictgen::InsensitiveStr::Ascii("nancle"),
        dictgen::InsensitiveStr::Ascii("napple"),
        dictgen::InsensitiveStr::Ascii("netrest"),
        dictgen::InsensitiveStr::Ascii("nnalce"),
        dictgen::InsensitiveStr::Ascii("nnaple"),
        dictgen::InsensitiveStr::Ascii("nncale"),
        dictgen::InsensitiveStr::Ascii("noeer"),
        dictgen::InsensitiveStr::Ascii("noneered"),
        dictgen::InsensitiveStr::Ascii("npiont"),
        dictgen::InsensitiveStr::Ascii("npoit"),
        dictgen::InsensitiveStr::Ascii("nteret"),
        dictgen::InsensitiveStr::Ascii("olting"),
        dictgen::InsensitiveStr::Ascii("oneeer"),
        dictgen::InsensitiveStr::Ascii("onere"),
        dictgen::InsensitiveStr::Ascii("reced"),
        dictgen::InsensitiveStr::Ascii("tchferks"),
        dictgen::InsensitiveStr::Ascii("tchfolks"),
        dictgen::InsensitiveStr::Ascii("tchforcks"),
        dictgen::InsensitiveStr::Ascii("tchfords"),
        dictgen::InsensitiveStr::Ascii("tchforkers"),
        dictgen::InsensitiveStr::Ascii("tchforkes"),
        dictgen::InsensitiveStr::Ascii("tchworks"),
        dictgen::InsensitiveStr::Ascii("tckforks"),
        dictgen::InsensitiveStr::Ascii("thcers"),
        dictgen::InsensitiveStr::Ascii("thces"),
        dictgen::InsensitiveStr::Ascii("ttaburgh"),
        dictgen::InsensitiveStr::Ascii("ttsbrugh"),
    ],
    values: &[
        &["painkillers"],
        &["publisher"],
        &["pitch"],
        &["pitched"],
        &["pitcher"],
        &["pitchers"],
        &["pitches"],
        &["pitchfork"],
        &["pitchforks"],
        &["pigeons"],
        &["pilgrim"],
        &["pigeons"],
        &["pilgrim"],
        &["pilgrimage"],
        &["pilgrimages"],
        &["pillars"],
        &["pillars"],
        &["pilgrim"],
        &["pinnacle"],
        &["pineapple"],
        &["pinterest"],
        &["pinnacle"],
        &["pineapple"],
        &["pinnacle"],
        &["pioneer"],
        &["pioneered"],
        &["pinpoint"],
        &["pinpoint"],
        &["pinterest"],
        &["piloting"],
        &["pioneer"],
        &["pioneer"],
        &["pierced"],
        &["pitchforks"],
        &["pitchforks"],
        &["pitchforks"],
        &["pitchforks"],
        &["pitchforks"],
        &["pitchforks"],
        &["pitchforks"],
        &["pitchforks"],
        &["pitchers"],
        &["pitches"],
        &["pittsburgh"],
        &["pittsburgh"],
    ],
    range: 2..=10,
};

static WORD_PH_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_PH_CHILDREN),
    value: None,
};

static WORD_PH_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    Some(&WORD_PHA_NODE),
    None,
    None,
    None,
    Some(&WORD_PHE_NODE),
    None,
    None,
    None,
    Some(&WORD_PHI_NODE),
    None,
    None,
    None,
    None,
    None,
    Some(&WORD_PHO_NODE),
    None,
    None,
    Some(&WORD_PHR_NODE),
    Some(&WORD_PHS_NODE),
    None,
    None,
    None,
    None,
    None,
    Some(&WORD_PHY_NODE),
    None,
];

static WORD_PHY_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_PHY_CHILDREN),
    value: None,
};

pub static WORD_PHY_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("chedelics"),
        dictgen::InsensitiveStr::Ascii("chiatrist"),
        dictgen::InsensitiveStr::Ascii("chiatrists"),
        dictgen::InsensitiveStr::Ascii("chological"),
        dictgen::InsensitiveStr::Ascii("chologically"),
        dictgen::InsensitiveStr::Ascii("chologist"),
        dictgen::InsensitiveStr::Ascii("chologists"),
        dictgen::InsensitiveStr::Ascii("chopathic"),
        dictgen::InsensitiveStr::Ascii("cisian"),
        dictgen::InsensitiveStr::Ascii("cisians"),
        dictgen::InsensitiveStr::Ascii("cisist"),
        dictgen::InsensitiveStr::Ascii("cisists"),
        dictgen::InsensitiveStr::Ascii("iscal"),
        dictgen::InsensitiveStr::Ascii("iscally"),
        dictgen::InsensitiveStr::Ascii("iscs"),
        dictgen::InsensitiveStr::Ascii("isology"),
        dictgen::InsensitiveStr::Ascii("isque"),
        dictgen::InsensitiveStr::Ascii("losophical"),
        dictgen::InsensitiveStr::Ascii("losophically"),
        dictgen::InsensitiveStr::Ascii("scedelic"),
        dictgen::InsensitiveStr::Ascii("scedelics"),
        dictgen::InsensitiveStr::Ascii("scial"),
        dictgen::InsensitiveStr::Ascii("scially"),
        dictgen::InsensitiveStr::Ascii("sciatric"),
        dictgen::InsensitiveStr::Ascii("sciatrist"),
        dictgen::InsensitiveStr::Ascii("sciatrists"),
        dictgen::InsensitiveStr::Ascii("scis"),
        dictgen::InsensitiveStr::Ascii("scological"),
        dictgen::InsensitiveStr::Ascii("scologically"),
        dictgen::InsensitiveStr::Ascii("scologist"),
        dictgen::InsensitiveStr::Ascii("scologists"),
        dictgen::InsensitiveStr::Ascii("scology"),
        dictgen::InsensitiveStr::Ascii("scopath"),
        dictgen::InsensitiveStr::Ascii("scopathic"),
        dictgen::InsensitiveStr::Ascii("scopaths"),
        dictgen::InsensitiveStr::Ascii("sicallity"),
        dictgen::InsensitiveStr::Ascii("sicaly"),
        dictgen::InsensitiveStr::Ascii("sicials"),
        dictgen::InsensitiveStr::Ascii("siciens"),
        dictgen::InsensitiveStr::Ascii("sicis"),
        dictgen::InsensitiveStr::Ascii("sicits"),
        dictgen::InsensitiveStr::Ascii("sicks"),
        dictgen::InsensitiveStr::Ascii("sicts"),
        dictgen::InsensitiveStr::Ascii("sioligical"),
        dictgen::InsensitiveStr::Ascii("sioligy"),
        dictgen::InsensitiveStr::Ascii("siologial"),
        dictgen::InsensitiveStr::Ascii("siqe"),
        dictgen::InsensitiveStr::Ascii("sisict"),
        dictgen::InsensitiveStr::Ascii("sqiue"),
    ],
    values: &[
        &["psychedelics"],
        &["psychiatrist"],
        &["psychiatrists"],
        &["psychological"],
        &["psychologically"],
        &["psychologist"],
        &["psychologists"],
        &["psychopathic"],
        &["physician"],
        &["physicians"],
        &["physicist"],
        &["physicists"],
        &["physical"],
        &["physically"],
        &["physics"],
        &["physiology"],
        &["physique"],
        &["philosophical"],
        &["philosophically"],
        &["psychedelic"],
        &["psychedelics"],
        &["physical"],
        &["physically"],
        &["psychiatric"],
        &["psychiatrist"],
        &["psychiatrists"],
        &["physics"],
        &["psychological"],
        &["psychologically"],
        &["psychologist"],
        &["psychologists"],
        &["psychology"],
        &["psychopath"],
        &["psychopathic"],
        &["psychopaths"],
        &["physically"],
        &["physically"],
        &["physicians"],
        &["physicians"],
        &["physicians"],
        &["physicist"],
        &["physics"],
        &["physicist"],
        &["physiological"],
        &["physiology"],
        &["physiological"],
        &["physique"],
        &["physicist"],
        &["physique"],
    ],
    range: 4..=12,
};

static WORD_PHS_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_PHS_CHILDREN),
    value: None,
};

pub static WORD_PHS_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ycologically"),
        dictgen::InsensitiveStr::Ascii("yical"),
        dictgen::InsensitiveStr::Ascii("yically"),
        dictgen::InsensitiveStr::Ascii("yician"),
        dictgen::InsensitiveStr::Ascii("yicians"),
        dictgen::InsensitiveStr::Ascii("yicist"),
        dictgen::InsensitiveStr::Ascii("yicists"),
        dictgen::InsensitiveStr::Ascii("yics"),
        dictgen::InsensitiveStr::Ascii("yiological"),
        dictgen::InsensitiveStr::Ascii("yiology"),
        dictgen::InsensitiveStr::Ascii("yique"),
    ],
    values: &[
        &["psychologically"],
        &["physical"],
        &["physically"],
        &["physician"],
        &["physicians"],
        &["physicist"],
        &["physicists"],
        &["physics"],
        &["physiological"],
        &["physiology"],
        &["physique"],
    ],
    range: 4..=12,
};

static WORD_PHR_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_PHR_CHILDREN),
    value: None,
};

pub static WORD_PHR_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("amaceutical"),
        dictgen::InsensitiveStr::Ascii("amacist"),
        dictgen::InsensitiveStr::Ascii("amacy"),
    ],
    values: &[&["pharmaceutical"], &["pharmacist"], &["pharmacy"]],
    range: 5..=11,
};

static WORD_PHO_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_PHO_CHILDREN),
    value: None,
};

pub static WORD_PHO_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("necian"),
        dictgen::InsensitiveStr::Ascii("nemena"),
        dictgen::InsensitiveStr::Ascii("ngraph"),
        dictgen::InsensitiveStr::Ascii("tagrapher"),
        dictgen::InsensitiveStr::Ascii("tagraphers"),
        dictgen::InsensitiveStr::Ascii("tochopped"),
        dictgen::InsensitiveStr::Ascii("togragh"),
        dictgen::InsensitiveStr::Ascii("tograh"),
        dictgen::InsensitiveStr::Ascii("tograhed"),
        dictgen::InsensitiveStr::Ascii("tograher"),
        dictgen::InsensitiveStr::Ascii("tograhic"),
        dictgen::InsensitiveStr::Ascii("tograhper"),
        dictgen::InsensitiveStr::Ascii("tograhpy"),
        dictgen::InsensitiveStr::Ascii("tograhs"),
        dictgen::InsensitiveStr::Ascii("tograhy"),
        dictgen::InsensitiveStr::Ascii("tograped"),
        dictgen::InsensitiveStr::Ascii("tograper"),
        dictgen::InsensitiveStr::Ascii("tograpers"),
        dictgen::InsensitiveStr::Ascii("tograpgh"),
        dictgen::InsensitiveStr::Ascii("tographes"),
        dictgen::InsensitiveStr::Ascii("tographics"),
        dictgen::InsensitiveStr::Ascii("tographied"),
        dictgen::InsensitiveStr::Ascii("tographier"),
        dictgen::InsensitiveStr::Ascii("tographyi"),
        dictgen::InsensitiveStr::Ascii("tograpic"),
        dictgen::InsensitiveStr::Ascii("tograpphed"),
        dictgen::InsensitiveStr::Ascii("tograps"),
        dictgen::InsensitiveStr::Ascii("tograpy"),
        dictgen::InsensitiveStr::Ascii("togropher"),
        dictgen::InsensitiveStr::Ascii("togrophers"),
        dictgen::InsensitiveStr::Ascii("togrpah"),
        dictgen::InsensitiveStr::Ascii("togrpahed"),
        dictgen::InsensitiveStr::Ascii("togrpaher"),
        dictgen::InsensitiveStr::Ascii("togrpahers"),
        dictgen::InsensitiveStr::Ascii("togrpahs"),
        dictgen::InsensitiveStr::Ascii("togrpahy"),
        dictgen::InsensitiveStr::Ascii("toshipped"),
        dictgen::InsensitiveStr::Ascii("toshooped"),
        dictgen::InsensitiveStr::Ascii("toshopd"),
        dictgen::InsensitiveStr::Ascii("toshope"),
        dictgen::InsensitiveStr::Ascii("toshoppad"),
        dictgen::InsensitiveStr::Ascii("toshoppade"),
        dictgen::InsensitiveStr::Ascii("toshoppped"),
    ],
    values: &[
        &["phoenecian"],
        &["phenomena"],
        &["phonograph"],
        &["photographer"],
        &["photographers"],
        &["photoshopped"],
        &["photograph"],
        &["photograph"],
        &["photographed"],
        &["photographer"],
        &["photographic"],
        &["photographer"],
        &["photography"],
        &["photographs"],
        &["photography"],
        &["photographed"],
        &["photographer"],
        &["photographers"],
        &["photographs"],
        &["photographs"],
        &["photographs"],
        &["photographed"],
        &["photographer"],
        &["photographic"],
        &["photographic"],
        &["photographed"],
        &["photographs"],
        &["photography"],
        &["photographer"],
        &["photographers"],
        &["photographs"],
        &["photographed"],
        &["photographer"],
        &["photographers"],
        &["photographs"],
        &["photography"],
        &["photoshopped"],
        &["photoshopped"],
        &["photoshopped"],
        &["photoshopped"],
        &["photoshopped"],
        &["photoshopped"],
        &["photoshopped"],
    ],
    range: 6..=10,
};

static WORD_PHI_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_PHI_CHILDREN),
    value: None,
};

pub static WORD_PHI_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("aldelphia"),
        dictgen::InsensitiveStr::Ascii("ladalphia"),
        dictgen::InsensitiveStr::Ascii("ladelhpia"),
        dictgen::InsensitiveStr::Ascii("ladelpha"),
        dictgen::InsensitiveStr::Ascii("ladelpia"),
        dictgen::InsensitiveStr::Ascii("ladeplhia"),
        dictgen::InsensitiveStr::Ascii("ladlephia"),
        dictgen::InsensitiveStr::Ascii("ledalphia"),
        dictgen::InsensitiveStr::Ascii("ledelphia"),
        dictgen::InsensitiveStr::Ascii("lidalphia"),
        dictgen::InsensitiveStr::Ascii("liphines"),
        dictgen::InsensitiveStr::Ascii("lipines"),
        dictgen::InsensitiveStr::Ascii("lippenes"),
        dictgen::InsensitiveStr::Ascii("lippenis"),
        dictgen::InsensitiveStr::Ascii("lippides"),
        dictgen::InsensitiveStr::Ascii("lippinas"),
        dictgen::InsensitiveStr::Ascii("lippinnes"),
        dictgen::InsensitiveStr::Ascii("lippinoes"),
        dictgen::InsensitiveStr::Ascii("lippinos"),
        dictgen::InsensitiveStr::Ascii("lippins"),
        dictgen::InsensitiveStr::Ascii("lisopher"),
        dictgen::InsensitiveStr::Ascii("lisophers"),
        dictgen::InsensitiveStr::Ascii("lisophical"),
        dictgen::InsensitiveStr::Ascii("lisophies"),
        dictgen::InsensitiveStr::Ascii("lisophy"),
        dictgen::InsensitiveStr::Ascii("llipine"),
        dictgen::InsensitiveStr::Ascii("llipines"),
        dictgen::InsensitiveStr::Ascii("llippines"),
        dictgen::InsensitiveStr::Ascii("llipse"),
        dictgen::InsensitiveStr::Ascii("llipses"),
        dictgen::InsensitiveStr::Ascii("llosophically"),
        dictgen::InsensitiveStr::Ascii("loshopically"),
        dictgen::InsensitiveStr::Ascii("losipher"),
        dictgen::InsensitiveStr::Ascii("losiphers"),
        dictgen::InsensitiveStr::Ascii("losiphical"),
        dictgen::InsensitiveStr::Ascii("losiphies"),
        dictgen::InsensitiveStr::Ascii("losiphy"),
        dictgen::InsensitiveStr::Ascii("losohpers"),
        dictgen::InsensitiveStr::Ascii("losohpical"),
        dictgen::InsensitiveStr::Ascii("losohpically"),
        dictgen::InsensitiveStr::Ascii("losohpies"),
        dictgen::InsensitiveStr::Ascii("losohpy"),
        dictgen::InsensitiveStr::Ascii("losoper"),
        dictgen::InsensitiveStr::Ascii("losopers"),
        dictgen::InsensitiveStr::Ascii("losophae"),
        dictgen::InsensitiveStr::Ascii("losophia"),
        dictgen::InsensitiveStr::Ascii("losophiae"),
        dictgen::InsensitiveStr::Ascii("losophicaly"),
        dictgen::InsensitiveStr::Ascii("losophics"),
        dictgen::InsensitiveStr::Ascii("losophios"),
        dictgen::InsensitiveStr::Ascii("losophycal"),
        dictgen::InsensitiveStr::Ascii("losophycally"),
        dictgen::InsensitiveStr::Ascii("losopies"),
        dictgen::InsensitiveStr::Ascii("losopy"),
        dictgen::InsensitiveStr::Ascii("lospher"),
        dictgen::InsensitiveStr::Ascii("losphies"),
        dictgen::InsensitiveStr::Ascii("losphy"),
        dictgen::InsensitiveStr::Ascii("lospoher"),
        dictgen::InsensitiveStr::Ascii("lospohers"),
        dictgen::InsensitiveStr::Ascii("lospohical"),
        dictgen::InsensitiveStr::Ascii("lospohies"),
        dictgen::InsensitiveStr::Ascii("lospohy"),
        dictgen::InsensitiveStr::Ascii("siological"),
    ],
    values: &[
        &["philadelphia"],
        &["philadelphia"],
        &["philadelphia"],
        &["philadelphia"],
        &["philadelphia"],
        &["philadelphia"],
        &["philadelphia"],
        &["philadelphia"],
        &["philadelphia"],
        &["philadelphia"],
        &["philippines"],
        &["philippines"],
        &["philippines"],
        &["philippines"],
        &["philippines"],
        &["philippines"],
        &["philippines"],
        &["philippines"],
        &["philippines"],
        &["philippines"],
        &["philosopher"],
        &["philosophers"],
        &["philosophical"],
        &["philosophies"],
        &["philosophy"],
        &["philippine"],
        &["philippines"],
        &["philippines"],
        &["phillies"],
        &["phillies"],
        &["philosophically"],
        &["philosophically"],
        &["philosopher"],
        &["philosophers"],
        &["philosophical"],
        &["philosophies"],
        &["philosophy"],
        &["philosopher"],
        &["philosophical"],
        &["philosophically"],
        &["philosophies"],
        &["philosophy"],
        &["philosopher"],
        &["philosophers"],
        &["philosopher"],
        &["philosophical"],
        &["philosophies"],
        &["philosophically"],
        &["philosophies"],
        &["philosophies"],
        &["philosophically"],
        &["philosophically"],
        &["philosophies"],
        &["philosophy"],
        &["philosopher"],
        &["philosophies"],
        &["philosophy"],
        &["philosopher"],
        &["philosophers"],
        &["philosophical"],
        &["philosophies"],
        &["philosophy"],
        &["physiological"],
    ],
    range: 6..=13,
};

static WORD_PHE_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_PHE_CHILDREN),
    value: None,
};

pub static WORD_PHE_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("monena"),
        dictgen::InsensitiveStr::Ascii("monenon"),
        dictgen::InsensitiveStr::Ascii("nemenon"),
        dictgen::InsensitiveStr::Ascii("nemona"),
        dictgen::InsensitiveStr::Ascii("nemonal"),
        dictgen::InsensitiveStr::Ascii("nomanal"),
        dictgen::InsensitiveStr::Ascii("nomanon"),
        dictgen::InsensitiveStr::Ascii("nomemon"),
        dictgen::InsensitiveStr::Ascii("nomenen"),
        dictgen::InsensitiveStr::Ascii("nomenol"),
        dictgen::InsensitiveStr::Ascii("nomenom"),
        dictgen::InsensitiveStr::Ascii("nomenona"),
        dictgen::InsensitiveStr::Ascii("nomenonal"),
        dictgen::InsensitiveStr::Ascii("nomenonly"),
        dictgen::InsensitiveStr::Ascii("nominon"),
        dictgen::InsensitiveStr::Ascii("nomon"),
        dictgen::InsensitiveStr::Ascii("nomonal"),
        dictgen::InsensitiveStr::Ascii("nomonen"),
        dictgen::InsensitiveStr::Ascii("nomonenon"),
        dictgen::InsensitiveStr::Ascii("nomonon"),
        dictgen::InsensitiveStr::Ascii("nonema"),
        dictgen::InsensitiveStr::Ascii("nonemal"),
        dictgen::InsensitiveStr::Ascii("nonemon"),
        dictgen::InsensitiveStr::Ascii("nonmena"),
    ],
    values: &[
        &["phenomena"],
        &["phenomenon"],
        &["phenomenon"],
        &["phenomena"],
        &["phenomenal"],
        &["phenomenal"],
        &["phenomenon"],
        &["phenomenon"],
        &["phenomenon"],
        &["phenomenal"],
        &["phenomenon"],
        &["phenomena"],
        &["phenomenal"],
        &["phenomenally"],
        &["phenomenon"],
        &["phenomenon"],
        &["phenomenal"],
        &["phenomenon"],
        &["phenomenon"],
        &["phenomenon"],
        &["phenomena"],
        &["phenomenal"],
        &["phenomenon"],
        &["phenomena"],
    ],
    range: 5..=9,
};

static WORD_PHA_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_PHA_CHILDREN),
    value: None,
};

pub static WORD_PHA_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ntoom"),
        dictgen::InsensitiveStr::Ascii("ramceutical"),
        dictgen::InsensitiveStr::Ascii("ramceuticals"),
        dictgen::InsensitiveStr::Ascii("ramcist"),
        dictgen::InsensitiveStr::Ascii("ramcists"),
        dictgen::InsensitiveStr::Ascii("ramcy"),
        dictgen::InsensitiveStr::Ascii("rmaceudical"),
        dictgen::InsensitiveStr::Ascii("rmaceutial"),
        dictgen::InsensitiveStr::Ascii("rmacias"),
        dictgen::InsensitiveStr::Ascii("rmacs"),
        dictgen::InsensitiveStr::Ascii("rmacuetical"),
        dictgen::InsensitiveStr::Ascii("rmacueticals"),
        dictgen::InsensitiveStr::Ascii("rmacyst"),
        dictgen::InsensitiveStr::Ascii("rmaseutical"),
        dictgen::InsensitiveStr::Ascii("rmasist"),
        dictgen::InsensitiveStr::Ascii("rmeceutical"),
        dictgen::InsensitiveStr::Ascii("rmicist"),
        dictgen::InsensitiveStr::Ascii("rmsci"),
        dictgen::InsensitiveStr::Ascii("roah"),
        dictgen::InsensitiveStr::Ascii("tnom"),
    ],
    values: &[
        &["phantom"],
        &["pharmaceutical"],
        &["pharmaceutical"],
        &["pharmacist"],
        &["pharmacist"],
        &["pharmacy"],
        &["pharmaceutical"],
        &["pharmaceutical"],
        &["pharmacist"],
        &["pharmacist"],
        &["pharmaceutical"],
        &["pharmaceutical"],
        &["pharmacist"],
        &["pharmaceutical"],
        &["pharmacist"],
        &["pharmaceutical"],
        &["pharmacist"],
        &["pharmacist"],
        &["pharaoh"],
        &["phantom"],
    ],
    range: 4..=12,
};

static WORD_PE_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_PE_CHILDREN),
    value: None,
};

static WORD_PE_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    Some(&WORD_PEA_NODE),
    Some(&WORD_PEB_NODE),
    Some(&WORD_PEC_NODE),
    Some(&WORD_PED_NODE),
    None,
    Some(&WORD_PEF_NODE),
    None,
    None,
    Some(&WORD_PEI_NODE),
    None,
    None,
    None,
    None,
    Some(&WORD_PEN_NODE),
    Some(&WORD_PEO_NODE),
    Some(&WORD_PEP_NODE),
    None,
    Some(&WORD_PER_NODE),
    Some(&WORD_PES_NODE),
    Some(&WORD_PET_NODE),
    None,
    None,
    None,
    None,
    None,
    None,
];

static WORD_PET_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_PET_CHILDREN),
    value: None,
};

pub static WORD_PET_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("etion"),
        dictgen::InsensitiveStr::Ascii("rolem"),
        dictgen::InsensitiveStr::Ascii("roluem"),
    ],
    values: &[&["petition"], &["petroleum"], &["petroleum"]],
    range: 5..=6,
};

static WORD_PES_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_PES_CHILDREN),
    value: None,
};

pub static WORD_PES_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("itcides"),
        dictgen::InsensitiveStr::Ascii("siary"),
        dictgen::InsensitiveStr::Ascii("simestic"),
        dictgen::InsensitiveStr::Ascii("simisitic"),
        dictgen::InsensitiveStr::Ascii("simisstic"),
        dictgen::InsensitiveStr::Ascii("simistc"),
        dictgen::InsensitiveStr::Ascii("simistisch"),
        dictgen::InsensitiveStr::Ascii("simitic"),
        dictgen::InsensitiveStr::Ascii("tacides"),
        dictgen::InsensitiveStr::Ascii("tecides"),
        dictgen::InsensitiveStr::Ascii("ticedes"),
        dictgen::InsensitiveStr::Ascii("ticidas"),
        dictgen::InsensitiveStr::Ascii("ticids"),
        dictgen::InsensitiveStr::Ascii("tisides"),
        dictgen::InsensitiveStr::Ascii("tizides"),
    ],
    values: &[
        &["pesticides"],
        &["pessary"],
        &["pessimistic"],
        &["pessimistic"],
        &["pessimistic"],
        &["pessimistic"],
        &["pessimistic"],
        &["pessimistic"],
        &["pesticides"],
        &["pesticides"],
        &["pesticides"],
        &["pesticides"],
        &["pesticides"],
        &["pesticides"],
        &["pesticides"],
    ],
    range: 5..=10,
};

static WORD_PER_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_PER_CHILDREN),
    value: None,
};

static WORD_PER_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    Some(&WORD_PERA_NODE),
    None,
    Some(&WORD_PERC_NODE),
    Some(&WORD_PERD_NODE),
    Some(&WORD_PERE_NODE),
    Some(&WORD_PERF_NODE),
    None,
    Some(&WORD_PERH_NODE),
    Some(&WORD_PERI_NODE),
    Some(&WORD_PERJ_NODE),
    None,
    Some(&WORD_PERL_NODE),
    Some(&WORD_PERM_NODE),
    Some(&WORD_PERN_NODE),
    Some(&WORD_PERO_NODE),
    Some(&WORD_PERP_NODE),
    None,
    Some(&WORD_PERR_NODE),
    Some(&WORD_PERS_NODE),
    Some(&WORD_PERT_NODE),
    Some(&WORD_PERU_NODE),
    Some(&WORD_PERV_NODE),
    None,
    Some(&WORD_PERX_NODE),
    None,
    None,
];

static WORD_PERX_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_PERX_CHILDREN),
    value: None,
};

pub static WORD_PERX_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("oide")],
    values: &[&["peroxide"]],
    range: 4..=4,
};

static WORD_PERV_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_PERV_CHILDREN),
    value: None,
};

pub static WORD_PERV_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ail"),
        dictgen::InsensitiveStr::Ascii("ailing"),
        dictgen::InsensitiveStr::Ascii("alence"),
        dictgen::InsensitiveStr::Ascii("ention"),
        dictgen::InsensitiveStr::Ascii("ents"),
        dictgen::InsensitiveStr::Ascii("ersley"),
        dictgen::InsensitiveStr::Ascii("erst"),
        dictgen::InsensitiveStr::Ascii("ertes"),
        dictgen::InsensitiveStr::Ascii("iew"),
        dictgen::InsensitiveStr::Ascii("iews"),
        dictgen::InsensitiveStr::Ascii("ious"),
    ],
    values: &[
        &["prevail"],
        &["prevailing"],
        &["prevalence"],
        &["prevention"],
        &["prevents"],
        &["perverse"],
        &["pervert"],
        &["perverse"],
        &["preview"],
        &["previews"],
        &["previous"],
    ],
    range: 3..=6,
};

static WORD_PERU_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_PERU_CHILDREN),
    value: None,
};

pub static WORD_PERU_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("saded")],
    values: &[&["persuaded"]],
    range: 5..=5,
};

static WORD_PERT_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_PERT_CHILDREN),
    value: None,
};

pub static WORD_PERT_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("aing"),
        dictgen::InsensitiveStr::Ascii("ended"),
        dictgen::InsensitiveStr::Ascii("ians"),
        dictgen::InsensitiveStr::Ascii("icularly"),
        dictgen::InsensitiveStr::Ascii("inante"),
        dictgen::InsensitiveStr::Ascii("inet"),
        dictgen::InsensitiveStr::Ascii("oleum"),
        dictgen::InsensitiveStr::Ascii("ubation"),
        dictgen::InsensitiveStr::Ascii("ubations"),
    ],
    values: &[
        &["pertaining"],
        &["pretended"],
        &["pertains"],
        &["particularly"],
        &["pertinent"],
        &["pertinent"],
        &["petroleum"],
        &["perturbation"],
        &["perturbations"],
    ],
    range: 4..=8,
};

static WORD_PERS_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_PERS_CHILDREN),
    value: None,
};

static WORD_PERS_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    Some(&WORD_PERSA_NODE),
    None,
    Some(&WORD_PERSC_NODE),
    None,
    Some(&WORD_PERSE_NODE),
    None,
    None,
    None,
    Some(&WORD_PERSI_NODE),
    None,
    None,
    None,
    None,
    None,
    Some(&WORD_PERSO_NODE),
    Some(&WORD_PERSP_NODE),
    None,
    None,
    None,
    Some(&WORD_PERST_NODE),
    Some(&WORD_PERSU_NODE),
    Some(&WORD_PERSV_NODE),
    Some(&WORD_PERSW_NODE),
    None,
    None,
    None,
];

static WORD_PERSW_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_PERSW_CHILDREN),
    value: None,
};

pub static WORD_PERSW_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("asion")],
    values: &[&["persuasion"]],
    range: 5..=5,
};

static WORD_PERSV_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_PERSV_CHILDREN),
    value: None,
};

pub static WORD_PERSV_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("asive")],
    values: &[&["persuasive"]],
    range: 5..=5,
};

static WORD_PERSU_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_PERSU_CHILDREN),
    value: None,
};

pub static WORD_PERSU_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("asian"),
        dictgen::InsensitiveStr::Ascii("asing"),
        dictgen::InsensitiveStr::Ascii("asivo"),
        dictgen::InsensitiveStr::Ascii("aso"),
        dictgen::InsensitiveStr::Ascii("assion"),
        dictgen::InsensitiveStr::Ascii("assive"),
        dictgen::InsensitiveStr::Ascii("ated"),
        dictgen::InsensitiveStr::Ascii("ation"),
        dictgen::InsensitiveStr::Ascii("cuted"),
        dictgen::InsensitiveStr::Ascii("cution"),
        dictgen::InsensitiveStr::Ascii("ded"),
        dictgen::InsensitiveStr::Ascii("e"),
        dictgen::InsensitiveStr::Ascii("ed"),
        dictgen::InsensitiveStr::Ascii("ing"),
        dictgen::InsensitiveStr::Ascii("it"),
        dictgen::InsensitiveStr::Ascii("its"),
        dictgen::InsensitiveStr::Ascii("mably"),
        dictgen::InsensitiveStr::Ascii("med"),
        dictgen::InsensitiveStr::Ascii("mption"),
        dictgen::InsensitiveStr::Ascii("mptuous"),
        dictgen::InsensitiveStr::Ascii("ssion"),
    ],
    values: &[
        &["persuasion"],
        &["persuasion"],
        &["persuasion"],
        &["persuasion"],
        &["persuasion"],
        &["persuasive"],
        &["persuade"],
        &["persuasion"],
        &["persecuted"],
        &["persecution"],
        &["persuaded"],
        &["pursue"],
        &["pursued"],
        &["pursuing"],
        &["pursuit"],
        &["pursuits"],
        &["presumably"],
        &["presumed"],
        &["presumption"],
        &["presumptuous"],
        &["persuasion"],
    ],
    range: 1..=7,
};

static WORD_PERST_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_PERST_CHILDREN),
    value: None,
};

pub static WORD_PERST_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("ige")],
    values: &[&["prestige"]],
    range: 3..=3,
};

static WORD_PERSP_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_PERSP_CHILDREN),
    value: None,
};

pub static WORD_PERSP_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ecitve"),
        dictgen::InsensitiveStr::Ascii("ecitves"),
        dictgen::InsensitiveStr::Ascii("ecive"),
        dictgen::InsensitiveStr::Ascii("ectie"),
        dictgen::InsensitiveStr::Ascii("ectief"),
        dictgen::InsensitiveStr::Ascii("ectivas"),
        dictgen::InsensitiveStr::Ascii("ektive"),
    ],
    values: &[
        &["perspective"],
        &["perspectives"],
        &["perspective"],
        &["perspectives"],
        &["perspective"],
        &["perspectives"],
        &["perspective"],
    ],
    range: 5..=7,
};

static WORD_PERSO_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_PERSO_CHILDREN),
    value: None,
};

pub static WORD_PERSO_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("anlly"),
        dictgen::InsensitiveStr::Ascii("cuted"),
        dictgen::InsensitiveStr::Ascii("naes"),
        dictgen::InsensitiveStr::Ascii("nalie"),
        dictgen::InsensitiveStr::Ascii("nalis"),
        dictgen::InsensitiveStr::Ascii("nalites"),
        dictgen::InsensitiveStr::Ascii("nalitites"),
        dictgen::InsensitiveStr::Ascii("nalitits"),
        dictgen::InsensitiveStr::Ascii("nallity"),
        dictgen::InsensitiveStr::Ascii("naly"),
        dictgen::InsensitiveStr::Ascii("narse"),
        dictgen::InsensitiveStr::Ascii("natus"),
        dictgen::InsensitiveStr::Ascii("nel"),
        dictgen::InsensitiveStr::Ascii("nell"),
        dictgen::InsensitiveStr::Ascii("nes"),
        dictgen::InsensitiveStr::Ascii("nhod"),
        dictgen::InsensitiveStr::Ascii("nhoood"),
        dictgen::InsensitiveStr::Ascii("nilized"),
        dictgen::InsensitiveStr::Ascii("nis"),
        dictgen::InsensitiveStr::Ascii("nnell"),
        dictgen::InsensitiveStr::Ascii("nsa"),
    ],
    values: &[
        &["personally"],
        &["persecuted"],
        &["personas"],
        &["personalized"],
        &["personas"],
        &["personalities"],
        &["personalities"],
        &["personalities"],
        &["personally"],
        &["personally"],
        &["personas"],
        &["personas"],
        &["personnel"],
        &["personnel"],
        &["persons"],
        &["personhood"],
        &["personhood"],
        &["personalized"],
        &["persons"],
        &["personnel"],
        &["personas"],
    ],
    range: 3..=9,
};

static WORD_PERSI_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_PERSI_CHILDREN),
    value: None,
};

pub static WORD_PERSI_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("cuted"),
        dictgen::InsensitiveStr::Ascii("cution"),
        dictgen::InsensitiveStr::Ascii("sit"),
        dictgen::InsensitiveStr::Ascii("stance"),
        dictgen::InsensitiveStr::Ascii("stant"),
        dictgen::InsensitiveStr::Ascii("stante"),
        dictgen::InsensitiveStr::Ascii("stens"),
        dictgen::InsensitiveStr::Ascii("stense"),
        dictgen::InsensitiveStr::Ascii("stente"),
        dictgen::InsensitiveStr::Ascii("stes"),
        dictgen::InsensitiveStr::Ascii("ts"),
    ],
    values: &[
        &["persecuted"],
        &["persecution"],
        &["persist"],
        &["persistence"],
        &["persistent"],
        &["persistent"],
        &["persists"],
        &["persistence"],
        &["persistence"],
        &["persists"],
        &["persist"],
    ],
    range: 2..=6,
};

static WORD_PERSE_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_PERSE_CHILDREN),
    value: None,
};

pub static WORD_PERSE_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ctive"),
        dictgen::InsensitiveStr::Ascii("ctued"),
        dictgen::InsensitiveStr::Ascii("ctuion"),
        dictgen::InsensitiveStr::Ascii("cucion"),
        dictgen::InsensitiveStr::Ascii("cusion"),
        dictgen::InsensitiveStr::Ascii("cutie"),
        dictgen::InsensitiveStr::Ascii("cutin"),
        dictgen::InsensitiveStr::Ascii("cutted"),
        dictgen::InsensitiveStr::Ascii("pctive"),
        dictgen::InsensitiveStr::Ascii("pctives"),
        dictgen::InsensitiveStr::Ascii("rvation"),
        dictgen::InsensitiveStr::Ascii("rve"),
        dictgen::InsensitiveStr::Ascii("rved"),
        dictgen::InsensitiveStr::Ascii("rving"),
        dictgen::InsensitiveStr::Ascii("ts"),
        dictgen::InsensitiveStr::Ascii("verence"),
    ],
    values: &[
        &["respective"],
        &["persecuted"],
        &["persecution"],
        &["persecution"],
        &["persecution"],
        &["persecuted"],
        &["persecution"],
        &["persecuted"],
        &["perspective"],
        &["perspectives"],
        &["preservation"],
        &["preserve"],
        &["preserved"],
        &["preserving"],
        &["presets"],
        &["perseverance"],
    ],
    range: 2..=7,
};

static WORD_PERSC_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_PERSC_CHILDREN),
    value: None,
};

pub static WORD_PERSC_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("eptive"),
        dictgen::InsensitiveStr::Ascii("ribe"),
    ],
    values: &[&["perspectives"], &["prescribe"]],
    range: 4..=6,
};

static WORD_PERSA_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_PERSA_CHILDREN),
    value: None,
};

pub static WORD_PERSA_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("in"),
        dictgen::InsensitiveStr::Ascii("n"),
        dictgen::InsensitiveStr::Ascii("ude"),
        dictgen::InsensitiveStr::Ascii("uded"),
        dictgen::InsensitiveStr::Ascii("usion"),
        dictgen::InsensitiveStr::Ascii("usive"),
    ],
    values: &[
        &["persian"],
        &["person"],
        &["persuade"],
        &["persuaded"],
        &["persuasion"],
        &["persuasive"],
    ],
    range: 1..=5,
};

static WORD_PERR_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_PERR_CHILDREN),
    value: None,
};

pub static WORD_PERR_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("ogative")],
    values: &[&["prerogative"]],
    range: 7..=7,
};

static WORD_PERP_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_PERP_CHILDREN),
    value: None,
};

pub static WORD_PERP_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("aid"),
        dictgen::InsensitiveStr::Ascii("andicular"),
        dictgen::InsensitiveStr::Ascii("aration"),
        dictgen::InsensitiveStr::Ascii("atrated"),
        dictgen::InsensitiveStr::Ascii("atrator"),
        dictgen::InsensitiveStr::Ascii("atrators"),
        dictgen::InsensitiveStr::Ascii("atuate"),
        dictgen::InsensitiveStr::Ascii("atuated"),
        dictgen::InsensitiveStr::Ascii("atuates"),
        dictgen::InsensitiveStr::Ascii("atuating"),
        dictgen::InsensitiveStr::Ascii("endicualr"),
        dictgen::InsensitiveStr::Ascii("endiculaire"),
        dictgen::InsensitiveStr::Ascii("endiculaires"),
        dictgen::InsensitiveStr::Ascii("enticular"),
        dictgen::InsensitiveStr::Ascii("ertated"),
        dictgen::InsensitiveStr::Ascii("ertator"),
        dictgen::InsensitiveStr::Ascii("ertators"),
        dictgen::InsensitiveStr::Ascii("ertrated"),
        dictgen::InsensitiveStr::Ascii("etraded"),
        dictgen::InsensitiveStr::Ascii("etrador"),
        dictgen::InsensitiveStr::Ascii("etraitor"),
        dictgen::InsensitiveStr::Ascii("etrar"),
        dictgen::InsensitiveStr::Ascii("etraron"),
        dictgen::InsensitiveStr::Ascii("etrater"),
        dictgen::InsensitiveStr::Ascii("etraters"),
        dictgen::InsensitiveStr::Ascii("etuaded"),
        dictgen::InsensitiveStr::Ascii("etuae"),
        dictgen::InsensitiveStr::Ascii("etualy"),
        dictgen::InsensitiveStr::Ascii("etuare"),
        dictgen::InsensitiveStr::Ascii("etuas"),
        dictgen::InsensitiveStr::Ascii("etuaters"),
        dictgen::InsensitiveStr::Ascii("etuationg"),
        dictgen::InsensitiveStr::Ascii("etue"),
        dictgen::InsensitiveStr::Ascii("etutate"),
        dictgen::InsensitiveStr::Ascii("etuties"),
        dictgen::InsensitiveStr::Ascii("has"),
        dictgen::InsensitiveStr::Ascii("indicular"),
        dictgen::InsensitiveStr::Ascii("itrated"),
        dictgen::InsensitiveStr::Ascii("itrator"),
        dictgen::InsensitiveStr::Ascii("itrators"),
        dictgen::InsensitiveStr::Ascii("osefully"),
        dictgen::InsensitiveStr::Ascii("osterous"),
        dictgen::InsensitiveStr::Ascii("retated"),
        dictgen::InsensitiveStr::Ascii("retator"),
        dictgen::InsensitiveStr::Ascii("retators"),
        dictgen::InsensitiveStr::Ascii("sective"),
        dictgen::InsensitiveStr::Ascii("sectives"),
        dictgen::InsensitiveStr::Ascii("utrator"),
        dictgen::InsensitiveStr::Ascii("utrators"),
        dictgen::InsensitiveStr::Ascii("utually"),
        dictgen::InsensitiveStr::Ascii("utuated"),
        dictgen::InsensitiveStr::Ascii("utuates"),
        dictgen::InsensitiveStr::Ascii("utuating"),
    ],
    values: &[
        &["prepaid"],
        &["perpendicular"],
        &["preparation"],
        &["perpetrated"],
        &["perpetrator"],
        &["perpetrators"],
        &["perpetuate"],
        &["perpetuated"],
        &["perpetuates"],
        &["perpetuating"],
        &["perpendicular"],
        &["perpendicular"],
        &["perpendicular"],
        &["perpendicular"],
        &["perpetuated"],
        &["perpetrators"],
        &["perpetrators"],
        &["perpetrated"],
        &["perpetrated"],
        &["perpetrator"],
        &["perpetrator"],
        &["perpetrator"],
        &["perpetrator"],
        &["perpetrator"],
        &["perpetrators"],
        &["perpetuated"],
        &["perpetuate"],
        &["perpetually"],
        &["perpetuate"],
        &["perpetuates"],
        &["perpetuates"],
        &["perpetuating"],
        &["perpetuate"],
        &["perpetuate"],
        &["perpetuates"],
        &["perhaps"],
        &["perpendicular"],
        &["perpetrated"],
        &["perpetrator"],
        &["perpetrators"],
        &["purposefully"],
        &["preposterous"],
        &["perpetrated"],
        &["perpetrators"],
        &["perpetrators"],
        &["perspective"],
        &["perspectives"],
        &["perpetrator"],
        &["perpetrators"],
        &["perpetually"],
        &["perpetuated"],
        &["perpetuates"],
        &["perpetuating"],
    ],
    range: 3..=12,
};

static WORD_PERO_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_PERO_CHILDREN),
    value: None,
};

pub static WORD_PERO_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("gative"),
        dictgen::InsensitiveStr::Ascii("idic"),
        dictgen::InsensitiveStr::Ascii("idically"),
        dictgen::InsensitiveStr::Ascii("ids"),
        dictgen::InsensitiveStr::Ascii("nal"),
        dictgen::InsensitiveStr::Ascii("rdered"),
        dictgen::InsensitiveStr::Ascii("rders"),
        dictgen::InsensitiveStr::Ascii("snality"),
        dictgen::InsensitiveStr::Ascii("snas"),
    ],
    values: &[
        &["prerogative"],
        &["periodic"],
        &["periodically"],
        &["periods"],
        &["personal"],
        &["preordered"],
        &["preorders"],
        &["personality"],
        &["personas"],
    ],
    range: 3..=8,
};

static WORD_PERN_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_PERN_CHILDREN),
    value: None,
};

pub static WORD_PERN_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ament"),
        dictgen::InsensitiveStr::Ascii("amently"),
    ],
    values: &[&["permanent"], &["permanently"]],
    range: 5..=7,
};

static WORD_PERM_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_PERM_CHILDREN),
    value: None,
};

pub static WORD_PERM_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ade"),
        dictgen::InsensitiveStr::Ascii("amently"),
        dictgen::InsensitiveStr::Ascii("anant"),
        dictgen::InsensitiveStr::Ascii("anantely"),
        dictgen::InsensitiveStr::Ascii("anantly"),
        dictgen::InsensitiveStr::Ascii("anentely"),
        dictgen::InsensitiveStr::Ascii("anenty"),
        dictgen::InsensitiveStr::Ascii("anet"),
        dictgen::InsensitiveStr::Ascii("anetly"),
        dictgen::InsensitiveStr::Ascii("ature"),
        dictgen::InsensitiveStr::Ascii("aturely"),
        dictgen::InsensitiveStr::Ascii("enant"),
        dictgen::InsensitiveStr::Ascii("enantly"),
        dictgen::InsensitiveStr::Ascii("enently"),
        dictgen::InsensitiveStr::Ascii("ier"),
        dictgen::InsensitiveStr::Ascii("iere"),
        dictgen::InsensitiveStr::Ascii("ieter"),
        dictgen::InsensitiveStr::Ascii("inantly"),
        dictgen::InsensitiveStr::Ascii("inently"),
        dictgen::InsensitiveStr::Ascii("ise"),
        dictgen::InsensitiveStr::Ascii("ises"),
        dictgen::InsensitiveStr::Ascii("isions"),
        dictgen::InsensitiveStr::Ascii("isison"),
        dictgen::InsensitiveStr::Ascii("isisons"),
        dictgen::InsensitiveStr::Ascii("issble"),
        dictgen::InsensitiveStr::Ascii("issiable"),
        dictgen::InsensitiveStr::Ascii("issibe"),
        dictgen::InsensitiveStr::Ascii("issie"),
        dictgen::InsensitiveStr::Ascii("issin"),
        dictgen::InsensitiveStr::Ascii("isson"),
        dictgen::InsensitiveStr::Ascii("issons"),
        dictgen::InsensitiveStr::Ascii("isssion"),
        dictgen::InsensitiveStr::Ascii("itas"),
        dictgen::InsensitiveStr::Ascii("ites"),
        dictgen::InsensitiveStr::Ascii("itis"),
        dictgen::InsensitiveStr::Ascii("itts"),
        dictgen::InsensitiveStr::Ascii("ium"),
        dictgen::InsensitiveStr::Ascii("iums"),
    ],
    values: &[
        &["premade"],
        &["permanently"],
        &["permanent"],
        &["permanently"],
        &["permanently"],
        &["permanently"],
        &["permanently"],
        &["permanent"],
        &["permanently"],
        &["premature"],
        &["prematurely"],
        &["permanent"],
        &["permanently"],
        &["permanently"],
        &["premier"],
        &["premiere"],
        &["perimeter"],
        &["permanently"],
        &["permanently"],
        &["premise"],
        &["premises"],
        &["permission"],
        &["permissions"],
        &["permissions"],
        &["permissible"],
        &["permissible"],
        &["permissible"],
        &["permissible"],
        &["permissions"],
        &["permission"],
        &["permissions"],
        &["permissions"],
        &["permits"],
        &["permits"],
        &["permits"],
        &["permits"],
        &["premium"],
        &["premiums"],
    ],
    range: 3..=8,
};

static WORD_PERL_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_PERL_CHILDREN),
    value: None,
};

pub static WORD_PERL_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("iminary")],
    values: &[&["preliminary"]],
    range: 7..=7,
};

static WORD_PERJ_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_PERJ_CHILDREN),
    value: None,
};

pub static WORD_PERJ_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ery"),
        dictgen::InsensitiveStr::Ascii("orative"),
    ],
    values: &[&["perjury"], &["pejorative"]],
    range: 3..=7,
};

static WORD_PERI_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_PERI_CHILDREN),
    value: None,
};

pub static WORD_PERI_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("cing"),
        dictgen::InsensitiveStr::Ascii("cings"),
        dictgen::InsensitiveStr::Ascii("dinkle"),
        dictgen::InsensitiveStr::Ascii("doic"),
        dictgen::InsensitiveStr::Ascii("doically"),
        dictgen::InsensitiveStr::Ascii("hperal"),
        dictgen::InsensitiveStr::Ascii("hperals"),
        dictgen::InsensitiveStr::Ascii("metr"),
        dictgen::InsensitiveStr::Ascii("metre"),
        dictgen::InsensitiveStr::Ascii("odes"),
        dictgen::InsensitiveStr::Ascii("odicaly"),
        dictgen::InsensitiveStr::Ascii("odisch"),
        dictgen::InsensitiveStr::Ascii("odos"),
        dictgen::InsensitiveStr::Ascii("pathetic"),
        dictgen::InsensitiveStr::Ascii("perhal"),
        dictgen::InsensitiveStr::Ascii("perhals"),
        dictgen::InsensitiveStr::Ascii("pheals"),
        dictgen::InsensitiveStr::Ascii("phereal"),
        dictgen::InsensitiveStr::Ascii("phereals"),
        dictgen::InsensitiveStr::Ascii("pheria"),
        dictgen::InsensitiveStr::Ascii("pherial"),
        dictgen::InsensitiveStr::Ascii("pherials"),
        dictgen::InsensitiveStr::Ascii("phiral"),
        dictgen::InsensitiveStr::Ascii("phirals"),
        dictgen::InsensitiveStr::Ascii("phreal"),
        dictgen::InsensitiveStr::Ascii("phreals"),
        dictgen::InsensitiveStr::Ascii("phrial"),
        dictgen::InsensitiveStr::Ascii("phrials"),
        dictgen::InsensitiveStr::Ascii("san"),
        dictgen::InsensitiveStr::Ascii("stent"),
        dictgen::InsensitiveStr::Ascii("tinkle"),
        dictgen::InsensitiveStr::Ascii("wankle"),
        dictgen::InsensitiveStr::Ascii("winke"),
        dictgen::InsensitiveStr::Ascii("winkel"),
        dictgen::InsensitiveStr::Ascii("winkie"),
        dictgen::InsensitiveStr::Ascii("winlke"),
    ],
    values: &[
        &["piercing"],
        &["piercings"],
        &["periwinkle"],
        &["periodic"],
        &["periodically"],
        &["peripheral"],
        &["peripherals"],
        &["perimeter"],
        &["perimeter"],
        &["periods"],
        &["periodically"],
        &["periodic"],
        &["periods"],
        &["peripatetic"],
        &["peripheral"],
        &["peripherals"],
        &["peripherals"],
        &["peripheral"],
        &["peripherals"],
        &["peripheral"],
        &["peripheral"],
        &["peripherals"],
        &["peripheral"],
        &["peripherals"],
        &["peripheral"],
        &["peripherals"],
        &["peripheral"],
        &["peripherals"],
        &["persian"],
        &["persistent"],
        &["periwinkle"],
        &["periwinkle"],
        &["periwinkle"],
        &["periwinkle"],
        &["periwinkle"],
        &["periwinkle"],
    ],
    range: 3..=8,
};

static WORD_PERH_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_PERH_CHILDREN),
    value: None,
};

pub static WORD_PERH_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("asp"),
        dictgen::InsensitiveStr::Ascii("eaps"),
        dictgen::InsensitiveStr::Ascii("iperal"),
        dictgen::InsensitiveStr::Ascii("iperals"),
        dictgen::InsensitiveStr::Ascii("pas"),
    ],
    values: &[
        &["perhaps"],
        &["perhaps"],
        &["peripheral"],
        &["peripherals"],
        &["perhaps"],
    ],
    range: 3..=7,
};

static WORD_PERF_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_PERF_CHILDREN),
    value: None,
};

pub static WORD_PERF_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("eccion"),
        dictgen::InsensitiveStr::Ascii("eclty"),
        dictgen::InsensitiveStr::Ascii("ecty"),
        dictgen::InsensitiveStr::Ascii("ecxion"),
        dictgen::InsensitiveStr::Ascii("ektion"),
        dictgen::InsensitiveStr::Ascii("erable"),
        dictgen::InsensitiveStr::Ascii("erably"),
        dictgen::InsensitiveStr::Ascii("erence"),
        dictgen::InsensitiveStr::Ascii("erences"),
        dictgen::InsensitiveStr::Ascii("erential"),
        dictgen::InsensitiveStr::Ascii("erring"),
        dictgen::InsensitiveStr::Ascii("ers"),
        dictgen::InsensitiveStr::Ascii("excion"),
        dictgen::InsensitiveStr::Ascii("omance"),
        dictgen::InsensitiveStr::Ascii("omers"),
        dictgen::InsensitiveStr::Ascii("omrance"),
        dictgen::InsensitiveStr::Ascii("oramnce"),
        dictgen::InsensitiveStr::Ascii("ormace"),
        dictgen::InsensitiveStr::Ascii("ormaces"),
        dictgen::InsensitiveStr::Ascii("ormacne"),
        dictgen::InsensitiveStr::Ascii("ormancepcs"),
        dictgen::InsensitiveStr::Ascii("ormancetest"),
        dictgen::InsensitiveStr::Ascii("ormancewise"),
        dictgen::InsensitiveStr::Ascii("ormane"),
        dictgen::InsensitiveStr::Ascii("ormanes"),
        dictgen::InsensitiveStr::Ascii("ormans"),
        dictgen::InsensitiveStr::Ascii("ormanse"),
        dictgen::InsensitiveStr::Ascii("ormantes"),
        dictgen::InsensitiveStr::Ascii("ormas"),
        dictgen::InsensitiveStr::Ascii("ormence"),
        dictgen::InsensitiveStr::Ascii("ormences"),
        dictgen::InsensitiveStr::Ascii("ormens"),
        dictgen::InsensitiveStr::Ascii("ormnace"),
        dictgen::InsensitiveStr::Ascii("ormous"),
        dictgen::InsensitiveStr::Ascii("romance"),
        dictgen::InsensitiveStr::Ascii("romances"),
        dictgen::InsensitiveStr::Ascii("romer"),
        dictgen::InsensitiveStr::Ascii("romers"),
        dictgen::InsensitiveStr::Ascii("roms"),
    ],
    values: &[
        &["perfection"],
        &["perfectly"],
        &["perfectly"],
        &["perfection"],
        &["perfection"],
        &["preferable"],
        &["preferably"],
        &["preference"],
        &["preferences"],
        &["preferential"],
        &["preferring"],
        &["prefers"],
        &["perfection"],
        &["performance"],
        &["performers"],
        &["performances"],
        &["performances"],
        &["performance"],
        &["performances"],
        &["performances"],
        &["performances"],
        &["performances"],
        &["performances"],
        &["performances"],
        &["performances"],
        &["performances"],
        &["performances"],
        &["performances"],
        &["performs"],
        &["performance"],
        &["performances"],
        &["performers"],
        &["performances"],
        &["performs"],
        &["performance"],
        &["performances"],
        &["performer"],
        &["performers"],
        &["performs"],
    ],
    range: 3..=11,
};

static WORD_PERE_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_PERE_CHILDREN),
    value: None,
};

pub static WORD_PERE_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("miter"),
        dictgen::InsensitiveStr::Ascii("nially"),
        dictgen::InsensitiveStr::Ascii("phirals"),
        dictgen::InsensitiveStr::Ascii("ptually"),
    ],
    values: &[
        &["perimeter"],
        &["perennially"],
        &["peripherals"],
        &["perpetually"],
    ],
    range: 5..=7,
};

static WORD_PERD_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_PERD_CHILDREN),
    value: None,
};

pub static WORD_PERD_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ators"),
        dictgen::InsensitiveStr::Ascii("icament"),
        dictgen::InsensitiveStr::Ascii("ict"),
        dictgen::InsensitiveStr::Ascii("ictable"),
        dictgen::InsensitiveStr::Ascii("icting"),
        dictgen::InsensitiveStr::Ascii("iction"),
        dictgen::InsensitiveStr::Ascii("ictions"),
        dictgen::InsensitiveStr::Ascii("ictive"),
        dictgen::InsensitiveStr::Ascii("ominantly"),
    ],
    values: &[
        &["predators"],
        &["predicament"],
        &["predict"],
        &["predictable"],
        &["predicting"],
        &["prediction"],
        &["predictions"],
        &["predictive"],
        &["predominantly"],
    ],
    range: 3..=9,
};

static WORD_PERC_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_PERC_CHILDREN),
    value: None,
};

pub static WORD_PERC_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("antage"),
        dictgen::InsensitiveStr::Ascii("antages"),
        dictgen::InsensitiveStr::Ascii("antile"),
        dictgen::InsensitiveStr::Ascii("aution"),
        dictgen::InsensitiveStr::Ascii("autions"),
        dictgen::InsensitiveStr::Ascii("eded"),
        dictgen::InsensitiveStr::Ascii("enatge"),
        dictgen::InsensitiveStr::Ascii("entagens"),
        dictgen::InsensitiveStr::Ascii("ente"),
        dictgen::InsensitiveStr::Ascii("ential"),
        dictgen::InsensitiveStr::Ascii("entige"),
        dictgen::InsensitiveStr::Ascii("entille"),
        dictgen::InsensitiveStr::Ascii("epted"),
        dictgen::InsensitiveStr::Ascii("eptoin"),
        dictgen::InsensitiveStr::Ascii("ession"),
        dictgen::InsensitiveStr::Ascii("etange"),
        dictgen::InsensitiveStr::Ascii("etnage"),
        dictgen::InsensitiveStr::Ascii("evied"),
        dictgen::InsensitiveStr::Ascii("ieve"),
        dictgen::InsensitiveStr::Ascii("ieved"),
        dictgen::InsensitiveStr::Ascii("intile"),
        dictgen::InsensitiveStr::Ascii("ious"),
        dictgen::InsensitiveStr::Ascii("ise"),
        dictgen::InsensitiveStr::Ascii("isely"),
        dictgen::InsensitiveStr::Ascii("ision"),
        dictgen::InsensitiveStr::Ascii("ission"),
        dictgen::InsensitiveStr::Ascii("lude"),
        dictgen::InsensitiveStr::Ascii("petion"),
        dictgen::InsensitiveStr::Ascii("petions"),
        dictgen::InsensitiveStr::Ascii("ursor"),
        dictgen::InsensitiveStr::Ascii("usions"),
        dictgen::InsensitiveStr::Ascii("usssion"),
    ],
    values: &[
        &["percentage"],
        &["percentages"],
        &["percentile"],
        &["precaution"],
        &["precautions"],
        &["preceded"],
        &["percentages"],
        &["percentages"],
        &["percentile"],
        &["percentile"],
        &["percentile"],
        &["percentile"],
        &["perceived"],
        &["perceptions"],
        &["percussion"],
        &["percentages"],
        &["percentages"],
        &["perceived"],
        &["perceive"],
        &["perceived"],
        &["percentile"],
        &["precious"],
        &["precise"],
        &["precisely"],
        &["precision"],
        &["percussion"],
        &["preclude"],
        &["perceptions"],
        &["perceptions"],
        &["precursor"],
        &["percussion"],
        &["percussion"],
    ],
    range: 3..=8,
};

static WORD_PERA_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_PERA_CHILDREN),
    value: None,
};

pub static WORD_PERA_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("de")],
    values: &[&["parade"]],
    range: 2..=2,
};

static WORD_PEP_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_PEP_CHILDREN),
    value: None,
};

pub static WORD_PEP_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("perin"),
        dictgen::InsensitiveStr::Ascii("perino"),
        dictgen::InsensitiveStr::Ascii("perment"),
        dictgen::InsensitiveStr::Ascii("permit"),
        dictgen::InsensitiveStr::Ascii("perocini"),
        dictgen::InsensitiveStr::Ascii("peronni"),
    ],
    values: &[
        &["pepperoni"],
        &["pepperoni"],
        &["peppermint"],
        &["peppermint"],
        &["pepperoni"],
        &["pepperoni"],
    ],
    range: 5..=8,
};

static WORD_PEO_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_PEO_CHILDREN),
    value: None,
};

pub static WORD_PEO_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("dphile"),
        dictgen::InsensitiveStr::Ascii("dphiles"),
        dictgen::InsensitiveStr::Ascii("dphilia"),
        dictgen::InsensitiveStr::Ascii("m"),
        dictgen::InsensitiveStr::Ascii("ms"),
        dictgen::InsensitiveStr::Ascii("pel"),
        dictgen::InsensitiveStr::Ascii("pels"),
        dictgen::InsensitiveStr::Ascii("try"),
    ],
    values: &[
        &["pedophile"],
        &["pedophiles"],
        &["pedophilia"],
        &["poem"],
        &["poems"],
        &["people"],
        &["peoples"],
        &["poetry"],
    ],
    range: 1..=7,
};

static WORD_PEN_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_PEN_CHILDREN),
    value: None,
};

pub static WORD_PEN_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("alites"),
        dictgen::InsensitiveStr::Ascii("altis"),
        dictgen::InsensitiveStr::Ascii("atgon"),
        dictgen::InsensitiveStr::Ascii("atlies"),
        dictgen::InsensitiveStr::Ascii("atly"),
        dictgen::InsensitiveStr::Ascii("ciles"),
        dictgen::InsensitiveStr::Ascii("datic"),
        dictgen::InsensitiveStr::Ascii("dulm"),
        dictgen::InsensitiveStr::Ascii("duluum"),
        dictgen::InsensitiveStr::Ascii("erator"),
        dictgen::InsensitiveStr::Ascii("etracion"),
        dictgen::InsensitiveStr::Ascii("etrading"),
        dictgen::InsensitiveStr::Ascii("etraion"),
        dictgen::InsensitiveStr::Ascii("etrarion"),
        dictgen::InsensitiveStr::Ascii("etratiing"),
        dictgen::InsensitiveStr::Ascii("etratin"),
        dictgen::InsensitiveStr::Ascii("etraton"),
        dictgen::InsensitiveStr::Ascii("giuns"),
        dictgen::InsensitiveStr::Ascii("guines"),
        dictgen::InsensitiveStr::Ascii("guinese"),
        dictgen::InsensitiveStr::Ascii("guiness"),
        dictgen::InsensitiveStr::Ascii("guings"),
        dictgen::InsensitiveStr::Ascii("guinos"),
        dictgen::InsensitiveStr::Ascii("guis"),
        dictgen::InsensitiveStr::Ascii("icls"),
        dictgen::InsensitiveStr::Ascii("insual"),
        dictgen::InsensitiveStr::Ascii("insulla"),
        dictgen::InsensitiveStr::Ascii("inusla"),
        dictgen::InsensitiveStr::Ascii("isnula"),
        dictgen::InsensitiveStr::Ascii("ison"),
        dictgen::InsensitiveStr::Ascii("isse"),
        dictgen::InsensitiveStr::Ascii("isula"),
        dictgen::InsensitiveStr::Ascii("isular"),
        dictgen::InsensitiveStr::Ascii("isylvania"),
        dictgen::InsensitiveStr::Ascii("itum"),
        dictgen::InsensitiveStr::Ascii("ninsula"),
        dictgen::InsensitiveStr::Ascii("ninsular"),
        dictgen::InsensitiveStr::Ascii("nisula"),
        dictgen::InsensitiveStr::Ascii("nsilvania"),
        dictgen::InsensitiveStr::Ascii("nslyvania"),
        dictgen::InsensitiveStr::Ascii("nsylvaina"),
        dictgen::InsensitiveStr::Ascii("nsylvainia"),
        dictgen::InsensitiveStr::Ascii("nsylvanica"),
        dictgen::InsensitiveStr::Ascii("nsylvannia"),
        dictgen::InsensitiveStr::Ascii("nsylvnia"),
        dictgen::InsensitiveStr::Ascii("nsyvlania"),
        dictgen::InsensitiveStr::Ascii("nyslvania"),
        dictgen::InsensitiveStr::Ascii("sies"),
        dictgen::InsensitiveStr::Ascii("sino"),
        dictgen::InsensitiveStr::Ascii("sinula"),
        dictgen::InsensitiveStr::Ascii("sioen"),
        dictgen::InsensitiveStr::Ascii("sle"),
        dictgen::InsensitiveStr::Ascii("ssylvania"),
        dictgen::InsensitiveStr::Ascii("tagoon"),
        dictgen::InsensitiveStr::Ascii("tsylvania"),
        dictgen::InsensitiveStr::Ascii("tuim"),
    ],
    values: &[
        &["penalties"],
        &["penalties"],
        &["pentagon"],
        &["penalties"],
        &["penalty"],
        &["pencils"],
        &["pedantic"],
        &["pendulum"],
        &["pendulum"],
        &["penetrator"],
        &["penetration"],
        &["penetrating"],
        &["penetration"],
        &["penetration"],
        &["penetrating"],
        &["penetration"],
        &["penetration"],
        &["penguins"],
        &["penguins"],
        &["penguins"],
        &["penguins"],
        &["penguins"],
        &["penguins"],
        &["penguins"],
        &["pencils"],
        &["peninsula"],
        &["peninsula"],
        &["peninsula"],
        &["peninsula"],
        &["pension"],
        &["penises"],
        &["peninsula"],
        &["peninsular"],
        &["pennsylvania"],
        &["pentium"],
        &["peninsula"],
        &["peninsular"],
        &["peninsula"],
        &["pennsylvania"],
        &["pennsylvania"],
        &["pennsylvania"],
        &["pennsylvania"],
        &["pennsylvania"],
        &["pennsylvania"],
        &["pennsylvania"],
        &["pennsylvania"],
        &["pennsylvania"],
        &["penises"],
        &["pension"],
        &["peninsula"],
        &["pension"],
        &["pencil"],
        &["pennsylvania"],
        &["pentagon"],
        &["pennsylvania"],
        &["pentium"],
    ],
    range: 3..=10,
};

static WORD_PEI_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_PEI_CHILDREN),
    value: None,
};

pub static WORD_PEI_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ce"),
        dictgen::InsensitiveStr::Ascii("rced"),
        dictgen::InsensitiveStr::Ascii("rcing"),
        dictgen::InsensitiveStr::Ascii("rcings"),
    ],
    values: &[&["piece"], &["pierced"], &["piercing"], &["piercings"]],
    range: 2..=6,
};

static WORD_PEF_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_PEF_CHILDREN),
    value: None,
};

pub static WORD_PEF_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("ormed")],
    values: &[&["performed"]],
    range: 5..=5,
};

static WORD_PED_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_PED_CHILDREN),
    value: None,
};

pub static WORD_PED_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("antisch"),
        dictgen::InsensitiveStr::Ascii("estiran"),
        dictgen::InsensitiveStr::Ascii("estirans"),
        dictgen::InsensitiveStr::Ascii("estrain"),
        dictgen::InsensitiveStr::Ascii("estrains"),
        dictgen::InsensitiveStr::Ascii("ictions"),
        dictgen::InsensitiveStr::Ascii("ohpile"),
        dictgen::InsensitiveStr::Ascii("ohpiles"),
        dictgen::InsensitiveStr::Ascii("ohpilia"),
        dictgen::InsensitiveStr::Ascii("ophila"),
        dictgen::InsensitiveStr::Ascii("ophilac"),
        dictgen::InsensitiveStr::Ascii("ophilea"),
        dictgen::InsensitiveStr::Ascii("ophilie"),
        dictgen::InsensitiveStr::Ascii("ophilies"),
        dictgen::InsensitiveStr::Ascii("ophilla"),
        dictgen::InsensitiveStr::Ascii("ophille"),
        dictgen::InsensitiveStr::Ascii("ophilles"),
        dictgen::InsensitiveStr::Ascii("ophils"),
        dictgen::InsensitiveStr::Ascii("opholia"),
    ],
    values: &[
        &["pedantic"],
        &["pedestrian"],
        &["pedestrians"],
        &["pedestrian"],
        &["pedestrians"],
        &["depictions"],
        &["pedophile"],
        &["pedophiles"],
        &["pedophilia"],
        &["pedophilia"],
        &["pedophilia"],
        &["pedophilia"],
        &["pedophile"],
        &["pedophile"],
        &["pedophilia"],
        &["pedophile"],
        &["pedophile"],
        &["pedophiles"],
        &["pedophilia"],
    ],
    range: 6..=8,
};

static WORD_PEC_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_PEC_CHILDREN),
    value: None,
};

pub static WORD_PEC_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("iluar"),
        dictgen::InsensitiveStr::Ascii("uilar"),
        dictgen::InsensitiveStr::Ascii("ulair"),
        dictgen::InsensitiveStr::Ascii("ulure"),
    ],
    values: &[&["peculiar"], &["peculiar"], &["peculiar"], &["peculiar"]],
    range: 5..=5,
};

static WORD_PEB_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_PEB_CHILDREN),
    value: None,
};

pub static WORD_PEB_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("bels"),
        dictgen::InsensitiveStr::Ascii("bleos"),
        dictgen::InsensitiveStr::Ascii("blers"),
        dictgen::InsensitiveStr::Ascii("blets"),
    ],
    values: &[&["pebbles"], &["pebbles"], &["pebbles"], &["pebbles"]],
    range: 4..=5,
};

static WORD_PEA_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_PEA_CHILDREN),
    value: None,
};

pub static WORD_PEA_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("cefullly"),
        dictgen::InsensitiveStr::Ascii("cefuly"),
        dictgen::InsensitiveStr::Ascii("geant"),
        dictgen::InsensitiveStr::Ascii("ple"),
        dictgen::InsensitiveStr::Ascii("ples"),
    ],
    values: &[
        &["peacefully"],
        &["peacefully"],
        &["pageant"],
        &["people"],
        &["peoples"],
    ],
    range: 3..=8,
};

static WORD_PB_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_PB_CHILDREN),
    value: None,
};

pub static WORD_PB_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("lisher"),
        dictgen::InsensitiveStr::Ascii("ulisher"),
    ],
    values: &[&["publisher"], &["publisher"]],
    range: 6..=7,
};

static WORD_PA_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_PA_CHILDREN),
    value: None,
};

static WORD_PA_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    None,
    None,
    Some(&WORD_PAC_NODE),
    None,
    None,
    Some(&WORD_PAF_NODE),
    None,
    Some(&WORD_PAH_NODE),
    Some(&WORD_PAI_NODE),
    None,
    Some(&WORD_PAK_NODE),
    Some(&WORD_PAL_NODE),
    Some(&WORD_PAM_NODE),
    Some(&WORD_PAN_NODE),
    None,
    Some(&WORD_PAP_NODE),
    None,
    Some(&WORD_PAR_NODE),
    Some(&WORD_PAS_NODE),
    Some(&WORD_PAT_NODE),
    None,
    Some(&WORD_PAV_NODE),
    None,
    None,
    Some(&WORD_PAY_NODE),
    None,
];

static WORD_PAY_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_PAY_CHILDREN),
    value: None,
};

pub static WORD_PAY_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("chedelics"),
        dictgen::InsensitiveStr::Ascii("chiatrist"),
        dictgen::InsensitiveStr::Ascii("chiatrists"),
        dictgen::InsensitiveStr::Ascii("chologically"),
        dictgen::InsensitiveStr::Ascii("chologist"),
        dictgen::InsensitiveStr::Ascii("chologists"),
        dictgen::InsensitiveStr::Ascii("chopathic"),
        dictgen::InsensitiveStr::Ascii("ed"),
    ],
    values: &[
        &["psychedelics"],
        &["psychiatrist"],
        &["psychiatrists"],
        &["psychologically"],
        &["psychologist"],
        &["psychologists"],
        &["psychopathic"],
        &["paid"],
    ],
    range: 2..=12,
};

static WORD_PAV_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_PAV_CHILDREN),
    value: None,
};

pub static WORD_PAV_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("illion")],
    values: &[&["pavilion"]],
    range: 6..=6,
};

static WORD_PAT_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_PAT_CHILDREN),
    value: None,
};

pub static WORD_PAT_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("eince"),
        dictgen::InsensitiveStr::Ascii("eint"),
        dictgen::InsensitiveStr::Ascii("eintly"),
        dictgen::InsensitiveStr::Ascii("eints"),
        dictgen::InsensitiveStr::Ascii("enterad"),
        dictgen::InsensitiveStr::Ascii("ethic"),
        dictgen::InsensitiveStr::Ascii("halogical"),
        dictgen::InsensitiveStr::Ascii("hces"),
        dictgen::InsensitiveStr::Ascii("heitc"),
        dictgen::InsensitiveStr::Ascii("helogical"),
        dictgen::InsensitiveStr::Ascii("hfidner"),
        dictgen::InsensitiveStr::Ascii("hfindir"),
        dictgen::InsensitiveStr::Ascii("hifnder"),
        dictgen::InsensitiveStr::Ascii("holigical"),
        dictgen::InsensitiveStr::Ascii("hologial"),
        dictgen::InsensitiveStr::Ascii("icular"),
        dictgen::InsensitiveStr::Ascii("iens"),
        dictgen::InsensitiveStr::Ascii("ientens"),
        dictgen::InsensitiveStr::Ascii("ienty"),
        dictgen::InsensitiveStr::Ascii("inetly"),
        dictgen::InsensitiveStr::Ascii("irot"),
        dictgen::InsensitiveStr::Ascii("irots"),
        dictgen::InsensitiveStr::Ascii("rairchy"),
        dictgen::InsensitiveStr::Ascii("rcik"),
        dictgen::InsensitiveStr::Ascii("riachry"),
        dictgen::InsensitiveStr::Ascii("riarca"),
        dictgen::InsensitiveStr::Ascii("riarcal"),
        dictgen::InsensitiveStr::Ascii("riarchia"),
        dictgen::InsensitiveStr::Ascii("riarcial"),
        dictgen::InsensitiveStr::Ascii("riarcy"),
        dictgen::InsensitiveStr::Ascii("riarh"),
        dictgen::InsensitiveStr::Ascii("riarhal"),
        dictgen::InsensitiveStr::Ascii("riarical"),
        dictgen::InsensitiveStr::Ascii("riatchy"),
        dictgen::InsensitiveStr::Ascii("riatism"),
        dictgen::InsensitiveStr::Ascii("rionism"),
        dictgen::InsensitiveStr::Ascii("rios"),
        dictgen::InsensitiveStr::Ascii("riotas"),
        dictgen::InsensitiveStr::Ascii("riotes"),
        dictgen::InsensitiveStr::Ascii("riotics"),
        dictgen::InsensitiveStr::Ascii("riotisch"),
        dictgen::InsensitiveStr::Ascii("riotisim"),
        dictgen::InsensitiveStr::Ascii("riotisk"),
        dictgen::InsensitiveStr::Ascii("riottism"),
        dictgen::InsensitiveStr::Ascii("roit"),
        dictgen::InsensitiveStr::Ascii("roitic"),
        dictgen::InsensitiveStr::Ascii("roitism"),
        dictgen::InsensitiveStr::Ascii("roits"),
        dictgen::InsensitiveStr::Ascii("rolls"),
        dictgen::InsensitiveStr::Ascii("ronas"),
        dictgen::InsensitiveStr::Ascii("rones"),
        dictgen::InsensitiveStr::Ascii("ronis"),
        dictgen::InsensitiveStr::Ascii("ronos"),
        dictgen::InsensitiveStr::Ascii("ronozing"),
        dictgen::InsensitiveStr::Ascii("ryarchy"),
        dictgen::InsensitiveStr::Ascii("tened"),
        dictgen::InsensitiveStr::Ascii("tented"),
        dictgen::InsensitiveStr::Ascii("terno"),
        dictgen::InsensitiveStr::Ascii("tersn"),
    ],
    values: &[
        &["patience"],
        &["patient"],
        &["patiently"],
        &["patients"],
        &["patented"],
        &["pathetic"],
        &["pathological"],
        &["patches"],
        &["pathetic"],
        &["pathological"],
        &["pathfinder"],
        &["pathfinder"],
        &["pathfinder"],
        &["pathological"],
        &["pathological"],
        &["particular"],
        &["patients"],
        &["patients"],
        &["patiently"],
        &["patiently"],
        &["patriot"],
        &["patriots"],
        &["patriarchy"],
        &["patrick"],
        &["patriarchy"],
        &["patriarchal"],
        &["patriarchal"],
        &["patriarchal"],
        &["patriarchal"],
        &["patriarchy"],
        &["patriarchy"],
        &["patriarchal"],
        &["patriarchal"],
        &["patriarchy"],
        &["patriotism"],
        &["patriotism"],
        &["patriots"],
        &["patriots"],
        &["patriots"],
        &["patriotism"],
        &["patriotic"],
        &["patriotism"],
        &["patriots"],
        &["patriotism"],
        &["patriot"],
        &["patriotic"],
        &["patriotism"],
        &["patriots"],
        &["patrols"],
        &["patrons"],
        &["patrons"],
        &["patrons"],
        &["patrons"],
        &["patronizing"],
        &["patriarchy"],
        &["patented"],
        &["patented"],
        &["patterson"],
        &["patterson"],
    ],
    range: 4..=9,
};

static WORD_PAS_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_PAS_CHILDREN),
    value: None,
};

pub static WORD_PAS_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ed"),
        dictgen::InsensitiveStr::Ascii("engers"),
        dictgen::InsensitiveStr::Ascii("sabe"),
        dictgen::InsensitiveStr::Ascii("sabel"),
        dictgen::InsensitiveStr::Ascii("sagens"),
        dictgen::InsensitiveStr::Ascii("sagers"),
        dictgen::InsensitiveStr::Ascii("serbys"),
        dictgen::InsensitiveStr::Ascii("sionais"),
        dictgen::InsensitiveStr::Ascii("sionale"),
        dictgen::InsensitiveStr::Ascii("sionant"),
        dictgen::InsensitiveStr::Ascii("sionatelly"),
        dictgen::InsensitiveStr::Ascii("sionatley"),
        dictgen::InsensitiveStr::Ascii("sionatly"),
        dictgen::InsensitiveStr::Ascii("sione"),
        dictgen::InsensitiveStr::Ascii("siones"),
        dictgen::InsensitiveStr::Ascii("sionetly"),
        dictgen::InsensitiveStr::Ascii("sionite"),
        dictgen::InsensitiveStr::Ascii("sionnate"),
        dictgen::InsensitiveStr::Ascii("sisve"),
        dictgen::InsensitiveStr::Ascii("sivedns"),
        dictgen::InsensitiveStr::Ascii("sivelly"),
        dictgen::InsensitiveStr::Ascii("sivley"),
        dictgen::InsensitiveStr::Ascii("sivs"),
        dictgen::InsensitiveStr::Ascii("sowrds"),
        dictgen::InsensitiveStr::Ascii("sporters"),
        dictgen::InsensitiveStr::Ascii("spost"),
        dictgen::InsensitiveStr::Ascii("svies"),
        dictgen::InsensitiveStr::Ascii("swors"),
        dictgen::InsensitiveStr::Ascii("ttime"),
        dictgen::InsensitiveStr::Ascii("tural"),
        dictgen::InsensitiveStr::Ascii("uing"),
    ],
    values: &[
        &["passed"],
        &["passengers"],
        &["passable"],
        &["passable"],
        &["passages"],
        &["passages"],
        &["passersby"],
        &["passions"],
        &["passionately"],
        &["passionate"],
        &["passionately"],
        &["passionately"],
        &["passionately"],
        &["passionate"],
        &["passions"],
        &["passionately"],
        &["passionate"],
        &["passionate"],
        &["passives"],
        &["passives"],
        &["passively"],
        &["passively"],
        &["passives"],
        &["passwords"],
        &["passports"],
        &["passports"],
        &["passives"],
        &["passwords"],
        &["pastime"],
        &["pastoral"],
        &["pausing"],
    ],
    range: 2..=10,
};

static WORD_PAR_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_PAR_CHILDREN),
    value: None,
};

static WORD_PAR_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    Some(&WORD_PARA_NODE),
    None,
    Some(&WORD_PARC_NODE),
    None,
    Some(&WORD_PARE_NODE),
    None,
    None,
    None,
    Some(&WORD_PARI_NODE),
    None,
    None,
    Some(&WORD_PARL_NODE),
    Some(&WORD_PARM_NODE),
    Some(&WORD_PARN_NODE),
    None,
    None,
    None,
    Some(&WORD_PARR_NODE),
    None,
    Some(&WORD_PART_NODE),
    None,
    None,
    None,
    None,
    None,
    None,
];

static WORD_PART_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_PART_CHILDREN),
    value: None,
};

static WORD_PART_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    None,
    None,
    Some(&WORD_PARTC_NODE),
    None,
    Some(&WORD_PARTE_NODE),
    None,
    None,
    None,
    Some(&WORD_PARTI_NODE),
    None,
    None,
    None,
    None,
    Some(&WORD_PARTN_NODE),
    Some(&WORD_PARTO_NODE),
    None,
    None,
    None,
    Some(&WORD_PARTS_NODE),
    None,
    None,
    None,
    None,
    None,
    None,
    None,
];

static WORD_PARTS_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_PARTS_CHILDREN),
    value: None,
};

pub static WORD_PARTS_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("ian")],
    values: &[&["partisan"]],
    range: 3..=3,
};

static WORD_PARTO_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_PARTO_CHILDREN),
    value: None,
};

pub static WORD_PARTO_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ls"),
        dictgen::InsensitiveStr::Ascii("nizing"),
    ],
    values: &[&["patrols"], &["patronizing"]],
    range: 2..=6,
};

static WORD_PARTN_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_PARTN_CHILDREN),
    value: None,
};

pub static WORD_PARTN_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("erd"),
        dictgen::InsensitiveStr::Ascii("etship"),
    ],
    values: &[&["partnered"], &["partnership"]],
    range: 3..=6,
};

static WORD_PARTI_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_PARTI_CHILDREN),
    value: None,
};

pub static WORD_PARTI_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("aly"),
        dictgen::InsensitiveStr::Ascii("ans"),
        dictgen::InsensitiveStr::Ascii("archal"),
        dictgen::InsensitiveStr::Ascii("archy"),
        dictgen::InsensitiveStr::Ascii("cal"),
        dictgen::InsensitiveStr::Ascii("capate"),
        dictgen::InsensitiveStr::Ascii("capated"),
        dictgen::InsensitiveStr::Ascii("ce"),
        dictgen::InsensitiveStr::Ascii("cel"),
        dictgen::InsensitiveStr::Ascii("ciapnts"),
        dictgen::InsensitiveStr::Ascii("ciapte"),
        dictgen::InsensitiveStr::Ascii("ciapted"),
        dictgen::InsensitiveStr::Ascii("ciaption"),
        dictgen::InsensitiveStr::Ascii("cipacion"),
        dictgen::InsensitiveStr::Ascii("cipait"),
        dictgen::InsensitiveStr::Ascii("cipans"),
        dictgen::InsensitiveStr::Ascii("cipante"),
        dictgen::InsensitiveStr::Ascii("cipantes"),
        dictgen::InsensitiveStr::Ascii("cipare"),
        dictgen::InsensitiveStr::Ascii("cipas"),
        dictgen::InsensitiveStr::Ascii("cipaste"),
        dictgen::InsensitiveStr::Ascii("cipat"),
        dictgen::InsensitiveStr::Ascii("cipatd"),
        dictgen::InsensitiveStr::Ascii("cipati"),
        dictgen::InsensitiveStr::Ascii("cipatie"),
        dictgen::InsensitiveStr::Ascii("cipatin"),
        dictgen::InsensitiveStr::Ascii("cipativo"),
        dictgen::InsensitiveStr::Ascii("cipatns"),
        dictgen::InsensitiveStr::Ascii("cipaton"),
        dictgen::InsensitiveStr::Ascii("cipats"),
        dictgen::InsensitiveStr::Ascii("cipe"),
        dictgen::InsensitiveStr::Ascii("cipent"),
        dictgen::InsensitiveStr::Ascii("cipents"),
        dictgen::InsensitiveStr::Ascii("cipte"),
        dictgen::InsensitiveStr::Ascii("ck"),
        dictgen::InsensitiveStr::Ascii("cpiate"),
        dictgen::InsensitiveStr::Ascii("cually"),
        dictgen::InsensitiveStr::Ascii("cualr"),
        dictgen::InsensitiveStr::Ascii("cualrly"),
        dictgen::InsensitiveStr::Ascii("culalry"),
        dictgen::InsensitiveStr::Ascii("culaly"),
        dictgen::InsensitiveStr::Ascii("cularely"),
        dictgen::InsensitiveStr::Ascii("cularily"),
        dictgen::InsensitiveStr::Ascii("cularlly"),
        dictgen::InsensitiveStr::Ascii("culary"),
        dictgen::InsensitiveStr::Ascii("cullary"),
        dictgen::InsensitiveStr::Ascii("el"),
        dictgen::InsensitiveStr::Ascii("ets"),
        dictgen::InsensitiveStr::Ascii("ot"),
        dictgen::InsensitiveStr::Ascii("otic"),
        dictgen::InsensitiveStr::Ascii("otism"),
        dictgen::InsensitiveStr::Ascii("ots"),
        dictgen::InsensitiveStr::Ascii("sain"),
        dictgen::InsensitiveStr::Ascii("zipation"),
    ],
    values: &[
        &["partially"],
        &["partisan"],
        &["patriarchal"],
        &["patriarchy"],
        &["particular"],
        &["participate"],
        &["participated"],
        &["particle"],
        &["particle"],
        &["participant"],
        &["participate"],
        &["participated"],
        &["participation"],
        &["participation"],
        &["participant"],
        &["participants"],
        &["participate"],
        &["participants"],
        &["participate"],
        &["participants"],
        &["participants"],
        &["participants"],
        &["participant"],
        &["participant"],
        &["participated"],
        &["participation"],
        &["participation"],
        &["participant"],
        &["participant"],
        &["participant"],
        &["participate"],
        &["participant"],
        &["participants"],
        &["participate"],
        &["patrick"],
        &["participated"],
        &["particularly"],
        &["particular"],
        &["particularly"],
        &["particularly"],
        &["particularly"],
        &["particularly"],
        &["particularly"],
        &["particularly"],
        &["particularly"],
        &["particularly"],
        &["particle"],
        &["parties"],
        &["patriot"],
        &["patriotic"],
        &["patriotism"],
        &["patriots"],
        &["partisan"],
        &["participation"],
    ],
    range: 2..=8,
};

static WORD_PARTE_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_PARTE_CHILDREN),
    value: None,
};

pub static WORD_PARTE_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("cipant"),
        dictgen::InsensitiveStr::Ascii("cipants"),
        dictgen::InsensitiveStr::Ascii("cipate"),
        dictgen::InsensitiveStr::Ascii("cipated"),
        dictgen::InsensitiveStr::Ascii("rned"),
        dictgen::InsensitiveStr::Ascii("rns"),
        dictgen::InsensitiveStr::Ascii("rnship"),
        dictgen::InsensitiveStr::Ascii("rnships"),
    ],
    values: &[
        &["participant"],
        &["participants"],
        &["participate"],
        &["participated"],
        &["partnered"],
        &["partners"],
        &["partnership"],
        &["partnership"],
    ],
    range: 3..=7,
};

static WORD_PARTC_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_PARTC_CHILDREN),
    value: None,
};

pub static WORD_PARTC_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("hett")],
    values: &[&["pratchett"]],
    range: 4..=4,
};

static WORD_PARR_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_PARR_CHILDREN),
    value: None,
};

pub static WORD_PARR_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("alel"),
        dictgen::InsensitiveStr::Ascii("allel"),
        dictgen::InsensitiveStr::Ascii("allell"),
        dictgen::InsensitiveStr::Ascii("allelly"),
        dictgen::InsensitiveStr::Ascii("allely"),
    ],
    values: &[
        &["parallel"],
        &["parallel"],
        &["parallel"],
        &["parallelly"],
        &["parallelly"],
    ],
    range: 4..=7,
};

static WORD_PARN_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_PARN_CHILDREN),
    value: None,
};

pub static WORD_PARN_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("tered"),
        dictgen::InsensitiveStr::Ascii("ters"),
        dictgen::InsensitiveStr::Ascii("tership"),
    ],
    values: &[&["partnered"], &["partners"], &["partnership"]],
    range: 4..=7,
};

static WORD_PARM_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_PARM_CHILDREN),
    value: None,
};

pub static WORD_PARM_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("asen"),
        dictgen::InsensitiveStr::Ascii("enas"),
        dictgen::InsensitiveStr::Ascii("esaen"),
        dictgen::InsensitiveStr::Ascii("sean"),
    ],
    values: &[&["parmesan"], &["parmesan"], &["parmesan"], &["parmesan"]],
    range: 4..=5,
};

static WORD_PARL_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_PARL_CHILDREN),
    value: None,
};

pub static WORD_PARL_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("aiment"),
        dictgen::InsensitiveStr::Ascii("aimentary"),
        dictgen::InsensitiveStr::Ascii("iamant"),
        dictgen::InsensitiveStr::Ascii("iamantary"),
        dictgen::InsensitiveStr::Ascii("iamentery"),
        dictgen::InsensitiveStr::Ascii("iamentiary"),
        dictgen::InsensitiveStr::Ascii("iamentry"),
        dictgen::InsensitiveStr::Ascii("iamenty"),
        dictgen::InsensitiveStr::Ascii("iamnetary"),
        dictgen::InsensitiveStr::Ascii("iamone"),
        dictgen::InsensitiveStr::Ascii("iement"),
        dictgen::InsensitiveStr::Ascii("iementary"),
        dictgen::InsensitiveStr::Ascii("iment"),
    ],
    values: &[
        &["parliament"],
        &["parliamentary"],
        &["parliament"],
        &["parliamentary"],
        &["parliamentary"],
        &["parliamentary"],
        &["parliamentary"],
        &["parliamentary"],
        &["parliamentary"],
        &["parliament"],
        &["parliament"],
        &["parliamentary"],
        &["parliament"],
    ],
    range: 5..=10,
};

static WORD_PARI_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_PARI_CHILDREN),
    value: None,
};

pub static WORD_PARI_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("cular"),
        dictgen::InsensitiveStr::Ascii("lament"),
        dictgen::InsensitiveStr::Ascii("lamentary"),
        dictgen::InsensitiveStr::Ascii("ses"),
        dictgen::InsensitiveStr::Ascii("sitic"),
        dictgen::InsensitiveStr::Ascii("stan"),
        dictgen::InsensitiveStr::Ascii("tally"),
        dictgen::InsensitiveStr::Ascii("tes"),
        dictgen::InsensitiveStr::Ascii("tuclar"),
    ],
    values: &[
        &["particular"],
        &["parliament"],
        &["parliamentary"],
        &["praises"],
        &["parasitic"],
        &["partisan"],
        &["partially"],
        &["parties"],
        &["particular"],
    ],
    range: 3..=9,
};

static WORD_PARE_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_PARE_CHILDREN),
    value: None,
};

pub static WORD_PARE_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("llels"),
        dictgen::InsensitiveStr::Ascii("msan"),
        dictgen::InsensitiveStr::Ascii("nthasis"),
        dictgen::InsensitiveStr::Ascii("nthesees"),
        dictgen::InsensitiveStr::Ascii("nthesies"),
        dictgen::InsensitiveStr::Ascii("nthesys"),
        dictgen::InsensitiveStr::Ascii("nthises"),
        dictgen::InsensitiveStr::Ascii("nthisis"),
    ],
    values: &[
        &["parallels"],
        &["parmesan"],
        &["parenthesis"],
        &["parentheses"],
        &["parenthesis"],
        &["parentheses"],
        &["parenthesis"],
        &["parenthesis"],
    ],
    range: 4..=8,
};

static WORD_PARC_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_PARC_CHILDREN),
    value: None,
};

pub static WORD_PARC_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("tise")],
    values: &[&["practise"]],
    range: 4..=4,
};

static WORD_PARA_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_PARA_CHILDREN),
    value: None,
};

static WORD_PARA_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    None,
    None,
    Some(&WORD_PARAC_NODE),
    Some(&WORD_PARAD_NODE),
    None,
    None,
    Some(&WORD_PARAG_NODE),
    Some(&WORD_PARAH_NODE),
    Some(&WORD_PARAI_NODE),
    None,
    None,
    Some(&WORD_PARAL_NODE),
    Some(&WORD_PARAM_NODE),
    Some(&WORD_PARAN_NODE),
    None,
    Some(&WORD_PARAP_NODE),
    None,
    None,
    Some(&WORD_PARAS_NODE),
    None,
    None,
    None,
    None,
    None,
    Some(&WORD_PARAY_NODE),
    None,
];

static WORD_PARAY_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_PARAY_CHILDREN),
    value: None,
};

pub static WORD_PARAY_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("lsis"),
        dictgen::InsensitiveStr::Ascii("lzed"),
    ],
    values: &[&["paralysis"], &["paralyzed"]],
    range: 4..=4,
};

static WORD_PARAS_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_PARAS_CHILDREN),
    value: None,
};

pub static WORD_PARAS_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ide"),
        dictgen::InsensitiveStr::Ascii("itisme"),
        dictgen::InsensitiveStr::Ascii("its"),
        dictgen::InsensitiveStr::Ascii("itter"),
        dictgen::InsensitiveStr::Ascii("tie"),
        dictgen::InsensitiveStr::Ascii("ties"),
    ],
    values: &[
        &["paradise"],
        &["parasites"],
        &["parasites"],
        &["parasite"],
        &["parasite"],
        &["parasites"],
    ],
    range: 3..=6,
};

static WORD_PARAP_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_PARAP_CHILDREN),
    value: None,
};

pub static WORD_PARAP_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("harse"),
        dictgen::InsensitiveStr::Ascii("harsed"),
        dictgen::InsensitiveStr::Ascii("harsing"),
        dictgen::InsensitiveStr::Ascii("henalia"),
        dictgen::InsensitiveStr::Ascii("hraseing"),
        dictgen::InsensitiveStr::Ascii("hrashed"),
        dictgen::InsensitiveStr::Ascii("hrashing"),
        dictgen::InsensitiveStr::Ascii("hraze"),
        dictgen::InsensitiveStr::Ascii("hrazing"),
        dictgen::InsensitiveStr::Ascii("rashing"),
        dictgen::InsensitiveStr::Ascii("rhase"),
        dictgen::InsensitiveStr::Ascii("rhased"),
        dictgen::InsensitiveStr::Ascii("rhasing"),
    ],
    values: &[
        &["paraphrase"],
        &["paraphrase"],
        &["paraphrasing"],
        &["paraphernalia"],
        &["paraphrasing"],
        &["paraphrase"],
        &["paraphrasing"],
        &["paraphrase"],
        &["paraphrasing"],
        &["paraphrasing"],
        &["paraphrase"],
        &["paraphrase"],
        &["paraphrasing"],
    ],
    range: 5..=8,
};

static WORD_PARAN_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_PARAN_CHILDREN),
    value: None,
};

pub static WORD_PARAN_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ioa"),
        dictgen::InsensitiveStr::Ascii("iod"),
        dictgen::InsensitiveStr::Ascii("oa"),
        dictgen::InsensitiveStr::Ascii("oica"),
        dictgen::InsensitiveStr::Ascii("oicas"),
        dictgen::InsensitiveStr::Ascii("oida"),
        dictgen::InsensitiveStr::Ascii("omral"),
        dictgen::InsensitiveStr::Ascii("ornal"),
        dictgen::InsensitiveStr::Ascii("thesis"),
    ],
    values: &[
        &["paranoia"],
        &["paranoid"],
        &["paranoia"],
        &["paranoia"],
        &["paranoia"],
        &["paranoia"],
        &["paranormal"],
        &["paranormal"],
        &["parenthesis"],
    ],
    range: 2..=6,
};

static WORD_PARAM_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_PARAM_CHILDREN),
    value: None,
};

pub static WORD_PARAM_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("adics"),
        dictgen::InsensitiveStr::Ascii("aters"),
        dictgen::InsensitiveStr::Ascii("ecias"),
        dictgen::InsensitiveStr::Ascii("edicks"),
        dictgen::InsensitiveStr::Ascii("edicos"),
        dictgen::InsensitiveStr::Ascii("edis"),
        dictgen::InsensitiveStr::Ascii("eds"),
        dictgen::InsensitiveStr::Ascii("eteres"),
        dictgen::InsensitiveStr::Ascii("etics"),
        dictgen::InsensitiveStr::Ascii("etros"),
        dictgen::InsensitiveStr::Ascii("iters"),
        dictgen::InsensitiveStr::Ascii("ormal"),
        dictgen::InsensitiveStr::Ascii("ter"),
        dictgen::InsensitiveStr::Ascii("ters"),
    ],
    values: &[
        &["paramedics"],
        &["parameters"],
        &["paramedics"],
        &["paramedics"],
        &["paramedics"],
        &["paramedics"],
        &["paramedics"],
        &["parameters"],
        &["paramedics"],
        &["parameters"],
        &["parameters"],
        &["paranormal"],
        &["parameter"],
        &["parameters"],
    ],
    range: 3..=6,
};

static WORD_PARAL_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_PARAL_CHILDREN),
    value: None,
};

pub static WORD_PARAL_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("el"),
        dictgen::InsensitiveStr::Ascii("ell"),
        dictgen::InsensitiveStr::Ascii("ells"),
        dictgen::InsensitiveStr::Ascii("elly"),
        dictgen::InsensitiveStr::Ascii("ely"),
        dictgen::InsensitiveStr::Ascii("isys"),
        dictgen::InsensitiveStr::Ascii("leles"),
        dictgen::InsensitiveStr::Ascii("lells"),
        dictgen::InsensitiveStr::Ascii("lely"),
        dictgen::InsensitiveStr::Ascii("les"),
        dictgen::InsensitiveStr::Ascii("zyed"),
    ],
    values: &[
        &["parallel"],
        &["parallel"],
        &["parallels"],
        &["parallelly"],
        &["parallelly"],
        &["paralysis"],
        &["parallels"],
        &["parallels"],
        &["parallelly"],
        &["parallels"],
        &["paralyzed"],
    ],
    range: 2..=5,
};

static WORD_PARAI_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_PARAI_CHILDREN),
    value: None,
};

pub static WORD_PARAI_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("ste")],
    values: &[&["parasite"]],
    range: 3..=3,
};

static WORD_PARAH_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_PARAH_CHILDREN),
    value: None,
};

pub static WORD_PARAH_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("prase")],
    values: &[&["paraphrase"]],
    range: 5..=5,
};

static WORD_PARAG_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_PARAG_CHILDREN),
    value: None,
};

pub static WORD_PARAG_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("raghs"),
        dictgen::InsensitiveStr::Ascii("rah"),
        dictgen::InsensitiveStr::Ascii("rahps"),
        dictgen::InsensitiveStr::Ascii("rapgh"),
        dictgen::InsensitiveStr::Ascii("raphes"),
        dictgen::InsensitiveStr::Ascii("raps"),
        dictgen::InsensitiveStr::Ascii("rpah"),
        dictgen::InsensitiveStr::Ascii("rpahs"),
    ],
    values: &[
        &["paragraphs"],
        &["paragraph"],
        &["paragraphs"],
        &["paragraphs"],
        &["paragraphs"],
        &["paragraphs"],
        &["paragraph"],
        &["paragraphs"],
    ],
    range: 3..=6,
};

static WORD_PARAD_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_PARAD_CHILDREN),
    value: None,
};

pub static WORD_PARAD_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("emics"),
        dictgen::InsensitiveStr::Ascii("ies"),
        dictgen::InsensitiveStr::Ascii("iggum"),
        dictgen::InsensitiveStr::Ascii("im"),
        dictgen::InsensitiveStr::Ascii("imes"),
        dictgen::InsensitiveStr::Ascii("se"),
        dictgen::InsensitiveStr::Ascii("yse"),
    ],
    values: &[
        &["paramedics"],
        &["paradise"],
        &["paradigm"],
        &["paradigm"],
        &["paradise"],
        &["parades"],
        &["parades"],
    ],
    range: 2..=5,
};

static WORD_PARAC_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_PARAC_CHILDREN),
    value: None,
};

pub static WORD_PARAC_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("hutage"),
        dictgen::InsensitiveStr::Ascii("hutte"),
    ],
    values: &[&["parachute"], &["parachute"]],
    range: 5..=6,
};

static WORD_PAP_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_PAP_CHILDREN),
    value: None,
};

pub static WORD_PAP_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("anicalou")],
    values: &[&["papanicolaou"]],
    range: 8..=8,
};

static WORD_PAN_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_PAN_CHILDREN),
    value: None,
};

pub static WORD_PAN_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("caeks"),
        dictgen::InsensitiveStr::Ascii("cakers"),
        dictgen::InsensitiveStr::Ascii("caks"),
        dictgen::InsensitiveStr::Ascii("ckaes"),
        dictgen::InsensitiveStr::Ascii("doria"),
        dictgen::InsensitiveStr::Ascii("dorra"),
        dictgen::InsensitiveStr::Ascii("droa"),
        dictgen::InsensitiveStr::Ascii("edmic"),
        dictgen::InsensitiveStr::Ascii("ethon"),
        dictgen::InsensitiveStr::Ascii("kaces"),
        dictgen::InsensitiveStr::Ascii("medic"),
        dictgen::InsensitiveStr::Ascii("tehon"),
        dictgen::InsensitiveStr::Ascii("then"),
        dictgen::InsensitiveStr::Ascii("thoen"),
        dictgen::InsensitiveStr::Ascii("tomine"),
    ],
    values: &[
        &["pancakes"],
        &["pancakes"],
        &["pancakes"],
        &["pancakes"],
        &["pandora"],
        &["pandora"],
        &["pandora"],
        &["pandemic"],
        &["pantheon"],
        &["pancakes"],
        &["pandemic"],
        &["pantheon"],
        &["pantheon"],
        &["pantheon"],
        &["pantomime"],
    ],
    range: 4..=6,
};

static WORD_PAM_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_PAM_CHILDREN),
    value: None,
};

pub static WORD_PAM_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("flet"),
        dictgen::InsensitiveStr::Ascii("plet"),
    ],
    values: &[&["pamphlet"], &["pamphlet"]],
    range: 4..=4,
};

static WORD_PAL_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_PAL_CHILDREN),
    value: None,
};

pub static WORD_PAL_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("adines"),
        dictgen::InsensitiveStr::Ascii("adinlst"),
        dictgen::InsensitiveStr::Ascii("adinos"),
        dictgen::InsensitiveStr::Ascii("astinians"),
        dictgen::InsensitiveStr::Ascii("ce"),
        dictgen::InsensitiveStr::Ascii("cebo"),
        dictgen::InsensitiveStr::Ascii("ceholder"),
        dictgen::InsensitiveStr::Ascii("cements"),
        dictgen::InsensitiveStr::Ascii("eolitic"),
        dictgen::InsensitiveStr::Ascii("esitnian"),
        dictgen::InsensitiveStr::Ascii("esitnians"),
        dictgen::InsensitiveStr::Ascii("estein"),
        dictgen::InsensitiveStr::Ascii("estenian"),
        dictgen::InsensitiveStr::Ascii("estenians"),
        dictgen::InsensitiveStr::Ascii("estina"),
        dictgen::InsensitiveStr::Ascii("estinain"),
        dictgen::InsensitiveStr::Ascii("estinains"),
        dictgen::InsensitiveStr::Ascii("estinan"),
        dictgen::InsensitiveStr::Ascii("estinans"),
        dictgen::InsensitiveStr::Ascii("estiniens"),
        dictgen::InsensitiveStr::Ascii("estinier"),
        dictgen::InsensitiveStr::Ascii("estininan"),
        dictgen::InsensitiveStr::Ascii("estininans"),
        dictgen::InsensitiveStr::Ascii("estininas"),
        dictgen::InsensitiveStr::Ascii("iamentarian"),
        dictgen::InsensitiveStr::Ascii("idans"),
        dictgen::InsensitiveStr::Ascii("istian"),
        dictgen::InsensitiveStr::Ascii("istinian"),
        dictgen::InsensitiveStr::Ascii("istinians"),
        dictgen::InsensitiveStr::Ascii("lete"),
        dictgen::InsensitiveStr::Ascii("ster"),
        dictgen::InsensitiveStr::Ascii("stics"),
        dictgen::InsensitiveStr::Ascii("tform"),
        dictgen::InsensitiveStr::Ascii("tformer"),
        dictgen::InsensitiveStr::Ascii("tforms"),
        dictgen::InsensitiveStr::Ascii("tinum"),
        dictgen::InsensitiveStr::Ascii("yable"),
        dictgen::InsensitiveStr::Ascii("yboy"),
        dictgen::InsensitiveStr::Ascii("yerbase"),
        dictgen::InsensitiveStr::Ascii("yoffs"),
        dictgen::InsensitiveStr::Ascii("ystyle"),
        dictgen::InsensitiveStr::Ascii("ythrough"),
        dictgen::InsensitiveStr::Ascii("ythroughs"),
    ],
    values: &[
        &["paladins"],
        &["paladins"],
        &["paladins"],
        &["palestinians"],
        &["place"],
        &["placebo"],
        &["placeholder"],
        &["placements"],
        &["paleolithic"],
        &["palestinians"],
        &["palestinians"],
        &["palestine"],
        &["palestinian"],
        &["palestinians"],
        &["palestinian"],
        &["palestinians"],
        &["palestinians"],
        &["palestinian"],
        &["palestinians"],
        &["palestinians"],
        &["palestine"],
        &["palestinian"],
        &["palestinians"],
        &["palestinians"],
        &["parliamentarian"],
        &["paladins"],
        &["palestinian"],
        &["palestinian"],
        &["palestinians"],
        &["palette"],
        &["plaster"],
        &["plastics"],
        &["platform"],
        &["platformer"],
        &["platforms"],
        &["platinum"],
        &["playable"],
        &["playboy"],
        &["playerbase"],
        &["playoffs"],
        &["playstyle"],
        &["playthrough"],
        &["playthroughs"],
    ],
    range: 2..=11,
};

static WORD_PAK_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_PAK_CHILDREN),
    value: None,
};

pub static WORD_PAK_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("istain"),
        dictgen::InsensitiveStr::Ascii("istanais"),
        dictgen::InsensitiveStr::Ascii("istanezi"),
        dictgen::InsensitiveStr::Ascii("istanti"),
        dictgen::InsensitiveStr::Ascii("istian"),
        dictgen::InsensitiveStr::Ascii("istnai"),
        dictgen::InsensitiveStr::Ascii("sitani"),
    ],
    values: &[
        &["pakistani"],
        &["pakistani"],
        &["pakistani"],
        &["pakistani"],
        &["pakistani"],
        &["pakistani"],
        &["pakistani"],
    ],
    range: 6..=8,
};

static WORD_PAI_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_PAI_CHILDREN),
    value: None,
};

pub static WORD_PAI_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("de"),
        dictgen::InsensitiveStr::Ascii("nfullly"),
        dictgen::InsensitiveStr::Ascii("nfuly"),
        dictgen::InsensitiveStr::Ascii("nkilers"),
        dictgen::InsensitiveStr::Ascii("nkilllers"),
        dictgen::InsensitiveStr::Ascii("nkills"),
        dictgen::InsensitiveStr::Ascii("rlament"),
        dictgen::InsensitiveStr::Ascii("tence"),
        dictgen::InsensitiveStr::Ascii("tent"),
        dictgen::InsensitiveStr::Ascii("tently"),
        dictgen::InsensitiveStr::Ascii("tents"),
        dictgen::InsensitiveStr::Ascii("tience"),
    ],
    values: &[
        &["paid"],
        &["painfully"],
        &["painfully"],
        &["painkillers"],
        &["painkillers"],
        &["painkillers"],
        &["parliament"],
        &["patience"],
        &["patient"],
        &["patiently"],
        &["patients"],
        &["patience"],
    ],
    range: 2..=9,
};

static WORD_PAH_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_PAH_CHILDREN),
    value: None,
};

pub static WORD_PAH_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ntom"),
        dictgen::InsensitiveStr::Ascii("tfinder"),
    ],
    values: &[&["phantom"], &["pathfinder"]],
    range: 4..=7,
};

static WORD_PAF_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_PAF_CHILDREN),
    value: None,
};

pub static WORD_PAF_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("icist")],
    values: &[&["pacifist"]],
    range: 5..=5,
};

static WORD_PAC_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_PAC_CHILDREN),
    value: None,
};

pub static WORD_PAC_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("akge"),
        dictgen::InsensitiveStr::Ascii("akged"),
        dictgen::InsensitiveStr::Ascii("ificts"),
        dictgen::InsensitiveStr::Ascii("ifit"),
        dictgen::InsensitiveStr::Ascii("kade"),
        dictgen::InsensitiveStr::Ascii("kadge"),
        dictgen::InsensitiveStr::Ascii("kageid"),
        dictgen::InsensitiveStr::Ascii("kge"),
        dictgen::InsensitiveStr::Ascii("thes"),
        dictgen::InsensitiveStr::Ascii("tivity"),
    ],
    values: &[
        &["package"],
        &["packaged"],
        &["pacifist"],
        &["pacifist"],
        &["packaged"],
        &["packaged"],
        &["packaged"],
        &["package"],
        &["patches"],
        &["captivity"],
    ],
    range: 3..=6,
};

static WORD_O_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_O_CHILDREN),
    value: None,
};

static WORD_O_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    Some(&WORD_OA_NODE),
    Some(&WORD_OB_NODE),
    Some(&WORD_OC_NODE),
    None,
    None,
    Some(&WORD_OF_NODE),
    Some(&WORD_OG_NODE),
    None,
    Some(&WORD_OI_NODE),
    None,
    None,
    Some(&WORD_OL_NODE),
    Some(&WORD_OM_NODE),
    Some(&WORD_ON_NODE),
    None,
    Some(&WORD_OP_NODE),
    None,
    Some(&WORD_OR_NODE),
    Some(&WORD_OS_NODE),
    Some(&WORD_OT_NODE),
    Some(&WORD_OU_NODE),
    Some(&WORD_OV_NODE),
    Some(&WORD_OW_NODE),
    Some(&WORD_OX_NODE),
    Some(&WORD_OY_NODE),
    None,
];

static WORD_OY_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_OY_CHILDREN),
    value: None,
};

pub static WORD_OY_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("lmpic"),
        dictgen::InsensitiveStr::Ascii("lmpics"),
    ],
    values: &[&["olympic"], &["olympics"]],
    range: 5..=6,
};

static WORD_OX_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_OX_CHILDREN),
    value: None,
};

pub static WORD_OX_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("igen"),
        dictgen::InsensitiveStr::Ascii("imoron"),
    ],
    values: &[&["oxygen"], &["oxymoron"]],
    range: 4..=6,
};

static WORD_OW_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_OW_CHILDREN),
    value: None,
};

pub static WORD_OW_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ernship"),
        dictgen::InsensitiveStr::Ascii("erpowering"),
        dictgen::InsensitiveStr::Ascii("nders"),
        dictgen::InsensitiveStr::Ascii("rk"),
        dictgen::InsensitiveStr::Ascii("udl"),
        dictgen::InsensitiveStr::Ascii("uldve"),
    ],
    values: &[
        &["ownership"],
        &["overpowering"],
        &["wonders"],
        &["work"],
        &["would"],
        &["wouldve"],
    ],
    range: 2..=10,
};

static WORD_OV_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_OV_CHILDREN),
    value: None,
};

static WORD_OV_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    None,
    None,
    None,
    None,
    Some(&WORD_OVE_NODE),
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
];

static WORD_OVE_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_OVE_CHILDREN),
    value: None,
};

static WORD_OVE_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    Some(&WORD_OVER_NODE),
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
];

static WORD_OVER_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_OVER_CHILDREN),
    value: None,
};

static WORD_OVER_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    Some(&WORD_OVERA_NODE),
    Some(&WORD_OVERB_NODE),
    Some(&WORD_OVERC_NODE),
    Some(&WORD_OVERD_NODE),
    Some(&WORD_OVERE_NODE),
    Some(&WORD_OVERF_NODE),
    None,
    Some(&WORD_OVERH_NODE),
    None,
    None,
    Some(&WORD_OVERK_NODE),
    Some(&WORD_OVERL_NODE),
    Some(&WORD_OVERM_NODE),
    Some(&WORD_OVERN_NODE),
    None,
    Some(&WORD_OVERP_NODE),
    None,
    Some(&WORD_OVERR_NODE),
    Some(&WORD_OVERS_NODE),
    Some(&WORD_OVERT_NODE),
    Some(&WORD_OVERU_NODE),
    Some(&WORD_OVERV_NODE),
    Some(&WORD_OVERW_NODE),
    None,
    Some(&WORD_OVERY_NODE),
    None,
];

static WORD_OVERY_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_OVERY_CHILDREN),
    value: None,
};

pub static WORD_OVERY_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("hped")],
    values: &[&["overhyped"]],
    range: 4..=4,
};

static WORD_OVERW_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_OVERW_CHILDREN),
    value: None,
};

pub static WORD_OVERW_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ath"),
        dictgen::InsensitiveStr::Ascii("ealmed"),
        dictgen::InsensitiveStr::Ascii("ealming"),
        dictgen::InsensitiveStr::Ascii("eigth"),
        dictgen::InsensitiveStr::Ascii("elming"),
        dictgen::InsensitiveStr::Ascii("helemd"),
        dictgen::InsensitiveStr::Ascii("helemed"),
        dictgen::InsensitiveStr::Ascii("helimg"),
        dictgen::InsensitiveStr::Ascii("heliming"),
        dictgen::InsensitiveStr::Ascii("heling"),
        dictgen::InsensitiveStr::Ascii("helmigly"),
        dictgen::InsensitiveStr::Ascii("helmingy"),
        dictgen::InsensitiveStr::Ascii("helminly"),
        dictgen::InsensitiveStr::Ascii("hem"),
        dictgen::InsensitiveStr::Ascii("hemed"),
        dictgen::InsensitiveStr::Ascii("hemled"),
        dictgen::InsensitiveStr::Ascii("hemling"),
        dictgen::InsensitiveStr::Ascii("hemlingly"),
        dictgen::InsensitiveStr::Ascii("hlem"),
        dictgen::InsensitiveStr::Ascii("hlemed"),
        dictgen::InsensitiveStr::Ascii("hleming"),
        dictgen::InsensitiveStr::Ascii("hlemingly"),
        dictgen::InsensitiveStr::Ascii("ieght"),
        dictgen::InsensitiveStr::Ascii("irte"),
        dictgen::InsensitiveStr::Ascii("ritte"),
        dictgen::InsensitiveStr::Ascii("ritted"),
        dictgen::InsensitiveStr::Ascii("tach"),
    ],
    values: &[
        &["overwatch"],
        &["overwhelmed"],
        &["overwhelming"],
        &["overweight"],
        &["overwhelming"],
        &["overwhelmed"],
        &["overwhelmed"],
        &["overwhelm"],
        &["overwhelming"],
        &["overwhelming"],
        &["overwhelmingly"],
        &["overwhelmingly"],
        &["overwhelmingly"],
        &["overwhelm"],
        &["overwhelmed"],
        &["overwhelmed"],
        &["overwhelming"],
        &["overwhelmingly"],
        &["overwhelm"],
        &["overwhelmed"],
        &["overwhelming"],
        &["overwhelmingly"],
        &["overweight"],
        &["overwrite"],
        &["overwrite"],
        &["overwrite"],
        &["overwatch"],
    ],
    range: 3..=9,
};

static WORD_OVERV_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_OVERV_CHILDREN),
    value: None,
};

pub static WORD_OVERV_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("locked")],
    values: &[&["overclocked"]],
    range: 6..=6,
};

static WORD_OVERU_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_OVERU_CHILDREN),
    value: None,
};

pub static WORD_OVERU_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("les")],
    values: &[&["overuse"]],
    range: 3..=3,
};

static WORD_OVERT_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_OVERT_CHILDREN),
    value: None,
};

pub static WORD_OVERT_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("apping"),
        dictgen::InsensitiveStr::Ascii("hining"),
        dictgen::InsensitiveStr::Ascii("hinkig"),
        dictgen::InsensitiveStr::Ascii("un"),
        dictgen::InsensitiveStr::Ascii("unned"),
        dictgen::InsensitiveStr::Ascii("unred"),
        dictgen::InsensitiveStr::Ascii("uring"),
    ],
    values: &[
        &["overlapping"],
        &["overthinking"],
        &["overthinking"],
        &["overturn"],
        &["overturned"],
        &["overturned"],
        &["overturn"],
    ],
    range: 2..=6,
};

static WORD_OVERS_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_OVERS_CHILDREN),
    value: None,
};

pub static WORD_OVERS_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("emplification"),
        dictgen::InsensitiveStr::Ascii("etimating"),
        dictgen::InsensitiveStr::Ascii("haddow"),
        dictgen::InsensitiveStr::Ascii("haddowed"),
        dictgen::InsensitiveStr::Ascii("hadowd"),
        dictgen::InsensitiveStr::Ascii("hadowered"),
        dictgen::InsensitiveStr::Ascii("implifacation"),
        dictgen::InsensitiveStr::Ascii("implifaction"),
        dictgen::InsensitiveStr::Ascii("implificaiton"),
        dictgen::InsensitiveStr::Ascii("implificating"),
        dictgen::InsensitiveStr::Ascii("implificaton"),
        dictgen::InsensitiveStr::Ascii("implificiation"),
        dictgen::InsensitiveStr::Ascii("implifiction"),
        dictgen::InsensitiveStr::Ascii("implyfication"),
        dictgen::InsensitiveStr::Ascii("ue"),
    ],
    values: &[
        &["oversimplification"],
        &["overestimating"],
        &["overshadowed"],
        &["overshadowed"],
        &["overshadowed"],
        &["overshadowed"],
        &["oversimplification"],
        &["oversimplification"],
        &["oversimplification"],
        &["oversimplification"],
        &["oversimplification"],
        &["oversimplification"],
        &["oversimplification"],
        &["oversimplification"],
        &["overuse"],
    ],
    range: 2..=14,
};

static WORD_OVERR_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_OVERR_CHILDREN),
    value: None,
};

pub static WORD_OVERR_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("eacing"),
        dictgen::InsensitiveStr::Ascii("eactin"),
        dictgen::InsensitiveStr::Ascii("eactiong"),
        dictgen::InsensitiveStr::Ascii("eacton"),
        dictgen::InsensitiveStr::Ascii("eaktion"),
        dictgen::InsensitiveStr::Ascii("iden"),
    ],
    values: &[
        &["overreacting"],
        &["overreaction"],
        &["overreacting"],
        &["overreaction"],
        &["overreaction"],
        &["overridden"],
    ],
    range: 4..=8,
};

static WORD_OVERP_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_OVERP_CHILDREN),
    value: None,
};

pub static WORD_OVERP_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ad"),
        dictgen::InsensitiveStr::Ascii("aied"),
        dictgen::InsensitiveStr::Ascii("iad"),
        dictgen::InsensitiveStr::Ascii("irced"),
        dictgen::InsensitiveStr::Ascii("olulation"),
        dictgen::InsensitiveStr::Ascii("ooling"),
        dictgen::InsensitiveStr::Ascii("opluation"),
        dictgen::InsensitiveStr::Ascii("opulaton"),
        dictgen::InsensitiveStr::Ascii("overed"),
        dictgen::InsensitiveStr::Ascii("owed"),
        dictgen::InsensitiveStr::Ascii("oweing"),
        dictgen::InsensitiveStr::Ascii("owerd"),
        dictgen::InsensitiveStr::Ascii("owred"),
        dictgen::InsensitiveStr::Ascii("rised"),
    ],
    values: &[
        &["overpaid"],
        &["overpaid"],
        &["overpaid"],
        &["overpriced"],
        &["overpopulation"],
        &["overlooking"],
        &["overpopulation"],
        &["overpopulation"],
        &["overpowered"],
        &["overpowered"],
        &["overpowering"],
        &["overpowered"],
        &["overpowered"],
        &["overpriced"],
    ],
    range: 2..=9,
};

static WORD_OVERN_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_OVERN_CHILDREN),
    value: None,
};

pub static WORD_OVERN_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("urfed")],
    values: &[&["overturned"]],
    range: 5..=5,
};

static WORD_OVERM_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_OVERM_CHILDREN),
    value: None,
};

pub static WORD_OVERM_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("apping")],
    values: &[&["overlapping"]],
    range: 6..=6,
};

static WORD_OVERL_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_OVERL_CHILDREN),
    value: None,
};

pub static WORD_OVERL_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("anded"),
        dictgen::InsensitiveStr::Ascii("aod"),
        dictgen::InsensitiveStr::Ascii("aoded"),
        dictgen::InsensitiveStr::Ascii("aping"),
        dictgen::InsensitiveStr::Ascii("appping"),
        dictgen::InsensitiveStr::Ascii("apsing"),
        dictgen::InsensitiveStr::Ascii("auded"),
        dictgen::InsensitiveStr::Ascii("cock"),
        dictgen::InsensitiveStr::Ascii("cocked"),
        dictgen::InsensitiveStr::Ascii("cocking"),
        dictgen::InsensitiveStr::Ascii("coking"),
        dictgen::InsensitiveStr::Ascii("oard"),
        dictgen::InsensitiveStr::Ascii("oards"),
        dictgen::InsensitiveStr::Ascii("ooming"),
        dictgen::InsensitiveStr::Ascii("oooked"),
        dictgen::InsensitiveStr::Ascii("orded"),
        dictgen::InsensitiveStr::Ascii("ordes"),
        dictgen::InsensitiveStr::Ascii("ordess"),
    ],
    values: &[
        &["overloaded"],
        &["overload"],
        &["overloaded"],
        &["overlapping"],
        &["overlapping"],
        &["overlapping"],
        &["overloaded"],
        &["overclock"],
        &["overclocked"],
        &["overclocking"],
        &["overlooking"],
        &["overload"],
        &["overload"],
        &["overlooking"],
        &["overlooked"],
        &["overloaded"],
        &["overlords"],
        &["overlords"],
    ],
    range: 3..=7,
};

static WORD_OVERK_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_OVERK_CHILDREN),
    value: None,
};

pub static WORD_OVERK_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("apping"),
        dictgen::InsensitiveStr::Ascii("locked"),
    ],
    values: &[&["overlapping"], &["overclocked"]],
    range: 6..=6,
};

static WORD_OVERH_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_OVERH_CHILDREN),
    value: None,
};

pub static WORD_OVERH_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("al"),
        dictgen::InsensitiveStr::Ascii("eading"),
        dictgen::InsensitiveStr::Ascii("eards"),
        dictgen::InsensitiveStr::Ascii("eared"),
        dictgen::InsensitiveStr::Ascii("earting"),
        dictgen::InsensitiveStr::Ascii("eathing"),
        dictgen::InsensitiveStr::Ascii("ooked"),
        dictgen::InsensitiveStr::Ascii("ooking"),
        dictgen::InsensitiveStr::Ascii("pyed"),
        dictgen::InsensitiveStr::Ascii("tinking"),
        dictgen::InsensitiveStr::Ascii("ual"),
        dictgen::InsensitiveStr::Ascii("welm"),
        dictgen::InsensitiveStr::Ascii("welmed"),
        dictgen::InsensitiveStr::Ascii("welming"),
        dictgen::InsensitiveStr::Ascii("welmingly"),
        dictgen::InsensitiveStr::Ascii("wlemingly"),
    ],
    values: &[
        &["overhaul"],
        &["overheating"],
        &["overhead"],
        &["overhead"],
        &["overreacting"],
        &["overheating"],
        &["overlooked"],
        &["overlooking"],
        &["overhyped"],
        &["overthinking"],
        &["overhaul"],
        &["overwhelm"],
        &["overwhelmed"],
        &["overwhelming"],
        &["overwhelmingly"],
        &["overwhelmingly"],
    ],
    range: 2..=9,
};

static WORD_OVERF_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_OVERF_CHILDREN),
    value: None,
};

pub static WORD_OVERF_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("apping")],
    values: &[&["overlapping"]],
    range: 6..=6,
};

static WORD_OVERE_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_OVERE_CHILDREN),
    value: None,
};

pub static WORD_OVERE_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("aching"),
        dictgen::InsensitiveStr::Ascii("stemating"),
        dictgen::InsensitiveStr::Ascii("stimateing"),
        dictgen::InsensitiveStr::Ascii("xtimating"),
    ],
    values: &[
        &["overarching"],
        &["overestimating"],
        &["overestimating"],
        &["overestimating"],
    ],
    range: 6..=10,
};

static WORD_OVERD_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_OVERD_CHILDREN),
    value: None,
};

pub static WORD_OVERD_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("irve"),
        dictgen::InsensitiveStr::Ascii("rev"),
    ],
    values: &[&["overdrive"], &["overdrive"]],
    range: 3..=4,
};

static WORD_OVERC_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_OVERC_CHILDREN),
    value: None,
};

pub static WORD_OVERC_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("apping"),
        dictgen::InsensitiveStr::Ascii("haring"),
        dictgen::InsensitiveStr::Ascii("lcok"),
        dictgen::InsensitiveStr::Ascii("lcoked"),
        dictgen::InsensitiveStr::Ascii("lcoking"),
        dictgen::InsensitiveStr::Ascii("licked"),
        dictgen::InsensitiveStr::Ascii("licking"),
        dictgen::InsensitiveStr::Ascii("loaked"),
        dictgen::InsensitiveStr::Ascii("loaking"),
        dictgen::InsensitiveStr::Ascii("locing"),
        dictgen::InsensitiveStr::Ascii("lockd"),
        dictgen::InsensitiveStr::Ascii("lockig"),
        dictgen::InsensitiveStr::Ascii("lockign"),
        dictgen::InsensitiveStr::Ascii("locled"),
        dictgen::InsensitiveStr::Ascii("lok"),
        dictgen::InsensitiveStr::Ascii("lokcing"),
        dictgen::InsensitiveStr::Ascii("loked"),
        dictgen::InsensitiveStr::Ascii("oding"),
        dictgen::InsensitiveStr::Ascii("omeing"),
        dictgen::InsensitiveStr::Ascii("omming"),
    ],
    values: &[
        &["overlapping"],
        &["overarching"],
        &["overclock"],
        &["overclocked"],
        &["overclocking"],
        &["overclocked"],
        &["overclocking"],
        &["overclocked"],
        &["overclocking"],
        &["overclocking"],
        &["overclocked"],
        &["overclocking"],
        &["overclocking"],
        &["overclocked"],
        &["overclock"],
        &["overclocking"],
        &["overclocked"],
        &["overcoming"],
        &["overcoming"],
        &["overcoming"],
    ],
    range: 3..=7,
};

static WORD_OVERB_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_OVERB_CHILDREN),
    value: None,
};

pub static WORD_OVERB_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("aord"),
        dictgen::InsensitiveStr::Ascii("earring"),
        dictgen::InsensitiveStr::Ascii("locking"),
        dictgen::InsensitiveStr::Ascii("oad"),
        dictgen::InsensitiveStr::Ascii("raking"),
    ],
    values: &[
        &["overboard"],
        &["overbearing"],
        &["overclocking"],
        &["overboard"],
        &["overbearing"],
    ],
    range: 3..=7,
};

static WORD_OVERA_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_OVERA_CHILDREN),
    value: None,
};

pub static WORD_OVERA_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("rcing")],
    values: &[&["overarching"]],
    range: 5..=5,
};

static WORD_OU_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_OU_CHILDREN),
    value: None,
};

pub static WORD_OU_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("blisher"),
        dictgen::InsensitiveStr::Ascii("evre"),
        dictgen::InsensitiveStr::Ascii("put"),
        dictgen::InsensitiveStr::Ascii("rselvs"),
        dictgen::InsensitiveStr::Ascii("rsleves"),
        dictgen::InsensitiveStr::Ascii("standing"),
        dictgen::InsensitiveStr::Ascii("stider"),
        dictgen::InsensitiveStr::Ascii("stiders"),
        dictgen::InsensitiveStr::Ascii("stpoken"),
        dictgen::InsensitiveStr::Ascii("tcalssed"),
        dictgen::InsensitiveStr::Ascii("tclasssed"),
        dictgen::InsensitiveStr::Ascii("tfeild"),
        dictgen::InsensitiveStr::Ascii("tfidel"),
        dictgen::InsensitiveStr::Ascii("tfied"),
        dictgen::InsensitiveStr::Ascii("tfiled"),
        dictgen::InsensitiveStr::Ascii("tisder"),
        dictgen::InsensitiveStr::Ascii("tisders"),
        dictgen::InsensitiveStr::Ascii("tlcassed"),
        dictgen::InsensitiveStr::Ascii("tnumbed"),
        dictgen::InsensitiveStr::Ascii("tnumberd"),
        dictgen::InsensitiveStr::Ascii("tnumbred"),
        dictgen::InsensitiveStr::Ascii("tnunbered"),
        dictgen::InsensitiveStr::Ascii("tpalyed"),
        dictgen::InsensitiveStr::Ascii("tperfom"),
        dictgen::InsensitiveStr::Ascii("tperfoms"),
        dictgen::InsensitiveStr::Ascii("tperfrom"),
        dictgen::InsensitiveStr::Ascii("tperfroms"),
        dictgen::InsensitiveStr::Ascii("tplayd"),
        dictgen::InsensitiveStr::Ascii("tpreform"),
        dictgen::InsensitiveStr::Ascii("tpreforms"),
        dictgen::InsensitiveStr::Ascii("tpsoken"),
        dictgen::InsensitiveStr::Ascii("tputed"),
        dictgen::InsensitiveStr::Ascii("traegously"),
        dictgen::InsensitiveStr::Ascii("trageos"),
        dictgen::InsensitiveStr::Ascii("trageosly"),
        dictgen::InsensitiveStr::Ascii("trageoulsy"),
        dictgen::InsensitiveStr::Ascii("trageouly"),
        dictgen::InsensitiveStr::Ascii("tragerous"),
        dictgen::InsensitiveStr::Ascii("tragesouly"),
        dictgen::InsensitiveStr::Ascii("trageuos"),
        dictgen::InsensitiveStr::Ascii("trageuosly"),
        dictgen::InsensitiveStr::Ascii("tragious"),
        dictgen::InsensitiveStr::Ascii("tragiously"),
        dictgen::InsensitiveStr::Ascii("tragoues"),
        dictgen::InsensitiveStr::Ascii("treagous"),
        dictgen::InsensitiveStr::Ascii("tsidr"),
        dictgen::InsensitiveStr::Ascii("tskirst"),
        dictgen::InsensitiveStr::Ascii("tskirters"),
        dictgen::InsensitiveStr::Ascii("tskrits"),
        dictgen::InsensitiveStr::Ascii("tsorucing"),
        dictgen::InsensitiveStr::Ascii("tsourcad"),
        dictgen::InsensitiveStr::Ascii("tsourcade"),
        dictgen::InsensitiveStr::Ascii("tsourceing"),
        dictgen::InsensitiveStr::Ascii("tsoure"),
        dictgen::InsensitiveStr::Ascii("tsouring"),
        dictgen::InsensitiveStr::Ascii("tsoursed"),
        dictgen::InsensitiveStr::Ascii("tsoursing"),
        dictgen::InsensitiveStr::Ascii("tweighes"),
        dictgen::InsensitiveStr::Ascii("twieghs"),
    ],
    values: &[
        &["publisher"],
        &["oeuvre"],
        &["output"],
        &["ourselves"],
        &["ourselves"],
        &["outstanding"],
        &["outsider"],
        &["outsiders"],
        &["outspoken"],
        &["outclassed"],
        &["outclassed"],
        &["outfield"],
        &["outfield"],
        &["outfield"],
        &["outfield"],
        &["outsider"],
        &["outsiders"],
        &["outclassed"],
        &["outnumbered"],
        &["outnumbered"],
        &["outnumbered"],
        &["outnumbered"],
        &["outplayed"],
        &["outperform"],
        &["outperform"],
        &["outperform"],
        &["outperform"],
        &["outplayed"],
        &["outperform"],
        &["outperform"],
        &["outspoken"],
        &["outputted"],
        &["outrageously"],
        &["outrageous"],
        &["outrageously"],
        &["outrageously"],
        &["outrageously"],
        &["outrageous"],
        &["outrageously"],
        &["outrageous"],
        &["outrageously"],
        &["outrageous"],
        &["outrageously"],
        &["outrageous"],
        &["outrageous"],
        &["outsider"],
        &["outskirts"],
        &["outskirts"],
        &["outskirts"],
        &["outsourcing"],
        &["outsourced"],
        &["outsourced"],
        &["outsourcing"],
        &["outsourced"],
        &["outsourcing"],
        &["outsourced"],
        &["outsourcing"],
        &["outweighs"],
        &["outweighs"],
    ],
    range: 3..=10,
};

static WORD_OT_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_OT_CHILDREN),
    value: None,
};

pub static WORD_OT_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ehr"),
        dictgen::InsensitiveStr::Ascii("hrodox"),
    ],
    values: &[&["other"], &["orthodox"]],
    range: 3..=6,
};

static WORD_OS_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_OS_CHILDREN),
    value: None,
};

pub static WORD_OS_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("bidian"),
        dictgen::InsensitiveStr::Ascii("tencibly"),
        dictgen::InsensitiveStr::Ascii("tenisbly"),
        dictgen::InsensitiveStr::Ascii("tensably"),
        dictgen::InsensitiveStr::Ascii("tensiably"),
        dictgen::InsensitiveStr::Ascii("tensibily"),
        dictgen::InsensitiveStr::Ascii("tentibly"),
        dictgen::InsensitiveStr::Ascii("trasiced"),
        dictgen::InsensitiveStr::Ascii("trasized"),
        dictgen::InsensitiveStr::Ascii("traziced"),
        dictgen::InsensitiveStr::Ascii("trazised"),
        dictgen::InsensitiveStr::Ascii("trecized"),
        dictgen::InsensitiveStr::Ascii("tricized"),
        dictgen::InsensitiveStr::Ascii("trocized"),
    ],
    values: &[
        &["obsidian"],
        &["ostensibly"],
        &["ostensibly"],
        &["ostensibly"],
        &["ostensibly"],
        &["ostensibly"],
        &["ostensibly"],
        &["ostracized"],
        &["ostracized"],
        &["ostracized"],
        &["ostracised"],
        &["ostracized"],
        &["ostracized"],
        &["ostracized"],
    ],
    range: 6..=9,
};

static WORD_OR_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_OR_CHILDREN),
    value: None,
};

static WORD_OR_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    Some(&WORD_ORA_NODE),
    Some(&WORD_ORB_NODE),
    Some(&WORD_ORC_NODE),
    Some(&WORD_ORD_NODE),
    Some(&WORD_ORE_NODE),
    None,
    Some(&WORD_ORG_NODE),
    Some(&WORD_ORH_NODE),
    Some(&WORD_ORI_NODE),
    None,
    None,
    Some(&WORD_ORL_NODE),
    None,
    None,
    None,
    Some(&WORD_ORP_NODE),
    None,
    None,
    None,
    Some(&WORD_ORT_NODE),
    None,
    None,
    None,
    None,
    None,
    None,
];

static WORD_ORT_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_ORT_CHILDREN),
    value: None,
};

pub static WORD_ORT_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("hodx")],
    values: &[&["orthodox"]],
    range: 4..=4,
};

static WORD_ORP_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_ORP_CHILDREN),
    value: None,
};

pub static WORD_ORP_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ahns"),
        dictgen::InsensitiveStr::Ascii("hanes"),
    ],
    values: &[&["orphans"], &["orphans"]],
    range: 4..=5,
};

static WORD_ORL_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_ORL_CHILDREN),
    value: None,
};

pub static WORD_ORL_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("enas")],
    values: &[&["orleans"]],
    range: 4..=4,
};

static WORD_ORI_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_ORI_CHILDREN),
    value: None,
};

pub static WORD_ORI_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("btal"),
        dictgen::InsensitiveStr::Ascii("dinarily"),
        dictgen::InsensitiveStr::Ascii("dnary"),
        dictgen::InsensitiveStr::Ascii("entacion"),
        dictgen::InsensitiveStr::Ascii("entaion"),
        dictgen::InsensitiveStr::Ascii("entarla"),
        dictgen::InsensitiveStr::Ascii("entarlo"),
        dictgen::InsensitiveStr::Ascii("entato"),
        dictgen::InsensitiveStr::Ascii("ganaly"),
        dictgen::InsensitiveStr::Ascii("gianlly"),
        dictgen::InsensitiveStr::Ascii("ginales"),
        dictgen::InsensitiveStr::Ascii("ginalet"),
        dictgen::InsensitiveStr::Ascii("ginalis"),
        dictgen::InsensitiveStr::Ascii("ginall"),
        dictgen::InsensitiveStr::Ascii("ginallity"),
        dictgen::InsensitiveStr::Ascii("ginalt"),
        dictgen::InsensitiveStr::Ascii("ginalty"),
        dictgen::InsensitiveStr::Ascii("ginaly"),
        dictgen::InsensitiveStr::Ascii("ginas"),
        dictgen::InsensitiveStr::Ascii("gines"),
        dictgen::InsensitiveStr::Ascii("ginially"),
        dictgen::InsensitiveStr::Ascii("ginnally"),
        dictgen::InsensitiveStr::Ascii("ginsl"),
        dictgen::InsensitiveStr::Ascii("gintea"),
        dictgen::InsensitiveStr::Ascii("gional"),
        dictgen::InsensitiveStr::Ascii("gnally"),
        dictgen::InsensitiveStr::Ascii("gniality"),
        dictgen::InsensitiveStr::Ascii("gnially"),
        dictgen::InsensitiveStr::Ascii("gnials"),
        dictgen::InsensitiveStr::Ascii("gniated"),
        dictgen::InsensitiveStr::Ascii("gonally"),
        dictgen::InsensitiveStr::Ascii("gonated"),
    ],
    values: &[
        &["orbital"],
        &["ordinarily"],
        &["ordinary"],
        &["orientation"],
        &["orientation"],
        &["oriental"],
        &["oriental"],
        &["orientation"],
        &["originally"],
        &["originally"],
        &["originals"],
        &["originated"],
        &["originals"],
        &["original"],
        &["originality"],
        &["originality"],
        &["originality"],
        &["originally"],
        &["origins"],
        &["origins"],
        &["originally"],
        &["originally"],
        &["originals"],
        &["originate"],
        &["original"],
        &["originally"],
        &["originality"],
        &["originally"],
        &["originals"],
        &["originated"],
        &["originally"],
        &["originated"],
    ],
    range: 4..=9,
};

static WORD_ORH_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_ORH_CHILDREN),
    value: None,
};

pub static WORD_ORH_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("cestra"),
        dictgen::InsensitiveStr::Ascii("pans"),
        dictgen::InsensitiveStr::Ascii("todox"),
    ],
    values: &[&["orchestra"], &["orphans"], &["orthodox"]],
    range: 4..=6,
};

static WORD_ORG_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_ORG_CHILDREN),
    value: None,
};

static WORD_ORG_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    Some(&WORD_ORGA_NODE),
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    Some(&WORD_ORGI_NODE),
    None,
    None,
    None,
    None,
    Some(&WORD_ORGN_NODE),
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
];

static WORD_ORGN_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_ORGN_CHILDREN),
    value: None,
};

pub static WORD_ORGN_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("aisation"),
        dictgen::InsensitiveStr::Ascii("aised"),
    ],
    values: &[&["organisations"], &["organised"]],
    range: 5..=8,
};

static WORD_ORGI_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_ORGI_CHILDREN),
    value: None,
};

pub static WORD_ORGI_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("n"),
        dictgen::InsensitiveStr::Ascii("nal"),
        dictgen::InsensitiveStr::Ascii("nally"),
        dictgen::InsensitiveStr::Ascii("nasation"),
        dictgen::InsensitiveStr::Ascii("nasations"),
        dictgen::InsensitiveStr::Ascii("nazation"),
        dictgen::InsensitiveStr::Ascii("nazational"),
        dictgen::InsensitiveStr::Ascii("nazations"),
        dictgen::InsensitiveStr::Ascii("nize"),
    ],
    values: &[
        &["origin"],
        &["original"],
        &["originally"],
        &["organisation"],
        &["organisations"],
        &["organization"],
        &["organizational"],
        &["organizations"],
        &["organize"],
    ],
    range: 1..=10,
};

static WORD_ORGA_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_ORGA_CHILDREN),
    value: None,
};

static WORD_ORGA_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    Some(&WORD_ORGAI_NODE),
    None,
    None,
    None,
    None,
    Some(&WORD_ORGAN_NODE),
    None,
    None,
    None,
    None,
    Some(&WORD_ORGAS_NODE),
    None,
    None,
    None,
    None,
    None,
    None,
    None,
];

static WORD_ORGAS_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_ORGAS_CHILDREN),
    value: None,
};

pub static WORD_ORGAS_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("mes"),
        dictgen::InsensitiveStr::Ascii("mos"),
        dictgen::InsensitiveStr::Ascii("mus"),
    ],
    values: &[&["orgasms"], &["orgasms"], &["orgasms"]],
    range: 3..=3,
};

static WORD_ORGAN_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_ORGAN_CHILDREN),
    value: None,
};

static WORD_ORGAN_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    None,
    None,
    None,
    None,
    Some(&WORD_ORGANE_NODE),
    None,
    None,
    None,
    Some(&WORD_ORGANI_NODE),
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    Some(&WORD_ORGANS_NODE),
    None,
    None,
    None,
    None,
    None,
    None,
    Some(&WORD_ORGANZ_NODE),
];

static WORD_ORGANZ_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_ORGANZ_CHILDREN),
    value: None,
};

pub static WORD_ORGANZ_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("iation"),
        dictgen::InsensitiveStr::Ascii("iational"),
        dictgen::InsensitiveStr::Ascii("iations"),
        dictgen::InsensitiveStr::Ascii("ie"),
        dictgen::InsensitiveStr::Ascii("ier"),
        dictgen::InsensitiveStr::Ascii("iers"),
    ],
    values: &[
        &["organization"],
        &["organizational"],
        &["organizations"],
        &["organize"],
        &["organizer"],
        &["organizers"],
    ],
    range: 2..=8,
};

static WORD_ORGANS_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_ORGANS_CHILDREN),
    value: None,
};

pub static WORD_ORGANS_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("iation"),
        dictgen::InsensitiveStr::Ascii("iations"),
        dictgen::InsensitiveStr::Ascii("ie"),
        dictgen::InsensitiveStr::Ascii("ied"),
        dictgen::InsensitiveStr::Ascii("im"),
        dictgen::InsensitiveStr::Ascii("ims"),
    ],
    values: &[
        &["organisation"],
        &["organisations"],
        &["organise"],
        &["organised"],
        &["organism"],
        &["organisms"],
    ],
    range: 2..=7,
};

static WORD_ORGANI_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_ORGANI_CHILDREN),
    value: None,
};

pub static WORD_ORGANI_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("caly"),
        dictgen::InsensitiveStr::Ascii("ces"),
        dictgen::InsensitiveStr::Ascii("clly"),
        dictgen::InsensitiveStr::Ascii("e"),
        dictgen::InsensitiveStr::Ascii("m"),
        dictgen::InsensitiveStr::Ascii("ms"),
        dictgen::InsensitiveStr::Ascii("saiton"),
        dictgen::InsensitiveStr::Ascii("sate"),
        dictgen::InsensitiveStr::Ascii("sationens"),
        dictgen::InsensitiveStr::Ascii("sationers"),
        dictgen::InsensitiveStr::Ascii("sationnels"),
        dictgen::InsensitiveStr::Ascii("saton"),
        dictgen::InsensitiveStr::Ascii("satons"),
        dictgen::InsensitiveStr::Ascii("sche"),
        dictgen::InsensitiveStr::Ascii("sera"),
        dictgen::InsensitiveStr::Ascii("serad"),
        dictgen::InsensitiveStr::Ascii("sere"),
        dictgen::InsensitiveStr::Ascii("sert"),
        dictgen::InsensitiveStr::Ascii("sier"),
        dictgen::InsensitiveStr::Ascii("sim"),
        dictgen::InsensitiveStr::Ascii("sims"),
        dictgen::InsensitiveStr::Ascii("ske"),
        dictgen::InsensitiveStr::Ascii("smed"),
        dictgen::InsensitiveStr::Ascii("smen"),
        dictgen::InsensitiveStr::Ascii("smer"),
        dictgen::InsensitiveStr::Ascii("smes"),
        dictgen::InsensitiveStr::Ascii("smus"),
        dictgen::InsensitiveStr::Ascii("staion"),
        dictgen::InsensitiveStr::Ascii("staions"),
        dictgen::InsensitiveStr::Ascii("ste"),
        dictgen::InsensitiveStr::Ascii("sten"),
        dictgen::InsensitiveStr::Ascii("stion"),
        dictgen::InsensitiveStr::Ascii("szed"),
        dictgen::InsensitiveStr::Ascii("tes"),
        dictgen::InsensitiveStr::Ascii("zacion"),
        dictgen::InsensitiveStr::Ascii("zacional"),
        dictgen::InsensitiveStr::Ascii("zaed"),
        dictgen::InsensitiveStr::Ascii("zaiton"),
        dictgen::InsensitiveStr::Ascii("zaitonal"),
        dictgen::InsensitiveStr::Ascii("zare"),
        dictgen::InsensitiveStr::Ascii("zarea"),
        dictgen::InsensitiveStr::Ascii("zarem"),
        dictgen::InsensitiveStr::Ascii("zarme"),
        dictgen::InsensitiveStr::Ascii("zarte"),
        dictgen::InsensitiveStr::Ascii("zate"),
        dictgen::InsensitiveStr::Ascii("zatinal"),
        dictgen::InsensitiveStr::Ascii("zativo"),
        dictgen::InsensitiveStr::Ascii("zativos"),
        dictgen::InsensitiveStr::Ascii("zatons"),
        dictgen::InsensitiveStr::Ascii("zms"),
        dictgen::InsensitiveStr::Ascii("zors"),
        dictgen::InsensitiveStr::Ascii("ztion"),
        dictgen::InsensitiveStr::Ascii("zuje"),
    ],
    values: &[
        &["organically"],
        &["organise"],
        &["organically"],
        &["organise"],
        &["organism"],
        &["organism"],
        &["organisation"],
        &["organise"],
        &["organisations"],
        &["organisations"],
        &["organisations"],
        &["organisation"],
        &["organisations"],
        &["organise"],
        &["organisers"],
        &["organised"],
        &["organisers"],
        &["organisers"],
        &["organise"],
        &["organism"],
        &["organism"],
        &["organise"],
        &["organise"],
        &["organise"],
        &["organise"],
        &["organisms"],
        &["organisms"],
        &["organisation"],
        &["organisations"],
        &["organise"],
        &["organise"],
        &["organisation"],
        &["organise"],
        &["organise"],
        &["organization"],
        &["organizational"],
        &["organize"],
        &["organization"],
        &["organizational"],
        &["organizer"],
        &["organizer"],
        &["organizer"],
        &["organizer"],
        &["organizer"],
        &["organize"],
        &["organizational"],
        &["organization"],
        &["organizations"],
        &["organizations"],
        &["organism"],
        &["organizers"],
        &["organization"],
        &["organize"],
    ],
    range: 1..=10,
};

static WORD_ORGANE_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_ORGANE_CHILDREN),
    value: None,
};

pub static WORD_ORGANE_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("red"),
        dictgen::InsensitiveStr::Ascii("s"),
    ],
    values: &[&["orangered"], &["organise"]],
    range: 1..=3,
};

static WORD_ORGAI_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_ORGAI_CHILDREN),
    value: None,
};

pub static WORD_ORGAI_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("nsation"),
        dictgen::InsensitiveStr::Ascii("nse"),
        dictgen::InsensitiveStr::Ascii("nsed"),
        dictgen::InsensitiveStr::Ascii("nzation"),
        dictgen::InsensitiveStr::Ascii("nze"),
        dictgen::InsensitiveStr::Ascii("nzer"),
    ],
    values: &[
        &["organisation"],
        &["organise"],
        &["organised"],
        &["organizations"],
        &["organize"],
        &["organizer"],
    ],
    range: 3..=7,
};

static WORD_ORE_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_ORE_CHILDREN),
    value: None,
};

pub static WORD_ORE_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("intal"),
        dictgen::InsensitiveStr::Ascii("intation"),
        dictgen::InsensitiveStr::Ascii("lans"),
    ],
    values: &[&["oriental"], &["orientation"], &["orleans"]],
    range: 4..=8,
};

static WORD_ORD_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_ORD_CHILDREN),
    value: None,
};

pub static WORD_ORD_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ed"),
        dictgen::InsensitiveStr::Ascii("ianry"),
        dictgen::InsensitiveStr::Ascii("inarly"),
    ],
    values: &[&["ordered"], &["ordinary"], &["ordinary"]],
    range: 2..=6,
};

static WORD_ORC_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_ORC_CHILDREN),
    value: None,
};

pub static WORD_ORC_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ales"),
        dictgen::InsensitiveStr::Ascii("ehstra"),
        dictgen::InsensitiveStr::Ascii("hastrated"),
        dictgen::InsensitiveStr::Ascii("hesta"),
        dictgen::InsensitiveStr::Ascii("hestarted"),
        dictgen::InsensitiveStr::Ascii("hestraded"),
        dictgen::InsensitiveStr::Ascii("hestraed"),
        dictgen::InsensitiveStr::Ascii("hestrial"),
        dictgen::InsensitiveStr::Ascii("histrated"),
    ],
    values: &[
        &["oracles"],
        &["orchestra"],
        &["orchestrated"],
        &["orchestra"],
        &["orchestrated"],
        &["orchestrated"],
        &["orchestrated"],
        &["orchestra"],
        &["orchestrated"],
    ],
    range: 4..=9,
};

static WORD_ORB_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_ORB_CHILDREN),
    value: None,
};

pub static WORD_ORB_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("tial")],
    values: &[&["orbital"]],
    range: 4..=4,
};

static WORD_ORA_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_ORA_CHILDREN),
    value: None,
};

pub static WORD_ORA_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("cels"),
        dictgen::InsensitiveStr::Ascii("gnered"),
        dictgen::InsensitiveStr::Ascii("gnes"),
        dictgen::InsensitiveStr::Ascii("gnisation"),
        dictgen::InsensitiveStr::Ascii("gnise"),
        dictgen::InsensitiveStr::Ascii("gnised"),
        dictgen::InsensitiveStr::Ascii("gnizer"),
        dictgen::InsensitiveStr::Ascii("gsms"),
        dictgen::InsensitiveStr::Ascii("lces"),
        dictgen::InsensitiveStr::Ascii("ngerd"),
        dictgen::InsensitiveStr::Ascii("ngers"),
        dictgen::InsensitiveStr::Ascii("ngism"),
    ],
    values: &[
        &["oracles"],
        &["orangered"],
        &["oranges"],
        &["organisation"],
        &["organise"],
        &["organised"],
        &["organizer"],
        &["orgasms"],
        &["oracles"],
        &["orangered"],
        &["oranges"],
        &["organism"],
    ],
    range: 4..=9,
};

static WORD_OP_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_OP_CHILDREN),
    value: None,
};

static WORD_OP_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    Some(&WORD_OPA_NODE),
    None,
    None,
    None,
    Some(&WORD_OPE_NODE),
    None,
    None,
    None,
    Some(&WORD_OPI_NODE),
    None,
    None,
    None,
    None,
    None,
    Some(&WORD_OPO_NODE),
    Some(&WORD_OPP_NODE),
    None,
    Some(&WORD_OPR_NODE),
    None,
    Some(&WORD_OPT_NODE),
    None,
    None,
    None,
    None,
    None,
    None,
];

static WORD_OPT_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_OPT_CHILDREN),
    value: None,
};

pub static WORD_OPT_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("halmic"),
        dictgen::InsensitiveStr::Ascii("halmologist"),
        dictgen::InsensitiveStr::Ascii("halmology"),
        dictgen::InsensitiveStr::Ascii("hamologist"),
        dictgen::InsensitiveStr::Ascii("imaal"),
        dictgen::InsensitiveStr::Ascii("imim"),
        dictgen::InsensitiveStr::Ascii("imisim"),
        dictgen::InsensitiveStr::Ascii("imisitc"),
        dictgen::InsensitiveStr::Ascii("imisitic"),
        dictgen::InsensitiveStr::Ascii("imistc"),
        dictgen::InsensitiveStr::Ascii("imistisch"),
        dictgen::InsensitiveStr::Ascii("imizacion"),
        dictgen::InsensitiveStr::Ascii("imizare"),
        dictgen::InsensitiveStr::Ascii("imizate"),
        dictgen::InsensitiveStr::Ascii("imizating"),
        dictgen::InsensitiveStr::Ascii("imizaton"),
        dictgen::InsensitiveStr::Ascii("imizied"),
        dictgen::InsensitiveStr::Ascii("imziation"),
        dictgen::InsensitiveStr::Ascii("inally"),
        dictgen::InsensitiveStr::Ascii("mizations"),
        dictgen::InsensitiveStr::Ascii("omism"),
    ],
    values: &[
        &["ophthalmic"],
        &["ophthalmologist"],
        &["ophthalmology"],
        &["ophthalmologist"],
        &["optimal"],
        &["optimism"],
        &["optimism"],
        &["optimistic"],
        &["optimistic"],
        &["optimistic"],
        &["optimistic"],
        &["optimization"],
        &["optimize"],
        &["optimize"],
        &["optimization"],
        &["optimization"],
        &["optimize"],
        &["optimization"],
        &["optimally"],
        &["optimizations"],
        &["optimism"],
    ],
    range: 4..=11,
};

static WORD_OPR_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_OPR_CHILDREN),
    value: None,
};

pub static WORD_OPR_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ession"),
        dictgen::InsensitiveStr::Ascii("essive"),
        dictgen::InsensitiveStr::Ascii("hans"),
    ],
    values: &[&["oppression"], &["oppressive"], &["orphans"]],
    range: 4..=6,
};

static WORD_OPP_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_OPP_CHILDREN),
    value: None,
};

pub static WORD_OPP_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("enly"),
        dictgen::InsensitiveStr::Ascii("ertunities"),
        dictgen::InsensitiveStr::Ascii("inion"),
        dictgen::InsensitiveStr::Ascii("onant"),
        dictgen::InsensitiveStr::Ascii("onenet"),
        dictgen::InsensitiveStr::Ascii("onenets"),
        dictgen::InsensitiveStr::Ascii("onet"),
        dictgen::InsensitiveStr::Ascii("ononent"),
        dictgen::InsensitiveStr::Ascii("ortuniste"),
        dictgen::InsensitiveStr::Ascii("ortunites"),
        dictgen::InsensitiveStr::Ascii("osiste"),
        dictgen::InsensitiveStr::Ascii("ositition"),
        dictgen::InsensitiveStr::Ascii("osits"),
        dictgen::InsensitiveStr::Ascii("ossed"),
        dictgen::InsensitiveStr::Ascii("osties"),
        dictgen::InsensitiveStr::Ascii("ressin"),
        dictgen::InsensitiveStr::Ascii("ressiun"),
        dictgen::InsensitiveStr::Ascii("resso"),
        dictgen::InsensitiveStr::Ascii("resssing"),
        dictgen::InsensitiveStr::Ascii("resssion"),
        dictgen::InsensitiveStr::Ascii("rotunities"),
        dictgen::InsensitiveStr::Ascii("rotunity"),
        dictgen::InsensitiveStr::Ascii("urtunities"),
    ],
    values: &[
        &["openly"],
        &["opportunities"],
        &["opinion"],
        &["opponent"],
        &["opponent"],
        &["opponent"],
        &["opponent"],
        &["opponent"],
        &["opportunities"],
        &["opportunities"],
        &["opposites"],
        &["opposition"],
        &["opposites"],
        &["opposed"],
        &["opposites"],
        &["oppression"],
        &["oppressing"],
        &["oppression"],
        &["oppressing"],
        &["oppression"],
        &["opportunities"],
        &["opportunity"],
        &["opportunities"],
    ],
    range: 4..=10,
};

static WORD_OPO_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_OPO_CHILDREN),
    value: None,
};

pub static WORD_OPO_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("nent"),
        dictgen::InsensitiveStr::Ascii("rtunity"),
        dictgen::InsensitiveStr::Ascii("se"),
        dictgen::InsensitiveStr::Ascii("site"),
        dictgen::InsensitiveStr::Ascii("sition"),
    ],
    values: &[
        &["opponent"],
        &["opportunity"],
        &["oppose"],
        &["opposite"],
        &["opposition"],
    ],
    range: 2..=7,
};

static WORD_OPI_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_OPI_CHILDREN),
    value: None,
};

pub static WORD_OPI_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("niones"),
        dictgen::InsensitiveStr::Ascii("noins"),
        dictgen::InsensitiveStr::Ascii("tcal"),
        dictgen::InsensitiveStr::Ascii("tmal"),
    ],
    values: &[&["opinions"], &["opinions"], &["optical"], &["optimal"]],
    range: 4..=6,
};

static WORD_OPE_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_OPE_CHILDREN),
    value: None,
};

pub static WORD_OPE_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ness"),
        dictgen::InsensitiveStr::Ascii("racional"),
        dictgen::InsensitiveStr::Ascii("rasional"),
        dictgen::InsensitiveStr::Ascii("ratie"),
        dictgen::InsensitiveStr::Ascii("ratings"),
        dictgen::InsensitiveStr::Ascii("rationable"),
        dictgen::InsensitiveStr::Ascii("rationel"),
        dictgen::InsensitiveStr::Ascii("rationnal"),
        dictgen::InsensitiveStr::Ascii("rativne"),
        dictgen::InsensitiveStr::Ascii("rativos"),
    ],
    values: &[
        &["openness"],
        &["operational"],
        &["operational"],
        &["operative"],
        &["operations"],
        &["operational"],
        &["operational"],
        &["operational"],
        &["operative"],
        &["operations"],
    ],
    range: 4..=10,
};

static WORD_OPA_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_OPA_CHILDREN),
    value: None,
};

pub static WORD_OPA_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("rtor")],
    values: &[&["operator"]],
    range: 4..=4,
};

static WORD_ON_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_ON_CHILDREN),
    value: None,
};

pub static WORD_ON_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("atrio"),
        dictgen::InsensitiveStr::Ascii("baord"),
        dictgen::InsensitiveStr::Ascii("borad"),
        dictgen::InsensitiveStr::Ascii("gewild"),
        dictgen::InsensitiveStr::Ascii("lsaught"),
        dictgen::InsensitiveStr::Ascii("mipotent"),
        dictgen::InsensitiveStr::Ascii("miscient"),
        dictgen::InsensitiveStr::Ascii("ot"),
        dictgen::InsensitiveStr::Ascii("salught"),
        dictgen::InsensitiveStr::Ascii("slaugt"),
        dictgen::InsensitiveStr::Ascii("slaugth"),
        dictgen::InsensitiveStr::Ascii("sluaght"),
        dictgen::InsensitiveStr::Ascii("tairo"),
        dictgen::InsensitiveStr::Ascii("traio"),
        dictgen::InsensitiveStr::Ascii("wership"),
        dictgen::InsensitiveStr::Ascii("yl"),
    ],
    values: &[
        &["ontario"],
        &["onboard"],
        &["onboard"],
        &["gonewild"],
        &["onslaught"],
        &["omnipotent"],
        &["omniscient"],
        &["note"],
        &["onslaught"],
        &["onslaught"],
        &["onslaught"],
        &["onslaught"],
        &["ontario"],
        &["ontario"],
        &["ownership"],
        &["only"],
    ],
    range: 2..=8,
};

static WORD_OM_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_OM_CHILDREN),
    value: None,
};

pub static WORD_OM_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("inpotent"),
        dictgen::InsensitiveStr::Ascii("inscient"),
        dictgen::InsensitiveStr::Ascii("ision"),
        dictgen::InsensitiveStr::Ascii("ited"),
        dictgen::InsensitiveStr::Ascii("iting"),
        dictgen::InsensitiveStr::Ascii("lette"),
        dictgen::InsensitiveStr::Ascii("mision"),
        dictgen::InsensitiveStr::Ascii("mited"),
        dictgen::InsensitiveStr::Ascii("miting"),
        dictgen::InsensitiveStr::Ascii("mitted"),
        dictgen::InsensitiveStr::Ascii("mitting"),
        dictgen::InsensitiveStr::Ascii("nipetent"),
        dictgen::InsensitiveStr::Ascii("nipitent"),
        dictgen::InsensitiveStr::Ascii("nipotant"),
        dictgen::InsensitiveStr::Ascii("niscienct"),
        dictgen::InsensitiveStr::Ascii("nisicent"),
        dictgen::InsensitiveStr::Ascii("niverous"),
        dictgen::InsensitiveStr::Ascii("niverously"),
        dictgen::InsensitiveStr::Ascii("nsicient"),
        dictgen::InsensitiveStr::Ascii("re"),
    ],
    values: &[
        &["omnipotent"],
        &["omniscient"],
        &["omission"],
        &["omitted"],
        &["omitting"],
        &["omelette"],
        &["omission"],
        &["omitted"],
        &["omitting"],
        &["omitted"],
        &["omitting"],
        &["omnipotent"],
        &["omnipotent"],
        &["omnipotent"],
        &["omniscient"],
        &["omniscient"],
        &["omnivorous"],
        &["omnivorously"],
        &["omniscient"],
        &["more"],
    ],
    range: 2..=10,
};

static WORD_OL_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_OL_CHILDREN),
    value: None,
};

pub static WORD_OL_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("bigatory"),
        dictgen::InsensitiveStr::Ascii("biterated"),
        dictgen::InsensitiveStr::Ascii("igarcy"),
        dictgen::InsensitiveStr::Ascii("igrachy"),
        dictgen::InsensitiveStr::Ascii("mypic"),
        dictgen::InsensitiveStr::Ascii("mypics"),
        dictgen::InsensitiveStr::Ascii("reans"),
        dictgen::InsensitiveStr::Ascii("ymipcs"),
        dictgen::InsensitiveStr::Ascii("ympis"),
        dictgen::InsensitiveStr::Ascii("ypmic"),
        dictgen::InsensitiveStr::Ascii("ypmics"),
    ],
    values: &[
        &["obligatory"],
        &["obliterated"],
        &["oligarchy"],
        &["oligarchy"],
        &["olympic"],
        &["olympics"],
        &["orleans"],
        &["olympics"],
        &["olympics"],
        &["olympic"],
        &["olympics"],
    ],
    range: 5..=9,
};

static WORD_OI_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_OI_CHILDREN),
    value: None,
};

pub static WORD_OI_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("lgarchy")],
    values: &[&["oligarchy"]],
    range: 7..=7,
};

static WORD_OG_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_OG_CHILDREN),
    value: None,
};

pub static WORD_OG_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ing"),
        dictgen::InsensitiveStr::Ascii("liarchy"),
        dictgen::InsensitiveStr::Ascii("ranisation"),
        dictgen::InsensitiveStr::Ascii("rilla"),
    ],
    values: &[&["going"], &["oligarchy"], &["organisation"], &["gorilla"]],
    range: 3..=10,
};

static WORD_OF_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_OF_CHILDREN),
    value: None,
};

pub static WORD_OF_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("coruse"),
        dictgen::InsensitiveStr::Ascii("coure"),
        dictgen::InsensitiveStr::Ascii("coures"),
        dictgen::InsensitiveStr::Ascii("cousre"),
        dictgen::InsensitiveStr::Ascii("crouse"),
        dictgen::InsensitiveStr::Ascii("fcers"),
        dictgen::InsensitiveStr::Ascii("fcially"),
        dictgen::InsensitiveStr::Ascii("fensivelly"),
        dictgen::InsensitiveStr::Ascii("fensivley"),
        dictgen::InsensitiveStr::Ascii("fensivly"),
        dictgen::InsensitiveStr::Ascii("fereings"),
        dictgen::InsensitiveStr::Ascii("fesnively"),
        dictgen::InsensitiveStr::Ascii("ficailly"),
        dictgen::InsensitiveStr::Ascii("fical"),
        dictgen::InsensitiveStr::Ascii("fically"),
        dictgen::InsensitiveStr::Ascii("ficals"),
        dictgen::InsensitiveStr::Ascii("ficaly"),
        dictgen::InsensitiveStr::Ascii("ficiallly"),
        dictgen::InsensitiveStr::Ascii("ficialy"),
        dictgen::InsensitiveStr::Ascii("fisde"),
        dictgen::InsensitiveStr::Ascii("fpsring"),
        dictgen::InsensitiveStr::Ascii("fred"),
        dictgen::InsensitiveStr::Ascii("fsited"),
        dictgen::InsensitiveStr::Ascii("fspirng"),
        dictgen::InsensitiveStr::Ascii("fsrping"),
        dictgen::InsensitiveStr::Ascii("ocurse"),
        dictgen::InsensitiveStr::Ascii("tenly"),
    ],
    values: &[
        &["ofcourse"],
        &["ofcourse"],
        &["ofcourse"],
        &["ofcourse"],
        &["ofcourse"],
        &["officers"],
        &["officially"],
        &["offensively"],
        &["offensively"],
        &["offensively"],
        &["offerings"],
        &["offensively"],
        &["officially"],
        &["official"],
        &["officially"],
        &["officials"],
        &["officially"],
        &["officially"],
        &["officially"],
        &["offside"],
        &["offspring"],
        &["offered"],
        &["offside"],
        &["offspring"],
        &["offspring"],
        &["ofcourse"],
        &["often"],
    ],
    range: 4..=10,
};

static WORD_OC_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_OC_CHILDREN),
    value: None,
};

pub static WORD_OC_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("arnia"),
        dictgen::InsensitiveStr::Ascii("asion"),
        dictgen::InsensitiveStr::Ascii("asional"),
        dictgen::InsensitiveStr::Ascii("asionally"),
        dictgen::InsensitiveStr::Ascii("asionaly"),
        dictgen::InsensitiveStr::Ascii("asioned"),
        dictgen::InsensitiveStr::Ascii("asions"),
        dictgen::InsensitiveStr::Ascii("assion"),
        dictgen::InsensitiveStr::Ascii("assional"),
        dictgen::InsensitiveStr::Ascii("assionally"),
        dictgen::InsensitiveStr::Ascii("assionaly"),
        dictgen::InsensitiveStr::Ascii("assioned"),
        dictgen::InsensitiveStr::Ascii("assions"),
        dictgen::InsensitiveStr::Ascii("caison"),
        dictgen::InsensitiveStr::Ascii("caisonal"),
        dictgen::InsensitiveStr::Ascii("caisonally"),
        dictgen::InsensitiveStr::Ascii("caisons"),
        dictgen::InsensitiveStr::Ascii("casioanlly"),
        dictgen::InsensitiveStr::Ascii("casionals"),
        dictgen::InsensitiveStr::Ascii("casionaly"),
        dictgen::InsensitiveStr::Ascii("casionly"),
        dictgen::InsensitiveStr::Ascii("casionnal"),
        dictgen::InsensitiveStr::Ascii("cassion"),
        dictgen::InsensitiveStr::Ascii("cassional"),
        dictgen::InsensitiveStr::Ascii("cassionally"),
        dictgen::InsensitiveStr::Ascii("cassionaly"),
        dictgen::InsensitiveStr::Ascii("cassioned"),
        dictgen::InsensitiveStr::Ascii("cassions"),
        dictgen::InsensitiveStr::Ascii("cational"),
        dictgen::InsensitiveStr::Ascii("cationally"),
        dictgen::InsensitiveStr::Ascii("cour"),
        dictgen::InsensitiveStr::Ascii("culation"),
        dictgen::InsensitiveStr::Ascii("cupaiton"),
        dictgen::InsensitiveStr::Ascii("cupato"),
        dictgen::InsensitiveStr::Ascii("curance"),
        dictgen::InsensitiveStr::Ascii("curances"),
        dictgen::InsensitiveStr::Ascii("cured"),
        dictgen::InsensitiveStr::Ascii("curence"),
        dictgen::InsensitiveStr::Ascii("curences"),
        dictgen::InsensitiveStr::Ascii("curing"),
        dictgen::InsensitiveStr::Ascii("curr"),
        dictgen::InsensitiveStr::Ascii("currance"),
        dictgen::InsensitiveStr::Ascii("currances"),
        dictgen::InsensitiveStr::Ascii("currencies"),
        dictgen::InsensitiveStr::Ascii("otber"),
        dictgen::InsensitiveStr::Ascii("otpus"),
        dictgen::InsensitiveStr::Ascii("raina"),
        dictgen::InsensitiveStr::Ascii("tobear"),
        dictgen::InsensitiveStr::Ascii("tohedra"),
        dictgen::InsensitiveStr::Ascii("tohedral"),
        dictgen::InsensitiveStr::Ascii("tohedron"),
        dictgen::InsensitiveStr::Ascii("topuns"),
        dictgen::InsensitiveStr::Ascii("untries"),
        dictgen::InsensitiveStr::Ascii("untry"),
        dictgen::InsensitiveStr::Ascii("urr"),
        dictgen::InsensitiveStr::Ascii("urrance"),
        dictgen::InsensitiveStr::Ascii("urred"),
        dictgen::InsensitiveStr::Ascii("urrence"),
    ],
    values: &[
        &["ocarina"],
        &["occasion"],
        &["occasional"],
        &["occasionally"],
        &["occasionally"],
        &["occasioned"],
        &["occasions"],
        &["occasion"],
        &["occasional"],
        &["occasionally"],
        &["occasionally"],
        &["occasioned"],
        &["occasions"],
        &["occasion"],
        &["occasional"],
        &["occasionally"],
        &["occasions"],
        &["occasionally"],
        &["occasions"],
        &["occasionally"],
        &["occasional"],
        &["occasional"],
        &["occasion"],
        &["occasional"],
        &["occasionally"],
        &["occasionally"],
        &["occasioned"],
        &["occasions"],
        &["occasional"],
        &["occasionally"],
        &["occur"],
        &["occupation"],
        &["occupation"],
        &["occupation"],
        &["occurrence"],
        &["occurrences"],
        &["occurred"],
        &["occurrence"],
        &["occurrences"],
        &["occurring"],
        &["occur"],
        &["occurrence"],
        &["occurrences"],
        &["occurrences"],
        &["october"],
        &["octopus"],
        &["ocarina"],
        &["october"],
        &["octahedra"],
        &["octahedral"],
        &["octahedron"],
        &["octopus"],
        &["countries"],
        &["country"],
        &["occur"],
        &["occurrence"],
        &["occurred"],
        &["occurrence"],
    ],
    range: 3..=11,
};

static WORD_OB_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_OB_CHILDREN),
    value: None,
};

static WORD_OB_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    Some(&WORD_OBA_NODE),
    None,
    None,
    Some(&WORD_OBD_NODE),
    Some(&WORD_OBE_NODE),
    None,
    None,
    None,
    Some(&WORD_OBI_NODE),
    Some(&WORD_OBJ_NODE),
    None,
    Some(&WORD_OBL_NODE),
    None,
    None,
    None,
    None,
    None,
    None,
    Some(&WORD_OBS_NODE),
    Some(&WORD_OBT_NODE),
    None,
    Some(&WORD_OBV_NODE),
    None,
    None,
    None,
    None,
];

static WORD_OBV_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_OBV_CHILDREN),
    value: None,
};

pub static WORD_OBV_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ersation"),
        dictgen::InsensitiveStr::Ascii("ersations"),
        dictgen::InsensitiveStr::Ascii("ilion"),
        dictgen::InsensitiveStr::Ascii("iosuly"),
        dictgen::InsensitiveStr::Ascii("ioulsy"),
        dictgen::InsensitiveStr::Ascii("isouly"),
        dictgen::InsensitiveStr::Ascii("oius"),
        dictgen::InsensitiveStr::Ascii("oiusly"),
    ],
    values: &[
        &["observation"],
        &["observations"],
        &["oblivion"],
        &["obviously"],
        &["obviously"],
        &["obviously"],
        &["obvious"],
        &["obviously"],
    ],
    range: 4..=9,
};

static WORD_OBT_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_OBT_CHILDREN),
    value: None,
};

pub static WORD_OBT_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ainabe"),
        dictgen::InsensitiveStr::Ascii("ainabie"),
        dictgen::InsensitiveStr::Ascii("aineble"),
        dictgen::InsensitiveStr::Ascii("ainible"),
        dictgen::InsensitiveStr::Ascii("ianable"),
    ],
    values: &[
        &["obtainable"],
        &["obtainable"],
        &["obtainable"],
        &["obtainable"],
        &["obtainable"],
    ],
    range: 6..=7,
};

static WORD_OBS_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_OBS_CHILDREN),
    value: None,
};

pub static WORD_OBS_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("cruity"),
        dictgen::InsensitiveStr::Ascii("cuirty"),
        dictgen::InsensitiveStr::Ascii("ervabil"),
        dictgen::InsensitiveStr::Ascii("ervacion"),
        dictgen::InsensitiveStr::Ascii("ervaiton"),
        dictgen::InsensitiveStr::Ascii("ervare"),
        dictgen::InsensitiveStr::Ascii("ervarse"),
        dictgen::InsensitiveStr::Ascii("ervasion"),
        dictgen::InsensitiveStr::Ascii("ervating"),
        dictgen::InsensitiveStr::Ascii("ervaton"),
        dictgen::InsensitiveStr::Ascii("erveras"),
        dictgen::InsensitiveStr::Ascii("erverats"),
        dictgen::InsensitiveStr::Ascii("erverd"),
        dictgen::InsensitiveStr::Ascii("ervered"),
        dictgen::InsensitiveStr::Ascii("erveres"),
        dictgen::InsensitiveStr::Ascii("ervible"),
        dictgen::InsensitiveStr::Ascii("essie"),
        dictgen::InsensitiveStr::Ascii("essin"),
        dictgen::InsensitiveStr::Ascii("essivley"),
        dictgen::InsensitiveStr::Ascii("idain"),
        dictgen::InsensitiveStr::Ascii("sesion"),
        dictgen::InsensitiveStr::Ascii("sesive"),
        dictgen::InsensitiveStr::Ascii("sessed"),
        dictgen::InsensitiveStr::Ascii("tacal"),
        dictgen::InsensitiveStr::Ascii("tancles"),
        dictgen::InsensitiveStr::Ascii("truccion"),
        dictgen::InsensitiveStr::Ascii("truced"),
        dictgen::InsensitiveStr::Ascii("trucion"),
        dictgen::InsensitiveStr::Ascii("tructin"),
        dictgen::InsensitiveStr::Ascii("truktion"),
        dictgen::InsensitiveStr::Ascii("turction"),
        dictgen::InsensitiveStr::Ascii("ucrity"),
    ],
    values: &[
        &["obscurity"],
        &["obscurity"],
        &["observable"],
        &["observation"],
        &["observant"],
        &["observer"],
        &["observers"],
        &["observations"],
        &["observation"],
        &["observation"],
        &["observers"],
        &["observers"],
        &["observed"],
        &["observed"],
        &["observers"],
        &["observable"],
        &["obsessive"],
        &["obsession"],
        &["obsessive"],
        &["obsidian"],
        &["obsession"],
        &["obsessive"],
        &["obsessed"],
        &["obstacle"],
        &["obstacles"],
        &["obstruction"],
        &["obstructed"],
        &["obstruction"],
        &["obstruction"],
        &["obstruction"],
        &["obstruction"],
        &["obscurity"],
    ],
    range: 5..=8,
};

static WORD_OBL_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_OBL_CHILDREN),
    value: None,
};

pub static WORD_OBL_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("iberated"),
        dictgen::InsensitiveStr::Ascii("iderated"),
        dictgen::InsensitiveStr::Ascii("igerated"),
        dictgen::InsensitiveStr::Ascii("igitary"),
        dictgen::InsensitiveStr::Ascii("igitory"),
        dictgen::InsensitiveStr::Ascii("itarated"),
        dictgen::InsensitiveStr::Ascii("iteraded"),
        dictgen::InsensitiveStr::Ascii("iterared"),
        dictgen::InsensitiveStr::Ascii("itirated"),
        dictgen::InsensitiveStr::Ascii("itorated"),
        dictgen::InsensitiveStr::Ascii("iverated"),
    ],
    values: &[
        &["obliterated"],
        &["obliterated"],
        &["obliterated"],
        &["obligatory"],
        &["obligatory"],
        &["obliterated"],
        &["obliterated"],
        &["obliterated"],
        &["obliterated"],
        &["obliterated"],
        &["obliterated"],
    ],
    range: 7..=8,
};

static WORD_OBJ_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_OBJ_CHILDREN),
    value: None,
};

pub static WORD_OBJ_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ecitves"),
        dictgen::InsensitiveStr::Ascii("ectificaiton"),
        dictgen::InsensitiveStr::Ascii("ectificaton"),
        dictgen::InsensitiveStr::Ascii("ectificiation"),
        dictgen::InsensitiveStr::Ascii("ectivas"),
        dictgen::InsensitiveStr::Ascii("ectivelly"),
        dictgen::InsensitiveStr::Ascii("ectivety"),
        dictgen::InsensitiveStr::Ascii("ectivication"),
        dictgen::InsensitiveStr::Ascii("ectivify"),
        dictgen::InsensitiveStr::Ascii("ectivily"),
        dictgen::InsensitiveStr::Ascii("ectiviser"),
        dictgen::InsensitiveStr::Ascii("ectivitiy"),
        dictgen::InsensitiveStr::Ascii("ectivley"),
        dictgen::InsensitiveStr::Ascii("ectivly"),
        dictgen::InsensitiveStr::Ascii("ectivs"),
        dictgen::InsensitiveStr::Ascii("ectivst"),
        dictgen::InsensitiveStr::Ascii("ectivty"),
        dictgen::InsensitiveStr::Ascii("ectivy"),
        dictgen::InsensitiveStr::Ascii("ektives"),
    ],
    values: &[
        &["objectives"],
        &["objectification"],
        &["objectification"],
        &["objectification"],
        &["objectives"],
        &["objectively"],
        &["objectivity"],
        &["objectification"],
        &["objectivity"],
        &["objectivity"],
        &["objectives"],
        &["objectivity"],
        &["objectively"],
        &["objectively"],
        &["objectives"],
        &["objectives"],
        &["objectivity"],
        &["objectivity"],
        &["objectives"],
    ],
    range: 6..=13,
};

static WORD_OBI_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_OBI_CHILDREN),
    value: None,
};

pub static WORD_OBI_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("edence"),
        dictgen::InsensitiveStr::Ascii("lgatory"),
        dictgen::InsensitiveStr::Ascii("lterated"),
        dictgen::InsensitiveStr::Ascii("lvion"),
        dictgen::InsensitiveStr::Ascii("sdian"),
        dictgen::InsensitiveStr::Ascii("vous"),
        dictgen::InsensitiveStr::Ascii("vously"),
    ],
    values: &[
        &["obedience"],
        &["obligatory"],
        &["obliterated"],
        &["oblivion"],
        &["obsidian"],
        &["obvious"],
        &["obviously"],
    ],
    range: 4..=8,
};

static WORD_OBE_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_OBE_CHILDREN),
    value: None,
};

pub static WORD_OBE_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("diance"),
        dictgen::InsensitiveStr::Ascii("diant"),
        dictgen::InsensitiveStr::Ascii("idence"),
        dictgen::InsensitiveStr::Ascii("jctives"),
        dictgen::InsensitiveStr::Ascii("rsvant"),
        dictgen::InsensitiveStr::Ascii("rsvation"),
        dictgen::InsensitiveStr::Ascii("rsvations"),
        dictgen::InsensitiveStr::Ascii("rsvers"),
        dictgen::InsensitiveStr::Ascii("ssion"),
        dictgen::InsensitiveStr::Ascii("sssion"),
    ],
    values: &[
        &["obedience"],
        &["obedient"],
        &["obedience"],
        &["objectives"],
        &["observant"],
        &["observation"],
        &["observations"],
        &["observers"],
        &["obsession"],
        &["obsession"],
    ],
    range: 5..=9,
};

static WORD_OBD_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_OBD_CHILDREN),
    value: None,
};

pub static WORD_OBD_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("isian")],
    values: &[&["obsidian"]],
    range: 5..=5,
};

static WORD_OBA_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_OBA_CHILDREN),
    value: None,
};

pub static WORD_OBA_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("mination"),
        dictgen::InsensitiveStr::Ascii("tinable"),
    ],
    values: &[&["abomination"], &["obtainable"]],
    range: 7..=8,
};

static WORD_OA_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_OA_CHILDREN),
    value: None,
};

pub static WORD_OA_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("rcles")],
    values: &[&["oracles"]],
    range: 5..=5,
};

static WORD_N_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_N_CHILDREN),
    value: None,
};

static WORD_N_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    Some(&WORD_NA_NODE),
    None,
    None,
    None,
    Some(&WORD_NE_NODE),
    None,
    None,
    None,
    Some(&WORD_NI_NODE),
    None,
    Some(&WORD_NK_NODE),
    None,
    Some(&WORD_NM_NODE),
    None,
    Some(&WORD_NO_NODE),
    None,
    None,
    Some(&WORD_NR_NODE),
    None,
    Some(&WORD_NT_NODE),
    Some(&WORD_NU_NODE),
    None,
    None,
    None,
    None,
    None,
];

static WORD_NU_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_NU_CHILDREN),
    value: None,
};

pub static WORD_NU_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("aghty"),
        dictgen::InsensitiveStr::Ascii("atilus"),
        dictgen::InsensitiveStr::Ascii("bmers"),
        dictgen::InsensitiveStr::Ascii("celar"),
        dictgen::InsensitiveStr::Ascii("celus"),
        dictgen::InsensitiveStr::Ascii("clean"),
        dictgen::InsensitiveStr::Ascii("clues"),
        dictgen::InsensitiveStr::Ascii("cular"),
        dictgen::InsensitiveStr::Ascii("culear"),
        dictgen::InsensitiveStr::Ascii("erological"),
        dictgen::InsensitiveStr::Ascii("erons"),
        dictgen::InsensitiveStr::Ascii("eroscience"),
        dictgen::InsensitiveStr::Ascii("etered"),
        dictgen::InsensitiveStr::Ascii("etral"),
        dictgen::InsensitiveStr::Ascii("etrality"),
        dictgen::InsensitiveStr::Ascii("etron"),
        dictgen::InsensitiveStr::Ascii("isanse"),
        dictgen::InsensitiveStr::Ascii("lcear"),
        dictgen::InsensitiveStr::Ascii("llabour"),
        dictgen::InsensitiveStr::Ascii("llfiy"),
        dictgen::InsensitiveStr::Ascii("llifiy"),
        dictgen::InsensitiveStr::Ascii("mberous"),
        dictgen::InsensitiveStr::Ascii("mercial"),
        dictgen::InsensitiveStr::Ascii("mericable"),
        dictgen::InsensitiveStr::Ascii("merious"),
        dictgen::InsensitiveStr::Ascii("remburg"),
        dictgen::InsensitiveStr::Ascii("rtient"),
        dictgen::InsensitiveStr::Ascii("rtients"),
        dictgen::InsensitiveStr::Ascii("rtitional"),
        dictgen::InsensitiveStr::Ascii("saince"),
        dictgen::InsensitiveStr::Ascii("sance"),
        dictgen::InsensitiveStr::Ascii("siance"),
        dictgen::InsensitiveStr::Ascii("tirent"),
        dictgen::InsensitiveStr::Ascii("tirents"),
        dictgen::InsensitiveStr::Ascii("treints"),
        dictgen::InsensitiveStr::Ascii("tricional"),
        dictgen::InsensitiveStr::Ascii("tricious"),
        dictgen::InsensitiveStr::Ascii("triens"),
        dictgen::InsensitiveStr::Ascii("trientes"),
        dictgen::InsensitiveStr::Ascii("triet"),
        dictgen::InsensitiveStr::Ascii("tritent"),
        dictgen::InsensitiveStr::Ascii("tritents"),
        dictgen::InsensitiveStr::Ascii("tritian"),
        dictgen::InsensitiveStr::Ascii("tritinal"),
        dictgen::InsensitiveStr::Ascii("tritionnal"),
        dictgen::InsensitiveStr::Ascii("tritios"),
        dictgen::InsensitiveStr::Ascii("tritiuos"),
        dictgen::InsensitiveStr::Ascii("tritivos"),
        dictgen::InsensitiveStr::Ascii("trituous"),
        dictgen::InsensitiveStr::Ascii("trutional"),
        dictgen::InsensitiveStr::Ascii("trutious"),
        dictgen::InsensitiveStr::Ascii("turing"),
    ],
    values: &[
        &["naughty"],
        &["nautilus"],
        &["numbers"],
        &["nuclear"],
        &["nucleus"],
        &["unclean"],
        &["nucleus"],
        &["nuclear"],
        &["nuclear"],
        &["neurological"],
        &["neurons"],
        &["neuroscience"],
        &["neutered"],
        &["neutral"],
        &["neutrality"],
        &["neutron"],
        &["nuisance"],
        &["nuclear"],
        &["nullarbor"],
        &["nullify"],
        &["nullify"],
        &["numerous"],
        &["numerical"],
        &["numerical"],
        &["numerous"],
        &["nuremberg"],
        &["nutrient"],
        &["nutrients"],
        &["nutritional"],
        &["nuisance"],
        &["nuisance"],
        &["nuisance"],
        &["nutrient"],
        &["nutrients"],
        &["nutrients"],
        &["nutritional"],
        &["nutritious"],
        &["nutrients"],
        &["nutrients"],
        &["nutrient"],
        &["nutrient"],
        &["nutrients"],
        &["nutritional"],
        &["nutritional"],
        &["nutritional"],
        &["nutritious"],
        &["nutritious"],
        &["nutritious"],
        &["nutritious"],
        &["nutritional"],
        &["nutritious"],
        &["nurturing"],
    ],
    range: 5..=10,
};

static WORD_NT_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_NT_CHILDREN),
    value: None,
};

pub static WORD_NT_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("o")],
    values: &[&["not"]],
    range: 1..=1,
};

static WORD_NR_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_NR_CHILDREN),
    value: None,
};

pub static WORD_NR_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ivana"),
        dictgen::InsensitiveStr::Ascii("omandy"),
    ],
    values: &[&["nirvana"], &["normandy"]],
    range: 5..=6,
};

static WORD_NO_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_NO_CHILDREN),
    value: None,
};

static WORD_NO_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    None,
    None,
    Some(&WORD_NOC_NODE),
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    Some(&WORD_NOM_NODE),
    Some(&WORD_NON_NODE),
    None,
    None,
    None,
    Some(&WORD_NOR_NODE),
    Some(&WORD_NOS_NODE),
    Some(&WORD_NOT_NODE),
    None,
    Some(&WORD_NOV_NODE),
    Some(&WORD_NOW_NODE),
    None,
    None,
    None,
];

static WORD_NOW_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_NOW_CHILDREN),
    value: None,
};

pub static WORD_NOW_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("days"),
        dictgen::InsensitiveStr::Ascii("e"),
    ],
    values: &[&["nowadays"], &["now"]],
    range: 1..=4,
};

static WORD_NOV_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_NOV_CHILDREN),
    value: None,
};

pub static WORD_NOV_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("eau"),
        dictgen::InsensitiveStr::Ascii("embeard"),
        dictgen::InsensitiveStr::Ascii("ermber"),
        dictgen::InsensitiveStr::Ascii("meber"),
    ],
    values: &[&["nouveau"], &["november"], &["november"], &["november"]],
    range: 3..=7,
};

static WORD_NOT_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_NOT_CHILDREN),
    value: None,
};

pub static WORD_NOT_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("abley"),
        dictgen::InsensitiveStr::Ascii("ablly"),
        dictgen::InsensitiveStr::Ascii("acible"),
        dictgen::InsensitiveStr::Ascii("ario"),
        dictgen::InsensitiveStr::Ascii("ciable"),
        dictgen::InsensitiveStr::Ascii("eable"),
        dictgen::InsensitiveStr::Ascii("eably"),
        dictgen::InsensitiveStr::Ascii("ebok"),
        dictgen::InsensitiveStr::Ascii("eboook"),
        dictgen::InsensitiveStr::Ascii("eriety"),
        dictgen::InsensitiveStr::Ascii("eworhty"),
        dictgen::InsensitiveStr::Ascii("eworthly"),
        dictgen::InsensitiveStr::Ascii("eworty"),
        dictgen::InsensitiveStr::Ascii("h"),
        dictgen::InsensitiveStr::Ascii("hern"),
        dictgen::InsensitiveStr::Ascii("hingess"),
        dictgen::InsensitiveStr::Ascii("hingsness"),
        dictgen::InsensitiveStr::Ascii("icabe"),
        dictgen::InsensitiveStr::Ascii("icabely"),
        dictgen::InsensitiveStr::Ascii("icable"),
        dictgen::InsensitiveStr::Ascii("icabley"),
        dictgen::InsensitiveStr::Ascii("icably"),
        dictgen::InsensitiveStr::Ascii("icalbe"),
        dictgen::InsensitiveStr::Ascii("iceablely"),
        dictgen::InsensitiveStr::Ascii("iceabley"),
        dictgen::InsensitiveStr::Ascii("iceing"),
        dictgen::InsensitiveStr::Ascii("iciably"),
        dictgen::InsensitiveStr::Ascii("icible"),
        dictgen::InsensitiveStr::Ascii("ificacion"),
        dictgen::InsensitiveStr::Ascii("ificaiton"),
        dictgen::InsensitiveStr::Ascii("ificaitons"),
        dictgen::InsensitiveStr::Ascii("ificaton"),
        dictgen::InsensitiveStr::Ascii("ificatons"),
        dictgen::InsensitiveStr::Ascii("orios"),
        dictgen::InsensitiveStr::Ascii("oriosly"),
        dictgen::InsensitiveStr::Ascii("oriuosly"),
        dictgen::InsensitiveStr::Ascii("oroius"),
        dictgen::InsensitiveStr::Ascii("whithstanding"),
    ],
    values: &[
        &["notably"],
        &["notably"],
        &["noticable"],
        &["ontario"],
        &["noticable"],
        &["notable"],
        &["notably"],
        &["notebook"],
        &["notebook"],
        &["notoriety"],
        &["noteworthy"],
        &["noteworthy"],
        &["noteworthy"],
        &["north"],
        &["northern"],
        &["nothingness"],
        &["nothingness"],
        &["noticable"],
        &["noticeably"],
        &["noticeable"],
        &["noticeably"],
        &["noticeably"],
        &["noticable"],
        &["noticeably"],
        &["noticeably"],
        &["noticing"],
        &["noticeably"],
        &["noticeable"],
        &["notification"],
        &["notification"],
        &["notifications"],
        &["notification"],
        &["notifications"],
        &["notorious"],
        &["notoriously"],
        &["notoriously"],
        &["notorious"],
        &["notwithstanding"],
    ],
    range: 1..=13,
};

static WORD_NOS_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_NOS_CHILDREN),
    value: None,
};

pub static WORD_NOS_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("taglia"),
        dictgen::InsensitiveStr::Ascii("taglic"),
        dictgen::InsensitiveStr::Ascii("talga"),
        dictgen::InsensitiveStr::Ascii("talgica"),
        dictgen::InsensitiveStr::Ascii("talgija"),
        dictgen::InsensitiveStr::Ascii("talgisch"),
        dictgen::InsensitiveStr::Ascii("taliga"),
        dictgen::InsensitiveStr::Ascii("taligc"),
        dictgen::InsensitiveStr::Ascii("tirls"),
        dictgen::InsensitiveStr::Ascii("tlagia"),
        dictgen::InsensitiveStr::Ascii("tlagic"),
        dictgen::InsensitiveStr::Ascii("triles"),
        dictgen::InsensitiveStr::Ascii("trills"),
        dictgen::InsensitiveStr::Ascii("tris"),
    ],
    values: &[
        &["nostalgia"],
        &["nostalgic"],
        &["nostalgia"],
        &["nostalgia"],
        &["nostalgia"],
        &["nostalgic"],
        &["nostalgia"],
        &["nostalgic"],
        &["nostrils"],
        &["nostalgia"],
        &["nostalgic"],
        &["nostrils"],
        &["nostrils"],
        &["nostrils"],
    ],
    range: 4..=8,
};

static WORD_NOR_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_NOR_CHILDREN),
    value: None,
};

pub static WORD_NOR_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("amlly"),
        dictgen::InsensitiveStr::Ascii("amls"),
        dictgen::InsensitiveStr::Ascii("hern"),
        dictgen::InsensitiveStr::Ascii("hteast"),
        dictgen::InsensitiveStr::Ascii("htern"),
        dictgen::InsensitiveStr::Ascii("htwest"),
        dictgen::InsensitiveStr::Ascii("htwestern"),
        dictgen::InsensitiveStr::Ascii("malis"),
        dictgen::InsensitiveStr::Ascii("mallized"),
        dictgen::InsensitiveStr::Ascii("malls"),
        dictgen::InsensitiveStr::Ascii("malos"),
        dictgen::InsensitiveStr::Ascii("maly"),
        dictgen::InsensitiveStr::Ascii("manday"),
        dictgen::InsensitiveStr::Ascii("many"),
        dictgen::InsensitiveStr::Ascii("theat"),
        dictgen::InsensitiveStr::Ascii("then"),
        dictgen::InsensitiveStr::Ascii("thereastern"),
        dictgen::InsensitiveStr::Ascii("theren"),
        dictgen::InsensitiveStr::Ascii("therend"),
        dictgen::InsensitiveStr::Ascii("thren"),
        dictgen::InsensitiveStr::Ascii("thwesten"),
        dictgen::InsensitiveStr::Ascii("thwestener"),
        dictgen::InsensitiveStr::Ascii("thwet"),
        dictgen::InsensitiveStr::Ascii("wegain"),
        dictgen::InsensitiveStr::Ascii("wegin"),
        dictgen::InsensitiveStr::Ascii("wiegan"),
    ],
    values: &[
        &["normally"],
        &["normals"],
        &["northern"],
        &["northeast"],
        &["northern"],
        &["northwest"],
        &["northwestern"],
        &["normals"],
        &["normalized"],
        &["normals"],
        &["normals"],
        &["normally"],
        &["normandy"],
        &["normandy"],
        &["northeast"],
        &["northern"],
        &["northeastern"],
        &["northern"],
        &["northern"],
        &["northern"],
        &["northwestern"],
        &["northwestern"],
        &["northwest"],
        &["norwegian"],
        &["norwegian"],
        &["norwegian"],
    ],
    range: 4..=11,
};

static WORD_NON_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_NON_CHILDREN),
    value: None,
};

pub static WORD_NON_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("combatents"),
        dictgen::InsensitiveStr::Ascii("inital"),
        dictgen::InsensitiveStr::Ascii("initalized"),
        dictgen::InsensitiveStr::Ascii("sence"),
        dictgen::InsensitiveStr::Ascii("sencial"),
        dictgen::InsensitiveStr::Ascii("sencical"),
        dictgen::InsensitiveStr::Ascii("sene"),
        dictgen::InsensitiveStr::Ascii("senscial"),
        dictgen::InsensitiveStr::Ascii("sensicle"),
        dictgen::InsensitiveStr::Ascii("sesne"),
        dictgen::InsensitiveStr::Ascii("theless"),
    ],
    values: &[
        &["noncombatants"],
        &["noninitial"],
        &["noninitialized"],
        &["nonsense"],
        &["nonsensical"],
        &["nonsensical"],
        &["nonsense"],
        &["nonsensical"],
        &["nonsensical"],
        &["nonsense"],
        &["nonetheless"],
    ],
    range: 4..=10,
};

static WORD_NOM_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_NOM_CHILDREN),
    value: None,
};

pub static WORD_NOM_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("inacion"),
        dictgen::InsensitiveStr::Ascii("inae"),
        dictgen::InsensitiveStr::Ascii("inatie"),
        dictgen::InsensitiveStr::Ascii("inatin"),
        dictgen::InsensitiveStr::Ascii("inatino"),
        dictgen::InsensitiveStr::Ascii("inativo"),
        dictgen::InsensitiveStr::Ascii("inato"),
        dictgen::InsensitiveStr::Ascii("inatons"),
        dictgen::InsensitiveStr::Ascii("inet"),
    ],
    values: &[
        &["nomination"],
        &["nominate"],
        &["nominate"],
        &["nomination"],
        &["nominations"],
        &["nomination"],
        &["nomination"],
        &["nominations"],
        &["nominate"],
    ],
    range: 4..=7,
};

static WORD_NOC_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_NOC_CHILDREN),
    value: None,
};

pub static WORD_NOC_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("trune"),
        dictgen::InsensitiveStr::Ascii("tunre"),
        dictgen::InsensitiveStr::Ascii("ture"),
        dictgen::InsensitiveStr::Ascii("turen"),
    ],
    values: &[&["nocturne"], &["nocturne"], &["nocturne"], &["nocturne"]],
    range: 4..=5,
};

static WORD_NM_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_NM_CHILDREN),
    value: None,
};

pub static WORD_NM_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("ae")],
    values: &[&["name"]],
    range: 2..=2,
};

static WORD_NK_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_NK_CHILDREN),
    value: None,
};

pub static WORD_NK_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ow"),
        dictgen::InsensitiveStr::Ascii("wo"),
    ],
    values: &[&["know"], &["know"]],
    range: 2..=2,
};

static WORD_NI_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_NI_CHILDREN),
    value: None,
};

pub static WORD_NI_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ckanme"),
        dictgen::InsensitiveStr::Ascii("ckmane"),
        dictgen::InsensitiveStr::Ascii("eghbor"),
        dictgen::InsensitiveStr::Ascii("eghborhood"),
        dictgen::InsensitiveStr::Ascii("eghborhoods"),
        dictgen::InsensitiveStr::Ascii("eghboring"),
        dictgen::InsensitiveStr::Ascii("eghbour"),
        dictgen::InsensitiveStr::Ascii("eghbourhood"),
        dictgen::InsensitiveStr::Ascii("eghbourhoods"),
        dictgen::InsensitiveStr::Ascii("eghbours"),
        dictgen::InsensitiveStr::Ascii("ghlty"),
        dictgen::InsensitiveStr::Ascii("ghtime"),
        dictgen::InsensitiveStr::Ascii("ghtlcub"),
        dictgen::InsensitiveStr::Ascii("ghtley"),
        dictgen::InsensitiveStr::Ascii("ghtlie"),
        dictgen::InsensitiveStr::Ascii("ghtmarket"),
        dictgen::InsensitiveStr::Ascii("ghtmates"),
        dictgen::InsensitiveStr::Ascii("ghtmears"),
        dictgen::InsensitiveStr::Ascii("ghtmeres"),
        dictgen::InsensitiveStr::Ascii("gthclub"),
        dictgen::InsensitiveStr::Ascii("gthlife"),
        dictgen::InsensitiveStr::Ascii("gthly"),
        dictgen::InsensitiveStr::Ascii("gthmare"),
        dictgen::InsensitiveStr::Ascii("gthmares"),
        dictgen::InsensitiveStr::Ascii("hilim"),
        dictgen::InsensitiveStr::Ascii("hilisim"),
        dictgen::InsensitiveStr::Ascii("hilsim"),
        dictgen::InsensitiveStr::Ascii("lihism"),
        dictgen::InsensitiveStr::Ascii("neth"),
        dictgen::InsensitiveStr::Ascii("nteenth"),
        dictgen::InsensitiveStr::Ascii("nties"),
        dictgen::InsensitiveStr::Ascii("nty"),
        dictgen::InsensitiveStr::Ascii("pticking"),
        dictgen::InsensitiveStr::Ascii("rtogen"),
        dictgen::InsensitiveStr::Ascii("rvanna"),
        dictgen::InsensitiveStr::Ascii("torgen"),
        dictgen::InsensitiveStr::Ascii("tpciking"),
        dictgen::InsensitiveStr::Ascii("usance"),
        dictgen::InsensitiveStr::Ascii("verse"),
    ],
    values: &[
        &["nickname"],
        &["nickname"],
        &["neighbor"],
        &["neighborhood"],
        &["neighborhoods"],
        &["neighboring"],
        &["neighbour"],
        &["neighbourhood"],
        &["neighbourhood"],
        &["neighbours"],
        &["nightly"],
        &["nighttime"],
        &["nightclub"],
        &["nightly"],
        &["nightlife"],
        &["nightmare"],
        &["nightmares"],
        &["nightmares"],
        &["nightmares"],
        &["nightclub"],
        &["nightlife"],
        &["nightly"],
        &["nightmare"],
        &["nightmares"],
        &["nihilism"],
        &["nihilism"],
        &["nihilism"],
        &["nihilism"],
        &["ninth"],
        &["nineteenth"],
        &["1990s"],
        &["ninety"],
        &["nitpicking"],
        &["nitrogen"],
        &["nirvana"],
        &["nitrogen"],
        &["nitpicking"],
        &["nuisance"],
        &["inverse"],
    ],
    range: 3..=12,
};

static WORD_NE_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_NE_CHILDREN),
    value: None,
};

static WORD_NE_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    None,
    None,
    Some(&WORD_NEC_NODE),
    Some(&WORD_NED_NODE),
    Some(&WORD_NEE_NODE),
    Some(&WORD_NEF_NODE),
    Some(&WORD_NEG_NODE),
    None,
    Some(&WORD_NEI_NODE),
    None,
    None,
    None,
    None,
    None,
    Some(&WORD_NEO_NODE),
    None,
    None,
    Some(&WORD_NER_NODE),
    Some(&WORD_NES_NODE),
    Some(&WORD_NET_NODE),
    Some(&WORD_NEU_NODE),
    Some(&WORD_NEV_NODE),
    Some(&WORD_NEW_NODE),
    None,
    None,
    None,
];

static WORD_NEW_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_NEW_CHILDREN),
    value: None,
};

pub static WORD_NEW_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("caslte"),
        dictgen::InsensitiveStr::Ascii("caste"),
        dictgen::InsensitiveStr::Ascii("castel"),
        dictgen::InsensitiveStr::Ascii("letters"),
        dictgen::InsensitiveStr::Ascii("lsetter"),
        dictgen::InsensitiveStr::Ascii("settler"),
        dictgen::InsensitiveStr::Ascii("slatter"),
        dictgen::InsensitiveStr::Ascii("spapaers"),
        dictgen::InsensitiveStr::Ascii("spappers"),
    ],
    values: &[
        &["newcastle"],
        &["newcastle"],
        &["newcastle"],
        &["newsletters"],
        &["newsletter"],
        &["newsletter"],
        &["newsletter"],
        &["newspapers"],
        &["newspapers"],
    ],
    range: 5..=8,
};

static WORD_NEV_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_NEV_CHILDREN),
    value: None,
};

pub static WORD_NEV_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("erhteless"),
        dictgen::InsensitiveStr::Ascii("erthelss"),
        dictgen::InsensitiveStr::Ascii("erthless"),
    ],
    values: &[&["nevertheless"], &["nevertheless"], &["nevertheless"]],
    range: 8..=9,
};

static WORD_NEU_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_NEU_CHILDREN),
    value: None,
};

pub static WORD_NEU_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("orscience"),
        dictgen::InsensitiveStr::Ascii("ralogical"),
        dictgen::InsensitiveStr::Ascii("roligical"),
        dictgen::InsensitiveStr::Ascii("rologia"),
        dictgen::InsensitiveStr::Ascii("rologial"),
        dictgen::InsensitiveStr::Ascii("ronas"),
        dictgen::InsensitiveStr::Ascii("rosceince"),
        dictgen::InsensitiveStr::Ascii("rosciene"),
        dictgen::InsensitiveStr::Ascii("roscienze"),
        dictgen::InsensitiveStr::Ascii("rosicence"),
        dictgen::InsensitiveStr::Ascii("rton"),
        dictgen::InsensitiveStr::Ascii("terd"),
        dictgen::InsensitiveStr::Ascii("traal"),
        dictgen::InsensitiveStr::Ascii("trailty"),
        dictgen::InsensitiveStr::Ascii("trallity"),
        dictgen::InsensitiveStr::Ascii("tralt"),
        dictgen::InsensitiveStr::Ascii("traly"),
    ],
    values: &[
        &["neuroscience"],
        &["neurological"],
        &["neurological"],
        &["neurological"],
        &["neurological"],
        &["neurons"],
        &["neuroscience"],
        &["neuroscience"],
        &["neuroscience"],
        &["neuroscience"],
        &["neutron"],
        &["neutered"],
        &["neutral"],
        &["neutrality"],
        &["neutrality"],
        &["neutrality"],
        &["neutrality"],
    ],
    range: 4..=9,
};

static WORD_NET_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_NET_CHILDREN),
    value: None,
};

pub static WORD_NET_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("boook"),
        dictgen::InsensitiveStr::Ascii("ocde"),
        dictgen::InsensitiveStr::Ascii("owrk"),
        dictgen::InsensitiveStr::Ascii("owrking"),
        dictgen::InsensitiveStr::Ascii("ropolitan"),
        dictgen::InsensitiveStr::Ascii("ruality"),
        dictgen::InsensitiveStr::Ascii("ural"),
        dictgen::InsensitiveStr::Ascii("urality"),
        dictgen::InsensitiveStr::Ascii("uron"),
        dictgen::InsensitiveStr::Ascii("wrok"),
        dictgen::InsensitiveStr::Ascii("wroking"),
    ],
    values: &[
        &["netbook"],
        &["netcode"],
        &["network"],
        &["networking"],
        &["metropolitan"],
        &["neutrality"],
        &["neutral"],
        &["neutrality"],
        &["neutron"],
        &["network"],
        &["networking"],
    ],
    range: 4..=9,
};

static WORD_NES_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_NES_CHILDREN),
    value: None,
};

pub static WORD_NES_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("lave"),
        dictgen::InsensitiveStr::Ascii("sasarily"),
        dictgen::InsensitiveStr::Ascii("secary"),
        dictgen::InsensitiveStr::Ascii("tin"),
    ],
    values: &[&["enslave"], &["necessarily"], &["necessary"], &["nesting"]],
    range: 3..=8,
};

static WORD_NER_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_NER_CHILDREN),
    value: None,
};

pub static WORD_NER_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("comancer"),
        dictgen::InsensitiveStr::Ascii("uological"),
        dictgen::InsensitiveStr::Ascii("uons"),
        dictgen::InsensitiveStr::Ascii("uoscience"),
    ],
    values: &[
        &["necromancer"],
        &["neurological"],
        &["neurons"],
        &["neuroscience"],
    ],
    range: 4..=9,
};

static WORD_NEO_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_NEO_CHILDREN),
    value: None,
};

pub static WORD_NEO_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("litic"),
        dictgen::InsensitiveStr::Ascii("roscience"),
    ],
    values: &[&["neolithic"], &["neuroscience"]],
    range: 5..=9,
};

static WORD_NEI_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_NEI_CHILDREN),
    value: None,
};

pub static WORD_NEI_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ce"),
        dictgen::InsensitiveStr::Ascii("gbhorhood"),
        dictgen::InsensitiveStr::Ascii("gbhour"),
        dictgen::InsensitiveStr::Ascii("gbhourhood"),
        dictgen::InsensitiveStr::Ascii("gbhours"),
        dictgen::InsensitiveStr::Ascii("gborhood"),
        dictgen::InsensitiveStr::Ascii("gbour"),
        dictgen::InsensitiveStr::Ascii("gbourhood"),
        dictgen::InsensitiveStr::Ascii("gbouring"),
        dictgen::InsensitiveStr::Ascii("gbours"),
        dictgen::InsensitiveStr::Ascii("ghbhors"),
        dictgen::InsensitiveStr::Ascii("ghboor"),
        dictgen::InsensitiveStr::Ascii("ghboorhod"),
        dictgen::InsensitiveStr::Ascii("ghboorhoud"),
        dictgen::InsensitiveStr::Ascii("ghbords"),
        dictgen::InsensitiveStr::Ascii("ghborehood"),
        dictgen::InsensitiveStr::Ascii("ghbores"),
        dictgen::InsensitiveStr::Ascii("ghborhing"),
        dictgen::InsensitiveStr::Ascii("ghborhod"),
        dictgen::InsensitiveStr::Ascii("ghborhods"),
        dictgen::InsensitiveStr::Ascii("ghborhoood"),
        dictgen::InsensitiveStr::Ascii("ghbourbood"),
        dictgen::InsensitiveStr::Ascii("ghbourghs"),
        dictgen::InsensitiveStr::Ascii("ghbourgood"),
        dictgen::InsensitiveStr::Ascii("ghbourgs"),
        dictgen::InsensitiveStr::Ascii("ghbourhod"),
        dictgen::InsensitiveStr::Ascii("ghbourhoood"),
        dictgen::InsensitiveStr::Ascii("ghbourhoud"),
        dictgen::InsensitiveStr::Ascii("ghbourood"),
        dictgen::InsensitiveStr::Ascii("ghbrohood"),
        dictgen::InsensitiveStr::Ascii("ghourhood"),
        dictgen::InsensitiveStr::Ascii("ghourhoods"),
        dictgen::InsensitiveStr::Ascii("ghouring"),
    ],
    values: &[
        &["niece"],
        &["neighborhoods"],
        &["neighbour"],
        &["neighbourhood"],
        &["neighbours"],
        &["neighborhood"],
        &["neighbour"],
        &["neighbourhood"],
        &["neighbouring"],
        &["neighbours"],
        &["neighbors"],
        &["neighbor"],
        &["neighbourhood"],
        &["neighbourhood"],
        &["neighbors"],
        &["neighborhood"],
        &["neighbors"],
        &["neighboring"],
        &["neighborhood"],
        &["neighborhoods"],
        &["neighborhoods"],
        &["neighbourhood"],
        &["neighbours"],
        &["neighbourhood"],
        &["neighbours"],
        &["neighbourhood"],
        &["neighbourhood"],
        &["neighbourhood"],
        &["neighbourhood"],
        &["neighborhoods"],
        &["neighbourhood"],
        &["neighbourhoods"],
        &["neighbouring"],
    ],
    range: 2..=11,
};

static WORD_NEG_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_NEG_CHILDREN),
    value: None,
};

pub static WORD_NEG_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ativaty"),
        dictgen::InsensitiveStr::Ascii("ativeity"),
        dictgen::InsensitiveStr::Ascii("ativelly"),
        dictgen::InsensitiveStr::Ascii("ativitiy"),
        dictgen::InsensitiveStr::Ascii("ativley"),
        dictgen::InsensitiveStr::Ascii("ativy"),
        dictgen::InsensitiveStr::Ascii("elcting"),
        dictgen::InsensitiveStr::Ascii("ilgence"),
        dictgen::InsensitiveStr::Ascii("iotate"),
        dictgen::InsensitiveStr::Ascii("iotated"),
        dictgen::InsensitiveStr::Ascii("iotating"),
        dictgen::InsensitiveStr::Ascii("lacting"),
        dictgen::InsensitiveStr::Ascii("lagence"),
        dictgen::InsensitiveStr::Ascii("lectn"),
        dictgen::InsensitiveStr::Ascii("legance"),
        dictgen::InsensitiveStr::Ascii("legible"),
        dictgen::InsensitiveStr::Ascii("legting"),
        dictgen::InsensitiveStr::Ascii("libible"),
        dictgen::InsensitiveStr::Ascii("lible"),
        dictgen::InsensitiveStr::Ascii("licence"),
        dictgen::InsensitiveStr::Ascii("licible"),
        dictgen::InsensitiveStr::Ascii("licting"),
        dictgen::InsensitiveStr::Ascii("ligable"),
        dictgen::InsensitiveStr::Ascii("ligance"),
        dictgen::InsensitiveStr::Ascii("ligeble"),
        dictgen::InsensitiveStr::Ascii("ligente"),
        dictgen::InsensitiveStr::Ascii("ligiable"),
        dictgen::InsensitiveStr::Ascii("ociate"),
        dictgen::InsensitiveStr::Ascii("ociated"),
        dictgen::InsensitiveStr::Ascii("ociating"),
        dictgen::InsensitiveStr::Ascii("ociation"),
        dictgen::InsensitiveStr::Ascii("ociations"),
        dictgen::InsensitiveStr::Ascii("ogiated"),
        dictgen::InsensitiveStr::Ascii("oitate"),
        dictgen::InsensitiveStr::Ascii("oitated"),
        dictgen::InsensitiveStr::Ascii("oitating"),
        dictgen::InsensitiveStr::Ascii("oitation"),
        dictgen::InsensitiveStr::Ascii("oitations"),
        dictgen::InsensitiveStr::Ascii("otaited"),
        dictgen::InsensitiveStr::Ascii("otation"),
        dictgen::InsensitiveStr::Ascii("otiaion"),
        dictgen::InsensitiveStr::Ascii("otiatians"),
        dictgen::InsensitiveStr::Ascii("otiatie"),
        dictgen::InsensitiveStr::Ascii("otiatied"),
        dictgen::InsensitiveStr::Ascii("otiatiing"),
        dictgen::InsensitiveStr::Ascii("otiatin"),
        dictgen::InsensitiveStr::Ascii("otiationg"),
        dictgen::InsensitiveStr::Ascii("otiatiors"),
        dictgen::InsensitiveStr::Ascii("otiative"),
        dictgen::InsensitiveStr::Ascii("otiaton"),
        dictgen::InsensitiveStr::Ascii("otiatons"),
    ],
    values: &[
        &["negativity"],
        &["negativity"],
        &["negatively"],
        &["negativity"],
        &["negatively"],
        &["negativity"],
        &["neglecting"],
        &["negligence"],
        &["negotiate"],
        &["negotiated"],
        &["negotiating"],
        &["neglecting"],
        &["negligence"],
        &["neglecting"],
        &["negligence"],
        &["negligible"],
        &["neglecting"],
        &["negligible"],
        &["negligible"],
        &["negligence"],
        &["negligible"],
        &["neglecting"],
        &["negligible"],
        &["negligence"],
        &["negligible"],
        &["negligence"],
        &["negligible"],
        &["negotiate"],
        &["negotiated"],
        &["negotiating"],
        &["negotiation"],
        &["negotiations"],
        &["negotiated"],
        &["negotiate"],
        &["negotiated"],
        &["negotiating"],
        &["negotiation"],
        &["negotiations"],
        &["negotiated"],
        &["negotiation"],
        &["negotiation"],
        &["negotiations"],
        &["negotiated"],
        &["negotiate"],
        &["negotiating"],
        &["negotiations"],
        &["negotiating"],
        &["negotiations"],
        &["negotiate"],
        &["negotiation"],
        &["negotiations"],
    ],
    range: 5..=9,
};

static WORD_NEF_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_NEF_CHILDREN),
    value: None,
};

pub static WORD_NEF_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("arios")],
    values: &[&["nefarious"]],
    range: 5..=5,
};

static WORD_NEE_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_NEE_CHILDREN),
    value: None,
};

pub static WORD_NEE_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("dels"),
        dictgen::InsensitiveStr::Ascii("dlees"),
        dictgen::InsensitiveStr::Ascii("dleslly"),
        dictgen::InsensitiveStr::Ascii("dlessley"),
        dictgen::InsensitiveStr::Ascii("dlessy"),
    ],
    values: &[
        &["needles"],
        &["needles"],
        &["needlessly"],
        &["needlessly"],
        &["needlessly"],
    ],
    range: 4..=8,
};

static WORD_NED_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_NED_CHILDREN),
    value: None,
};

pub static WORD_NED_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("lessly")],
    values: &[&["endlessly"]],
    range: 6..=6,
};

static WORD_NEC_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_NEC_CHILDREN),
    value: None,
};

pub static WORD_NEC_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("cesarily"),
        dictgen::InsensitiveStr::Ascii("cesary"),
        dictgen::InsensitiveStr::Ascii("cessarily"),
        dictgen::InsensitiveStr::Ascii("cessary"),
        dictgen::InsensitiveStr::Ascii("cessities"),
        dictgen::InsensitiveStr::Ascii("esarily"),
        dictgen::InsensitiveStr::Ascii("esary"),
        dictgen::InsensitiveStr::Ascii("essairly"),
        dictgen::InsensitiveStr::Ascii("essairy"),
        dictgen::InsensitiveStr::Ascii("essarilly"),
        dictgen::InsensitiveStr::Ascii("essarly"),
        dictgen::InsensitiveStr::Ascii("essarry"),
        dictgen::InsensitiveStr::Ascii("essaties"),
        dictgen::InsensitiveStr::Ascii("esseraly"),
        dictgen::InsensitiveStr::Ascii("esserily"),
        dictgen::InsensitiveStr::Ascii("essiate"),
        dictgen::InsensitiveStr::Ascii("essiates"),
        dictgen::InsensitiveStr::Ascii("essite"),
        dictgen::InsensitiveStr::Ascii("essites"),
        dictgen::InsensitiveStr::Ascii("essitites"),
        dictgen::InsensitiveStr::Ascii("essitive"),
        dictgen::InsensitiveStr::Ascii("kbead"),
        dictgen::InsensitiveStr::Ascii("kbearders"),
        dictgen::InsensitiveStr::Ascii("kbeardese"),
        dictgen::InsensitiveStr::Ascii("kbeardest"),
        dictgen::InsensitiveStr::Ascii("kbeardies"),
        dictgen::InsensitiveStr::Ascii("kbeardius"),
        dictgen::InsensitiveStr::Ascii("kbeardos"),
        dictgen::InsensitiveStr::Ascii("kbeardus"),
        dictgen::InsensitiveStr::Ascii("kbeared"),
        dictgen::InsensitiveStr::Ascii("kbears"),
        dictgen::InsensitiveStr::Ascii("kboards"),
        dictgen::InsensitiveStr::Ascii("kbread"),
        dictgen::InsensitiveStr::Ascii("kbreads"),
        dictgen::InsensitiveStr::Ascii("kneards"),
        dictgen::InsensitiveStr::Ascii("onstitutional"),
        dictgen::InsensitiveStr::Ascii("ormancer"),
        dictgen::InsensitiveStr::Ascii("romacer"),
        dictgen::InsensitiveStr::Ascii("romamcer"),
        dictgen::InsensitiveStr::Ascii("romaner"),
        dictgen::InsensitiveStr::Ascii("romanser"),
        dictgen::InsensitiveStr::Ascii("romencer"),
        dictgen::InsensitiveStr::Ascii("tode"),
    ],
    values: &[
        &["necessarily"],
        &["necessary"],
        &["necessarily"],
        &["necessary"],
        &["necessities"],
        &["necessarily"],
        &["necessary"],
        &["necessarily"],
        &["necessarily"],
        &["necessarily"],
        &["necessary"],
        &["necessary"],
        &["necessities"],
        &["necessarily"],
        &["necessarily"],
        &["necessitate"],
        &["necessities"],
        &["necessities"],
        &["necessities"],
        &["necessities"],
        &["necessities"],
        &["neckbeard"],
        &["neckbeards"],
        &["neckbeards"],
        &["neckbeards"],
        &["neckbeards"],
        &["neckbeards"],
        &["neckbeards"],
        &["neckbeards"],
        &["neckbeard"],
        &["neckbeards"],
        &["neckbeards"],
        &["neckbeard"],
        &["neckbeards"],
        &["neckbeards"],
        &["unconstitutional"],
        &["necromancer"],
        &["necromancer"],
        &["necromancer"],
        &["necromancer"],
        &["necromancer"],
        &["necromancer"],
        &["netcode"],
    ],
    range: 4..=13,
};

static WORD_NA_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_NA_CHILDREN),
    value: None,
};

static WORD_NA_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    None,
    None,
    Some(&WORD_NAC_NODE),
    None,
    None,
    Some(&WORD_NAF_NODE),
    Some(&WORD_NAG_NODE),
    Some(&WORD_NAH_NODE),
    Some(&WORD_NAI_NODE),
    None,
    None,
    None,
    None,
    None,
    Some(&WORD_NAO_NODE),
    Some(&WORD_NAP_NODE),
    None,
    Some(&WORD_NAR_NODE),
    Some(&WORD_NAS_NODE),
    Some(&WORD_NAT_NODE),
    Some(&WORD_NAU_NODE),
    Some(&WORD_NAV_NODE),
    None,
    None,
    None,
    Some(&WORD_NAZ_NODE),
];

static WORD_NAZ_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_NAZ_CHILDREN),
    value: None,
};

pub static WORD_NAZ_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ereth"),
        dictgen::InsensitiveStr::Ascii("ionalists"),
    ],
    values: &[&["nazareth"], &["nationalists"]],
    range: 5..=9,
};

static WORD_NAV_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_NAV_CHILDREN),
    value: None,
};

pub static WORD_NAV_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("iagte"),
        dictgen::InsensitiveStr::Ascii("iagting"),
        dictgen::InsensitiveStr::Ascii("iagtion"),
        dictgen::InsensitiveStr::Ascii("igatie"),
        dictgen::InsensitiveStr::Ascii("igatin"),
        dictgen::InsensitiveStr::Ascii("igato"),
        dictgen::InsensitiveStr::Ascii("igatore"),
    ],
    values: &[
        &["navigate"],
        &["navigating"],
        &["navigation"],
        &["navigate"],
        &["navigation"],
        &["navigation"],
        &["navigate"],
    ],
    range: 5..=7,
};

static WORD_NAU_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_NAU_CHILDREN),
    value: None,
};

pub static WORD_NAU_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("esous"),
        dictgen::InsensitiveStr::Ascii("ghtly"),
        dictgen::InsensitiveStr::Ascii("gthy"),
        dictgen::InsensitiveStr::Ascii("itlus"),
        dictgen::InsensitiveStr::Ascii("seos"),
        dictgen::InsensitiveStr::Ascii("seuos"),
        dictgen::InsensitiveStr::Ascii("tils"),
        dictgen::InsensitiveStr::Ascii("tiuls"),
        dictgen::InsensitiveStr::Ascii("tlius"),
        dictgen::InsensitiveStr::Ascii("tral"),
        dictgen::InsensitiveStr::Ascii("tres"),
        dictgen::InsensitiveStr::Ascii("tulis"),
    ],
    values: &[
        &["nauseous"],
        &["naughty"],
        &["naughty"],
        &["nautilus"],
        &["nauseous"],
        &["nauseous"],
        &["nautilus"],
        &["nautilus"],
        &["nautilus"],
        &["natural"],
        &["natures"],
        &["nautilus"],
    ],
    range: 4..=5,
};

static WORD_NAT_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_NAT_CHILDREN),
    value: None,
};

pub static WORD_NAT_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ievly"),
        dictgen::InsensitiveStr::Ascii("ioanlist"),
        dictgen::InsensitiveStr::Ascii("ioanlistic"),
        dictgen::InsensitiveStr::Ascii("ioanlists"),
        dictgen::InsensitiveStr::Ascii("ionaal"),
        dictgen::InsensitiveStr::Ascii("ionailty"),
        dictgen::InsensitiveStr::Ascii("ionales"),
        dictgen::InsensitiveStr::Ascii("ionalesl"),
        dictgen::InsensitiveStr::Ascii("ionalis"),
        dictgen::InsensitiveStr::Ascii("ionalisic"),
        dictgen::InsensitiveStr::Ascii("ionalisim"),
        dictgen::InsensitiveStr::Ascii("ionalisitc"),
        dictgen::InsensitiveStr::Ascii("ionalisitic"),
        dictgen::InsensitiveStr::Ascii("ionalisn"),
        dictgen::InsensitiveStr::Ascii("ionalistc"),
        dictgen::InsensitiveStr::Ascii("ionalistes"),
        dictgen::InsensitiveStr::Ascii("ionalistics"),
        dictgen::InsensitiveStr::Ascii("ionalisties"),
        dictgen::InsensitiveStr::Ascii("ionalistisch"),
        dictgen::InsensitiveStr::Ascii("ionalistische"),
        dictgen::InsensitiveStr::Ascii("ionalistisen"),
        dictgen::InsensitiveStr::Ascii("ionalistisk"),
        dictgen::InsensitiveStr::Ascii("ionalistiska"),
        dictgen::InsensitiveStr::Ascii("ionalistiske"),
        dictgen::InsensitiveStr::Ascii("ionalistiskt"),
        dictgen::InsensitiveStr::Ascii("ionalistista"),
        dictgen::InsensitiveStr::Ascii("ionalististic"),
        dictgen::InsensitiveStr::Ascii("ionalit"),
        dictgen::InsensitiveStr::Ascii("ionalite"),
        dictgen::InsensitiveStr::Ascii("ionalites"),
        dictgen::InsensitiveStr::Ascii("ionalitic"),
        dictgen::InsensitiveStr::Ascii("ionalits"),
        dictgen::InsensitiveStr::Ascii("ionalitys"),
        dictgen::InsensitiveStr::Ascii("ionaliy"),
        dictgen::InsensitiveStr::Ascii("ionalizm"),
        dictgen::InsensitiveStr::Ascii("ionallity"),
        dictgen::InsensitiveStr::Ascii("ionalsim"),
        dictgen::InsensitiveStr::Ascii("ionalsitic"),
        dictgen::InsensitiveStr::Ascii("ionalsits"),
        dictgen::InsensitiveStr::Ascii("ionalties"),
        dictgen::InsensitiveStr::Ascii("ionalty"),
        dictgen::InsensitiveStr::Ascii("ionaly"),
        dictgen::InsensitiveStr::Ascii("ionas"),
        dictgen::InsensitiveStr::Ascii("ionella"),
        dictgen::InsensitiveStr::Ascii("ionsl"),
        dictgen::InsensitiveStr::Ascii("ique"),
        dictgen::InsensitiveStr::Ascii("ivelly"),
        dictgen::InsensitiveStr::Ascii("ivey"),
        dictgen::InsensitiveStr::Ascii("ivley"),
        dictgen::InsensitiveStr::Ascii("rual"),
        dictgen::InsensitiveStr::Ascii("rually"),
        dictgen::InsensitiveStr::Ascii("uilus"),
        dictgen::InsensitiveStr::Ascii("uraly"),
        dictgen::InsensitiveStr::Ascii("urels"),
        dictgen::InsensitiveStr::Ascii("urely"),
        dictgen::InsensitiveStr::Ascii("urens"),
        dictgen::InsensitiveStr::Ascii("urual"),
        dictgen::InsensitiveStr::Ascii("urually"),
    ],
    values: &[
        &["natively"],
        &["nationalist"],
        &["nationalistic"],
        &["nationalists"],
        &["national"],
        &["nationality"],
        &["nationals"],
        &["nationals"],
        &["nationals"],
        &["nationalistic"],
        &["nationalism"],
        &["nationalistic"],
        &["nationalistic"],
        &["nationals"],
        &["nationalistic"],
        &["nationalists"],
        &["nationalists"],
        &["nationalists"],
        &["nationalists"],
        &["nationalistic"],
        &["nationalists"],
        &["nationalists"],
        &["nationalists"],
        &["nationalists"],
        &["nationalists"],
        &["nationalists"],
        &["nationalistic"],
        &["nationalist"],
        &["nationalist"],
        &["nationalist"],
        &["nationalistic"],
        &["nationalist"],
        &["nationalist"],
        &["nationality"],
        &["nationalism"],
        &["nationally"],
        &["nationalism"],
        &["nationalistic"],
        &["nationalists"],
        &["nationalist"],
        &["nationality"],
        &["nationally"],
        &["nationals"],
        &["national"],
        &["nationals"],
        &["antique"],
        &["natively"],
        &["natively"],
        &["natively"],
        &["natural"],
        &["naturally"],
        &["nautilus"],
        &["naturally"],
        &["natures"],
        &["naturally"],
        &["natures"],
        &["natural"],
        &["naturally"],
    ],
    range: 4..=13,
};

static WORD_NAS_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_NAS_CHILDREN),
    value: None,
};

pub static WORD_NAS_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("euous"),
        dictgen::InsensitiveStr::Ascii("hvile"),
        dictgen::InsensitiveStr::Ascii("hvillle"),
        dictgen::InsensitiveStr::Ascii("ueous"),
        dictgen::InsensitiveStr::Ascii("vhille"),
    ],
    values: &[
        &["nauseous"],
        &["nashville"],
        &["nashville"],
        &["nauseous"],
        &["nashville"],
    ],
    range: 5..=7,
};

static WORD_NAR_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_NAR_CHILDREN),
    value: None,
};

pub static WORD_NAR_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("cassism"),
        dictgen::InsensitiveStr::Ascii("cassist"),
        dictgen::InsensitiveStr::Ascii("cessist"),
        dictgen::InsensitiveStr::Ascii("ciscism"),
        dictgen::InsensitiveStr::Ascii("ciscist"),
        dictgen::InsensitiveStr::Ascii("cisissim"),
        dictgen::InsensitiveStr::Ascii("cisissm"),
        dictgen::InsensitiveStr::Ascii("cisisst"),
        dictgen::InsensitiveStr::Ascii("cisisstic"),
        dictgen::InsensitiveStr::Ascii("cisissts"),
        dictgen::InsensitiveStr::Ascii("cisists"),
        dictgen::InsensitiveStr::Ascii("cisscism"),
        dictgen::InsensitiveStr::Ascii("cisscist"),
        dictgen::InsensitiveStr::Ascii("cissicm"),
        dictgen::InsensitiveStr::Ascii("cissict"),
        dictgen::InsensitiveStr::Ascii("cissictic"),
        dictgen::InsensitiveStr::Ascii("cissim"),
        dictgen::InsensitiveStr::Ascii("cissisim"),
        dictgen::InsensitiveStr::Ascii("cissisism"),
        dictgen::InsensitiveStr::Ascii("cissisist"),
        dictgen::InsensitiveStr::Ascii("cissisitc"),
        dictgen::InsensitiveStr::Ascii("cissisitic"),
        dictgen::InsensitiveStr::Ascii("cississm"),
        dictgen::InsensitiveStr::Ascii("cississt"),
        dictgen::InsensitiveStr::Ascii("cississtic"),
        dictgen::InsensitiveStr::Ascii("cississts"),
        dictgen::InsensitiveStr::Ascii("cissistc"),
        dictgen::InsensitiveStr::Ascii("cissit"),
        dictgen::InsensitiveStr::Ascii("cissitc"),
        dictgen::InsensitiveStr::Ascii("cissitic"),
        dictgen::InsensitiveStr::Ascii("cissits"),
        dictgen::InsensitiveStr::Ascii("cissm"),
        dictgen::InsensitiveStr::Ascii("cisssism"),
        dictgen::InsensitiveStr::Ascii("cisssist"),
        dictgen::InsensitiveStr::Ascii("cissstic"),
        dictgen::InsensitiveStr::Ascii("cisst"),
        dictgen::InsensitiveStr::Ascii("cissts"),
        dictgen::InsensitiveStr::Ascii("coticos"),
        dictgen::InsensitiveStr::Ascii("cotis"),
        dictgen::InsensitiveStr::Ascii("ctoics"),
        dictgen::InsensitiveStr::Ascii("hwal"),
        dictgen::InsensitiveStr::Ascii("rativas"),
        dictgen::InsensitiveStr::Ascii("rativos"),
        dictgen::InsensitiveStr::Ascii("ritives"),
        dictgen::InsensitiveStr::Ascii("ssicistic"),
        dictgen::InsensitiveStr::Ascii("wharl"),
    ],
    values: &[
        &["narcissism"],
        &["narcissist"],
        &["narcissist"],
        &["narcissism"],
        &["narcissist"],
        &["narcissism"],
        &["narcissism"],
        &["narcissist"],
        &["narcissistic"],
        &["narcissist"],
        &["narcissist"],
        &["narcissism"],
        &["narcissist"],
        &["narcissism"],
        &["narcissist"],
        &["narcissistic"],
        &["narcissism"],
        &["narcissism"],
        &["narcissism"],
        &["narcissist"],
        &["narcissist"],
        &["narcissistic"],
        &["narcissism"],
        &["narcissist"],
        &["narcissistic"],
        &["narcissist"],
        &["narcissistic"],
        &["narcissist"],
        &["narcissist"],
        &["narcissistic"],
        &["narcissist"],
        &["narcissism"],
        &["narcissism"],
        &["narcissist"],
        &["narcissist"],
        &["narcissist"],
        &["narcissist"],
        &["narcotics"],
        &["narcotics"],
        &["narcotics"],
        &["narwhal"],
        &["narratives"],
        &["narratives"],
        &["narratives"],
        &["narcissistic"],
        &["narwhal"],
    ],
    range: 4..=10,
};

static WORD_NAP_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_NAP_CHILDREN),
    value: None,
};

pub static WORD_NAP_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("cakes"),
        dictgen::InsensitiveStr::Ascii("loeon"),
        dictgen::InsensitiveStr::Ascii("oelon"),
        dictgen::InsensitiveStr::Ascii("olean"),
        dictgen::InsensitiveStr::Ascii("olen"),
        dictgen::InsensitiveStr::Ascii("oleonian"),
        dictgen::InsensitiveStr::Ascii("oloen"),
    ],
    values: &[
        &["pancakes"],
        &["napoleon"],
        &["napoleon"],
        &["napoleon"],
        &["napoleon"],
        &["napoleonic"],
        &["napoleon"],
    ],
    range: 4..=8,
};

static WORD_NAO_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_NAO_CHILDREN),
    value: None,
};

pub static WORD_NAO_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("pleon")],
    values: &[&["napoleon"]],
    range: 5..=5,
};

static WORD_NAI_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_NAI_CHILDREN),
    value: None,
};

pub static WORD_NAI_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("eve")],
    values: &[&["naive"]],
    range: 3..=3,
};

static WORD_NAH_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_NAH_CHILDREN),
    value: None,
};

pub static WORD_NAH_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("sville")],
    values: &[&["nashville"]],
    range: 6..=6,
};

static WORD_NAG_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_NAG_CHILDREN),
    value: None,
};

pub static WORD_NAG_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ivate"),
        dictgen::InsensitiveStr::Ascii("ivating"),
        dictgen::InsensitiveStr::Ascii("ivation"),
    ],
    values: &[&["navigate"], &["navigating"], &["navigation"]],
    range: 5..=7,
};

static WORD_NAF_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_NAF_CHILDREN),
    value: None,
};

pub static WORD_NAF_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("erious")],
    values: &[&["nefarious"]],
    range: 6..=6,
};

static WORD_NAC_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_NAC_CHILDREN),
    value: None,
};

pub static WORD_NAC_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ionalistic"),
        dictgen::InsensitiveStr::Ascii("ionalists"),
        dictgen::InsensitiveStr::Ascii("rotics"),
    ],
    values: &[&["nationalistic"], &["nationalists"], &["narcotics"]],
    range: 6..=10,
};

static WORD_M_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_M_CHILDREN),
    value: None,
};

static WORD_M_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    Some(&WORD_MA_NODE),
    None,
    Some(&WORD_MC_NODE),
    Some(&WORD_MD_NODE),
    Some(&WORD_ME_NODE),
    None,
    None,
    Some(&WORD_MH_NODE),
    Some(&WORD_MI_NODE),
    None,
    Some(&WORD_MK_NODE),
    None,
    None,
    None,
    Some(&WORD_MO_NODE),
    None,
    None,
    Some(&WORD_MR_NODE),
    Some(&WORD_MS_NODE),
    None,
    Some(&WORD_MU_NODE),
    None,
    None,
    None,
    Some(&WORD_MY_NODE),
    None,
];

static WORD_MY_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_MY_CHILDREN),
    value: None,
};

pub static WORD_MY_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("htical"),
        dictgen::InsensitiveStr::Ascii("psace"),
        dictgen::InsensitiveStr::Ascii("raid"),
        dictgen::InsensitiveStr::Ascii("sapce"),
        dictgen::InsensitiveStr::Ascii("sef"),
        dictgen::InsensitiveStr::Ascii("sitcal"),
        dictgen::InsensitiveStr::Ascii("soganistic"),
        dictgen::InsensitiveStr::Ascii("sogenistic"),
        dictgen::InsensitiveStr::Ascii("sogonistic"),
        dictgen::InsensitiveStr::Ascii("sogynist"),
        dictgen::InsensitiveStr::Ascii("sogyny"),
        dictgen::InsensitiveStr::Ascii("sterieus"),
        dictgen::InsensitiveStr::Ascii("sterieuse"),
        dictgen::InsensitiveStr::Ascii("steriosly"),
        dictgen::InsensitiveStr::Ascii("sterioulsy"),
        dictgen::InsensitiveStr::Ascii("steriouly"),
        dictgen::InsensitiveStr::Ascii("steriousy"),
        dictgen::InsensitiveStr::Ascii("steris"),
        dictgen::InsensitiveStr::Ascii("sterise"),
        dictgen::InsensitiveStr::Ascii("sterous"),
        dictgen::InsensitiveStr::Ascii("thraic"),
    ],
    values: &[
        &["mythical"],
        &["myspace"],
        &["myriad"],
        &["myspace"],
        &["myself"],
        &["mystical"],
        &["misogynistic"],
        &["misogynistic"],
        &["misogynistic"],
        &["misogynist"],
        &["misogyny"],
        &["mysteries"],
        &["mysteries"],
        &["mysteriously"],
        &["mysteriously"],
        &["mysteriously"],
        &["mysteriously"],
        &["mysteries"],
        &["mysteries"],
        &["mysterious"],
        &["mithraic"],
    ],
    range: 3..=10,
};

static WORD_MU_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_MU_CHILDREN),
    value: None,
};

static WORD_MU_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    None,
    None,
    Some(&WORD_MUC_NODE),
    Some(&WORD_MUD_NODE),
    Some(&WORD_MUE_NODE),
    Some(&WORD_MUF_NODE),
    None,
    None,
    None,
    None,
    Some(&WORD_MUK_NODE),
    Some(&WORD_MUL_NODE),
    None,
    Some(&WORD_MUN_NODE),
    None,
    None,
    None,
    Some(&WORD_MUR_NODE),
    Some(&WORD_MUS_NODE),
    Some(&WORD_MUT_NODE),
    None,
    None,
    None,
    None,
    None,
    None,
];

static WORD_MUT_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_MUT_CHILDREN),
    value: None,
};

pub static WORD_MUT_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("atin"),
        dictgen::InsensitiveStr::Ascii("atiohn"),
        dictgen::InsensitiveStr::Ascii("ialted"),
        dictgen::InsensitiveStr::Ascii("ialtion"),
        dictgen::InsensitiveStr::Ascii("ilatin"),
        dictgen::InsensitiveStr::Ascii("iliated"),
        dictgen::InsensitiveStr::Ascii("liated"),
        dictgen::InsensitiveStr::Ascii("liation"),
        dictgen::InsensitiveStr::Ascii("linational"),
        dictgen::InsensitiveStr::Ascii("linationals"),
        dictgen::InsensitiveStr::Ascii("liplayer"),
        dictgen::InsensitiveStr::Ascii("liple"),
        dictgen::InsensitiveStr::Ascii("liples"),
        dictgen::InsensitiveStr::Ascii("liplication"),
        dictgen::InsensitiveStr::Ascii("liplied"),
        dictgen::InsensitiveStr::Ascii("liplier"),
        dictgen::InsensitiveStr::Ascii("liply"),
        dictgen::InsensitiveStr::Ascii("liplying"),
        dictgen::InsensitiveStr::Ascii("litasking"),
        dictgen::InsensitiveStr::Ascii("litude"),
        dictgen::InsensitiveStr::Ascii("liverse"),
    ],
    values: &[
        &["mutation"],
        &["mutation"],
        &["mutilated"],
        &["mutilation"],
        &["mutilation"],
        &["mutilated"],
        &["mutilated"],
        &["mutilation"],
        &["multinational"],
        &["multinational"],
        &["multiplayer"],
        &["multiple"],
        &["multiples"],
        &["multiplication"],
        &["multiplied"],
        &["multiplier"],
        &["multiply"],
        &["multiplying"],
        &["multitasking"],
        &["multitude"],
        &["multiverse"],
    ],
    range: 4..=11,
};

static WORD_MUS_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_MUS_CHILDREN),
    value: None,
};

pub static WORD_MUS_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("cial"),
        dictgen::InsensitiveStr::Ascii("cially"),
        dictgen::InsensitiveStr::Ascii("cician"),
        dictgen::InsensitiveStr::Ascii("cicians"),
        dictgen::InsensitiveStr::Ascii("cluar"),
        dictgen::InsensitiveStr::Ascii("cualr"),
        dictgen::InsensitiveStr::Ascii("culair"),
        dictgen::InsensitiveStr::Ascii("culaire"),
        dictgen::InsensitiveStr::Ascii("hrom"),
        dictgen::InsensitiveStr::Ascii("hrooom"),
        dictgen::InsensitiveStr::Ascii("hroooms"),
        dictgen::InsensitiveStr::Ascii("icains"),
        dictgen::InsensitiveStr::Ascii("icallity"),
        dictgen::InsensitiveStr::Ascii("icaly"),
        dictgen::InsensitiveStr::Ascii("ilms"),
        dictgen::InsensitiveStr::Ascii("lces"),
        dictgen::InsensitiveStr::Ascii("uclar"),
        dictgen::InsensitiveStr::Ascii("uems"),
    ],
    values: &[
        &["musical"],
        &["musically"],
        &["musician"],
        &["musicians"],
        &["muscular"],
        &["muscular"],
        &["muscular"],
        &["muscular"],
        &["mushroom"],
        &["mushroom"],
        &["mushroom"],
        &["musicians"],
        &["musically"],
        &["musically"],
        &["muslims"],
        &["muscles"],
        &["muscular"],
        &["museums"],
    ],
    range: 4..=8,
};

static WORD_MUR_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_MUR_CHILDREN),
    value: None,
};

pub static WORD_MUR_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("derd"),
        dictgen::InsensitiveStr::Ascii("dererd"),
        dictgen::InsensitiveStr::Ascii("derered"),
        dictgen::InsensitiveStr::Ascii("dereres"),
        dictgen::InsensitiveStr::Ascii("dererous"),
        dictgen::InsensitiveStr::Ascii("deres"),
        dictgen::InsensitiveStr::Ascii("derus"),
    ],
    values: &[
        &["murdered"],
        &["murdered"],
        &["murdered"],
        &["murderers"],
        &["murderers"],
        &["murders"],
        &["murders"],
    ],
    range: 4..=8,
};

static WORD_MUN_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_MUN_CHILDREN),
    value: None,
};

pub static WORD_MUN_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("bers"),
        dictgen::InsensitiveStr::Ascii("chis"),
        dictgen::InsensitiveStr::Ascii("cipalities"),
        dictgen::InsensitiveStr::Ascii("cipality"),
        dictgen::InsensitiveStr::Ascii("dance"),
        dictgen::InsensitiveStr::Ascii("dande"),
        dictgen::InsensitiveStr::Ascii("iches"),
        dictgen::InsensitiveStr::Ascii("ipulative"),
        dictgen::InsensitiveStr::Ascii("nicipality"),
    ],
    values: &[
        &["numbers"],
        &["munchies"],
        &["municipalities"],
        &["municipality"],
        &["mundane"],
        &["mundane"],
        &["munchies"],
        &["manipulative"],
        &["municipality"],
    ],
    range: 4..=10,
};

static WORD_MUL_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_MUL_CHILDREN),
    value: None,
};

pub static WORD_MUL_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("iple"),
        dictgen::InsensitiveStr::Ascii("itated"),
        dictgen::InsensitiveStr::Ascii("itation"),
        dictgen::InsensitiveStr::Ascii("itnational"),
        dictgen::InsensitiveStr::Ascii("itnationals"),
        dictgen::InsensitiveStr::Ascii("itplayer"),
        dictgen::InsensitiveStr::Ascii("itple"),
        dictgen::InsensitiveStr::Ascii("itples"),
        dictgen::InsensitiveStr::Ascii("itplication"),
        dictgen::InsensitiveStr::Ascii("itplied"),
        dictgen::InsensitiveStr::Ascii("itplier"),
        dictgen::InsensitiveStr::Ascii("itply"),
        dictgen::InsensitiveStr::Ascii("itplying"),
        dictgen::InsensitiveStr::Ascii("ittasking"),
        dictgen::InsensitiveStr::Ascii("itverse"),
        dictgen::InsensitiveStr::Ascii("sims"),
        dictgen::InsensitiveStr::Ascii("ticultralism"),
        dictgen::InsensitiveStr::Ascii("tilpier"),
        dictgen::InsensitiveStr::Ascii("timational"),
        dictgen::InsensitiveStr::Ascii("tinatinal"),
        dictgen::InsensitiveStr::Ascii("tinationella"),
        dictgen::InsensitiveStr::Ascii("tipalyer"),
        dictgen::InsensitiveStr::Ascii("tipe"),
        dictgen::InsensitiveStr::Ascii("tiplaer"),
        dictgen::InsensitiveStr::Ascii("tiplater"),
        dictgen::InsensitiveStr::Ascii("tiplaye"),
        dictgen::InsensitiveStr::Ascii("tiplayr"),
        dictgen::InsensitiveStr::Ascii("tiplays"),
        dictgen::InsensitiveStr::Ascii("tiplebgs"),
        dictgen::InsensitiveStr::Ascii("tipled"),
        dictgen::InsensitiveStr::Ascii("tipleies"),
        dictgen::InsensitiveStr::Ascii("tipleye"),
        dictgen::InsensitiveStr::Ascii("tiplicacion"),
        dictgen::InsensitiveStr::Ascii("tiplicaiton"),
        dictgen::InsensitiveStr::Ascii("tiplicativo"),
        dictgen::InsensitiveStr::Ascii("tiplicaton"),
        dictgen::InsensitiveStr::Ascii("tiplikation"),
        dictgen::InsensitiveStr::Ascii("tipling"),
        dictgen::InsensitiveStr::Ascii("tiplr"),
        dictgen::InsensitiveStr::Ascii("tipls"),
        dictgen::InsensitiveStr::Ascii("tiplyed"),
        dictgen::InsensitiveStr::Ascii("tiplyer"),
        dictgen::InsensitiveStr::Ascii("tiplyng"),
        dictgen::InsensitiveStr::Ascii("tipy"),
        dictgen::InsensitiveStr::Ascii("titaksing"),
        dictgen::InsensitiveStr::Ascii("titaskng"),
        dictgen::InsensitiveStr::Ascii("titudine"),
        dictgen::InsensitiveStr::Ascii("tiverese"),
        dictgen::InsensitiveStr::Ascii("tplies"),
        dictgen::InsensitiveStr::Ascii("typlayer"),
        dictgen::InsensitiveStr::Ascii("typlying"),
    ],
    values: &[
        &["multiple"],
        &["mutilated"],
        &["mutilation"],
        &["multinational"],
        &["multinational"],
        &["multiplayer"],
        &["multiple"],
        &["multiples"],
        &["multiplication"],
        &["multiplied"],
        &["multiplier"],
        &["multiply"],
        &["multiplying"],
        &["multitasking"],
        &["multiverse"],
        &["muslims"],
        &["multiculturalism"],
        &["multiplier"],
        &["multinational"],
        &["multinational"],
        &["multinational"],
        &["multiplayer"],
        &["multiple"],
        &["multiplier"],
        &["multiplayer"],
        &["multiply"],
        &["multiply"],
        &["multiply"],
        &["multiples"],
        &["multiplied"],
        &["multiples"],
        &["multiply"],
        &["multiplication"],
        &["multiplication"],
        &["multiplication"],
        &["multiplication"],
        &["multiplication"],
        &["multiplying"],
        &["multiplier"],
        &["multiples"],
        &["multiplied"],
        &["multiple"],
        &["multiplying"],
        &["multiply"],
        &["multitasking"],
        &["multitasking"],
        &["multitude"],
        &["multiverse"],
        &["multiples"],
        &["multiplayer"],
        &["multiplying"],
    ],
    range: 4..=12,
};

static WORD_MUK_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_MUK_CHILDREN),
    value: None,
};

pub static WORD_MUK_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("titasking")],
    values: &[&["multitasking"]],
    range: 9..=9,
};

static WORD_MUF_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_MUF_CHILDREN),
    value: None,
};

pub static WORD_MUF_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("fings"),
        dictgen::InsensitiveStr::Ascii("finus"),
    ],
    values: &[&["muffins"], &["muffins"]],
    range: 5..=5,
};

static WORD_MUE_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_MUE_CHILDREN),
    value: None,
};

pub static WORD_MUE_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("sums")],
    values: &[&["museums"]],
    range: 4..=4,
};

static WORD_MUD_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_MUD_CHILDREN),
    value: None,
};

pub static WORD_MUD_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("er"),
        dictgen::InsensitiveStr::Ascii("ering"),
    ],
    values: &[&["murder"], &["murdering"]],
    range: 2..=5,
};

static WORD_MUC_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_MUC_CHILDREN),
    value: None,
};

pub static WORD_MUC_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("isians"),
        dictgen::InsensitiveStr::Ascii("nhies"),
        dictgen::InsensitiveStr::Ascii("uous"),
    ],
    values: &[&["musicians"], &["munchies"], &["mucous"]],
    range: 4..=6,
};

static WORD_MS_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_MS_CHILDREN),
    value: None,
};

pub static WORD_MS_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("ytical")],
    values: &[&["mystical"]],
    range: 6..=6,
};

static WORD_MR_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_MR_CHILDREN),
    value: None,
};

pub static WORD_MR_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("oe")],
    values: &[&["more"]],
    range: 2..=2,
};

static WORD_MO_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_MO_CHILDREN),
    value: None,
};

static WORD_MO_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    None,
    Some(&WORD_MOB_NODE),
    Some(&WORD_MOC_NODE),
    Some(&WORD_MOD_NODE),
    Some(&WORD_MOE_NODE),
    None,
    None,
    None,
    Some(&WORD_MOI_NODE),
    None,
    None,
    Some(&WORD_MOL_NODE),
    Some(&WORD_MOM_NODE),
    Some(&WORD_MON_NODE),
    Some(&WORD_MOO_NODE),
    Some(&WORD_MOP_NODE),
    None,
    Some(&WORD_MOR_NODE),
    Some(&WORD_MOS_NODE),
    Some(&WORD_MOT_NODE),
    Some(&WORD_MOU_NODE),
    Some(&WORD_MOV_NODE),
    None,
    None,
    None,
    Some(&WORD_MOZ_NODE),
];

static WORD_MOZ_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_MOZ_CHILDREN),
    value: None,
};

pub static WORD_MOZ_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("illia"),
        dictgen::InsensitiveStr::Ascii("illla"),
        dictgen::InsensitiveStr::Ascii("zaralla"),
        dictgen::InsensitiveStr::Ascii("zarela"),
        dictgen::InsensitiveStr::Ascii("zeralla"),
        dictgen::InsensitiveStr::Ascii("zorella"),
    ],
    values: &[
        &["mozilla"],
        &["mozilla"],
        &["mozzarella"],
        &["mozzarella"],
        &["mozzarella"],
        &["mozzarella"],
    ],
    range: 5..=7,
};

static WORD_MOV_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_MOV_CHILDREN),
    value: None,
};

pub static WORD_MOV_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ei"),
        dictgen::InsensitiveStr::Ascii("epseed"),
        dictgen::InsensitiveStr::Ascii("esped"),
        dictgen::InsensitiveStr::Ascii("espeeed"),
        dictgen::InsensitiveStr::Ascii("ment"),
    ],
    values: &[
        &["movie"],
        &["movespeed"],
        &["movespeed"],
        &["movespeed"],
        &["movement"],
    ],
    range: 2..=7,
};

static WORD_MOU_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_MOU_CHILDREN),
    value: None,
};

pub static WORD_MOU_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("nment"),
        dictgen::InsensitiveStr::Ascii("nring"),
        dictgen::InsensitiveStr::Ascii("ntan"),
        dictgen::InsensitiveStr::Ascii("nth"),
        dictgen::InsensitiveStr::Ascii("ntian"),
        dictgen::InsensitiveStr::Ascii("stace"),
        dictgen::InsensitiveStr::Ascii("stahce"),
        dictgen::InsensitiveStr::Ascii("sturizing"),
        dictgen::InsensitiveStr::Ascii("thpeace"),
        dictgen::InsensitiveStr::Ascii("thpeice"),
        dictgen::InsensitiveStr::Ascii("thpeices"),
    ],
    values: &[
        &["monument"],
        &["mourning"],
        &["mountain"],
        &["month"],
        &["mountain"],
        &["moustache"],
        &["moustache"],
        &["moisturizing"],
        &["mouthpiece"],
        &["mouthpiece"],
        &["mouthpiece"],
    ],
    range: 3..=9,
};

static WORD_MOT_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_MOT_CHILDREN),
    value: None,
};

pub static WORD_MOT_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ehrboard"),
        dictgen::InsensitiveStr::Ascii("hebroard"),
        dictgen::InsensitiveStr::Ascii("herbaord"),
        dictgen::InsensitiveStr::Ascii("herbaords"),
        dictgen::InsensitiveStr::Ascii("herbard"),
        dictgen::InsensitiveStr::Ascii("herboad"),
        dictgen::InsensitiveStr::Ascii("herboads"),
        dictgen::InsensitiveStr::Ascii("herboars"),
        dictgen::InsensitiveStr::Ascii("herborad"),
        dictgen::InsensitiveStr::Ascii("herborads"),
        dictgen::InsensitiveStr::Ascii("herbord"),
        dictgen::InsensitiveStr::Ascii("herbords"),
        dictgen::InsensitiveStr::Ascii("herobard"),
        dictgen::InsensitiveStr::Ascii("hreboard"),
        dictgen::InsensitiveStr::Ascii("ivacional"),
        dictgen::InsensitiveStr::Ascii("ivaiton"),
        dictgen::InsensitiveStr::Ascii("ivatie"),
        dictgen::InsensitiveStr::Ascii("ivatin"),
        dictgen::InsensitiveStr::Ascii("ivatinal"),
        dictgen::InsensitiveStr::Ascii("ivationals"),
        dictgen::InsensitiveStr::Ascii("ivationnal"),
        dictgen::InsensitiveStr::Ascii("ivet"),
        dictgen::InsensitiveStr::Ascii("iviated"),
        dictgen::InsensitiveStr::Ascii("nage"),
        dictgen::InsensitiveStr::Ascii("oral"),
        dictgen::InsensitiveStr::Ascii("orcicle"),
        dictgen::InsensitiveStr::Ascii("orcicles"),
        dictgen::InsensitiveStr::Ascii("orcyce"),
        dictgen::InsensitiveStr::Ascii("orcylce"),
        dictgen::InsensitiveStr::Ascii("orcylces"),
        dictgen::InsensitiveStr::Ascii("orcyles"),
        dictgen::InsensitiveStr::Ascii("oroal"),
        dictgen::InsensitiveStr::Ascii("orolja"),
        dictgen::InsensitiveStr::Ascii("orollas"),
        dictgen::InsensitiveStr::Ascii("oroloa"),
        dictgen::InsensitiveStr::Ascii("ovational"),
    ],
    values: &[
        &["motherboard"],
        &["motherboards"],
        &["motherboard"],
        &["motherboards"],
        &["motherboard"],
        &["motherboard"],
        &["motherboards"],
        &["motherboards"],
        &["motherboard"],
        &["motherboards"],
        &["motherboard"],
        &["motherboards"],
        &["motherboards"],
        &["motherboards"],
        &["motivational"],
        &["motivations"],
        &["motivate"],
        &["motivations"],
        &["motivational"],
        &["motivations"],
        &["motivational"],
        &["motivate"],
        &["motivated"],
        &["montage"],
        &["motorola"],
        &["motorcycle"],
        &["motorcycles"],
        &["motorcycles"],
        &["motorcycle"],
        &["motorcycles"],
        &["motorcycles"],
        &["motorola"],
        &["motorola"],
        &["motorola"],
        &["motorola"],
        &["motivational"],
    ],
    range: 4..=10,
};

static WORD_MOS_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_MOS_CHILDREN),
    value: None,
};

pub static WORD_MOS_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("iturizer"),
        dictgen::InsensitiveStr::Ascii("iturizing"),
        dictgen::InsensitiveStr::Ascii("nter"),
        dictgen::InsensitiveStr::Ascii("nters"),
        dictgen::InsensitiveStr::Ascii("ntrosity"),
        dictgen::InsensitiveStr::Ascii("queto"),
        dictgen::InsensitiveStr::Ascii("quite"),
        dictgen::InsensitiveStr::Ascii("quitero"),
        dictgen::InsensitiveStr::Ascii("quiters"),
        dictgen::InsensitiveStr::Ascii("quitto"),
        dictgen::InsensitiveStr::Ascii("qutio"),
        dictgen::InsensitiveStr::Ascii("ture"),
    ],
    values: &[
        &["moisturizer"],
        &["moisturizing"],
        &["monster"],
        &["monsters"],
        &["monstrosity"],
        &["mosquitoes"],
        &["mosquitoes"],
        &["mosquito"],
        &["mosquitoes"],
        &["mosquito"],
        &["mosquito"],
        &["moisture"],
    ],
    range: 4..=9,
};

static WORD_MOR_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_MOR_CHILDREN),
    value: None,
};

pub static WORD_MOR_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("atlity"),
        dictgen::InsensitiveStr::Ascii("bidley"),
        dictgen::InsensitiveStr::Ascii("bidy"),
        dictgen::InsensitiveStr::Ascii("bildy"),
        dictgen::InsensitiveStr::Ascii("dibly"),
        dictgen::InsensitiveStr::Ascii("eso"),
        dictgen::InsensitiveStr::Ascii("evoer"),
        dictgen::InsensitiveStr::Ascii("gage"),
        dictgen::InsensitiveStr::Ascii("gatges"),
        dictgen::InsensitiveStr::Ascii("gtages"),
        dictgen::InsensitiveStr::Ascii("hpine"),
        dictgen::InsensitiveStr::Ascii("ibdly"),
        dictgen::InsensitiveStr::Ascii("isette"),
        dictgen::InsensitiveStr::Ascii("mones"),
        dictgen::InsensitiveStr::Ascii("monisim"),
        dictgen::InsensitiveStr::Ascii("monsim"),
        dictgen::InsensitiveStr::Ascii("monts"),
        dictgen::InsensitiveStr::Ascii("oever"),
        dictgen::InsensitiveStr::Ascii("otola"),
        dictgen::InsensitiveStr::Ascii("phein"),
        dictgen::InsensitiveStr::Ascii("phen"),
        dictgen::InsensitiveStr::Ascii("phie"),
        dictgen::InsensitiveStr::Ascii("phinate"),
        dictgen::InsensitiveStr::Ascii("riosn"),
        dictgen::InsensitiveStr::Ascii("risette"),
        dictgen::InsensitiveStr::Ascii("risound"),
        dictgen::InsensitiveStr::Ascii("roccan"),
        dictgen::InsensitiveStr::Ascii("rocco"),
        dictgen::InsensitiveStr::Ascii("roco"),
        dictgen::InsensitiveStr::Ascii("rsion"),
        dictgen::InsensitiveStr::Ascii("tage"),
        dictgen::InsensitiveStr::Ascii("tailty"),
        dictgen::InsensitiveStr::Ascii("tards"),
        dictgen::InsensitiveStr::Ascii("tarts"),
        dictgen::InsensitiveStr::Ascii("uning"),
    ],
    values: &[
        &["mortality"],
        &["morbidly"],
        &["morbidly"],
        &["morbidly"],
        &["morbidly"],
        &["more"],
        &["moreover"],
        &["mortgage"],
        &["mortgages"],
        &["mortgages"],
        &["morphine"],
        &["morbidly"],
        &["morissette"],
        &["mormons"],
        &["mormonism"],
        &["mormonism"],
        &["mormons"],
        &["moreover"],
        &["motorola"],
        &["morphine"],
        &["morphine"],
        &["morphine"],
        &["morphine"],
        &["morrison"],
        &["morissette"],
        &["morrison"],
        &["moroccan"],
        &["morocco"],
        &["morocco"],
        &["morrison"],
        &["mortgage"],
        &["mortality"],
        &["mortars"],
        &["mortars"],
        &["mourning"],
    ],
    range: 3..=7,
};

static WORD_MOP_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_MOP_CHILDREN),
    value: None,
};

pub static WORD_MOP_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("rhine")],
    values: &[&["morphine"]],
    range: 5..=5,
};

static WORD_MOO_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_MOO_CHILDREN),
    value: None,
};

pub static WORD_MOO_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("nligt")],
    values: &[&["moonlight"]],
    range: 5..=5,
};

static WORD_MON_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_MON_CHILDREN),
    value: None,
};

static WORD_MON_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    Some(&WORD_MONA_NODE),
    None,
    None,
    None,
    Some(&WORD_MONE_NODE),
    None,
    Some(&WORD_MONG_NODE),
    None,
    Some(&WORD_MONI_NODE),
    None,
    None,
    None,
    None,
    None,
    Some(&WORD_MONO_NODE),
    None,
    None,
    Some(&WORD_MONR_NODE),
    Some(&WORD_MONS_NODE),
    Some(&WORD_MONT_NODE),
    Some(&WORD_MONU_NODE),
    None,
    None,
    None,
    None,
    None,
];

static WORD_MONU_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_MONU_CHILDREN),
    value: None,
};

pub static WORD_MONU_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("mentaal"),
        dictgen::InsensitiveStr::Ascii("mentais"),
        dictgen::InsensitiveStr::Ascii("mentals"),
        dictgen::InsensitiveStr::Ascii("mentos"),
        dictgen::InsensitiveStr::Ascii("mentous"),
        dictgen::InsensitiveStr::Ascii("mentul"),
        dictgen::InsensitiveStr::Ascii("mentus"),
        dictgen::InsensitiveStr::Ascii("met"),
        dictgen::InsensitiveStr::Ascii("mnet"),
        dictgen::InsensitiveStr::Ascii("mnets"),
    ],
    values: &[
        &["monumental"],
        &["monuments"],
        &["monuments"],
        &["monuments"],
        &["monuments"],
        &["monumental"],
        &["monuments"],
        &["monument"],
        &["monument"],
        &["monuments"],
    ],
    range: 3..=7,
};

static WORD_MONT_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_MONT_CHILDREN),
    value: None,
};

pub static WORD_MONT_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("aban"),
        dictgen::InsensitiveStr::Ascii("aeg"),
        dictgen::InsensitiveStr::Ascii("ains"),
        dictgen::InsensitiveStr::Ascii("anha"),
        dictgen::InsensitiveStr::Ascii("ania"),
        dictgen::InsensitiveStr::Ascii("anna"),
        dictgen::InsensitiveStr::Ascii("anous"),
        dictgen::InsensitiveStr::Ascii("anta"),
        dictgen::InsensitiveStr::Ascii("anya"),
        dictgen::InsensitiveStr::Ascii("aran"),
        dictgen::InsensitiveStr::Ascii("eize"),
        dictgen::InsensitiveStr::Ascii("eral"),
        dictgen::InsensitiveStr::Ascii("ioring"),
        dictgen::InsensitiveStr::Ascii("iors"),
        dictgen::InsensitiveStr::Ascii("nana"),
        dictgen::InsensitiveStr::Ascii("rel"),
        dictgen::InsensitiveStr::Ascii("s"),
        dictgen::InsensitiveStr::Ascii("ypic"),
    ],
    values: &[
        &["montana"],
        &["montage"],
        &["mountains"],
        &["montana"],
        &["montana"],
        &["montana"],
        &["mountainous"],
        &["montana"],
        &["montana"],
        &["montana"],
        &["monetize"],
        &["montreal"],
        &["monitoring"],
        &["monitors"],
        &["montana"],
        &["montreal"],
        &["months"],
        &["monotypic"],
    ],
    range: 1..=6,
};

static WORD_MONS_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_MONS_CHILDREN),
    value: None,
};

pub static WORD_MONS_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("errat"),
        dictgen::InsensitiveStr::Ascii("terous"),
        dictgen::InsensitiveStr::Ascii("torsity"),
        dictgen::InsensitiveStr::Ascii("torus"),
        dictgen::InsensitiveStr::Ascii("trasity"),
        dictgen::InsensitiveStr::Ascii("tre"),
        dictgen::InsensitiveStr::Ascii("trisity"),
        dictgen::InsensitiveStr::Ascii("trocity"),
        dictgen::InsensitiveStr::Ascii("tros"),
        dictgen::InsensitiveStr::Ascii("trosoty"),
        dictgen::InsensitiveStr::Ascii("trostiy"),
        dictgen::InsensitiveStr::Ascii("truos"),
    ],
    values: &[
        &["montserrat"],
        &["monsters"],
        &["monstrosity"],
        &["monstrous"],
        &["monstrosity"],
        &["monster"],
        &["monstrosity"],
        &["monstrosity"],
        &["monstrous"],
        &["monstrosity"],
        &["monstrosity"],
        &["monstrous"],
    ],
    range: 3..=7,
};

static WORD_MONR_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_MONR_CHILDREN),
    value: None,
};

pub static WORD_MONR_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("achy")],
    values: &[&["monarchy"]],
    range: 4..=4,
};

static WORD_MONO_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_MONO_CHILDREN),
    value: None,
};

pub static WORD_MONO_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("gameous"),
        dictgen::InsensitiveStr::Ascii("gmay"),
        dictgen::InsensitiveStr::Ascii("gymous"),
        dictgen::InsensitiveStr::Ascii("lgoue"),
        dictgen::InsensitiveStr::Ascii("light"),
        dictgen::InsensitiveStr::Ascii("listic"),
        dictgen::InsensitiveStr::Ascii("lite"),
        dictgen::InsensitiveStr::Ascii("lithisch"),
        dictgen::InsensitiveStr::Ascii("litich"),
        dictgen::InsensitiveStr::Ascii("litihic"),
        dictgen::InsensitiveStr::Ascii("loge"),
        dictgen::InsensitiveStr::Ascii("lopies"),
        dictgen::InsensitiveStr::Ascii("lopy"),
        dictgen::InsensitiveStr::Ascii("lothic"),
        dictgen::InsensitiveStr::Ascii("louge"),
        dictgen::InsensitiveStr::Ascii("lythic"),
        dictgen::InsensitiveStr::Ascii("pilies"),
        dictgen::InsensitiveStr::Ascii("ploies"),
        dictgen::InsensitiveStr::Ascii("ploy"),
        dictgen::InsensitiveStr::Ascii("polets"),
        dictgen::InsensitiveStr::Ascii("police"),
        dictgen::InsensitiveStr::Ascii("polios"),
        dictgen::InsensitiveStr::Ascii("polis"),
        dictgen::InsensitiveStr::Ascii("pollies"),
        dictgen::InsensitiveStr::Ascii("polly"),
        dictgen::InsensitiveStr::Ascii("poloy"),
        dictgen::InsensitiveStr::Ascii("pols"),
        dictgen::InsensitiveStr::Ascii("thilic"),
    ],
    values: &[
        &["monogamous"],
        &["monogamy"],
        &["monogamous"],
        &["monologue"],
        &["moonlight"],
        &["monolithic"],
        &["monolithic"],
        &["monolithic"],
        &["monolithic"],
        &["monolithic"],
        &["monologue"],
        &["monopolies"],
        &["monopoly"],
        &["monolithic"],
        &["monologue"],
        &["monolithic"],
        &["monopolies"],
        &["monopolies"],
        &["monopoly"],
        &["monopolies"],
        &["monopolies"],
        &["monopolies"],
        &["monopolies"],
        &["monopolies"],
        &["monopoly"],
        &["monopoly"],
        &["monopolies"],
        &["monolithic"],
    ],
    range: 4..=8,
};

static WORD_MONI_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_MONI_CHILDREN),
    value: None,
};

pub static WORD_MONI_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("tering"),
        dictgen::InsensitiveStr::Ascii("tord"),
        dictgen::InsensitiveStr::Ascii("toreada"),
        dictgen::InsensitiveStr::Ascii("toreado"),
        dictgen::InsensitiveStr::Ascii("tores"),
        dictgen::InsensitiveStr::Ascii("tos"),
    ],
    values: &[
        &["monitoring"],
        &["monitored"],
        &["monitored"],
        &["monitored"],
        &["monitors"],
        &["monitors"],
    ],
    range: 3..=7,
};

static WORD_MONG_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_MONG_CHILDREN),
    value: None,
};

pub static WORD_MONG_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("los"),
        dictgen::InsensitiveStr::Ascii("oles"),
        dictgen::InsensitiveStr::Ascii("olos"),
    ],
    values: &[&["mongols"], &["mongols"], &["mongols"]],
    range: 3..=4,
};

static WORD_MONE_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_MONE_CHILDREN),
    value: None,
};

pub static WORD_MONE_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("staries"),
        dictgen::InsensitiveStr::Ascii("stary"),
        dictgen::InsensitiveStr::Ascii("tizare"),
    ],
    values: &[&["monasteries"], &["monastery"], &["monetize"]],
    range: 5..=7,
};

static WORD_MONA_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_MONA_CHILDREN),
    value: None,
};

pub static WORD_MONA_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("gomous"),
        dictgen::InsensitiveStr::Ascii("gomy"),
        dictgen::InsensitiveStr::Ascii("rcy"),
        dictgen::InsensitiveStr::Ascii("tge"),
    ],
    values: &[&["monogamous"], &["monogamy"], &["monarchy"], &["montage"]],
    range: 3..=6,
};

static WORD_MOM_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_MOM_CHILDREN),
    value: None,
};

pub static WORD_MOM_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("emtarily"),
        dictgen::InsensitiveStr::Ascii("entairly"),
        dictgen::InsensitiveStr::Ascii("entaraly"),
        dictgen::InsensitiveStr::Ascii("entarely"),
        dictgen::InsensitiveStr::Ascii("entarilly"),
        dictgen::InsensitiveStr::Ascii("entarly"),
        dictgen::InsensitiveStr::Ascii("enterily"),
        dictgen::InsensitiveStr::Ascii("ento"),
        dictgen::InsensitiveStr::Ascii("entos"),
        dictgen::InsensitiveStr::Ascii("entus"),
        dictgen::InsensitiveStr::Ascii("ment"),
    ],
    values: &[
        &["momentarily"],
        &["momentarily"],
        &["momentarily"],
        &["momentarily"],
        &["momentarily"],
        &["momentarily"],
        &["momentarily"],
        &["memento"],
        &["moments"],
        &["moments"],
        &["moment"],
    ],
    range: 4..=9,
};

static WORD_MOL_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_MOL_CHILDREN),
    value: None,
};

pub static WORD_MOL_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("eclues"),
        dictgen::InsensitiveStr::Ascii("eculair"),
        dictgen::InsensitiveStr::Ascii("eculaire"),
        dictgen::InsensitiveStr::Ascii("eculs"),
        dictgen::InsensitiveStr::Ascii("estaion"),
        dictgen::InsensitiveStr::Ascii("estare"),
        dictgen::InsensitiveStr::Ascii("estarle"),
        dictgen::InsensitiveStr::Ascii("estarme"),
        dictgen::InsensitiveStr::Ascii("estarse"),
        dictgen::InsensitiveStr::Ascii("estarte"),
        dictgen::InsensitiveStr::Ascii("estating"),
        dictgen::InsensitiveStr::Ascii("estato"),
        dictgen::InsensitiveStr::Ascii("esterd"),
        dictgen::InsensitiveStr::Ascii("estered"),
        dictgen::InsensitiveStr::Ascii("eststion"),
    ],
    values: &[
        &["molecules"],
        &["molecular"],
        &["molecular"],
        &["molecules"],
        &["molestation"],
        &["molester"],
        &["molester"],
        &["molester"],
        &["molester"],
        &["molester"],
        &["molestation"],
        &["molestation"],
        &["molested"],
        &["molested"],
        &["molestation"],
    ],
    range: 5..=8,
};

static WORD_MOI_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_MOI_CHILDREN),
    value: None,
};

pub static WORD_MOI_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("sterizer"),
        dictgen::InsensitiveStr::Ascii("sterizing"),
        dictgen::InsensitiveStr::Ascii("storizing"),
        dictgen::InsensitiveStr::Ascii("struizer"),
        dictgen::InsensitiveStr::Ascii("sturier"),
        dictgen::InsensitiveStr::Ascii("sturizng"),
        dictgen::InsensitiveStr::Ascii("sturizor"),
        dictgen::InsensitiveStr::Ascii("stutizer"),
        dictgen::InsensitiveStr::Ascii("sutrizer"),
        dictgen::InsensitiveStr::Ascii("sutrizing"),
    ],
    values: &[
        &["moisturizer"],
        &["moisturizing"],
        &["moisturizing"],
        &["moisturizer"],
        &["moisturizer"],
        &["moisturizing"],
        &["moisturizer"],
        &["moisturizer"],
        &["moisturizer"],
        &["moisturizing"],
    ],
    range: 7..=9,
};

static WORD_MOE_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_MOE_CHILDREN),
    value: None,
};

pub static WORD_MOE_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("lcules"),
        dictgen::InsensitiveStr::Ascii("nt"),
        dictgen::InsensitiveStr::Ascii("ny"),
    ],
    values: &[&["molecules"], &["moment"], &["money"]],
    range: 2..=6,
};

static WORD_MOD_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_MOD_CHILDREN),
    value: None,
};

pub static WORD_MOD_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("eracion"),
        dictgen::InsensitiveStr::Ascii("eratedly"),
        dictgen::InsensitiveStr::Ascii("eraters"),
        dictgen::InsensitiveStr::Ascii("erateurs"),
        dictgen::InsensitiveStr::Ascii("eratey"),
        dictgen::InsensitiveStr::Ascii("eratin"),
        dictgen::InsensitiveStr::Ascii("eratley"),
        dictgen::InsensitiveStr::Ascii("eratore"),
        dictgen::InsensitiveStr::Ascii("eratorin"),
        dictgen::InsensitiveStr::Ascii("eratorn"),
        dictgen::InsensitiveStr::Ascii("erats"),
        dictgen::InsensitiveStr::Ascii("erm"),
        dictgen::InsensitiveStr::Ascii("ificacion"),
        dictgen::InsensitiveStr::Ascii("ificaiton"),
        dictgen::InsensitiveStr::Ascii("ificaitons"),
        dictgen::InsensitiveStr::Ascii("ificato"),
        dictgen::InsensitiveStr::Ascii("ificaton"),
        dictgen::InsensitiveStr::Ascii("ificatons"),
        dictgen::InsensitiveStr::Ascii("ifieras"),
        dictgen::InsensitiveStr::Ascii("ifieres"),
        dictgen::InsensitiveStr::Ascii("ifikation"),
        dictgen::InsensitiveStr::Ascii("ifires"),
        dictgen::InsensitiveStr::Ascii("ivational"),
        dictgen::InsensitiveStr::Ascii("le"),
        dictgen::InsensitiveStr::Ascii("ualr"),
        dictgen::InsensitiveStr::Ascii("ulair"),
    ],
    values: &[
        &["moderation"],
        &["moderately"],
        &["moderates"],
        &["moderates"],
        &["moderately"],
        &["moderation"],
        &["moderately"],
        &["moderate"],
        &["moderation"],
        &["moderation"],
        &["moderates"],
        &["modem"],
        &["modification"],
        &["modification"],
        &["modifications"],
        &["modification"],
        &["modification"],
        &["modifications"],
        &["modifiers"],
        &["modifiers"],
        &["modification"],
        &["modifiers"],
        &["motivational"],
        &["model"],
        &["modular"],
        &["modular"],
    ],
    range: 2..=10,
};

static WORD_MOC_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_MOC_CHILDREN),
    value: None,
};

pub static WORD_MOC_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("rotransactions")],
    values: &[&["microtransactions"]],
    range: 14..=14,
};

static WORD_MOB_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_MOB_CHILDREN),
    value: None,
};

pub static WORD_MOB_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ilitiy"),
        dictgen::InsensitiveStr::Ascii("iliy"),
        dictgen::InsensitiveStr::Ascii("iltiy"),
    ],
    values: &[&["mobility"], &["mobility"], &["mobility"]],
    range: 4..=6,
};

static WORD_MK_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_MK_CHILDREN),
    value: None,
};

pub static WORD_MK_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ae"),
        dictgen::InsensitiveStr::Ascii("aes"),
        dictgen::InsensitiveStr::Ascii("aing"),
        dictgen::InsensitiveStr::Ascii("ea"),
    ],
    values: &[&["make"], &["makes"], &["making"], &["make"]],
    range: 2..=4,
};

static WORD_MI_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_MI_CHILDREN),
    value: None,
};

static WORD_MI_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    None,
    None,
    Some(&WORD_MIC_NODE),
    Some(&WORD_MID_NODE),
    None,
    None,
    Some(&WORD_MIG_NODE),
    None,
    None,
    None,
    None,
    Some(&WORD_MIL_NODE),
    Some(&WORD_MIM_NODE),
    Some(&WORD_MIN_NODE),
    None,
    None,
    None,
    Some(&WORD_MIR_NODE),
    Some(&WORD_MIS_NODE),
    Some(&WORD_MIT_NODE),
    None,
    None,
    None,
    None,
    None,
    None,
];

static WORD_MIT_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_MIT_CHILDREN),
    value: None,
};

pub static WORD_MIT_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("igaiton")],
    values: &[&["mitigation"]],
    range: 7..=7,
};

static WORD_MIS_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_MIS_CHILDREN),
    value: None,
};

static WORD_MIS_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    Some(&WORD_MISA_NODE),
    None,
    Some(&WORD_MISC_NODE),
    Some(&WORD_MISD_NODE),
    Some(&WORD_MISE_NODE),
    Some(&WORD_MISF_NODE),
    Some(&WORD_MISG_NODE),
    None,
    Some(&WORD_MISI_NODE),
    None,
    None,
    None,
    None,
    Some(&WORD_MISN_NODE),
    Some(&WORD_MISO_NODE),
    Some(&WORD_MISP_NODE),
    None,
    Some(&WORD_MISR_NODE),
    Some(&WORD_MISS_NODE),
    Some(&WORD_MIST_NODE),
    Some(&WORD_MISU_NODE),
    None,
    None,
    None,
    Some(&WORD_MISY_NODE),
    None,
];

static WORD_MISY_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_MISY_CHILDREN),
    value: None,
};

pub static WORD_MISY_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("gonist"),
        dictgen::InsensitiveStr::Ascii("gonistic"),
    ],
    values: &[&["misogynist"], &["misogynistic"]],
    range: 6..=8,
};

static WORD_MISU_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_MISU_CHILDREN),
    value: None,
};

pub static WORD_MISU_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("bderstanding"),
        dictgen::InsensitiveStr::Ascii("dnerstanding"),
        dictgen::InsensitiveStr::Ascii("ndarstanding"),
        dictgen::InsensitiveStr::Ascii("nderatanding"),
        dictgen::InsensitiveStr::Ascii("nderdtanding"),
        dictgen::InsensitiveStr::Ascii("ndersatnding"),
        dictgen::InsensitiveStr::Ascii("ndersood"),
        dictgen::InsensitiveStr::Ascii("ndersranding"),
        dictgen::InsensitiveStr::Ascii("nderstading"),
        dictgen::InsensitiveStr::Ascii("nderstadings"),
        dictgen::InsensitiveStr::Ascii("nderstadning"),
        dictgen::InsensitiveStr::Ascii("nderstamding"),
        dictgen::InsensitiveStr::Ascii("nderstandig"),
        dictgen::InsensitiveStr::Ascii("nderstandigs"),
        dictgen::InsensitiveStr::Ascii("nderstandimg"),
        dictgen::InsensitiveStr::Ascii("nderstandind"),
        dictgen::InsensitiveStr::Ascii("nderstandingly"),
        dictgen::InsensitiveStr::Ascii("nderstandng"),
        dictgen::InsensitiveStr::Ascii("nderstanging"),
        dictgen::InsensitiveStr::Ascii("nderstanidng"),
        dictgen::InsensitiveStr::Ascii("nderstaning"),
        dictgen::InsensitiveStr::Ascii("nderstanings"),
        dictgen::InsensitiveStr::Ascii("nderstansing"),
        dictgen::InsensitiveStr::Ascii("nderstanting"),
        dictgen::InsensitiveStr::Ascii("nderstantings"),
        dictgen::InsensitiveStr::Ascii("nderstending"),
        dictgen::InsensitiveStr::Ascii("nderstnading"),
        dictgen::InsensitiveStr::Ascii("nderstod"),
        dictgen::InsensitiveStr::Ascii("nderstsnding"),
        dictgen::InsensitiveStr::Ascii("nderstunding"),
        dictgen::InsensitiveStr::Ascii("ndertsanding"),
        dictgen::InsensitiveStr::Ascii("ndrestanding"),
        dictgen::InsensitiveStr::Ascii("nterstanding"),
        dictgen::InsensitiveStr::Ascii("nterstood"),
    ],
    values: &[
        &["misunderstandings"],
        &["misunderstandings"],
        &["misunderstandings"],
        &["misunderstandings"],
        &["misunderstandings"],
        &["misunderstandings"],
        &["misunderstood"],
        &["misunderstandings"],
        &["misunderstanding"],
        &["misunderstandings"],
        &["misunderstandings"],
        &["misunderstandings"],
        &["misunderstandings"],
        &["misunderstandings"],
        &["misunderstandings"],
        &["misunderstandings"],
        &["misunderstandings"],
        &["misunderstandings"],
        &["misunderstandings"],
        &["misunderstandings"],
        &["misunderstanding"],
        &["misunderstandings"],
        &["misunderstandings"],
        &["misunderstandings"],
        &["misunderstandings"],
        &["misunderstandings"],
        &["misunderstandings"],
        &["misunderstood"],
        &["misunderstandings"],
        &["misunderstandings"],
        &["misunderstandings"],
        &["misunderstandings"],
        &["misunderstandings"],
        &["misunderstood"],
    ],
    range: 8..=14,
};

static WORD_MIST_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_MIST_CHILDREN),
    value: None,
};

pub static WORD_MIST_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("akedly"),
        dictgen::InsensitiveStr::Ascii("akengly"),
        dictgen::InsensitiveStr::Ascii("akently"),
        dictgen::InsensitiveStr::Ascii("akey"),
        dictgen::InsensitiveStr::Ascii("akinly"),
        dictgen::InsensitiveStr::Ascii("ankely"),
        dictgen::InsensitiveStr::Ascii("erious"),
        dictgen::InsensitiveStr::Ascii("eriously"),
        dictgen::InsensitiveStr::Ascii("ery"),
        dictgen::InsensitiveStr::Ascii("eryous"),
        dictgen::InsensitiveStr::Ascii("read"),
        dictgen::InsensitiveStr::Ascii("readed"),
    ],
    values: &[
        &["mistakenly"],
        &["mistakenly"],
        &["mistakenly"],
        &["mistakenly"],
        &["mistakenly"],
        &["mistakenly"],
        &["mysterious"],
        &["mysteriously"],
        &["mystery"],
        &["mysterious"],
        &["mistreated"],
        &["mistreated"],
    ],
    range: 3..=8,
};

static WORD_MISS_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_MISS_CHILDREN),
    value: None,
};

pub static WORD_MISS_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("en"),
        dictgen::InsensitiveStr::Ascii("igno"),
        dictgen::InsensitiveStr::Ascii("ils"),
        dictgen::InsensitiveStr::Ascii("ionaire"),
        dictgen::InsensitiveStr::Ascii("ionaires"),
        dictgen::InsensitiveStr::Ascii("ionairy"),
        dictgen::InsensitiveStr::Ascii("ionare"),
        dictgen::InsensitiveStr::Ascii("ionares"),
        dictgen::InsensitiveStr::Ascii("ionaris"),
        dictgen::InsensitiveStr::Ascii("ionarry"),
        dictgen::InsensitiveStr::Ascii("ionera"),
        dictgen::InsensitiveStr::Ascii("ionnary"),
        dictgen::InsensitiveStr::Ascii("iony"),
        dictgen::InsensitiveStr::Ascii("isipi"),
        dictgen::InsensitiveStr::Ascii("isippi"),
        dictgen::InsensitiveStr::Ascii("issipi"),
        dictgen::InsensitiveStr::Ascii("issipis"),
        dictgen::InsensitiveStr::Ascii("issipppi"),
        dictgen::InsensitiveStr::Ascii("issppi"),
        dictgen::InsensitiveStr::Ascii("le"),
        dictgen::InsensitiveStr::Ascii("lies"),
        dictgen::InsensitiveStr::Ascii("onary"),
        dictgen::InsensitiveStr::Ascii("orui"),
        dictgen::InsensitiveStr::Ascii("ourri"),
        dictgen::InsensitiveStr::Ascii("peeling"),
        dictgen::InsensitiveStr::Ascii("peld"),
        dictgen::InsensitiveStr::Ascii("peling"),
        dictgen::InsensitiveStr::Ascii("pelld"),
        dictgen::InsensitiveStr::Ascii("pellled"),
        dictgen::InsensitiveStr::Ascii("pellling"),
        dictgen::InsensitiveStr::Ascii("pellng"),
        dictgen::InsensitiveStr::Ascii("pelt"),
    ],
    values: &[
        &["mizzen"],
        &["mission"],
        &["missiles"],
        &["missionaries"],
        &["missionaries"],
        &["missionary"],
        &["missionaries"],
        &["missionaries"],
        &["missionaries"],
        &["missionary"],
        &["missionary"],
        &["missionary"],
        &["missionary"],
        &["mississippi"],
        &["mississippi"],
        &["mississippi"],
        &["mississippi"],
        &["mississippi"],
        &["mississippi"],
        &["missile"],
        &["missiles"],
        &["missionary"],
        &["missouri"],
        &["missouri"],
        &["misspelling"],
        &["misspelled"],
        &["misspelling"],
        &["misspelled"],
        &["misspelled"],
        &["misspelling"],
        &["misspelling"],
        &["misspelled"],
    ],
    range: 2..=8,
};

static WORD_MISR_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_MISR_CHILDREN),
    value: None,
};

pub static WORD_MISR_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("eable"),
        dictgen::InsensitiveStr::Ascii("eably"),
        dictgen::InsensitiveStr::Ascii("epresantation"),
        dictgen::InsensitiveStr::Ascii("epresenation"),
        dictgen::InsensitiveStr::Ascii("epresentaion"),
        dictgen::InsensitiveStr::Ascii("epresentaiton"),
        dictgen::InsensitiveStr::Ascii("epresentated"),
        dictgen::InsensitiveStr::Ascii("epresentatie"),
        dictgen::InsensitiveStr::Ascii("epresentating"),
        dictgen::InsensitiveStr::Ascii("epresentativ"),
        dictgen::InsensitiveStr::Ascii("epresention"),
        dictgen::InsensitiveStr::Ascii("epreseted"),
    ],
    values: &[
        &["miserable"],
        &["miserably"],
        &["misrepresentation"],
        &["misrepresentation"],
        &["misrepresentation"],
        &["misrepresentation"],
        &["misrepresented"],
        &["misrepresentation"],
        &["misrepresenting"],
        &["misrepresentation"],
        &["misrepresenting"],
        &["misrepresented"],
    ],
    range: 5..=13,
};

static WORD_MISP_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_MISP_CHILDREN),
    value: None,
};

pub static WORD_MISP_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ell"),
        dictgen::InsensitiveStr::Ascii("elled"),
        dictgen::InsensitiveStr::Ascii("elling"),
        dictgen::InsensitiveStr::Ascii("roportionate"),
    ],
    values: &[
        &["misspell"],
        &["misspelled"],
        &["misspelling"],
        &["disproportionate"],
    ],
    range: 3..=12,
};

static WORD_MISO_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_MISO_CHILDREN),
    value: None,
};

pub static WORD_MISO_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ganist"),
        dictgen::InsensitiveStr::Ascii("ganistic"),
        dictgen::InsensitiveStr::Ascii("genist"),
        dictgen::InsensitiveStr::Ascii("genistic"),
        dictgen::InsensitiveStr::Ascii("ginist"),
        dictgen::InsensitiveStr::Ascii("ginyst"),
        dictgen::InsensitiveStr::Ascii("ginystic"),
        dictgen::InsensitiveStr::Ascii("ginysts"),
        dictgen::InsensitiveStr::Ascii("gnyist"),
        dictgen::InsensitiveStr::Ascii("gnyistic"),
        dictgen::InsensitiveStr::Ascii("gnyists"),
        dictgen::InsensitiveStr::Ascii("gonist"),
        dictgen::InsensitiveStr::Ascii("gonistic"),
        dictgen::InsensitiveStr::Ascii("gonyst"),
        dictgen::InsensitiveStr::Ascii("gyinst"),
        dictgen::InsensitiveStr::Ascii("gyinsts"),
        dictgen::InsensitiveStr::Ascii("gynisic"),
        dictgen::InsensitiveStr::Ascii("gynisitc"),
        dictgen::InsensitiveStr::Ascii("gynisitic"),
        dictgen::InsensitiveStr::Ascii("gynistc"),
        dictgen::InsensitiveStr::Ascii("gynsitic"),
        dictgen::InsensitiveStr::Ascii("gynstic"),
        dictgen::InsensitiveStr::Ascii("gynt"),
        dictgen::InsensitiveStr::Ascii("gynyst"),
        dictgen::InsensitiveStr::Ascii("gynystic"),
        dictgen::InsensitiveStr::Ascii("uri"),
        dictgen::InsensitiveStr::Ascii("ygnist"),
    ],
    values: &[
        &["misogynist"],
        &["misogynistic"],
        &["misogynist"],
        &["misogynistic"],
        &["misogynist"],
        &["misogynist"],
        &["misogynistic"],
        &["misogynist"],
        &["misogynist"],
        &["misogynistic"],
        &["misogynist"],
        &["misogynist"],
        &["misogynistic"],
        &["misogynist"],
        &["misogynist"],
        &["misogynist"],
        &["misogynistic"],
        &["misogynistic"],
        &["misogynistic"],
        &["misogynistic"],
        &["misogynistic"],
        &["misogynist"],
        &["misogynist"],
        &["misogynist"],
        &["misogynistic"],
        &["missouri"],
        &["misogynist"],
    ],
    range: 3..=9,
};

static WORD_MISN_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_MISN_CHILDREN),
    value: None,
};

pub static WORD_MISN_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("adry")],
    values: &[&["misandry"]],
    range: 4..=4,
};

static WORD_MISI_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_MISI_CHILDREN),
    value: None,
};

pub static WORD_MISI_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("le"),
        dictgen::InsensitiveStr::Ascii("mformed"),
        dictgen::InsensitiveStr::Ascii("nfomed"),
        dictgen::InsensitiveStr::Ascii("nterept"),
        dictgen::InsensitiveStr::Ascii("nterperet"),
        dictgen::InsensitiveStr::Ascii("nterpert"),
        dictgen::InsensitiveStr::Ascii("nterperted"),
        dictgen::InsensitiveStr::Ascii("nterperting"),
        dictgen::InsensitiveStr::Ascii("nterpet"),
        dictgen::InsensitiveStr::Ascii("nterprate"),
        dictgen::InsensitiveStr::Ascii("nterprating"),
        dictgen::InsensitiveStr::Ascii("nterpred"),
        dictgen::InsensitiveStr::Ascii("nterprent"),
        dictgen::InsensitiveStr::Ascii("nterprented"),
        dictgen::InsensitiveStr::Ascii("nterprested"),
        dictgen::InsensitiveStr::Ascii("nterpretated"),
        dictgen::InsensitiveStr::Ascii("nterpretating"),
        dictgen::InsensitiveStr::Ascii("nterpretion"),
        dictgen::InsensitiveStr::Ascii("nterpretions"),
        dictgen::InsensitiveStr::Ascii("nterpretted"),
        dictgen::InsensitiveStr::Ascii("nterpretting"),
        dictgen::InsensitiveStr::Ascii("nterprit"),
        dictgen::InsensitiveStr::Ascii("nterpriting"),
        dictgen::InsensitiveStr::Ascii("nterprted"),
        dictgen::InsensitiveStr::Ascii("nterpt"),
        dictgen::InsensitiveStr::Ascii("nterpted"),
        dictgen::InsensitiveStr::Ascii("ntrepret"),
        dictgen::InsensitiveStr::Ascii("ntrepreted"),
        dictgen::InsensitiveStr::Ascii("ntrepreting"),
        dictgen::InsensitiveStr::Ascii("son"),
        dictgen::InsensitiveStr::Ascii("sonaries"),
        dictgen::InsensitiveStr::Ascii("sonary"),
    ],
    values: &[
        &["missile"],
        &["misinformed"],
        &["misinformed"],
        &["misinterpret"],
        &["misinterpret"],
        &["misinterpret"],
        &["misinterpreted"],
        &["misinterpreting"],
        &["misinterpret"],
        &["misinterpret"],
        &["misinterpreting"],
        &["misinterpreted"],
        &["misinterpret"],
        &["misinterpret"],
        &["misinterpret"],
        &["misinterpreted"],
        &["misinterpreting"],
        &["misinterpreting"],
        &["misinterpreting"],
        &["misinterpreted"],
        &["misinterpreting"],
        &["misinterpreting"],
        &["misinterpreting"],
        &["misinterpret"],
        &["misinterpret"],
        &["misinterpret"],
        &["misinterpret"],
        &["misinterpreted"],
        &["misinterpreting"],
        &["mission"],
        &["missionaries"],
        &["missionary"],
    ],
    range: 2..=13,
};

static WORD_MISG_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_MISG_CHILDREN),
    value: None,
};

pub static WORD_MISG_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("oynist"),
        dictgen::InsensitiveStr::Ascii("oynistic"),
    ],
    values: &[&["misogynist"], &["misogynistic"]],
    range: 6..=8,
};

static WORD_MISF_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_MISF_CHILDREN),
    value: None,
};

pub static WORD_MISF_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ortunte"),
        dictgen::InsensitiveStr::Ascii("orture"),
        dictgen::InsensitiveStr::Ascii("ourtunes"),
    ],
    values: &[&["misfortune"], &["misfortune"], &["misfortunes"]],
    range: 6..=8,
};

static WORD_MISE_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_MISE_CHILDREN),
    value: None,
};

pub static WORD_MISE_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("rabel"),
        dictgen::InsensitiveStr::Ascii("rablely"),
        dictgen::InsensitiveStr::Ascii("rabley"),
        dictgen::InsensitiveStr::Ascii("rablly"),
    ],
    values: &[
        &["miserable"],
        &["miserably"],
        &["miserably"],
        &["miserably"],
    ],
    range: 5..=7,
};

static WORD_MISD_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_MISD_CHILDREN),
    value: None,
};

pub static WORD_MISD_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ameanor"),
        dictgen::InsensitiveStr::Ascii("ameanors"),
        dictgen::InsensitiveStr::Ascii("eamenor"),
        dictgen::InsensitiveStr::Ascii("eamenors"),
        dictgen::InsensitiveStr::Ascii("emeaner"),
        dictgen::InsensitiveStr::Ascii("emenaor"),
        dictgen::InsensitiveStr::Ascii("emenor"),
        dictgen::InsensitiveStr::Ascii("emenors"),
        dictgen::InsensitiveStr::Ascii("imeanor"),
        dictgen::InsensitiveStr::Ascii("omeanor"),
    ],
    values: &[
        &["misdemeanor"],
        &["misdemeanors"],
        &["misdemeanor"],
        &["misdemeanor"],
        &["misdemeanor"],
        &["misdemeanor"],
        &["misdemeanor"],
        &["misdemeanors"],
        &["misdemeanor"],
        &["misdemeanor"],
    ],
    range: 6..=8,
};

static WORD_MISC_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_MISC_CHILDREN),
    value: None,
};

pub static WORD_MISC_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("airrage"),
        dictgen::InsensitiveStr::Ascii("arrage"),
        dictgen::InsensitiveStr::Ascii("arraige"),
        dictgen::InsensitiveStr::Ascii("arraiges"),
        dictgen::InsensitiveStr::Ascii("arridge"),
        dictgen::InsensitiveStr::Ascii("arriege"),
        dictgen::InsensitiveStr::Ascii("arrige"),
        dictgen::InsensitiveStr::Ascii("atalogued"),
        dictgen::InsensitiveStr::Ascii("elaneous"),
        dictgen::InsensitiveStr::Ascii("ellanious"),
        dictgen::InsensitiveStr::Ascii("ellanous"),
        dictgen::InsensitiveStr::Ascii("heivous"),
        dictgen::InsensitiveStr::Ascii("hevious"),
        dictgen::InsensitiveStr::Ascii("hievious"),
        dictgen::InsensitiveStr::Ascii("ommunciation"),
        dictgen::InsensitiveStr::Ascii("ommuniation"),
        dictgen::InsensitiveStr::Ascii("ommunicaiton"),
        dictgen::InsensitiveStr::Ascii("ommunicatie"),
        dictgen::InsensitiveStr::Ascii("ommuniction"),
        dictgen::InsensitiveStr::Ascii("omunnication"),
        dictgen::InsensitiveStr::Ascii("oncpetion"),
        dictgen::InsensitiveStr::Ascii("onecption"),
        dictgen::InsensitiveStr::Ascii("onseptions"),
        dictgen::InsensitiveStr::Ascii("ummunication"),
    ],
    values: &[
        &["miscarriage"],
        &["miscarriage"],
        &["miscarriage"],
        &["miscarriage"],
        &["miscarriage"],
        &["miscarriage"],
        &["miscarriage"],
        &["miscataloged"],
        &["miscellaneous"],
        &["miscellaneous"],
        &["miscellaneous"],
        &["mischievous"],
        &["mischievous"],
        &["mischievous"],
        &["miscommunication"],
        &["miscommunication"],
        &["miscommunication"],
        &["miscommunication"],
        &["miscommunication"],
        &["miscommunication"],
        &["misconceptions"],
        &["misconceptions"],
        &["misconceptions"],
        &["miscommunication"],
    ],
    range: 6..=12,
};

static WORD_MISA_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_MISA_CHILDREN),
    value: None,
};

pub static WORD_MISA_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("nderstood"),
        dictgen::InsensitiveStr::Ascii("ndrony"),
        dictgen::InsensitiveStr::Ascii("ndy"),
    ],
    values: &[&["misunderstood"], &["misandry"], &["misandry"]],
    range: 3..=9,
};

static WORD_MIR_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_MIR_CHILDREN),
    value: None,
};

pub static WORD_MIR_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("acalous"),
        dictgen::InsensitiveStr::Ascii("acilously"),
        dictgen::InsensitiveStr::Ascii("acluous"),
        dictgen::InsensitiveStr::Ascii("acoulus"),
        dictgen::InsensitiveStr::Ascii("aculaous"),
        dictgen::InsensitiveStr::Ascii("aculos"),
        dictgen::InsensitiveStr::Ascii("aculosly"),
        dictgen::InsensitiveStr::Ascii("aculousy"),
        dictgen::InsensitiveStr::Ascii("aculu"),
        dictgen::InsensitiveStr::Ascii("acurously"),
        dictgen::InsensitiveStr::Ascii("alces"),
        dictgen::InsensitiveStr::Ascii("cales"),
        dictgen::InsensitiveStr::Ascii("coatx"),
        dictgen::InsensitiveStr::Ascii("cocenter"),
        dictgen::InsensitiveStr::Ascii("cophone"),
        dictgen::InsensitiveStr::Ascii("cophones"),
        dictgen::InsensitiveStr::Ascii("coscope"),
        dictgen::InsensitiveStr::Ascii("coscopic"),
        dictgen::InsensitiveStr::Ascii("cotransaction"),
        dictgen::InsensitiveStr::Ascii("cotransactions"),
        dictgen::InsensitiveStr::Ascii("cowave"),
        dictgen::InsensitiveStr::Ascii("cowaves"),
        dictgen::InsensitiveStr::Ascii("gaine"),
        dictgen::InsensitiveStr::Ascii("orred"),
        dictgen::InsensitiveStr::Ascii("rord"),
        dictgen::InsensitiveStr::Ascii("rorred"),
    ],
    values: &[
        &["miraculous"],
        &["miraculously"],
        &["miraculous"],
        &["miraculous"],
        &["miraculous"],
        &["miraculous"],
        &["miraculously"],
        &["miraculously"],
        &["miraculous"],
        &["miraculous"],
        &["miracles"],
        &["miracles"],
        &["microatx"],
        &["microcenter"],
        &["microphone"],
        &["microphones"],
        &["microscope"],
        &["microscopic"],
        &["microtransactions"],
        &["microtransactions"],
        &["microwave"],
        &["microwaves"],
        &["migraine"],
        &["mirrored"],
        &["mirrored"],
        &["mirrored"],
    ],
    range: 4..=14,
};

static WORD_MIN_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_MIN_CHILDREN),
    value: None,
};

pub static WORD_MIN_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("amilist"),
        dictgen::InsensitiveStr::Ascii("ature"),
        dictgen::InsensitiveStr::Ascii("dcarck"),
        dictgen::InsensitiveStr::Ascii("dcrak"),
        dictgen::InsensitiveStr::Ascii("dleslly"),
        dictgen::InsensitiveStr::Ascii("dlessely"),
        dictgen::InsensitiveStr::Ascii("dlessley"),
        dictgen::InsensitiveStr::Ascii("dlessy"),
        dictgen::InsensitiveStr::Ascii("erales"),
        dictgen::InsensitiveStr::Ascii("eras"),
        dictgen::InsensitiveStr::Ascii("erial"),
        dictgen::InsensitiveStr::Ascii("giame"),
        dictgen::InsensitiveStr::Ascii("image"),
        dictgen::InsensitiveStr::Ascii("imalisitc"),
        dictgen::InsensitiveStr::Ascii("imalisity"),
        dictgen::InsensitiveStr::Ascii("imals"),
        dictgen::InsensitiveStr::Ascii("imalstic"),
        dictgen::InsensitiveStr::Ascii("imalt"),
        dictgen::InsensitiveStr::Ascii("imazing"),
        dictgen::InsensitiveStr::Ascii("imilast"),
        dictgen::InsensitiveStr::Ascii("imilist"),
        dictgen::InsensitiveStr::Ascii("imini"),
        dictgen::InsensitiveStr::Ascii("imium"),
        dictgen::InsensitiveStr::Ascii("inalist"),
        dictgen::InsensitiveStr::Ascii("inos"),
        dictgen::InsensitiveStr::Ascii("interpret"),
        dictgen::InsensitiveStr::Ascii("interpreting"),
        dictgen::InsensitiveStr::Ascii("ipulating"),
        dictgen::InsensitiveStr::Ascii("ipulation"),
        dictgen::InsensitiveStr::Ascii("ipulative"),
        dictgen::InsensitiveStr::Ascii("isclue"),
        dictgen::InsensitiveStr::Ascii("iscue"),
        dictgen::InsensitiveStr::Ascii("iscuel"),
        dictgen::InsensitiveStr::Ascii("isterens"),
        dictgen::InsensitiveStr::Ascii("isteres"),
        dictgen::InsensitiveStr::Ascii("isterios"),
        dictgen::InsensitiveStr::Ascii("isterns"),
        dictgen::InsensitiveStr::Ascii("istery"),
        dictgen::InsensitiveStr::Ascii("istr"),
        dictgen::InsensitiveStr::Ascii("isty"),
        dictgen::InsensitiveStr::Ascii("isucle"),
        dictgen::InsensitiveStr::Ascii("itaure"),
        dictgen::InsensitiveStr::Ascii("ituare"),
        dictgen::InsensitiveStr::Ascii("neaoplis"),
        dictgen::InsensitiveStr::Ascii("neaplis"),
        dictgen::InsensitiveStr::Ascii("neaplois"),
        dictgen::InsensitiveStr::Ascii("neapolites"),
        dictgen::InsensitiveStr::Ascii("neapols"),
        dictgen::InsensitiveStr::Ascii("neosta"),
        dictgen::InsensitiveStr::Ascii("nesotta"),
        dictgen::InsensitiveStr::Ascii("nestoa"),
        dictgen::InsensitiveStr::Ascii("niapolis"),
        dictgen::InsensitiveStr::Ascii("oins"),
        dictgen::InsensitiveStr::Ascii("oritets"),
        dictgen::InsensitiveStr::Ascii("oroties"),
        dictgen::InsensitiveStr::Ascii("sicule"),
        dictgen::InsensitiveStr::Ascii("siter"),
        dictgen::InsensitiveStr::Ascii("siters"),
        dictgen::InsensitiveStr::Ascii("sitry"),
        dictgen::InsensitiveStr::Ascii("stries"),
        dictgen::InsensitiveStr::Ascii("stry"),
        dictgen::InsensitiveStr::Ascii("umum"),
    ],
    values: &[
        &["minimalist"],
        &["miniature"],
        &["mindcrack"],
        &["mindcrack"],
        &["mindlessly"],
        &["mindlessly"],
        &["mindlessly"],
        &["mindlessly"],
        &["minerals"],
        &["minerals"],
        &["mineral"],
        &["minigame"],
        &["minigame"],
        &["minimalist"],
        &["minimalist"],
        &["minimalist"],
        &["minimalist"],
        &["minimalist"],
        &["minimizing"],
        &["minimalist"],
        &["minimalist"],
        &["minimizing"],
        &["minimum"],
        &["minimalist"],
        &["minions"],
        &["misinterpret"],
        &["misinterpreting"],
        &["manipulating"],
        &["manipulation"],
        &["manipulative"],
        &["miniscule"],
        &["miniscule"],
        &["miniscule"],
        &["ministers"],
        &["ministers"],
        &["ministers"],
        &["ministers"],
        &["ministry"],
        &["minister"],
        &["ministry"],
        &["miniscule"],
        &["miniature"],
        &["miniature"],
        &["minneapolis"],
        &["minneapolis"],
        &["minneapolis"],
        &["minneapolis"],
        &["minneapolis"],
        &["minnesota"],
        &["minnesota"],
        &["minnesota"],
        &["minneapolis"],
        &["minions"],
        &["minorities"],
        &["minorities"],
        &["miniscule"],
        &["minister"],
        &["ministers"],
        &["ministry"],
        &["ministries"],
        &["ministry"],
        &["minimum"],
    ],
    range: 4..=12,
};

static WORD_MIM_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_MIM_CHILDREN),
    value: None,
};

pub static WORD_MIM_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("imum"),
        dictgen::InsensitiveStr::Ascii("inalist"),
    ],
    values: &[&["minimum"], &["minimalist"]],
    range: 4..=7,
};

static WORD_MIL_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_MIL_CHILDREN),
    value: None,
};

pub static WORD_MIL_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("awukee"),
        dictgen::InsensitiveStr::Ascii("eau"),
        dictgen::InsensitiveStr::Ascii("ennia"),
        dictgen::InsensitiveStr::Ascii("ennium"),
        dictgen::InsensitiveStr::Ascii("estons"),
        dictgen::InsensitiveStr::Ascii("etsones"),
        dictgen::InsensitiveStr::Ascii("eu"),
        dictgen::InsensitiveStr::Ascii("igram"),
        dictgen::InsensitiveStr::Ascii("iitas"),
        dictgen::InsensitiveStr::Ascii("ion"),
        dictgen::InsensitiveStr::Ascii("iraty"),
        dictgen::InsensitiveStr::Ascii("isecond"),
        dictgen::InsensitiveStr::Ascii("itais"),
        dictgen::InsensitiveStr::Ascii("itat"),
        dictgen::InsensitiveStr::Ascii("itiades"),
        dictgen::InsensitiveStr::Ascii("itians"),
        dictgen::InsensitiveStr::Ascii("itiants"),
        dictgen::InsensitiveStr::Ascii("itis"),
        dictgen::InsensitiveStr::Ascii("lenia"),
        dictgen::InsensitiveStr::Ascii("lenial"),
        dictgen::InsensitiveStr::Ascii("lenialism"),
        dictgen::InsensitiveStr::Ascii("lenian"),
        dictgen::InsensitiveStr::Ascii("lenium"),
        dictgen::InsensitiveStr::Ascii("lenna"),
        dictgen::InsensitiveStr::Ascii("lienaire"),
        dictgen::InsensitiveStr::Ascii("linnium"),
        dictgen::InsensitiveStr::Ascii("lionairre"),
        dictgen::InsensitiveStr::Ascii("lionairres"),
        dictgen::InsensitiveStr::Ascii("lionairs"),
        dictgen::InsensitiveStr::Ascii("lionar"),
        dictgen::InsensitiveStr::Ascii("lionarie"),
        dictgen::InsensitiveStr::Ascii("lionaries"),
        dictgen::InsensitiveStr::Ascii("lioniare"),
        dictgen::InsensitiveStr::Ascii("lioniares"),
        dictgen::InsensitiveStr::Ascii("litary"),
        dictgen::InsensitiveStr::Ascii("lon"),
        dictgen::InsensitiveStr::Ascii("tary"),
        dictgen::InsensitiveStr::Ascii("tiant"),
        dictgen::InsensitiveStr::Ascii("uwakee"),
        dictgen::InsensitiveStr::Ascii("wakuee"),
        dictgen::InsensitiveStr::Ascii("wuakee"),
    ],
    values: &[
        &["milwaukee"],
        &["milieu"],
        &["millennia"],
        &["millennium"],
        &["milestones"],
        &["milestones"],
        &["milieu"],
        &["milligram"],
        &["militias"],
        &["million"],
        &["military"],
        &["millisecond"],
        &["militias"],
        &["militant"],
        &["militias"],
        &["militias"],
        &["militias"],
        &["militias"],
        &["millennia"],
        &["millennial"],
        &["millennialism"],
        &["millennia"],
        &["millennium"],
        &["millennia"],
        &["millionaire"],
        &["millennium"],
        &["millionaire"],
        &["millionaire"],
        &["millionaires"],
        &["millionaire"],
        &["millionaire"],
        &["millionaires"],
        &["millionaire"],
        &["millionaires"],
        &["military"],
        &["million"],
        &["military"],
        &["militant"],
        &["milwaukee"],
        &["milwaukee"],
        &["milwaukee"],
    ],
    range: 2..=10,
};

static WORD_MIG_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_MIG_CHILDREN),
    value: None,
};

pub static WORD_MIG_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("itation"),
        dictgen::InsensitiveStr::Ascii("rainers"),
        dictgen::InsensitiveStr::Ascii("rains"),
        dictgen::InsensitiveStr::Ascii("rans"),
        dictgen::InsensitiveStr::Ascii("rantes"),
        dictgen::InsensitiveStr::Ascii("riane"),
        dictgen::InsensitiveStr::Ascii("rianes"),
    ],
    values: &[
        &["mitigation"],
        &["migraines"],
        &["migraines"],
        &["migrants"],
        &["migrants"],
        &["migraine"],
        &["migraines"],
    ],
    range: 4..=7,
};

static WORD_MID_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_MID_CHILDREN),
    value: None,
};

pub static WORD_MID_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("feild"),
        dictgen::InsensitiveStr::Ascii("feilder"),
        dictgen::InsensitiveStr::Ascii("feilders"),
        dictgen::InsensitiveStr::Ascii("fied"),
        dictgen::InsensitiveStr::Ascii("fiedler"),
        dictgen::InsensitiveStr::Ascii("fiedlers"),
        dictgen::InsensitiveStr::Ascii("fieldes"),
        dictgen::InsensitiveStr::Ascii("fieldiers"),
        dictgen::InsensitiveStr::Ascii("fielers"),
        dictgen::InsensitiveStr::Ascii("filed"),
        dictgen::InsensitiveStr::Ascii("fileder"),
        dictgen::InsensitiveStr::Ascii("fileders"),
        dictgen::InsensitiveStr::Ascii("ifeld"),
        dictgen::InsensitiveStr::Ascii("ifelder"),
        dictgen::InsensitiveStr::Ascii("ifelders"),
        dictgen::InsensitiveStr::Ascii("nlessly"),
        dictgen::InsensitiveStr::Ascii("otwn"),
        dictgen::InsensitiveStr::Ascii("twon"),
    ],
    values: &[
        &["midfield"],
        &["midfielder"],
        &["midfielders"],
        &["midfield"],
        &["midfielder"],
        &["midfielders"],
        &["midfielders"],
        &["midfielders"],
        &["midfielders"],
        &["midfield"],
        &["midfielder"],
        &["midfielders"],
        &["midfield"],
        &["midfielder"],
        &["midfielders"],
        &["mindlessly"],
        &["midtown"],
        &["midtown"],
    ],
    range: 4..=9,
};

static WORD_MIC_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_MIC_CHILDREN),
    value: None,
};

pub static WORD_MIC_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("hagan"),
        dictgen::InsensitiveStr::Ascii("helline"),
        dictgen::InsensitiveStr::Ascii("hellle"),
        dictgen::InsensitiveStr::Ascii("hgian"),
        dictgen::InsensitiveStr::Ascii("hina"),
        dictgen::InsensitiveStr::Ascii("orcenter"),
        dictgen::InsensitiveStr::Ascii("orphones"),
        dictgen::InsensitiveStr::Ascii("ortransactions"),
        dictgen::InsensitiveStr::Ascii("orwave"),
        dictgen::InsensitiveStr::Ascii("orwaves"),
        dictgen::InsensitiveStr::Ascii("oscopy"),
        dictgen::InsensitiveStr::Ascii("rocender"),
        dictgen::InsensitiveStr::Ascii("rocentre"),
        dictgen::InsensitiveStr::Ascii("rocentres"),
        dictgen::InsensitiveStr::Ascii("rocentro"),
        dictgen::InsensitiveStr::Ascii("rohpone"),
        dictgen::InsensitiveStr::Ascii("rohpones"),
        dictgen::InsensitiveStr::Ascii("rophen"),
        dictgen::InsensitiveStr::Ascii("rophonies"),
        dictgen::InsensitiveStr::Ascii("roscoop"),
        dictgen::InsensitiveStr::Ascii("roscophic"),
        dictgen::InsensitiveStr::Ascii("roscopice"),
        dictgen::InsensitiveStr::Ascii("roscoptic"),
        dictgen::InsensitiveStr::Ascii("roscrope"),
        dictgen::InsensitiveStr::Ascii("rostansactions"),
        dictgen::InsensitiveStr::Ascii("rotax"),
        dictgen::InsensitiveStr::Ascii("rotramsactions"),
        dictgen::InsensitiveStr::Ascii("rotranasctions"),
        dictgen::InsensitiveStr::Ascii("rotransacations"),
        dictgen::InsensitiveStr::Ascii("rotransacciones"),
        dictgen::InsensitiveStr::Ascii("rotransacions"),
        dictgen::InsensitiveStr::Ascii("rotransacitons"),
        dictgen::InsensitiveStr::Ascii("rotransacrions"),
        dictgen::InsensitiveStr::Ascii("rotransacting"),
        dictgen::InsensitiveStr::Ascii("rotransactioms"),
        dictgen::InsensitiveStr::Ascii("rotransactional"),
        dictgen::InsensitiveStr::Ascii("rotransactioned"),
        dictgen::InsensitiveStr::Ascii("rotransactios"),
        dictgen::InsensitiveStr::Ascii("rotransactiosn"),
        dictgen::InsensitiveStr::Ascii("rotransacton"),
        dictgen::InsensitiveStr::Ascii("rotransactons"),
        dictgen::InsensitiveStr::Ascii("rotransations"),
        dictgen::InsensitiveStr::Ascii("rotranscation"),
        dictgen::InsensitiveStr::Ascii("rotranscations"),
        dictgen::InsensitiveStr::Ascii("rotrasnactions"),
        dictgen::InsensitiveStr::Ascii("rovaves"),
        dictgen::InsensitiveStr::Ascii("rovaxes"),
        dictgen::InsensitiveStr::Ascii("rowae"),
        dictgen::InsensitiveStr::Ascii("rowavees"),
        dictgen::InsensitiveStr::Ascii("rowavers"),
        dictgen::InsensitiveStr::Ascii("rpohone"),
    ],
    values: &[
        &["michigan"],
        &["michelle"],
        &["michelle"],
        &["michigan"],
        &["michigan"],
        &["microcenter"],
        &["microphones"],
        &["microtransactions"],
        &["microwave"],
        &["microwaves"],
        &["microscopy"],
        &["microcenter"],
        &["microcenter"],
        &["microcenter"],
        &["microcenter"],
        &["microphone"],
        &["microphones"],
        &["microphone"],
        &["microphones"],
        &["microscope"],
        &["microscopic"],
        &["microscope"],
        &["microscopic"],
        &["microscope"],
        &["microtransactions"],
        &["microatx"],
        &["microtransactions"],
        &["microtransactions"],
        &["microtransactions"],
        &["microtransactions"],
        &["microtransactions"],
        &["microtransactions"],
        &["microtransactions"],
        &["microtransactions"],
        &["microtransactions"],
        &["microtransactions"],
        &["microtransactions"],
        &["microtransactions"],
        &["microtransactions"],
        &["microtransactions"],
        &["microtransactions"],
        &["microtransactions"],
        &["microtransactions"],
        &["microtransactions"],
        &["microtransactions"],
        &["microwaves"],
        &["microwaves"],
        &["microwaves"],
        &["microwaves"],
        &["microwaves"],
        &["microphones"],
    ],
    range: 4..=15,
};

static WORD_MH_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_MH_CHILDREN),
    value: None,
};

pub static WORD_MH_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("ytical")],
    values: &[&["mythical"]],
    range: 6..=6,
};

static WORD_ME_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_ME_CHILDREN),
    value: None,
};

static WORD_ME_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    Some(&WORD_MEA_NODE),
    None,
    Some(&WORD_MEC_NODE),
    Some(&WORD_MED_NODE),
    Some(&WORD_MEE_NODE),
    None,
    Some(&WORD_MEG_NODE),
    None,
    Some(&WORD_MEI_NODE),
    None,
    None,
    Some(&WORD_MEL_NODE),
    Some(&WORD_MEM_NODE),
    Some(&WORD_MEN_NODE),
    Some(&WORD_MEO_NODE),
    None,
    None,
    Some(&WORD_MER_NODE),
    Some(&WORD_MES_NODE),
    Some(&WORD_MET_NODE),
    None,
    None,
    None,
    Some(&WORD_MEX_NODE),
    None,
    None,
];

static WORD_MEX_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_MEX_CHILDREN),
    value: None,
};

pub static WORD_MEX_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("cian"),
        dictgen::InsensitiveStr::Ascii("cians"),
        dictgen::InsensitiveStr::Ascii("icain"),
        dictgen::InsensitiveStr::Ascii("icanas"),
        dictgen::InsensitiveStr::Ascii("icanese"),
        dictgen::InsensitiveStr::Ascii("icaness"),
        dictgen::InsensitiveStr::Ascii("icants"),
        dictgen::InsensitiveStr::Ascii("icanus"),
    ],
    values: &[
        &["mexican"],
        &["mexicans"],
        &["mexican"],
        &["mexicans"],
        &["mexicans"],
        &["mexicans"],
        &["mexicans"],
        &["mexicans"],
    ],
    range: 4..=7,
};

static WORD_MET_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_MET_CHILDREN),
    value: None,
};

static WORD_MET_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    Some(&WORD_META_NODE),
    None,
    None,
    None,
    Some(&WORD_METE_NODE),
    None,
    None,
    Some(&WORD_METH_NODE),
    Some(&WORD_METI_NODE),
    None,
    None,
    Some(&WORD_METL_NODE),
    None,
    None,
    Some(&WORD_METO_NODE),
    None,
    None,
    Some(&WORD_METR_NODE),
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
];

static WORD_METR_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_METR_CHILDREN),
    value: None,
};

pub static WORD_METR_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("apolis"),
        dictgen::InsensitiveStr::Ascii("icas"),
        dictgen::InsensitiveStr::Ascii("ices"),
        dictgen::InsensitiveStr::Ascii("ololitan"),
        dictgen::InsensitiveStr::Ascii("olopis"),
        dictgen::InsensitiveStr::Ascii("opilis"),
        dictgen::InsensitiveStr::Ascii("opilitan"),
        dictgen::InsensitiveStr::Ascii("oplois"),
        dictgen::InsensitiveStr::Ascii("oploitan"),
        dictgen::InsensitiveStr::Ascii("opolian"),
        dictgen::InsensitiveStr::Ascii("opolians"),
        dictgen::InsensitiveStr::Ascii("opolies"),
        dictgen::InsensitiveStr::Ascii("opolin"),
        dictgen::InsensitiveStr::Ascii("opolitain"),
        dictgen::InsensitiveStr::Ascii("opolitaine"),
        dictgen::InsensitiveStr::Ascii("opolitcan"),
        dictgen::InsensitiveStr::Ascii("opoliten"),
        dictgen::InsensitiveStr::Ascii("opolitian"),
        dictgen::InsensitiveStr::Ascii("opolitin"),
        dictgen::InsensitiveStr::Ascii("opoliton"),
        dictgen::InsensitiveStr::Ascii("opollis"),
        dictgen::InsensitiveStr::Ascii("opolois"),
        dictgen::InsensitiveStr::Ascii("opolos"),
        dictgen::InsensitiveStr::Ascii("opols"),
        dictgen::InsensitiveStr::Ascii("opolys"),
        dictgen::InsensitiveStr::Ascii("opos"),
    ],
    values: &[
        &["metropolis"],
        &["metrics"],
        &["metrics"],
        &["metropolitan"],
        &["metropolis"],
        &["metropolis"],
        &["metropolitan"],
        &["metropolis"],
        &["metropolitan"],
        &["metropolitan"],
        &["metropolis"],
        &["metropolis"],
        &["metropolitan"],
        &["metropolitan"],
        &["metropolitan"],
        &["metropolitan"],
        &["metropolitan"],
        &["metropolitan"],
        &["metropolitan"],
        &["metropolitan"],
        &["metropolis"],
        &["metropolis"],
        &["metropolis"],
        &["metropolis"],
        &["metropolis"],
        &["metropolis"],
    ],
    range: 4..=10,
};

static WORD_METO_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_METO_CHILDREN),
    value: None,
};

pub static WORD_METO_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("phorical"),
        dictgen::InsensitiveStr::Ascii("phorically"),
        dictgen::InsensitiveStr::Ascii("rpolitan"),
    ],
    values: &[&["metaphorical"], &["metaphorically"], &["metropolitan"]],
    range: 8..=10,
};

static WORD_METL_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_METL_CHILDREN),
    value: None,
};

pub static WORD_METL_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("down")],
    values: &[&["meltdown"]],
    range: 4..=4,
};

static WORD_METI_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_METI_CHILDREN),
    value: None,
};

pub static WORD_METI_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("phorical"),
        dictgen::InsensitiveStr::Ascii("phorically"),
    ],
    values: &[&["metaphorical"], &["metaphorically"]],
    range: 8..=10,
};

static WORD_METH_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_METH_CHILDREN),
    value: None,
};

pub static WORD_METH_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("amatician"),
        dictgen::InsensitiveStr::Ascii("aphor"),
        dictgen::InsensitiveStr::Ascii("aphors"),
        dictgen::InsensitiveStr::Ascii("apor"),
        dictgen::InsensitiveStr::Ascii("aporical"),
        dictgen::InsensitiveStr::Ascii("aporically"),
        dictgen::InsensitiveStr::Ascii("apors"),
        dictgen::InsensitiveStr::Ascii("ematical"),
        dictgen::InsensitiveStr::Ascii("ematician"),
        dictgen::InsensitiveStr::Ascii("odolgy"),
        dictgen::InsensitiveStr::Ascii("odoligy"),
        dictgen::InsensitiveStr::Ascii("odoloy"),
        dictgen::InsensitiveStr::Ascii("odoly"),
        dictgen::InsensitiveStr::Ascii("olodogy"),
    ],
    values: &[
        &["mathematician"],
        &["metaphor"],
        &["metaphors"],
        &["metaphor"],
        &["metaphorical"],
        &["metaphorically"],
        &["metaphors"],
        &["mathematical"],
        &["mathematician"],
        &["methodology"],
        &["methodology"],
        &["methodology"],
        &["methodology"],
        &["methodology"],
    ],
    range: 4..=10,
};

static WORD_METE_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_METE_CHILDREN),
    value: None,
};

pub static WORD_METE_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("phorical"),
        dictgen::InsensitiveStr::Ascii("phorically"),
        dictgen::InsensitiveStr::Ascii("physical"),
        dictgen::InsensitiveStr::Ascii("rologist"),
        dictgen::InsensitiveStr::Ascii("rology"),
        dictgen::InsensitiveStr::Ascii("rosexual"),
    ],
    values: &[
        &["metaphorical"],
        &["metaphorically"],
        &["metaphysical"],
        &["meteorologist"],
        &["meteorology"],
        &["heterosexual"],
    ],
    range: 6..=10,
};

static WORD_META_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_META_CHILDREN),
    value: None,
};

pub static WORD_META_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("balism"),
        dictgen::InsensitiveStr::Ascii("bilism"),
        dictgen::InsensitiveStr::Ascii("bloic"),
        dictgen::InsensitiveStr::Ascii("bloism"),
        dictgen::InsensitiveStr::Ascii("blosim"),
        dictgen::InsensitiveStr::Ascii("bolics"),
        dictgen::InsensitiveStr::Ascii("bolisim"),
        dictgen::InsensitiveStr::Ascii("bolitic"),
        dictgen::InsensitiveStr::Ascii("bolizm"),
        dictgen::InsensitiveStr::Ascii("bolsim"),
        dictgen::InsensitiveStr::Ascii("gaem"),
        dictgen::InsensitiveStr::Ascii("gem"),
        dictgen::InsensitiveStr::Ascii("hpor"),
        dictgen::InsensitiveStr::Ascii("lic"),
        dictgen::InsensitiveStr::Ascii("lurgic"),
        dictgen::InsensitiveStr::Ascii("lurgical"),
        dictgen::InsensitiveStr::Ascii("lurgy"),
        dictgen::InsensitiveStr::Ascii("mage"),
        dictgen::InsensitiveStr::Ascii("morphysis"),
        dictgen::InsensitiveStr::Ascii("phisical"),
        dictgen::InsensitiveStr::Ascii("phisics"),
        dictgen::InsensitiveStr::Ascii("phoras"),
        dictgen::InsensitiveStr::Ascii("phores"),
        dictgen::InsensitiveStr::Ascii("phorial"),
        dictgen::InsensitiveStr::Ascii("phoricaly"),
        dictgen::InsensitiveStr::Ascii("phoricial"),
        dictgen::InsensitiveStr::Ascii("phoricly"),
        dictgen::InsensitiveStr::Ascii("phorics"),
        dictgen::InsensitiveStr::Ascii("photically"),
        dictgen::InsensitiveStr::Ascii("phsyical"),
        dictgen::InsensitiveStr::Ascii("phsyics"),
        dictgen::InsensitiveStr::Ascii("phyics"),
        dictgen::InsensitiveStr::Ascii("phyiscal"),
        dictgen::InsensitiveStr::Ascii("phyiscs"),
        dictgen::InsensitiveStr::Ascii("physcial"),
        dictgen::InsensitiveStr::Ascii("physicals"),
        dictgen::InsensitiveStr::Ascii("physicans"),
        dictgen::InsensitiveStr::Ascii("physisch"),
    ],
    values: &[
        &["metabolism"],
        &["metabolism"],
        &["metabolic"],
        &["metabolism"],
        &["metabolism"],
        &["metabolism"],
        &["metabolism"],
        &["metabolic"],
        &["metabolism"],
        &["metabolism"],
        &["metagame"],
        &["metagame"],
        &["metaphor"],
        &["metallic"],
        &["metallurgic"],
        &["metallurgical"],
        &["metallurgy"],
        &["metagame"],
        &["metamorphosis"],
        &["metaphysical"],
        &["metaphysics"],
        &["metaphors"],
        &["metaphors"],
        &["metaphorical"],
        &["metaphorically"],
        &["metaphorical"],
        &["metaphorical"],
        &["metaphors"],
        &["metaphorically"],
        &["metaphysical"],
        &["metaphysics"],
        &["metaphysics"],
        &["metaphysical"],
        &["metaphysics"],
        &["metaphysical"],
        &["metaphysics"],
        &["metaphysics"],
        &["metaphysics"],
    ],
    range: 3..=10,
};

static WORD_MES_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_MES_CHILDREN),
    value: None,
};

pub static WORD_MES_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("sagd"),
        dictgen::InsensitiveStr::Ascii("sagease"),
        dictgen::InsensitiveStr::Ascii("sagepad"),
        dictgen::InsensitiveStr::Ascii("sagers"),
        dictgen::InsensitiveStr::Ascii("saih"),
        dictgen::InsensitiveStr::Ascii("sanger"),
        dictgen::InsensitiveStr::Ascii("senging"),
        dictgen::InsensitiveStr::Ascii("sgaed"),
        dictgen::InsensitiveStr::Ascii("siach"),
    ],
    values: &[
        &["messaged"],
        &["messages"],
        &["messaged"],
        &["messages"],
        &["messiah"],
        &["messenger"],
        &["messaging"],
        &["messaged"],
        &["messiah"],
    ],
    range: 4..=7,
};

static WORD_MER_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_MER_CHILDREN),
    value: None,
};

pub static WORD_MER_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("anda"),
        dictgen::InsensitiveStr::Ascii("canaries"),
        dictgen::InsensitiveStr::Ascii("caneries"),
        dictgen::InsensitiveStr::Ascii("canery"),
        dictgen::InsensitiveStr::Ascii("cenaire"),
        dictgen::InsensitiveStr::Ascii("cenaires"),
        dictgen::InsensitiveStr::Ascii("cenares"),
        dictgen::InsensitiveStr::Ascii("cenarias"),
        dictgen::InsensitiveStr::Ascii("cenarios"),
        dictgen::InsensitiveStr::Ascii("ceneries"),
        dictgen::InsensitiveStr::Ascii("centile"),
        dictgen::InsensitiveStr::Ascii("chandice"),
        dictgen::InsensitiveStr::Ascii("chandies"),
        dictgen::InsensitiveStr::Ascii("chanidse"),
        dictgen::InsensitiveStr::Ascii("chanise"),
        dictgen::InsensitiveStr::Ascii("chans"),
        dictgen::InsensitiveStr::Ascii("chanters"),
        dictgen::InsensitiveStr::Ascii("chantos"),
        dictgen::InsensitiveStr::Ascii("chat"),
        dictgen::InsensitiveStr::Ascii("chendise"),
        dictgen::InsensitiveStr::Ascii("chindise"),
        dictgen::InsensitiveStr::Ascii("cinaries"),
        dictgen::InsensitiveStr::Ascii("cineries"),
        dictgen::InsensitiveStr::Ascii("curcy"),
        dictgen::InsensitiveStr::Ascii("curey"),
        dictgen::InsensitiveStr::Ascii("ficul"),
        dictgen::InsensitiveStr::Ascii("hcant"),
        dictgen::InsensitiveStr::Ascii("hcants"),
        dictgen::InsensitiveStr::Ascii("icful"),
        dictgen::InsensitiveStr::Ascii("ucry"),
    ],
    values: &[
        &["veranda"],
        &["mercenaries"],
        &["mercenaries"],
        &["mercenary"],
        &["mercenaries"],
        &["mercenaries"],
        &["mercenaries"],
        &["mercenaries"],
        &["mercenaries"],
        &["mercenaries"],
        &["mercantile"],
        &["merchandise"],
        &["merchandise"],
        &["merchandise"],
        &["merchandise"],
        &["merchants"],
        &["merchants"],
        &["merchants"],
        &["merchant"],
        &["merchandise"],
        &["merchandise"],
        &["mercenaries"],
        &["mercenaries"],
        &["mercury"],
        &["mercury"],
        &["merciful"],
        &["merchant"],
        &["merchants"],
        &["merciful"],
        &["mercury"],
    ],
    range: 4..=8,
};

static WORD_MEO_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_MEO_CHILDREN),
    value: None,
};

pub static WORD_MEO_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ldic"),
        dictgen::InsensitiveStr::Ascii("ldies"),
    ],
    values: &[&["melodic"], &["melodies"]],
    range: 4..=5,
};

static WORD_MEN_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_MEN_CHILDREN),
    value: None,
};

pub static WORD_MEN_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ally"),
        dictgen::InsensitiveStr::Ascii("caing"),
        dictgen::InsensitiveStr::Ascii("straul"),
        dictgen::InsensitiveStr::Ascii("strul"),
        dictgen::InsensitiveStr::Ascii("stural"),
        dictgen::InsensitiveStr::Ascii("sutral"),
        dictgen::InsensitiveStr::Ascii("tallity"),
        dictgen::InsensitiveStr::Ascii("taly"),
        dictgen::InsensitiveStr::Ascii("tiones"),
        dictgen::InsensitiveStr::Ascii("tiong"),
        dictgen::InsensitiveStr::Ascii("tionnes"),
        dictgen::InsensitiveStr::Ascii("tionning"),
    ],
    values: &[
        &["mentally"],
        &["menacing"],
        &["menstrual"],
        &["menstrual"],
        &["menstrual"],
        &["menstrual"],
        &["mentally"],
        &["mentally"],
        &["mentions"],
        &["mentioning"],
        &["mentions"],
        &["mentioning"],
    ],
    range: 4..=8,
};

static WORD_MEM_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_MEM_CHILDREN),
    value: None,
};

pub static WORD_MEM_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("branaphone"),
        dictgen::InsensitiveStr::Ascii("brance"),
        dictgen::InsensitiveStr::Ascii("brances"),
        dictgen::InsensitiveStr::Ascii("eber"),
        dictgen::InsensitiveStr::Ascii("erization"),
        dictgen::InsensitiveStr::Ascii("oery"),
        dictgen::InsensitiveStr::Ascii("orie"),
        dictgen::InsensitiveStr::Ascii("oriez"),
        dictgen::InsensitiveStr::Ascii("orizacion"),
        dictgen::InsensitiveStr::Ascii("orozation"),
    ],
    values: &[
        &["membranophone"],
        &["membrane"],
        &["membrane"],
        &["member"],
        &["memorization"],
        &["memory"],
        &["memory"],
        &["memorize"],
        &["memorization"],
        &["memorization"],
    ],
    range: 4..=10,
};

static WORD_MEL_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_MEL_CHILDREN),
    value: None,
};

pub static WORD_MEL_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("anotin"),
        dictgen::InsensitiveStr::Ascii("atonian"),
        dictgen::InsensitiveStr::Ascii("atonion"),
        dictgen::InsensitiveStr::Ascii("borune"),
        dictgen::InsensitiveStr::Ascii("bounre"),
        dictgen::InsensitiveStr::Ascii("boure"),
        dictgen::InsensitiveStr::Ascii("doic"),
        dictgen::InsensitiveStr::Ascii("ieux"),
        dictgen::InsensitiveStr::Ascii("linnium"),
        dictgen::InsensitiveStr::Ascii("odieuse"),
        dictgen::InsensitiveStr::Ascii("odis"),
        dictgen::InsensitiveStr::Ascii("todwn"),
    ],
    values: &[
        &["melatonin"],
        &["melatonin"],
        &["melatonin"],
        &["melbourne"],
        &["melbourne"],
        &["melbourne"],
        &["melodic"],
        &["milieux"],
        &["millennium"],
        &["melodies"],
        &["melodies"],
        &["meltdown"],
    ],
    range: 4..=7,
};

static WORD_MEI_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_MEI_CHILDREN),
    value: None,
};

pub static WORD_MEI_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("dcare"),
        dictgen::InsensitiveStr::Ascii("xcan"),
        dictgen::InsensitiveStr::Ascii("xcans"),
    ],
    values: &[&["medicare"], &["mexican"], &["mexicans"]],
    range: 4..=5,
};

static WORD_MEG_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_MEG_CHILDREN),
    value: None,
};

pub static WORD_MEG_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("athred"),
        dictgen::InsensitiveStr::Ascii("atorn"),
    ],
    values: &[&["megathread"], &["megatron"]],
    range: 5..=6,
};

static WORD_MEE_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_MEE_CHILDREN),
    value: None,
};

pub static WORD_MEE_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("rkrat")],
    values: &[&["meerkat"]],
    range: 5..=5,
};

static WORD_MED_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_MED_CHILDREN),
    value: None,
};

pub static WORD_MED_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("acine"),
        dictgen::InsensitiveStr::Ascii("atite"),
        dictgen::InsensitiveStr::Ascii("eival"),
        dictgen::InsensitiveStr::Ascii("eterranean"),
        dictgen::InsensitiveStr::Ascii("evial"),
        dictgen::InsensitiveStr::Ascii("iaction"),
        dictgen::InsensitiveStr::Ascii("iavel"),
        dictgen::InsensitiveStr::Ascii("icacion"),
        dictgen::InsensitiveStr::Ascii("icad"),
        dictgen::InsensitiveStr::Ascii("icae"),
        dictgen::InsensitiveStr::Ascii("icaiton"),
        dictgen::InsensitiveStr::Ascii("icaitons"),
        dictgen::InsensitiveStr::Ascii("icalert"),
        dictgen::InsensitiveStr::Ascii("icallly"),
        dictgen::InsensitiveStr::Ascii("icaly"),
        dictgen::InsensitiveStr::Ascii("icatons"),
        dictgen::InsensitiveStr::Ascii("iciad"),
        dictgen::InsensitiveStr::Ascii("icince"),
        dictgen::InsensitiveStr::Ascii("icinens"),
        dictgen::InsensitiveStr::Ascii("icineras"),
        dictgen::InsensitiveStr::Ascii("iciney"),
        dictgen::InsensitiveStr::Ascii("icins"),
        dictgen::InsensitiveStr::Ascii("icinske"),
        dictgen::InsensitiveStr::Ascii("icore"),
        dictgen::InsensitiveStr::Ascii("icority"),
        dictgen::InsensitiveStr::Ascii("idating"),
        dictgen::InsensitiveStr::Ascii("ievel"),
        dictgen::InsensitiveStr::Ascii("ioce"),
        dictgen::InsensitiveStr::Ascii("iocer"),
        dictgen::InsensitiveStr::Ascii("iocirty"),
        dictgen::InsensitiveStr::Ascii("iocraty"),
        dictgen::InsensitiveStr::Ascii("iocrety"),
        dictgen::InsensitiveStr::Ascii("iocricy"),
        dictgen::InsensitiveStr::Ascii("iocrily"),
        dictgen::InsensitiveStr::Ascii("iocrisy"),
        dictgen::InsensitiveStr::Ascii("iocry"),
        dictgen::InsensitiveStr::Ascii("iorce"),
        dictgen::InsensitiveStr::Ascii("itacion"),
        dictgen::InsensitiveStr::Ascii("itaciones"),
        dictgen::InsensitiveStr::Ascii("itaiton"),
        dictgen::InsensitiveStr::Ascii("itarrenean"),
        dictgen::InsensitiveStr::Ascii("itatie"),
        dictgen::InsensitiveStr::Ascii("itatiing"),
        dictgen::InsensitiveStr::Ascii("itatin"),
        dictgen::InsensitiveStr::Ascii("itationg"),
        dictgen::InsensitiveStr::Ascii("itato"),
        dictgen::InsensitiveStr::Ascii("iterainnean"),
        dictgen::InsensitiveStr::Ascii("iteranean"),
        dictgen::InsensitiveStr::Ascii("itereanean"),
        dictgen::InsensitiveStr::Ascii("iterraean"),
        dictgen::InsensitiveStr::Ascii("iterranen"),
        dictgen::InsensitiveStr::Ascii("iterrannean"),
        dictgen::InsensitiveStr::Ascii("iveal"),
        dictgen::InsensitiveStr::Ascii("oicre"),
    ],
    values: &[
        &["medicine"],
        &["meditate"],
        &["medieval"],
        &["mediterranean"],
        &["medieval"],
        &["medications"],
        &["medieval"],
        &["medication"],
        &["medicaid"],
        &["medicare"],
        &["medication"],
        &["medications"],
        &["medicare"],
        &["medically"],
        &["medically"],
        &["medications"],
        &["medicaid"],
        &["medicine"],
        &["medicines"],
        &["medicines"],
        &["mediciny"],
        &["medicines"],
        &["medicine"],
        &["mediocre"],
        &["mediocrity"],
        &["meditating"],
        &["medieval"],
        &["mediocre"],
        &["mediocre"],
        &["mediocrity"],
        &["mediocrity"],
        &["mediocrity"],
        &["mediocrity"],
        &["mediocrity"],
        &["mediocrity"],
        &["mediocrity"],
        &["mediocre"],
        &["medications"],
        &["medications"],
        &["meditation"],
        &["mediterranean"],
        &["meditate"],
        &["meditating"],
        &["meditation"],
        &["meditating"],
        &["meditation"],
        &["mediterranean"],
        &["mediterranean"],
        &["mediterranean"],
        &["mediterranean"],
        &["mediterranean"],
        &["mediterranean"],
        &["medieval"],
        &["mediocre"],
    ],
    range: 4..=11,
};

static WORD_MEC_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_MEC_CHILDREN),
    value: None,
};

pub static WORD_MEC_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ahnic"),
        dictgen::InsensitiveStr::Ascii("ahnical"),
        dictgen::InsensitiveStr::Ascii("ahnically"),
        dictgen::InsensitiveStr::Ascii("ahnics"),
        dictgen::InsensitiveStr::Ascii("ahnisms"),
        dictgen::InsensitiveStr::Ascii("ernaries"),
        dictgen::InsensitiveStr::Ascii("ernary"),
        dictgen::InsensitiveStr::Ascii("hancial"),
        dictgen::InsensitiveStr::Ascii("hancially"),
        dictgen::InsensitiveStr::Ascii("hancis"),
        dictgen::InsensitiveStr::Ascii("handise"),
        dictgen::InsensitiveStr::Ascii("hanicallly"),
        dictgen::InsensitiveStr::Ascii("hanicaly"),
        dictgen::InsensitiveStr::Ascii("hanichal"),
        dictgen::InsensitiveStr::Ascii("hanichs"),
        dictgen::InsensitiveStr::Ascii("hanicle"),
        dictgen::InsensitiveStr::Ascii("haniclly"),
        dictgen::InsensitiveStr::Ascii("hanicly"),
        dictgen::InsensitiveStr::Ascii("hanicsms"),
        dictgen::InsensitiveStr::Ascii("hanicus"),
        dictgen::InsensitiveStr::Ascii("hanim"),
        dictgen::InsensitiveStr::Ascii("hanims"),
        dictgen::InsensitiveStr::Ascii("haninc"),
        dictgen::InsensitiveStr::Ascii("hanincs"),
        dictgen::InsensitiveStr::Ascii("hanis"),
        dictgen::InsensitiveStr::Ascii("hanisim"),
        dictgen::InsensitiveStr::Ascii("hanisims"),
        dictgen::InsensitiveStr::Ascii("hanismus"),
        dictgen::InsensitiveStr::Ascii("hansim"),
        dictgen::InsensitiveStr::Ascii("hansims"),
        dictgen::InsensitiveStr::Ascii("hinical"),
        dictgen::InsensitiveStr::Ascii("hinisms"),
    ],
    values: &[
        &["mechanic"],
        &["mechanical"],
        &["mechanically"],
        &["mechanics"],
        &["mechanisms"],
        &["mercenaries"],
        &["mercenary"],
        &["mechanical"],
        &["mechanically"],
        &["mechanics"],
        &["merchandise"],
        &["mechanically"],
        &["mechanically"],
        &["mechanical"],
        &["mechanics"],
        &["mechanical"],
        &["mechanically"],
        &["mechanical"],
        &["mechanisms"],
        &["mechanics"],
        &["mechanism"],
        &["mechanism"],
        &["mechanic"],
        &["mechanic"],
        &["mechanics"],
        &["mechanism"],
        &["mechanism"],
        &["mechanisms"],
        &["mechanism"],
        &["mechanisms"],
        &["mechanical"],
        &["mechanisms"],
    ],
    range: 5..=10,
};

static WORD_MEA_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_MEA_CHILDREN),
    value: None,
};

pub static WORD_MEA_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("gthread"),
        dictgen::InsensitiveStr::Ascii("gtron"),
        dictgen::InsensitiveStr::Ascii("ncing"),
        dictgen::InsensitiveStr::Ascii("ningess"),
        dictgen::InsensitiveStr::Ascii("ningles"),
        dictgen::InsensitiveStr::Ascii("ninng"),
        dictgen::InsensitiveStr::Ascii("nins"),
        dictgen::InsensitiveStr::Ascii("tballers"),
        dictgen::InsensitiveStr::Ascii("tballls"),
        dictgen::InsensitiveStr::Ascii("tbals"),
    ],
    values: &[
        &["megathread"],
        &["megatron"],
        &["menacing"],
        &["meanings"],
        &["meanings"],
        &["meaning"],
        &["meanings"],
        &["meatballs"],
        &["meatballs"],
        &["meatballs"],
    ],
    range: 4..=8,
};

static WORD_MD_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_MD_CHILDREN),
    value: None,
};

pub static WORD_MD_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ifielder"),
        dictgen::InsensitiveStr::Ascii("ifielders"),
    ],
    values: &[&["midfielder"], &["midfielders"]],
    range: 8..=9,
};

static WORD_MC_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_MC_CHILDREN),
    value: None,
};

pub static WORD_MC_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("alren"),
        dictgen::InsensitiveStr::Ascii("carhty"),
        dictgen::InsensitiveStr::Ascii("carthey"),
        dictgen::InsensitiveStr::Ascii("carthyst"),
        dictgen::InsensitiveStr::Ascii("gergor"),
        dictgen::InsensitiveStr::Ascii("hanics"),
        dictgen::InsensitiveStr::Ascii("larean"),
        dictgen::InsensitiveStr::Ascii("reggor"),
    ],
    values: &[
        &["mclaren"],
        &["mccarthy"],
        &["mccarthy"],
        &["mccarthyist"],
        &["mcgregor"],
        &["mechanics"],
        &["mclaren"],
        &["mcgregor"],
    ],
    range: 5..=8,
};

static WORD_MA_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_MA_CHILDREN),
    value: None,
};

static WORD_MA_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    None,
    Some(&WORD_MAB_NODE),
    Some(&WORD_MAC_NODE),
    Some(&WORD_MAD_NODE),
    Some(&WORD_MAE_NODE),
    None,
    Some(&WORD_MAG_NODE),
    None,
    Some(&WORD_MAI_NODE),
    Some(&WORD_MAJ_NODE),
    Some(&WORD_MAK_NODE),
    Some(&WORD_MAL_NODE),
    Some(&WORD_MAM_NODE),
    Some(&WORD_MAN_NODE),
    None,
    None,
    None,
    Some(&WORD_MAR_NODE),
    Some(&WORD_MAS_NODE),
    Some(&WORD_MAT_NODE),
    Some(&WORD_MAU_NODE),
    None,
    None,
    Some(&WORD_MAX_NODE),
    Some(&WORD_MAY_NODE),
    None,
];

static WORD_MAY_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_MAY_CHILDREN),
    value: None,
};

pub static WORD_MAY_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("alsia"),
        dictgen::InsensitiveStr::Ascii("alsian"),
        dictgen::InsensitiveStr::Ascii("balline"),
        dictgen::InsensitiveStr::Ascii("belle"),
        dictgen::InsensitiveStr::Ascii("belleine"),
        dictgen::InsensitiveStr::Ascii("bellene"),
        dictgen::InsensitiveStr::Ascii("bellibe"),
        dictgen::InsensitiveStr::Ascii("belliene"),
        dictgen::InsensitiveStr::Ascii("bellinne"),
        dictgen::InsensitiveStr::Ascii("bellline"),
        dictgen::InsensitiveStr::Ascii("billine"),
        dictgen::InsensitiveStr::Ascii("lasia"),
        dictgen::InsensitiveStr::Ascii("lasian"),
    ],
    values: &[
        &["malaysia"],
        &["malaysian"],
        &["maybelline"],
        &["maybelline"],
        &["maybelline"],
        &["maybelline"],
        &["maybelline"],
        &["maybelline"],
        &["maybelline"],
        &["maybelline"],
        &["maybelline"],
        &["malaysia"],
        &["malaysian"],
    ],
    range: 5..=8,
};

static WORD_MAX_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_MAX_CHILDREN),
    value: None,
};

pub static WORD_MAX_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("imazing"),
        dictgen::InsensitiveStr::Ascii("imini"),
        dictgen::InsensitiveStr::Ascii("imixing"),
    ],
    values: &[&["maximizing"], &["maximizing"], &["maximizing"]],
    range: 5..=7,
};

static WORD_MAU_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_MAU_CHILDREN),
    value: None,
};

pub static WORD_MAU_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("arder"),
        dictgen::InsensitiveStr::Ascii("nals"),
    ],
    values: &[&["marauder"], &["manuals"]],
    range: 4..=5,
};

static WORD_MAT_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_MAT_CHILDREN),
    value: None,
};

pub static WORD_MAT_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("aphorical"),
        dictgen::InsensitiveStr::Ascii("aphorically"),
        dictgen::InsensitiveStr::Ascii("aphysical"),
        dictgen::InsensitiveStr::Ascii("chamking"),
        dictgen::InsensitiveStr::Ascii("chmakeing"),
        dictgen::InsensitiveStr::Ascii("eralists"),
        dictgen::InsensitiveStr::Ascii("eriaal"),
        dictgen::InsensitiveStr::Ascii("eriales"),
        dictgen::InsensitiveStr::Ascii("erialisimo"),
        dictgen::InsensitiveStr::Ascii("erialsim"),
        dictgen::InsensitiveStr::Ascii("erialsm"),
        dictgen::InsensitiveStr::Ascii("erias"),
        dictgen::InsensitiveStr::Ascii("hamatician"),
        dictgen::InsensitiveStr::Ascii("hamatics"),
        dictgen::InsensitiveStr::Ascii("hametician"),
        dictgen::InsensitiveStr::Ascii("hameticians"),
        dictgen::InsensitiveStr::Ascii("hcmaking"),
        dictgen::InsensitiveStr::Ascii("hcup"),
        dictgen::InsensitiveStr::Ascii("hcups"),
        dictgen::InsensitiveStr::Ascii("hemagically"),
        dictgen::InsensitiveStr::Ascii("hemagics"),
        dictgen::InsensitiveStr::Ascii("hemathics"),
        dictgen::InsensitiveStr::Ascii("hematicals"),
        dictgen::InsensitiveStr::Ascii("hematicaly"),
        dictgen::InsensitiveStr::Ascii("hematican"),
        dictgen::InsensitiveStr::Ascii("hematicans"),
        dictgen::InsensitiveStr::Ascii("hematicas"),
        dictgen::InsensitiveStr::Ascii("hematicion"),
        dictgen::InsensitiveStr::Ascii("hematicks"),
        dictgen::InsensitiveStr::Ascii("hematicly"),
        dictgen::InsensitiveStr::Ascii("hematisch"),
        dictgen::InsensitiveStr::Ascii("hematitian"),
        dictgen::InsensitiveStr::Ascii("hematitians"),
        dictgen::InsensitiveStr::Ascii("hemetical"),
        dictgen::InsensitiveStr::Ascii("hemetically"),
        dictgen::InsensitiveStr::Ascii("hemetician"),
        dictgen::InsensitiveStr::Ascii("hemeticians"),
        dictgen::InsensitiveStr::Ascii("hemetics"),
        dictgen::InsensitiveStr::Ascii("heticians"),
        dictgen::InsensitiveStr::Ascii("hewes"),
        dictgen::InsensitiveStr::Ascii("himatical"),
        dictgen::InsensitiveStr::Ascii("himatically"),
        dictgen::InsensitiveStr::Ascii("himatics"),
        dictgen::InsensitiveStr::Ascii("hmatically"),
        dictgen::InsensitiveStr::Ascii("hmatician"),
        dictgen::InsensitiveStr::Ascii("hmaticians"),
        dictgen::InsensitiveStr::Ascii("hwes"),
        dictgen::InsensitiveStr::Ascii("ieral"),
        dictgen::InsensitiveStr::Ascii("ieralism"),
        dictgen::InsensitiveStr::Ascii("ierals"),
        dictgen::InsensitiveStr::Ascii("rial"),
        dictgen::InsensitiveStr::Ascii("terss"),
        dictgen::InsensitiveStr::Ascii("treses"),
    ],
    values: &[
        &["metaphorical"],
        &["metaphorically"],
        &["metaphysical"],
        &["matchmaking"],
        &["matchmaking"],
        &["materialist"],
        &["material"],
        &["materials"],
        &["materialism"],
        &["materialism"],
        &["materialism"],
        &["materials"],
        &["mathematician"],
        &["mathematics"],
        &["mathematician"],
        &["mathematicians"],
        &["matchmaking"],
        &["matchup"],
        &["matchups"],
        &["mathematically"],
        &["mathematics"],
        &["mathematics"],
        &["mathematics"],
        &["mathematically"],
        &["mathematician"],
        &["mathematics"],
        &["mathematics"],
        &["mathematician"],
        &["mathematics"],
        &["mathematical"],
        &["mathematics"],
        &["mathematician"],
        &["mathematicians"],
        &["mathematical"],
        &["mathematically"],
        &["mathematician"],
        &["mathematicians"],
        &["mathematics"],
        &["mathematicians"],
        &["mathews"],
        &["mathematical"],
        &["mathematically"],
        &["mathematics"],
        &["mathematically"],
        &["mathematician"],
        &["mathematicians"],
        &["mathews"],
        &["material"],
        &["materialism"],
        &["materials"],
        &["martial"],
        &["mattress"],
        &["mattress"],
    ],
    range: 4..=11,
};

static WORD_MAS_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_MAS_CHILDREN),
    value: None,
};

static WORD_MAS_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    Some(&WORD_MASA_NODE),
    None,
    Some(&WORD_MASC_NODE),
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    Some(&WORD_MASO_NODE),
    None,
    None,
    Some(&WORD_MASR_NODE),
    Some(&WORD_MASS_NODE),
    Some(&WORD_MAST_NODE),
    Some(&WORD_MASU_NODE),
    None,
    None,
    None,
    None,
    None,
];

static WORD_MASU_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_MASU_CHILDREN),
    value: None,
};

pub static WORD_MASU_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("clinity")],
    values: &[&["masculinity"]],
    range: 7..=7,
};

static WORD_MAST_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_MAST_CHILDREN),
    value: None,
};

pub static WORD_MAST_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("eires"),
        dictgen::InsensitiveStr::Ascii("erbation"),
        dictgen::InsensitiveStr::Ascii("ereis"),
        dictgen::InsensitiveStr::Ascii("eriers"),
        dictgen::InsensitiveStr::Ascii("eris"),
        dictgen::InsensitiveStr::Ascii("erise"),
        dictgen::InsensitiveStr::Ascii("ermid"),
        dictgen::InsensitiveStr::Ascii("ermined"),
        dictgen::InsensitiveStr::Ascii("ernind"),
        dictgen::InsensitiveStr::Ascii("erpeace"),
        dictgen::InsensitiveStr::Ascii("erpeice"),
        dictgen::InsensitiveStr::Ascii("erpeices"),
        dictgen::InsensitiveStr::Ascii("erpice"),
        dictgen::InsensitiveStr::Ascii("ieres"),
        dictgen::InsensitiveStr::Ascii("rubate"),
        dictgen::InsensitiveStr::Ascii("rubated"),
        dictgen::InsensitiveStr::Ascii("rubates"),
        dictgen::InsensitiveStr::Ascii("rubating"),
        dictgen::InsensitiveStr::Ascii("rubation"),
        dictgen::InsensitiveStr::Ascii("ubrate"),
        dictgen::InsensitiveStr::Ascii("ubration"),
        dictgen::InsensitiveStr::Ascii("urabte"),
        dictgen::InsensitiveStr::Ascii("urabted"),
        dictgen::InsensitiveStr::Ascii("urabting"),
        dictgen::InsensitiveStr::Ascii("urabtion"),
        dictgen::InsensitiveStr::Ascii("urbacion"),
        dictgen::InsensitiveStr::Ascii("urbae"),
        dictgen::InsensitiveStr::Ascii("urbaing"),
        dictgen::InsensitiveStr::Ascii("urbait"),
        dictgen::InsensitiveStr::Ascii("urbaited"),
        dictgen::InsensitiveStr::Ascii("urbare"),
        dictgen::InsensitiveStr::Ascii("urbarte"),
        dictgen::InsensitiveStr::Ascii("urbateing"),
        dictgen::InsensitiveStr::Ascii("urbathe"),
        dictgen::InsensitiveStr::Ascii("urbathon"),
        dictgen::InsensitiveStr::Ascii("urbatie"),
        dictgen::InsensitiveStr::Ascii("urbatin"),
        dictgen::InsensitiveStr::Ascii("urbaton"),
        dictgen::InsensitiveStr::Ascii("urbe"),
        dictgen::InsensitiveStr::Ascii("urbeta"),
        dictgen::InsensitiveStr::Ascii("urbsted"),
        dictgen::InsensitiveStr::Ascii("urbsting"),
        dictgen::InsensitiveStr::Ascii("urdate"),
        dictgen::InsensitiveStr::Ascii("urdating"),
        dictgen::InsensitiveStr::Ascii("urpiece"),
        dictgen::InsensitiveStr::Ascii("utbation"),
    ],
    values: &[
        &["masteries"],
        &["masturbation"],
        &["masteries"],
        &["masteries"],
        &["masteries"],
        &["masteries"],
        &["mastermind"],
        &["mastermind"],
        &["mastermind"],
        &["masterpiece"],
        &["masterpiece"],
        &["masterpiece"],
        &["masterpiece"],
        &["masteries"],
        &["masturbate"],
        &["masturbated"],
        &["masturbate"],
        &["masturbating"],
        &["masturbation"],
        &["masturbated"],
        &["masturbation"],
        &["masturbate"],
        &["masturbated"],
        &["masturbating"],
        &["masturbation"],
        &["masturbation"],
        &["masturbated"],
        &["masturbating"],
        &["masturbate"],
        &["masturbated"],
        &["masturbate"],
        &["masturbate"],
        &["masturbating"],
        &["masturbated"],
        &["masturbation"],
        &["masturbated"],
        &["masturbation"],
        &["masturbation"],
        &["masturbate"],
        &["masturbated"],
        &["masturbated"],
        &["masturbating"],
        &["masturbate"],
        &["masturbating"],
        &["masterpiece"],
        &["masturbation"],
    ],
    range: 4..=9,
};

static WORD_MASS_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_MASS_CHILDREN),
    value: None,
};

pub static WORD_MASS_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ace"),
        dictgen::InsensitiveStr::Ascii("acer"),
        dictgen::InsensitiveStr::Ascii("achsuetts"),
        dictgen::InsensitiveStr::Ascii("achucetts"),
        dictgen::InsensitiveStr::Ascii("achuestts"),
        dictgen::InsensitiveStr::Ascii("achusents"),
        dictgen::InsensitiveStr::Ascii("achusets"),
        dictgen::InsensitiveStr::Ascii("achusettes"),
        dictgen::InsensitiveStr::Ascii("achusettians"),
        dictgen::InsensitiveStr::Ascii("achusites"),
        dictgen::InsensitiveStr::Ascii("achussets"),
        dictgen::InsensitiveStr::Ascii("achussetts"),
        dictgen::InsensitiveStr::Ascii("achustts"),
        dictgen::InsensitiveStr::Ascii("acrare"),
        dictgen::InsensitiveStr::Ascii("agens"),
        dictgen::InsensitiveStr::Ascii("arce"),
        dictgen::InsensitiveStr::Ascii("asge"),
        dictgen::InsensitiveStr::Ascii("care"),
        dictgen::InsensitiveStr::Ascii("echusetts"),
        dictgen::InsensitiveStr::Ascii("ivelly"),
        dictgen::InsensitiveStr::Ascii("ivley"),
    ],
    values: &[
        &["massacre"],
        &["massacre"],
        &["massachusetts"],
        &["massachusetts"],
        &["massachusetts"],
        &["massachusetts"],
        &["massachusetts"],
        &["massachusetts"],
        &["massachusetts"],
        &["massachusetts"],
        &["massachusetts"],
        &["massachusetts"],
        &["massachusetts"],
        &["massacre"],
        &["massages"],
        &["massacre"],
        &["massages"],
        &["massacre"],
        &["massachusetts"],
        &["massively"],
        &["massively"],
    ],
    range: 3..=12,
};

static WORD_MASR_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_MASR_CHILDREN),
    value: None,
};

pub static WORD_MASR_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("hmallow")],
    values: &[&["marshmallow"]],
    range: 7..=7,
};

static WORD_MASO_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_MASO_CHILDREN),
    value: None,
};

pub static WORD_MASO_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ginistic"),
        dictgen::InsensitiveStr::Ascii("gynistic"),
    ],
    values: &[&["misogynistic"], &["misogynistic"]],
    range: 8..=8,
};

static WORD_MASC_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_MASC_CHILDREN),
    value: None,
};

pub static WORD_MASC_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("arra"),
        dictgen::InsensitiveStr::Ascii("ulanity"),
        dictgen::InsensitiveStr::Ascii("ulenity"),
        dictgen::InsensitiveStr::Ascii("ulinty"),
    ],
    values: &[
        &["mascara"],
        &["masculinity"],
        &["masculinity"],
        &["masculinity"],
    ],
    range: 4..=7,
};

static WORD_MASA_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_MASA_CHILDREN),
    value: None,
};

pub static WORD_MASA_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("cra")],
    values: &[&["mascara"]],
    range: 3..=3,
};

static WORD_MAR_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_MAR_CHILDREN),
    value: None,
};

static WORD_MAR_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    Some(&WORD_MARA_NODE),
    Some(&WORD_MARB_NODE),
    Some(&WORD_MARC_NODE),
    None,
    Some(&WORD_MARE_NODE),
    None,
    Some(&WORD_MARG_NODE),
    Some(&WORD_MARH_NODE),
    Some(&WORD_MARI_NODE),
    Some(&WORD_MARJ_NODE),
    Some(&WORD_MARK_NODE),
    Some(&WORD_MARL_NODE),
    Some(&WORD_MARM_NODE),
    Some(&WORD_MARN_NODE),
    None,
    None,
    None,
    Some(&WORD_MARR_NODE),
    Some(&WORD_MARS_NODE),
    Some(&WORD_MART_NODE),
    Some(&WORD_MARU_NODE),
    Some(&WORD_MARV_NODE),
    None,
    Some(&WORD_MARX_NODE),
    None,
    None,
];

static WORD_MARX_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_MARX_CHILDREN),
    value: None,
};

pub static WORD_MARX_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("isim")],
    values: &[&["marxism"]],
    range: 4..=4,
};

static WORD_MARV_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_MARV_CHILDREN),
    value: None,
};

pub static WORD_MARV_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("elos")],
    values: &[&["marvelous"]],
    range: 4..=4,
};

static WORD_MARU_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_MARU_CHILDREN),
    value: None,
};

pub static WORD_MARU_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("ader")],
    values: &[&["marauder"]],
    range: 4..=4,
};

static WORD_MART_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_MART_CHILDREN),
    value: None,
};

pub static WORD_MART_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ail"),
        dictgen::InsensitiveStr::Ascii("ain"),
    ],
    values: &[&["martial"], &["martian"]],
    range: 3..=3,
};

static WORD_MARS_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_MARS_CHILDREN),
    value: None,
};

pub static WORD_MARS_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("hamllow"),
        dictgen::InsensitiveStr::Ascii("hamllows"),
        dictgen::InsensitiveStr::Ascii("hmalllows"),
        dictgen::InsensitiveStr::Ascii("hmallons"),
        dictgen::InsensitiveStr::Ascii("hmallowiest"),
        dictgen::InsensitiveStr::Ascii("hmallowness"),
        dictgen::InsensitiveStr::Ascii("hmalow"),
        dictgen::InsensitiveStr::Ascii("hmalows"),
        dictgen::InsensitiveStr::Ascii("kman"),
    ],
    values: &[
        &["marshmallow"],
        &["marshmallows"],
        &["marshmallows"],
        &["marshmallows"],
        &["marshmallows"],
        &["marshmallows"],
        &["marshmallow"],
        &["marshmallows"],
        &["marksman"],
    ],
    range: 4..=11,
};

static WORD_MARR_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_MARR_CHILDREN),
    value: None,
};

pub static WORD_MARR_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("age"),
        dictgen::InsensitiveStr::Ascii("aige"),
        dictgen::InsensitiveStr::Ascii("tyred"),
        dictgen::InsensitiveStr::Ascii("yied"),
    ],
    values: &[&["marriage"], &["marriage"], &["martyred"], &["married"]],
    range: 3..=5,
};

static WORD_MARN_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_MARN_CHILDREN),
    value: None,
};

pub static WORD_MARN_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("iers"),
        dictgen::InsensitiveStr::Ascii("ies"),
    ],
    values: &[&["mariners"], &["marines"]],
    range: 3..=4,
};

static WORD_MARM_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_MARM_CHILDREN),
    value: None,
};

pub static WORD_MARM_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("elade")],
    values: &[&["marmalade"]],
    range: 5..=5,
};

static WORD_MARL_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_MARL_CHILDREN),
    value: None,
};

pub static WORD_MARL_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("bes"),
        dictgen::InsensitiveStr::Ascii("iyn"),
    ],
    values: &[&["marbles"], &["marilyn"]],
    range: 3..=3,
};

static WORD_MARK_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_MARK_CHILDREN),
    value: None,
};

pub static WORD_MARK_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ede"),
        dictgen::InsensitiveStr::Ascii("edet"),
        dictgen::InsensitiveStr::Ascii("eras"),
        dictgen::InsensitiveStr::Ascii("erplace"),
        dictgen::InsensitiveStr::Ascii("erts"),
        dictgen::InsensitiveStr::Ascii("es"),
        dictgen::InsensitiveStr::Ascii("etpalce"),
        dictgen::InsensitiveStr::Ascii("etting"),
    ],
    values: &[
        &["marketed"],
        &["marketed"],
        &["markers"],
        &["marketplace"],
        &["markers"],
        &["marks"],
        &["marketplace"],
        &["marketing"],
    ],
    range: 2..=7,
};

static WORD_MARJ_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_MARJ_CHILDREN),
    value: None,
};

pub static WORD_MARJ_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("iuana"),
        dictgen::InsensitiveStr::Ascii("ority"),
    ],
    values: &[&["marijuana"], &["majority"]],
    range: 5..=5,
};

static WORD_MARI_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_MARI_CHILDREN),
    value: None,
};

pub static WORD_MARI_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("age"),
        dictgen::InsensitiveStr::Ascii("ens"),
        dictgen::InsensitiveStr::Ascii("gnal"),
        dictgen::InsensitiveStr::Ascii("gnally"),
        dictgen::InsensitiveStr::Ascii("jauna"),
        dictgen::InsensitiveStr::Ascii("juanna"),
        dictgen::InsensitiveStr::Ascii("juannas"),
        dictgen::InsensitiveStr::Ascii("lyin"),
        dictgen::InsensitiveStr::Ascii("nens"),
        dictgen::InsensitiveStr::Ascii("neras"),
        dictgen::InsensitiveStr::Ascii("neris"),
        dictgen::InsensitiveStr::Ascii("neros"),
        dictgen::InsensitiveStr::Ascii("tan"),
        dictgen::InsensitiveStr::Ascii("xsm"),
        dictgen::InsensitiveStr::Ascii("yln"),
    ],
    values: &[
        &["marriage"],
        &["marines"],
        &["marginal"],
        &["marginally"],
        &["marijuana"],
        &["marijuana"],
        &["marijuana"],
        &["marilyn"],
        &["marines"],
        &["mariners"],
        &["mariners"],
        &["mariners"],
        &["martian"],
        &["marxism"],
        &["marilyn"],
    ],
    range: 3..=7,
};

static WORD_MARH_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_MARH_CHILDREN),
    value: None,
};

pub static WORD_MARH_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("smallow"),
        dictgen::InsensitiveStr::Ascii("smallows"),
    ],
    values: &[&["marshmallow"], &["marshmallows"]],
    range: 7..=8,
};

static WORD_MARG_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_MARG_CHILDREN),
    value: None,
};

pub static WORD_MARG_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("anilize"),
        dictgen::InsensitiveStr::Ascii("anilized"),
        dictgen::InsensitiveStr::Ascii("arent"),
        dictgen::InsensitiveStr::Ascii("aritte"),
        dictgen::InsensitiveStr::Ascii("art"),
        dictgen::InsensitiveStr::Ascii("enalized"),
        dictgen::InsensitiveStr::Ascii("erat"),
        dictgen::InsensitiveStr::Ascii("ianlly"),
        dictgen::InsensitiveStr::Ascii("inaal"),
        dictgen::InsensitiveStr::Ascii("inaali"),
        dictgen::InsensitiveStr::Ascii("inable"),
        dictgen::InsensitiveStr::Ascii("inaly"),
        dictgen::InsensitiveStr::Ascii("ines"),
        dictgen::InsensitiveStr::Ascii("ings"),
        dictgen::InsensitiveStr::Ascii("inilized"),
        dictgen::InsensitiveStr::Ascii("inis"),
    ],
    values: &[
        &["marginalized"],
        &["marginalized"],
        &["margaret"],
        &["margaret"],
        &["margaret"],
        &["marginalized"],
        &["margaret"],
        &["marginally"],
        &["marginal"],
        &["marginal"],
        &["marginal"],
        &["marginally"],
        &["margins"],
        &["margins"],
        &["marginalized"],
        &["margins"],
    ],
    range: 3..=8,
};

static WORD_MARE_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_MARE_CHILDREN),
    value: None,
};

pub static WORD_MARE_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("vlous")],
    values: &[&["marvelous"]],
    range: 5..=5,
};

static WORD_MARC_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_MARC_CHILDREN),
    value: None,
};

pub static WORD_MARC_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("hmallows")],
    values: &[&["marshmallows"]],
    range: 8..=8,
};

static WORD_MARB_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_MARB_CHILDREN),
    value: None,
};

pub static WORD_MARB_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("els"),
        dictgen::InsensitiveStr::Ascii("leds"),
    ],
    values: &[&["marbles"], &["marbles"]],
    range: 3..=4,
};

static WORD_MARA_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_MARA_CHILDREN),
    value: None,
};

pub static WORD_MARA_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("coni"),
        dictgen::InsensitiveStr::Ascii("deur"),
        dictgen::InsensitiveStr::Ascii("duer"),
        dictgen::InsensitiveStr::Ascii("gret"),
        dictgen::InsensitiveStr::Ascii("udeur"),
        dictgen::InsensitiveStr::Ascii("udeurs"),
    ],
    values: &[
        &["macaroni"],
        &["marauder"],
        &["marauder"],
        &["margaret"],
        &["marauder"],
        &["marauder"],
    ],
    range: 4..=6,
};

static WORD_MAN_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_MAN_CHILDREN),
    value: None,
};

static WORD_MAN_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    Some(&WORD_MANA_NODE),
    None,
    None,
    Some(&WORD_MAND_NODE),
    Some(&WORD_MANE_NODE),
    Some(&WORD_MANF_NODE),
    Some(&WORD_MANG_NODE),
    None,
    Some(&WORD_MANI_NODE),
    None,
    None,
    None,
    None,
    Some(&WORD_MANN_NODE),
    Some(&WORD_MANO_NODE),
    None,
    None,
    None,
    Some(&WORD_MANS_NODE),
    Some(&WORD_MANT_NODE),
    Some(&WORD_MANU_NODE),
    None,
    None,
    None,
    None,
    None,
];

static WORD_MANU_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_MANU_CHILDREN),
    value: None,
};

pub static WORD_MANU_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ales"),
        dictgen::InsensitiveStr::Ascii("aly"),
        dictgen::InsensitiveStr::Ascii("ever"),
        dictgen::InsensitiveStr::Ascii("evers"),
        dictgen::InsensitiveStr::Ascii("facter"),
        dictgen::InsensitiveStr::Ascii("factered"),
        dictgen::InsensitiveStr::Ascii("facterer"),
        dictgen::InsensitiveStr::Ascii("facterers"),
        dictgen::InsensitiveStr::Ascii("facteres"),
        dictgen::InsensitiveStr::Ascii("factering"),
        dictgen::InsensitiveStr::Ascii("facters"),
        dictgen::InsensitiveStr::Ascii("facterurs"),
        dictgen::InsensitiveStr::Ascii("facteur"),
        dictgen::InsensitiveStr::Ascii("facteurs"),
        dictgen::InsensitiveStr::Ascii("factored"),
        dictgen::InsensitiveStr::Ascii("factorer"),
        dictgen::InsensitiveStr::Ascii("factorers"),
        dictgen::InsensitiveStr::Ascii("factores"),
        dictgen::InsensitiveStr::Ascii("factoring"),
        dictgen::InsensitiveStr::Ascii("factued"),
        dictgen::InsensitiveStr::Ascii("factuer"),
        dictgen::InsensitiveStr::Ascii("factuered"),
        dictgen::InsensitiveStr::Ascii("factuerer"),
        dictgen::InsensitiveStr::Ascii("factueres"),
        dictgen::InsensitiveStr::Ascii("factuers"),
        dictgen::InsensitiveStr::Ascii("factuing"),
        dictgen::InsensitiveStr::Ascii("facturas"),
        dictgen::InsensitiveStr::Ascii("facturedd"),
        dictgen::InsensitiveStr::Ascii("factureds"),
        dictgen::InsensitiveStr::Ascii("factureers"),
        dictgen::InsensitiveStr::Ascii("factureras"),
        dictgen::InsensitiveStr::Ascii("facturerd"),
        dictgen::InsensitiveStr::Ascii("facturered"),
        dictgen::InsensitiveStr::Ascii("facturerers"),
        dictgen::InsensitiveStr::Ascii("factureres"),
        dictgen::InsensitiveStr::Ascii("factureros"),
        dictgen::InsensitiveStr::Ascii("facturier"),
        dictgen::InsensitiveStr::Ascii("facturor"),
        dictgen::InsensitiveStr::Ascii("facturors"),
        dictgen::InsensitiveStr::Ascii("facturs"),
        dictgen::InsensitiveStr::Ascii("factuter"),
        dictgen::InsensitiveStr::Ascii("factuters"),
        dictgen::InsensitiveStr::Ascii("facure"),
        dictgen::InsensitiveStr::Ascii("facuter"),
        dictgen::InsensitiveStr::Ascii("facuters"),
        dictgen::InsensitiveStr::Ascii("facutre"),
        dictgen::InsensitiveStr::Ascii("facutred"),
        dictgen::InsensitiveStr::Ascii("facutrers"),
        dictgen::InsensitiveStr::Ascii("facutres"),
        dictgen::InsensitiveStr::Ascii("fature"),
        dictgen::InsensitiveStr::Ascii("fatured"),
        dictgen::InsensitiveStr::Ascii("faturing"),
        dictgen::InsensitiveStr::Ascii("fcaturers"),
        dictgen::InsensitiveStr::Ascii("pilated"),
        dictgen::InsensitiveStr::Ascii("pilating"),
        dictgen::InsensitiveStr::Ascii("pulating"),
        dictgen::InsensitiveStr::Ascii("pulation"),
        dictgen::InsensitiveStr::Ascii("pulative"),
        dictgen::InsensitiveStr::Ascii("ver"),
    ],
    values: &[
        &["manuals"],
        &["manually"],
        &["maneuver"],
        &["maneuvers"],
        &["manufacture"],
        &["manufactured"],
        &["manufacturer"],
        &["manufacturers"],
        &["manufactures"],
        &["manufacturing"],
        &["manufactures"],
        &["manufactures"],
        &["manufactures"],
        &["manufactures"],
        &["manufactured"],
        &["manufacturer"],
        &["manufacturers"],
        &["manufactures"],
        &["manufacturing"],
        &["manufactured"],
        &["manufacture"],
        &["manufactured"],
        &["manufacturer"],
        &["manufactures"],
        &["manufacturers"],
        &["manufacturing"],
        &["manufactures"],
        &["manufactured"],
        &["manufactures"],
        &["manufactures"],
        &["manufactures"],
        &["manufactured"],
        &["manufactured"],
        &["manufacturers"],
        &["manufacturers"],
        &["manufactures"],
        &["manufacturer"],
        &["manufacturer"],
        &["manufacturers"],
        &["manufactures"],
        &["manufacture"],
        &["manufactures"],
        &["manufacture"],
        &["manufacture"],
        &["manufactures"],
        &["manufactures"],
        &["manufacture"],
        &["manufactures"],
        &["manufactures"],
        &["manufacture"],
        &["manufactured"],
        &["manufacturing"],
        &["manufactures"],
        &["manipulated"],
        &["manipulating"],
        &["manipulating"],
        &["manipulation"],
        &["manipulative"],
        &["maneuver"],
    ],
    range: 3..=11,
};

static WORD_MANT_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_MANT_CHILDREN),
    value: None,
};

pub static WORD_MANT_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("ained")],
    values: &[&["maintained"]],
    range: 5..=5,
};

static WORD_MANS_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_MANS_CHILDREN),
    value: None,
};

pub static WORD_MANS_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("alughter"),
        dictgen::InsensitiveStr::Ascii("laugher"),
        dictgen::InsensitiveStr::Ascii("laugter"),
        dictgen::InsensitiveStr::Ascii("laugther"),
        dictgen::InsensitiveStr::Ascii("luaghter"),
    ],
    values: &[
        &["manslaughter"],
        &["manslaughter"],
        &["manslaughter"],
        &["manslaughter"],
        &["manslaughter"],
    ],
    range: 7..=8,
};

static WORD_MANO_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_MANO_CHILDREN),
    value: None,
};

pub static WORD_MANO_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("euverability"),
        dictgen::InsensitiveStr::Ascii("uver"),
        dictgen::InsensitiveStr::Ascii("uverability"),
        dictgen::InsensitiveStr::Ascii("uverable"),
        dictgen::InsensitiveStr::Ascii("uvers"),
    ],
    values: &[
        &["maneuverability"],
        &["maneuver"],
        &["maneuverability"],
        &["maneuverable"],
        &["maneuvers"],
    ],
    range: 4..=12,
};

static WORD_MANN_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_MANN_CHILDREN),
    value: None,
};

pub static WORD_MANN_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("arisms"),
        dictgen::InsensitiveStr::Ascii("erisims"),
        dictgen::InsensitiveStr::Ascii("ersims"),
        dictgen::InsensitiveStr::Ascii("orisms"),
    ],
    values: &[
        &["mannerisms"],
        &["mannerisms"],
        &["mannerisms"],
        &["mannerisms"],
    ],
    range: 6..=7,
};

static WORD_MANI_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_MANI_CHILDREN),
    value: None,
};

pub static WORD_MANI_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("factured"),
        dictgen::InsensitiveStr::Ascii("facturer"),
        dictgen::InsensitiveStr::Ascii("facturers"),
        dictgen::InsensitiveStr::Ascii("factures"),
        dictgen::InsensitiveStr::Ascii("facturing"),
        dictgen::InsensitiveStr::Ascii("fastation"),
        dictgen::InsensitiveStr::Ascii("feso"),
        dictgen::InsensitiveStr::Ascii("festacion"),
        dictgen::InsensitiveStr::Ascii("festado"),
        dictgen::InsensitiveStr::Ascii("festaion"),
        dictgen::InsensitiveStr::Ascii("festano"),
        dictgen::InsensitiveStr::Ascii("festanti"),
        dictgen::InsensitiveStr::Ascii("festas"),
        dictgen::InsensitiveStr::Ascii("festating"),
        dictgen::InsensitiveStr::Ascii("festato"),
        dictgen::InsensitiveStr::Ascii("festes"),
        dictgen::InsensitiveStr::Ascii("festion"),
        dictgen::InsensitiveStr::Ascii("festior"),
        dictgen::InsensitiveStr::Ascii("festons"),
        dictgen::InsensitiveStr::Ascii("festors"),
        dictgen::InsensitiveStr::Ascii("festus"),
        dictgen::InsensitiveStr::Ascii("fistation"),
        dictgen::InsensitiveStr::Ascii("pluate"),
        dictgen::InsensitiveStr::Ascii("pluated"),
        dictgen::InsensitiveStr::Ascii("pluating"),
        dictgen::InsensitiveStr::Ascii("pluation"),
        dictgen::InsensitiveStr::Ascii("pualte"),
        dictgen::InsensitiveStr::Ascii("pualted"),
        dictgen::InsensitiveStr::Ascii("pualting"),
        dictgen::InsensitiveStr::Ascii("pualtion"),
        dictgen::InsensitiveStr::Ascii("pualtive"),
        dictgen::InsensitiveStr::Ascii("pulacion"),
        dictgen::InsensitiveStr::Ascii("pulant"),
        dictgen::InsensitiveStr::Ascii("pulare"),
        dictgen::InsensitiveStr::Ascii("pulatie"),
        dictgen::InsensitiveStr::Ascii("pulatin"),
        dictgen::InsensitiveStr::Ascii("pulationg"),
        dictgen::InsensitiveStr::Ascii("pulaton"),
        dictgen::InsensitiveStr::Ascii("pule"),
        dictgen::InsensitiveStr::Ascii("pulitive"),
        dictgen::InsensitiveStr::Ascii("pulted"),
        dictgen::InsensitiveStr::Ascii("sfestations"),
        dictgen::InsensitiveStr::Ascii("uplate"),
        dictgen::InsensitiveStr::Ascii("uplated"),
        dictgen::InsensitiveStr::Ascii("uplating"),
        dictgen::InsensitiveStr::Ascii("uplation"),
        dictgen::InsensitiveStr::Ascii("uplative"),
    ],
    values: &[
        &["manufactured"],
        &["manufacturer"],
        &["manufacturers"],
        &["manufactures"],
        &["manufacturing"],
        &["manifestation"],
        &["manifesto"],
        &["manifestation"],
        &["manifesto"],
        &["manifestation"],
        &["manifesto"],
        &["manifestation"],
        &["manifests"],
        &["manifestation"],
        &["manifesto"],
        &["manifests"],
        &["manifesto"],
        &["manifesto"],
        &["manifests"],
        &["manifests"],
        &["manifests"],
        &["manifestation"],
        &["manipulate"],
        &["manipulated"],
        &["manipulating"],
        &["manipulation"],
        &["manipulate"],
        &["manipulated"],
        &["manipulating"],
        &["manipulation"],
        &["manipulative"],
        &["manipulation"],
        &["manipulate"],
        &["manipulate"],
        &["manipulative"],
        &["manipulation"],
        &["manipulating"],
        &["manipulation"],
        &["manipulate"],
        &["manipulative"],
        &["manipulated"],
        &["manifestations"],
        &["manipulate"],
        &["manipulated"],
        &["manipulating"],
        &["manipulation"],
        &["manipulative"],
    ],
    range: 4..=11,
};

static WORD_MANG_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_MANG_CHILDREN),
    value: None,
};

pub static WORD_MANG_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("eld"),
        dictgen::InsensitiveStr::Ascii("esium"),
        dictgen::InsensitiveStr::Ascii("etic"),
        dictgen::InsensitiveStr::Ascii("ets"),
        dictgen::InsensitiveStr::Ascii("itude"),
        dictgen::InsensitiveStr::Ascii("lade"),
    ],
    values: &[
        &["mangled"],
        &["magnesium"],
        &["magnetic"],
        &["magnets"],
        &["magnitude"],
        &["mangled"],
    ],
    range: 3..=5,
};

static WORD_MANF_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_MANF_CHILDREN),
    value: None,
};

pub static WORD_MANF_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("iest"),
        dictgen::InsensitiveStr::Ascii("iesto"),
        dictgen::InsensitiveStr::Ascii("iests"),
        dictgen::InsensitiveStr::Ascii("uacturers"),
    ],
    values: &[
        &["manifest"],
        &["manifesto"],
        &["manifests"],
        &["manufactures"],
    ],
    range: 4..=9,
};

static WORD_MANE_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_MANE_CHILDREN),
    value: None,
};

pub static WORD_MANE_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("agable"),
        dictgen::InsensitiveStr::Ascii("festation"),
        dictgen::InsensitiveStr::Ascii("ouvre"),
        dictgen::InsensitiveStr::Ascii("ouvred"),
        dictgen::InsensitiveStr::Ascii("ouvres"),
        dictgen::InsensitiveStr::Ascii("ouvring"),
        dictgen::InsensitiveStr::Ascii("uveres"),
        dictgen::InsensitiveStr::Ascii("uveur"),
        dictgen::InsensitiveStr::Ascii("uveurs"),
        dictgen::InsensitiveStr::Ascii("veur"),
        dictgen::InsensitiveStr::Ascii("veurs"),
        dictgen::InsensitiveStr::Ascii("vuer"),
    ],
    values: &[
        &["manageable"],
        &["manifestation"],
        &["manoeuvre"],
        &["manoeuvred"],
        &["manoeuvres"],
        &["manoeuvring"],
        &["maneuvers"],
        &["maneuver"],
        &["maneuver"],
        &["maneuver"],
        &["maneuvers"],
        &["maneuver"],
    ],
    range: 4..=9,
};

static WORD_MAND_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_MAND_CHILDREN),
    value: None,
};

pub static WORD_MAND_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("arian"),
        dictgen::InsensitiveStr::Ascii("arijn"),
        dictgen::InsensitiveStr::Ascii("arion"),
        dictgen::InsensitiveStr::Ascii("ase"),
        dictgen::InsensitiveStr::Ascii("aste"),
        dictgen::InsensitiveStr::Ascii("ats"),
        dictgen::InsensitiveStr::Ascii("rain"),
        dictgen::InsensitiveStr::Ascii("rian"),
    ],
    values: &[
        &["mandarin"],
        &["mandarin"],
        &["mandarin"],
        &["mandates"],
        &["mandates"],
        &["mandates"],
        &["mandarin"],
        &["mandarin"],
    ],
    range: 3..=5,
};

static WORD_MANA_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_MANA_CHILDREN),
    value: None,
};

pub static WORD_MANA_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("drin"),
        dictgen::InsensitiveStr::Ascii("factured"),
        dictgen::InsensitiveStr::Ascii("facturer"),
        dictgen::InsensitiveStr::Ascii("facturers"),
        dictgen::InsensitiveStr::Ascii("factures"),
        dictgen::InsensitiveStr::Ascii("facturing"),
        dictgen::InsensitiveStr::Ascii("festation"),
        dictgen::InsensitiveStr::Ascii("gable"),
        dictgen::InsensitiveStr::Ascii("gebale"),
        dictgen::InsensitiveStr::Ascii("gment"),
        dictgen::InsensitiveStr::Ascii("ully"),
        dictgen::InsensitiveStr::Ascii("uls"),
    ],
    values: &[
        &["mandarin"],
        &["manufactured"],
        &["manufacturer"],
        &["manufacturers"],
        &["manufactures"],
        &["manufacturing"],
        &["manifestation"],
        &["manageable"],
        &["manageable"],
        &["management"],
        &["manually"],
        &["manuals"],
    ],
    range: 3..=9,
};

static WORD_MAM_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_MAM_CHILDREN),
    value: None,
};

pub static WORD_MAM_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("al"),
        dictgen::InsensitiveStr::Ascii("alian"),
    ],
    values: &[&["mammal"], &["mammalian"]],
    range: 2..=5,
};

static WORD_MAL_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_MAL_CHILDREN),
    value: None,
};

pub static WORD_MAL_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("aira"),
        dictgen::InsensitiveStr::Ascii("ariya"),
        dictgen::InsensitiveStr::Ascii("asiya"),
        dictgen::InsensitiveStr::Ascii("asyia"),
        dictgen::InsensitiveStr::Ascii("asyian"),
        dictgen::InsensitiveStr::Ascii("ayisa"),
        dictgen::InsensitiveStr::Ascii("ayisan"),
        dictgen::InsensitiveStr::Ascii("aysa"),
        dictgen::InsensitiveStr::Ascii("aysain"),
        dictgen::InsensitiveStr::Ascii("clom"),
        dictgen::InsensitiveStr::Ascii("etonin"),
        dictgen::InsensitiveStr::Ascii("fonction"),
        dictgen::InsensitiveStr::Ascii("fucntion"),
        dictgen::InsensitiveStr::Ascii("fucntions"),
        dictgen::InsensitiveStr::Ascii("funcion"),
        dictgen::InsensitiveStr::Ascii("funciton"),
        dictgen::InsensitiveStr::Ascii("functing"),
        dictgen::InsensitiveStr::Ascii("funktion"),
        dictgen::InsensitiveStr::Ascii("practce"),
        dictgen::InsensitiveStr::Ascii("practise"),
        dictgen::InsensitiveStr::Ascii("practive"),
        dictgen::InsensitiveStr::Ascii("tesian"),
        dictgen::InsensitiveStr::Ascii("yasia"),
        dictgen::InsensitiveStr::Ascii("yasian"),
    ],
    values: &[
        &["malaria"],
        &["malaria"],
        &["malaysia"],
        &["malaysia"],
        &["malaysian"],
        &["malaysia"],
        &["malaysian"],
        &["malaysia"],
        &["malaysian"],
        &["malcolm"],
        &["melatonin"],
        &["malfunction"],
        &["malfunction"],
        &["malfunction"],
        &["malfunction"],
        &["malfunction"],
        &["malfunction"],
        &["malfunction"],
        &["malpractice"],
        &["malpractice"],
        &["malpractice"],
        &["maltese"],
        &["malaysia"],
        &["malaysian"],
    ],
    range: 4..=9,
};

static WORD_MAK_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_MAK_CHILDREN),
    value: None,
};

pub static WORD_MAK_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ed"),
        dictgen::InsensitiveStr::Ascii("rsman"),
        dictgen::InsensitiveStr::Ascii("se"),
    ],
    values: &[&["marked"], &["marksman"], &["makes"]],
    range: 2..=5,
};

static WORD_MAJ_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_MAJ_CHILDREN),
    value: None,
};

pub static WORD_MAJ_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("oroty")],
    values: &[&["majority"]],
    range: 5..=5,
};

static WORD_MAI_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_MAI_CHILDREN),
    value: None,
};

pub static WORD_MAI_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("dson"),
        dictgen::InsensitiveStr::Ascii("lny"),
        dictgen::InsensitiveStr::Ascii("nfest"),
        dictgen::InsensitiveStr::Ascii("nfestation"),
        dictgen::InsensitiveStr::Ascii("nfesto"),
        dictgen::InsensitiveStr::Ascii("nfests"),
        dictgen::InsensitiveStr::Ascii("npulate"),
        dictgen::InsensitiveStr::Ascii("nstreem"),
        dictgen::InsensitiveStr::Ascii("nstrem"),
        dictgen::InsensitiveStr::Ascii("ntainance"),
        dictgen::InsensitiveStr::Ascii("ntaince"),
        dictgen::InsensitiveStr::Ascii("ntainence"),
        dictgen::InsensitiveStr::Ascii("ntaines"),
        dictgen::InsensitiveStr::Ascii("ntaing"),
        dictgen::InsensitiveStr::Ascii("ntainig"),
        dictgen::InsensitiveStr::Ascii("ntainted"),
        dictgen::InsensitiveStr::Ascii("ntan"),
        dictgen::InsensitiveStr::Ascii("ntanance"),
        dictgen::InsensitiveStr::Ascii("ntance"),
        dictgen::InsensitiveStr::Ascii("ntanence"),
        dictgen::InsensitiveStr::Ascii("ntenace"),
        dictgen::InsensitiveStr::Ascii("ntenaince"),
        dictgen::InsensitiveStr::Ascii("ntenence"),
        dictgen::InsensitiveStr::Ascii("ntian"),
        dictgen::InsensitiveStr::Ascii("ntianed"),
        dictgen::InsensitiveStr::Ascii("ntianing"),
        dictgen::InsensitiveStr::Ascii("ntians"),
        dictgen::InsensitiveStr::Ascii("ntinaing"),
        dictgen::InsensitiveStr::Ascii("ntinance"),
        dictgen::InsensitiveStr::Ascii("ntinence"),
        dictgen::InsensitiveStr::Ascii("ntioned"),
        dictgen::InsensitiveStr::Ascii("rjuana"),
        dictgen::InsensitiveStr::Ascii("rlyn"),
    ],
    values: &[
        &["madison"],
        &["mainly"],
        &["manifest"],
        &["manifestation"],
        &["manifesto"],
        &["manifests"],
        &["manipulate"],
        &["mainstream"],
        &["mainstream"],
        &["maintenance"],
        &["maintained"],
        &["maintenance"],
        &["maintains"],
        &["maintaining"],
        &["maintaining"],
        &["maintained"],
        &["maintain"],
        &["maintenance"],
        &["maintenance"],
        &["maintenance"],
        &["maintenance"],
        &["maintenance"],
        &["maintenance"],
        &["maintain"],
        &["maintained"],
        &["maintaining"],
        &["maintains"],
        &["maintaining"],
        &["maintenance"],
        &["maintenance"],
        &["mentioned"],
        &["marijuana"],
        &["marilyn"],
    ],
    range: 3..=10,
};

static WORD_MAG_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_MAG_CHILDREN),
    value: None,
};

pub static WORD_MAG_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ainzes"),
        dictgen::InsensitiveStr::Ascii("asine"),
        dictgen::InsensitiveStr::Ascii("azins"),
        dictgen::InsensitiveStr::Ascii("ensium"),
        dictgen::InsensitiveStr::Ascii("entic"),
        dictgen::InsensitiveStr::Ascii("ents"),
        dictgen::InsensitiveStr::Ascii("icain"),
        dictgen::InsensitiveStr::Ascii("icin"),
        dictgen::InsensitiveStr::Ascii("incian"),
        dictgen::InsensitiveStr::Ascii("inficent"),
        dictgen::InsensitiveStr::Ascii("intude"),
        dictgen::InsensitiveStr::Ascii("isine"),
        dictgen::InsensitiveStr::Ascii("izine"),
        dictgen::InsensitiveStr::Ascii("neficent"),
        dictgen::InsensitiveStr::Ascii("neisum"),
        dictgen::InsensitiveStr::Ascii("nesuim"),
        dictgen::InsensitiveStr::Ascii("netis"),
        dictgen::InsensitiveStr::Ascii("nicifent"),
        dictgen::InsensitiveStr::Ascii("nifacent"),
        dictgen::InsensitiveStr::Ascii("nifecent"),
        dictgen::InsensitiveStr::Ascii("nificant"),
        dictgen::InsensitiveStr::Ascii("nificient"),
        dictgen::InsensitiveStr::Ascii("nifient"),
        dictgen::InsensitiveStr::Ascii("nifine"),
        dictgen::InsensitiveStr::Ascii("nited"),
        dictgen::InsensitiveStr::Ascii("nitudine"),
        dictgen::InsensitiveStr::Ascii("nitue"),
        dictgen::InsensitiveStr::Ascii("olia"),
    ],
    values: &[
        &["magazines"],
        &["magazine"],
        &["magazines"],
        &["magnesium"],
        &["magnetic"],
        &["magnets"],
        &["magician"],
        &["magician"],
        &["magician"],
        &["magnificent"],
        &["magnitude"],
        &["magazine"],
        &["magazine"],
        &["magnificent"],
        &["magnesium"],
        &["magnesium"],
        &["magnets"],
        &["magnificent"],
        &["magnificent"],
        &["magnificent"],
        &["magnificent"],
        &["magnificent"],
        &["magnificent"],
        &["magnificent"],
        &["magnitude"],
        &["magnitude"],
        &["magnitude"],
        &["magnolia"],
    ],
    range: 4..=9,
};

static WORD_MAE_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_MAE_CHILDREN),
    value: None,
};

pub static WORD_MAE_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("stries")],
    values: &[&["masteries"]],
    range: 6..=6,
};

static WORD_MAD_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_MAD_CHILDREN),
    value: None,
};

pub static WORD_MAD_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("sion"),
        dictgen::InsensitiveStr::Ascii("turbating"),
        dictgen::InsensitiveStr::Ascii("turbation"),
    ],
    values: &[&["madison"], &["masturbating"], &["masturbation"]],
    range: 4..=9,
};

static WORD_MAC_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_MAC_CHILDREN),
    value: None,
};

pub static WORD_MAC_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("arino"),
        dictgen::InsensitiveStr::Ascii("aronni"),
        dictgen::InsensitiveStr::Ascii("hiens"),
        dictgen::InsensitiveStr::Ascii("hing"),
        dictgen::InsensitiveStr::Ascii("hins"),
        dictgen::InsensitiveStr::Ascii("keral"),
        dictgen::InsensitiveStr::Ascii("lolm"),
        dictgen::InsensitiveStr::Ascii("thup"),
        dictgen::InsensitiveStr::Ascii("thups"),
    ],
    values: &[
        &["macaroni"],
        &["macaroni"],
        &["machines"],
        &["machine"],
        &["machines"],
        &["mackerel"],
        &["malcolm"],
        &["matchup"],
        &["matchups"],
    ],
    range: 4..=6,
};

static WORD_MAB_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_MAB_CHILDREN),
    value: None,
};

pub static WORD_MAB_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("yelline")],
    values: &[&["maybelline"]],
    range: 7..=7,
};

static WORD_L_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_L_CHILDREN),
    value: None,
};

static WORD_L_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    Some(&WORD_LA_NODE),
    None,
    None,
    None,
    Some(&WORD_LE_NODE),
    Some(&WORD_LF_NODE),
    None,
    None,
    Some(&WORD_LI_NODE),
    None,
    None,
    None,
    Some(&WORD_LM_NODE),
    Some(&WORD_LN_NODE),
    Some(&WORD_LO_NODE),
    None,
    None,
    None,
    None,
    None,
    Some(&WORD_LU_NODE),
    Some(&WORD_LV_NODE),
    None,
    None,
    Some(&WORD_LY_NODE),
    None,
];

static WORD_LY_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_LY_CHILDREN),
    value: None,
};

pub static WORD_LY_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("bia")],
    values: &[&["libya"]],
    range: 3..=3,
};

static WORD_LV_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_LV_CHILDREN),
    value: None,
};

pub static WORD_LV_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("eo"),
        dictgen::InsensitiveStr::Ascii("oe"),
    ],
    values: &[&["love"], &["love"]],
    range: 2..=2,
};

static WORD_LU_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_LU_CHILDREN),
    value: None,
};

pub static WORD_LU_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("anched"),
        dictgen::InsensitiveStr::Ascii("ancher"),
        dictgen::InsensitiveStr::Ascii("anchers"),
        dictgen::InsensitiveStr::Ascii("anches"),
        dictgen::InsensitiveStr::Ascii("anching"),
        dictgen::InsensitiveStr::Ascii("andry"),
        dictgen::InsensitiveStr::Ascii("bicrant"),
        dictgen::InsensitiveStr::Ascii("bircant"),
        dictgen::InsensitiveStr::Ascii("bricat"),
        dictgen::InsensitiveStr::Ascii("cifear"),
        dictgen::InsensitiveStr::Ascii("ckilly"),
        dictgen::InsensitiveStr::Ascii("ckliy"),
        dictgen::InsensitiveStr::Ascii("dcrious"),
        dictgen::InsensitiveStr::Ascii("dricous"),
        dictgen::InsensitiveStr::Ascii("icfer"),
        dictgen::InsensitiveStr::Ascii("ietenant"),
        dictgen::InsensitiveStr::Ascii("kid"),
        dictgen::InsensitiveStr::Ascii("naticos"),
        dictgen::InsensitiveStr::Ascii("naticus"),
        dictgen::InsensitiveStr::Ascii("natis"),
    ],
    values: &[
        &["launched"],
        &["launcher"],
        &["launchers"],
        &["launches"],
        &["launching"],
        &["laundry"],
        &["lubricant"],
        &["lubricant"],
        &["lubricant"],
        &["lucifer"],
        &["luckily"],
        &["luckily"],
        &["ludicrous"],
        &["ludicrous"],
        &["lucifer"],
        &["lieutenant"],
        &["likud"],
        &["lunatics"],
        &["lunatics"],
        &["lunatics"],
    ],
    range: 3..=8,
};

static WORD_LO_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_LO_CHILDREN),
    value: None,
};

pub static WORD_LO_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("adous"),
        dictgen::InsensitiveStr::Ascii("bbyistes"),
        dictgen::InsensitiveStr::Ascii("bbysits"),
        dictgen::InsensitiveStr::Ascii("ckacreen"),
        dictgen::InsensitiveStr::Ascii("ckscreeen"),
        dictgen::InsensitiveStr::Ascii("ckscren"),
        dictgen::InsensitiveStr::Ascii("enard"),
        dictgen::InsensitiveStr::Ascii("epard"),
        dictgen::InsensitiveStr::Ascii("ev"),
        dictgen::InsensitiveStr::Ascii("gictical"),
        dictgen::InsensitiveStr::Ascii("gisitcal"),
        dictgen::InsensitiveStr::Ascii("gisitcs"),
        dictgen::InsensitiveStr::Ascii("gisticas"),
        dictgen::InsensitiveStr::Ascii("gisticly"),
        dictgen::InsensitiveStr::Ascii("giteh"),
        dictgen::InsensitiveStr::Ascii("gsitics"),
        dictgen::InsensitiveStr::Ascii("gtiech"),
        dictgen::InsensitiveStr::Ascii("iusiana"),
        dictgen::InsensitiveStr::Ascii("iusville"),
        dictgen::InsensitiveStr::Ascii("llipoop"),
        dictgen::InsensitiveStr::Ascii("llipoopy"),
        dictgen::InsensitiveStr::Ascii("nelyness"),
        dictgen::InsensitiveStr::Ascii("ngevitity"),
        dictgen::InsensitiveStr::Ascii("ngevitiy"),
        dictgen::InsensitiveStr::Ascii("ngitme"),
        dictgen::InsensitiveStr::Ascii("ngitudonal"),
        dictgen::InsensitiveStr::Ascii("ngtiem"),
        dictgen::InsensitiveStr::Ascii("nileness"),
        dictgen::InsensitiveStr::Ascii("nley"),
        dictgen::InsensitiveStr::Ascii("nlieness"),
        dictgen::InsensitiveStr::Ascii("nly"),
        dictgen::InsensitiveStr::Ascii("oseley"),
        dictgen::InsensitiveStr::Ascii("osley"),
        dictgen::InsensitiveStr::Ascii("replay"),
        dictgen::InsensitiveStr::Ascii("tharingen"),
        dictgen::InsensitiveStr::Ascii("uieville"),
        dictgen::InsensitiveStr::Ascii("uisiania"),
        dictgen::InsensitiveStr::Ascii("uisianna"),
        dictgen::InsensitiveStr::Ascii("uisivlle"),
        dictgen::InsensitiveStr::Ascii("uisviile"),
        dictgen::InsensitiveStr::Ascii("uisvile"),
        dictgen::InsensitiveStr::Ascii("uisvillle"),
        dictgen::InsensitiveStr::Ascii("usiville"),
    ],
    values: &[
        &["loadouts"],
        &["lobbyists"],
        &["lobbyists"],
        &["lockscreen"],
        &["lockscreen"],
        &["lockscreen"],
        &["leonard"],
        &["leopard"],
        &["love"],
        &["logistical"],
        &["logistical"],
        &["logistics"],
        &["logistics"],
        &["logistical"],
        &["logitech"],
        &["logistics"],
        &["logitech"],
        &["louisiana"],
        &["louisville"],
        &["lollipop"],
        &["lollipop"],
        &["loneliness"],
        &["longevity"],
        &["longevity"],
        &["longtime"],
        &["longitudinal"],
        &["longtime"],
        &["loneliness"],
        &["lonely"],
        &["loneliness"],
        &["lonely"],
        &["loosely"],
        &["loosely"],
        &["roleplay"],
        &["lothringen"],
        &["louisville"],
        &["louisiana"],
        &["louisiana"],
        &["louisville"],
        &["louisville"],
        &["louisville"],
        &["louisville"],
        &["louisville"],
    ],
    range: 2..=10,
};

static WORD_LN_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_LN_CHILDREN),
    value: None,
};

pub static WORD_LN_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("owledgable")],
    values: &[&["knowledgable"]],
    range: 10..=10,
};

static WORD_LM_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_LM_CHILDREN),
    value: None,
};

pub static WORD_LM_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("its")],
    values: &[&["limits"]],
    range: 3..=3,
};

static WORD_LI_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_LI_CHILDREN),
    value: None,
};

static WORD_LI_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    Some(&WORD_LIA_NODE),
    Some(&WORD_LIB_NODE),
    Some(&WORD_LIC_NODE),
    None,
    Some(&WORD_LIE_NODE),
    Some(&WORD_LIF_NODE),
    Some(&WORD_LIG_NODE),
    None,
    None,
    None,
    Some(&WORD_LIK_NODE),
    None,
    Some(&WORD_LIM_NODE),
    Some(&WORD_LIN_NODE),
    Some(&WORD_LIO_NODE),
    Some(&WORD_LIP_NODE),
    Some(&WORD_LIQ_NODE),
    None,
    Some(&WORD_LIS_NODE),
    Some(&WORD_LIT_NODE),
    Some(&WORD_LIU_NODE),
    Some(&WORD_LIV_NODE),
    None,
    None,
    None,
    None,
];

static WORD_LIV_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_LIV_CHILDREN),
    value: None,
};

pub static WORD_LIV_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("eatream"),
        dictgen::InsensitiveStr::Ascii("elehood"),
        dictgen::InsensitiveStr::Ascii("eprool"),
        dictgen::InsensitiveStr::Ascii("erpol"),
        dictgen::InsensitiveStr::Ascii("erpoool"),
        dictgen::InsensitiveStr::Ascii("escream"),
        dictgen::InsensitiveStr::Ascii("estreem"),
        dictgen::InsensitiveStr::Ascii("estrem"),
        dictgen::InsensitiveStr::Ascii("estrems"),
        dictgen::InsensitiveStr::Ascii("ilehood"),
        dictgen::InsensitiveStr::Ascii("ley"),
        dictgen::InsensitiveStr::Ascii("liehood"),
    ],
    values: &[
        &["livestream"],
        &["livelihood"],
        &["liverpool"],
        &["liverpool"],
        &["liverpool"],
        &["livestream"],
        &["livestream"],
        &["livestream"],
        &["livestream"],
        &["livelihood"],
        &["lively"],
        &["livelihood"],
    ],
    range: 3..=7,
};

static WORD_LIU_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_LIU_CHILDREN),
    value: None,
};

pub static WORD_LIU_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("etenant"),
        dictgen::InsensitiveStr::Ascii("ke"),
    ],
    values: &[&["lieutenant"], &["like"]],
    range: 2..=7,
};

static WORD_LIT_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_LIT_CHILDREN),
    value: None,
};

pub static WORD_LIT_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ature"),
        dictgen::InsensitiveStr::Ascii("ecion"),
        dictgen::InsensitiveStr::Ascii("econ"),
        dictgen::InsensitiveStr::Ascii("eicon"),
        dictgen::InsensitiveStr::Ascii("erae"),
        dictgen::InsensitiveStr::Ascii("erallly"),
        dictgen::InsensitiveStr::Ascii("eraly"),
        dictgen::InsensitiveStr::Ascii("erarely"),
        dictgen::InsensitiveStr::Ascii("erarlly"),
        dictgen::InsensitiveStr::Ascii("erarly"),
        dictgen::InsensitiveStr::Ascii("erarry"),
        dictgen::InsensitiveStr::Ascii("eratire"),
        dictgen::InsensitiveStr::Ascii("erative"),
        dictgen::InsensitiveStr::Ascii("eratre"),
        dictgen::InsensitiveStr::Ascii("eratue"),
        dictgen::InsensitiveStr::Ascii("eratute"),
        dictgen::InsensitiveStr::Ascii("erture"),
        dictgen::InsensitiveStr::Ascii("haunia"),
        dictgen::InsensitiveStr::Ascii("huaina"),
        dictgen::InsensitiveStr::Ascii("huana"),
        dictgen::InsensitiveStr::Ascii("huanina"),
        dictgen::InsensitiveStr::Ascii("huaninan"),
        dictgen::InsensitiveStr::Ascii("huiana"),
        dictgen::InsensitiveStr::Ascii("huim"),
        dictgen::InsensitiveStr::Ascii("hunaia"),
        dictgen::InsensitiveStr::Ascii("igatin"),
        dictgen::InsensitiveStr::Ascii("igato"),
        dictgen::InsensitiveStr::Ascii("ihum"),
        dictgen::InsensitiveStr::Ascii("llefinger"),
        dictgen::InsensitiveStr::Ascii("tel"),
        dictgen::InsensitiveStr::Ascii("telfinger"),
        dictgen::InsensitiveStr::Ascii("terally"),
        dictgen::InsensitiveStr::Ascii("terfinger"),
        dictgen::InsensitiveStr::Ascii("tiefinger"),
        dictgen::InsensitiveStr::Ascii("tlefiger"),
        dictgen::InsensitiveStr::Ascii("tlefigner"),
        dictgen::InsensitiveStr::Ascii("tlefinder"),
        dictgen::InsensitiveStr::Ascii("tlefiner"),
        dictgen::InsensitiveStr::Ascii("tlepinger"),
        dictgen::InsensitiveStr::Ascii("uhania"),
    ],
    values: &[
        &["literature"],
        &["litecoin"],
        &["litecoin"],
        &["litecoin"],
        &["literate"],
        &["literally"],
        &["literally"],
        &["literary"],
        &["literary"],
        &["literary"],
        &["literary"],
        &["literate"],
        &["literate"],
        &["literate"],
        &["literate"],
        &["literate"],
        &["literature"],
        &["lithuania"],
        &["lithuania"],
        &["lithuania"],
        &["lithuania"],
        &["lithuania"],
        &["lithuania"],
        &["lithium"],
        &["lithuania"],
        &["litigation"],
        &["litigation"],
        &["lithium"],
        &["littlefinger"],
        &["little"],
        &["littlefinger"],
        &["literally"],
        &["littlefinger"],
        &["littlefinger"],
        &["littlefinger"],
        &["littlefinger"],
        &["littlefinger"],
        &["littlefinger"],
        &["littlefinger"],
        &["lithuania"],
    ],
    range: 3..=9,
};

static WORD_LIS_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_LIS_CHILDREN),
    value: None,
};

pub static WORD_LIS_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("cense"),
        dictgen::InsensitiveStr::Ascii("ence"),
        dictgen::InsensitiveStr::Ascii("enced"),
        dictgen::InsensitiveStr::Ascii("ense"),
        dictgen::InsensitiveStr::Ascii("pticks"),
        dictgen::InsensitiveStr::Ascii("tend"),
        dictgen::InsensitiveStr::Ascii("tenend"),
        dictgen::InsensitiveStr::Ascii("teneres"),
        dictgen::InsensitiveStr::Ascii("tenes"),
        dictgen::InsensitiveStr::Ascii("tents"),
        dictgen::InsensitiveStr::Ascii("tners"),
    ],
    values: &[
        &["license"],
        &["licence"],
        &["silenced"],
        &["license"],
        &["lipsticks"],
        &["listened"],
        &["listened"],
        &["listeners"],
        &["listens"],
        &["listens"],
        &["listeners"],
    ],
    range: 4..=7,
};

static WORD_LIQ_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_LIQ_CHILDREN),
    value: None,
};

pub static WORD_LIQ_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("iuds"),
        dictgen::InsensitiveStr::Ascii("uidas"),
        dictgen::InsensitiveStr::Ascii("uides"),
        dictgen::InsensitiveStr::Ascii("uidos"),
    ],
    values: &[&["liquids"], &["liquids"], &["liquids"], &["liquids"]],
    range: 4..=5,
};

static WORD_LIP_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_LIP_CHILDREN),
    value: None,
};

pub static WORD_LIP_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("stics")],
    values: &[&["lipsticks"]],
    range: 5..=5,
};

static WORD_LIO_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_LIO_CHILDREN),
    value: None,
};

pub static WORD_LIO_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("usville")],
    values: &[&["louisville"]],
    range: 7..=7,
};

static WORD_LIN_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_LIN_CHILDREN),
    value: None,
};

pub static WORD_LIN_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("clon"),
        dictgen::InsensitiveStr::Ascii("colin"),
        dictgen::InsensitiveStr::Ascii("colon"),
        dictgen::InsensitiveStr::Ascii("eupes"),
        dictgen::InsensitiveStr::Ascii("geire"),
        dictgen::InsensitiveStr::Ascii("gerine"),
        dictgen::InsensitiveStr::Ascii("giere"),
        dictgen::InsensitiveStr::Ascii("guisics"),
        dictgen::InsensitiveStr::Ascii("guisitc"),
        dictgen::InsensitiveStr::Ascii("guisitcs"),
        dictgen::InsensitiveStr::Ascii("guisitic"),
        dictgen::InsensitiveStr::Ascii("guistcs"),
        dictgen::InsensitiveStr::Ascii("guisticas"),
        dictgen::InsensitiveStr::Ascii("guisticos"),
        dictgen::InsensitiveStr::Ascii("guistis"),
        dictgen::InsensitiveStr::Ascii("guistisch"),
        dictgen::InsensitiveStr::Ascii("guitics"),
        dictgen::InsensitiveStr::Ascii("gusitic"),
        dictgen::InsensitiveStr::Ascii("gusitics"),
        dictgen::InsensitiveStr::Ascii("gvistic"),
        dictgen::InsensitiveStr::Ascii("naena"),
        dictgen::InsensitiveStr::Ascii("ueps"),
    ],
    values: &[
        &["lincoln"],
        &["lincoln"],
        &["lincoln"],
        &["lineups"],
        &["lingerie"],
        &["lingerie"],
        &["lingerie"],
        &["linguistics"],
        &["linguistics"],
        &["linguistics"],
        &["linguistic"],
        &["linguistics"],
        &["linguistics"],
        &["linguistics"],
        &["linguistics"],
        &["linguistics"],
        &["linguistic"],
        &["linguistics"],
        &["linguistics"],
        &["linguistic"],
        &["linnaean"],
        &["lineups"],
    ],
    range: 4..=9,
};

static WORD_LIM_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_LIM_CHILDREN),
    value: None,
};

pub static WORD_LIM_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ination"),
        dictgen::InsensitiveStr::Ascii("itacion"),
        dictgen::InsensitiveStr::Ascii("itaiton"),
        dictgen::InsensitiveStr::Ascii("itaitons"),
        dictgen::InsensitiveStr::Ascii("itant"),
        dictgen::InsensitiveStr::Ascii("itating"),
        dictgen::InsensitiveStr::Ascii("itativo"),
        dictgen::InsensitiveStr::Ascii("itato"),
    ],
    values: &[
        &["limitation"],
        &["limitation"],
        &["limitation"],
        &["limitation"],
        &["militant"],
        &["limitation"],
        &["limitation"],
        &["limitation"],
    ],
    range: 5..=8,
};

static WORD_LIK_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_LIK_CHILDREN),
    value: None,
};

pub static WORD_LIK_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ebale"),
        dictgen::InsensitiveStr::Ascii("elyhood"),
    ],
    values: &[&["likeable"], &["likelihood"]],
    range: 5..=7,
};

static WORD_LIG_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_LIG_CHILDREN),
    value: None,
};

pub static WORD_LIG_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("hhtning"),
        dictgen::InsensitiveStr::Ascii("hitng"),
        dictgen::InsensitiveStr::Ascii("hlty"),
        dictgen::InsensitiveStr::Ascii("hnting"),
        dictgen::InsensitiveStr::Ascii("htenning"),
        dictgen::InsensitiveStr::Ascii("htenting"),
        dictgen::InsensitiveStr::Ascii("htergas"),
        dictgen::InsensitiveStr::Ascii("htes"),
        dictgen::InsensitiveStr::Ascii("hthearded"),
        dictgen::InsensitiveStr::Ascii("htheared"),
        dictgen::InsensitiveStr::Ascii("hthearthed"),
        dictgen::InsensitiveStr::Ascii("htheated"),
        dictgen::InsensitiveStr::Ascii("hthning"),
        dictgen::InsensitiveStr::Ascii("hthorse"),
        dictgen::InsensitiveStr::Ascii("hthosue"),
        dictgen::InsensitiveStr::Ascii("hthours"),
        dictgen::InsensitiveStr::Ascii("htining"),
        dictgen::InsensitiveStr::Ascii("htneing"),
        dictgen::InsensitiveStr::Ascii("htnig"),
        dictgen::InsensitiveStr::Ascii("htnign"),
        dictgen::InsensitiveStr::Ascii("htnting"),
        dictgen::InsensitiveStr::Ascii("htres"),
        dictgen::InsensitiveStr::Ascii("htrom"),
        dictgen::InsensitiveStr::Ascii("htrooom"),
        dictgen::InsensitiveStr::Ascii("htweigt"),
        dictgen::InsensitiveStr::Ascii("htweigth"),
        dictgen::InsensitiveStr::Ascii("htwieght"),
        dictgen::InsensitiveStr::Ascii("htwright"),
        dictgen::InsensitiveStr::Ascii("itation"),
        dictgen::InsensitiveStr::Ascii("thening"),
        dictgen::InsensitiveStr::Ascii("thers"),
        dictgen::InsensitiveStr::Ascii("thhouse"),
        dictgen::InsensitiveStr::Ascii("thing"),
        dictgen::InsensitiveStr::Ascii("thly"),
        dictgen::InsensitiveStr::Ascii("thning"),
        dictgen::InsensitiveStr::Ascii("throom"),
        dictgen::InsensitiveStr::Ascii("thweight"),
    ],
    values: &[
        &["lightening"],
        &["lighting"],
        &["lightly"],
        &["lightning"],
        &["lightening"],
        &["lightening"],
        &["lighters"],
        &["lighters"],
        &["lighthearted"],
        &["lighthearted"],
        &["lighthearted"],
        &["lighthearted"],
        &["lightening"],
        &["lighthouse"],
        &["lighthouse"],
        &["lighthouse"],
        &["lighting"],
        &["lightening"],
        &["lightning"],
        &["lightning"],
        &["lightening"],
        &["lighters"],
        &["lightroom"],
        &["lightroom"],
        &["lightweight"],
        &["lightweight"],
        &["lightweight"],
        &["lightweight"],
        &["litigation"],
        &["lightening"],
        &["lighters"],
        &["lighthouse"],
        &["lighting"],
        &["lightly"],
        &["lightning"],
        &["lightroom"],
        &["lightweight"],
    ],
    range: 4..=10,
};

static WORD_LIF_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_LIF_CHILDREN),
    value: None,
};

pub static WORD_LIF_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("epsan"),
        dictgen::InsensitiveStr::Ascii("espawn"),
        dictgen::InsensitiveStr::Ascii("estel"),
        dictgen::InsensitiveStr::Ascii("estiles"),
        dictgen::InsensitiveStr::Ascii("estlye"),
        dictgen::InsensitiveStr::Ascii("estlyes"),
        dictgen::InsensitiveStr::Ascii("estye"),
        dictgen::InsensitiveStr::Ascii("esystem"),
        dictgen::InsensitiveStr::Ascii("esytles"),
        dictgen::InsensitiveStr::Ascii("etimers"),
        dictgen::InsensitiveStr::Ascii("etsyles"),
        dictgen::InsensitiveStr::Ascii("time"),
    ],
    values: &[
        &["lifespan"],
        &["lifespan"],
        &["lifesteal"],
        &["lifestyles"],
        &["lifestyle"],
        &["lifestyles"],
        &["lifestyle"],
        &["filesystem"],
        &["lifestyles"],
        &["lifetimes"],
        &["lifestyles"],
        &["lifetime"],
    ],
    range: 4..=7,
};

static WORD_LIE_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_LIE_CHILDREN),
    value: None,
};

pub static WORD_LIE_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("brals"),
        dictgen::InsensitiveStr::Ascii("cester"),
        dictgen::InsensitiveStr::Ascii("ing"),
        dictgen::InsensitiveStr::Ascii("k"),
        dictgen::InsensitiveStr::Ascii("kable"),
        dictgen::InsensitiveStr::Ascii("kd"),
        dictgen::InsensitiveStr::Ascii("nups"),
        dictgen::InsensitiveStr::Ascii("sure"),
        dictgen::InsensitiveStr::Ascii("tuenant"),
        dictgen::InsensitiveStr::Ascii("uenant"),
        dictgen::InsensitiveStr::Ascii("utanant"),
        dictgen::InsensitiveStr::Ascii("utanent"),
        dictgen::InsensitiveStr::Ascii("utenat"),
        dictgen::InsensitiveStr::Ascii("utenent"),
        dictgen::InsensitiveStr::Ascii("utennant"),
        dictgen::InsensitiveStr::Ascii("utentant"),
        dictgen::InsensitiveStr::Ascii("ved"),
    ],
    values: &[
        &["liberals"],
        &["leicester"],
        &["lying"],
        &["like"],
        &["likable"],
        &["liked"],
        &["lineups"],
        &["leisure"],
        &["lieutenant"],
        &["lieutenant"],
        &["lieutenant"],
        &["lieutenant"],
        &["lieutenant"],
        &["lieutenant"],
        &["lieutenant"],
        &["lieutenant"],
        &["lived"],
    ],
    range: 1..=8,
};

static WORD_LIC_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_LIC_CHILDREN),
    value: None,
};

pub static WORD_LIC_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("encie"),
        dictgen::InsensitiveStr::Ascii("encse"),
    ],
    values: &[&["licence"], &["licence"]],
    range: 5..=5,
};

static WORD_LIB_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_LIB_CHILDREN),
    value: None,
};

pub static WORD_LIB_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ary"),
        dictgen::InsensitiveStr::Ascii("eracion"),
        dictgen::InsensitiveStr::Ascii("erae"),
        dictgen::InsensitiveStr::Ascii("erales"),
        dictgen::InsensitiveStr::Ascii("eralest"),
        dictgen::InsensitiveStr::Ascii("eralim"),
        dictgen::InsensitiveStr::Ascii("eralis"),
        dictgen::InsensitiveStr::Ascii("eralisim"),
        dictgen::InsensitiveStr::Ascii("eralizm"),
        dictgen::InsensitiveStr::Ascii("eralnim"),
        dictgen::InsensitiveStr::Ascii("eralsim"),
        dictgen::InsensitiveStr::Ascii("erarion"),
        dictgen::InsensitiveStr::Ascii("eras"),
        dictgen::InsensitiveStr::Ascii("eraties"),
        dictgen::InsensitiveStr::Ascii("eratin"),
        dictgen::InsensitiveStr::Ascii("erato"),
        dictgen::InsensitiveStr::Ascii("eratore"),
        dictgen::InsensitiveStr::Ascii("eratrian"),
        dictgen::InsensitiveStr::Ascii("eratrianism"),
        dictgen::InsensitiveStr::Ascii("eratrians"),
        dictgen::InsensitiveStr::Ascii("ertae"),
        dictgen::InsensitiveStr::Ascii("ertairan"),
        dictgen::InsensitiveStr::Ascii("ertania"),
        dictgen::InsensitiveStr::Ascii("ertarain"),
        dictgen::InsensitiveStr::Ascii("ertarainism"),
        dictgen::InsensitiveStr::Ascii("ertarains"),
        dictgen::InsensitiveStr::Ascii("ertariaism"),
        dictgen::InsensitiveStr::Ascii("ertarianisim"),
        dictgen::InsensitiveStr::Ascii("ertarianisme"),
        dictgen::InsensitiveStr::Ascii("ertarianismo"),
        dictgen::InsensitiveStr::Ascii("ertarianists"),
        dictgen::InsensitiveStr::Ascii("ertariansim"),
        dictgen::InsensitiveStr::Ascii("ertariansism"),
        dictgen::InsensitiveStr::Ascii("ertariansm"),
        dictgen::InsensitiveStr::Ascii("ertarias"),
        dictgen::InsensitiveStr::Ascii("ertarien"),
        dictgen::InsensitiveStr::Ascii("ertariens"),
        dictgen::InsensitiveStr::Ascii("ertarinaism"),
        dictgen::InsensitiveStr::Ascii("ertaryan"),
        dictgen::InsensitiveStr::Ascii("ertaryanism"),
        dictgen::InsensitiveStr::Ascii("ertaryans"),
        dictgen::InsensitiveStr::Ascii("ertatian"),
        dictgen::InsensitiveStr::Ascii("ertatianism"),
        dictgen::InsensitiveStr::Ascii("ertatians"),
        dictgen::InsensitiveStr::Ascii("ertea"),
        dictgen::InsensitiveStr::Ascii("erterian"),
        dictgen::InsensitiveStr::Ascii("erterianism"),
        dictgen::InsensitiveStr::Ascii("erterians"),
        dictgen::InsensitiveStr::Ascii("guistic"),
        dictgen::InsensitiveStr::Ascii("guistics"),
        dictgen::InsensitiveStr::Ascii("itarianisn"),
        dictgen::InsensitiveStr::Ascii("le"),
        dictgen::InsensitiveStr::Ascii("raires"),
        dictgen::InsensitiveStr::Ascii("rarse"),
        dictgen::InsensitiveStr::Ascii("retarian"),
        dictgen::InsensitiveStr::Ascii("retarianism"),
        dictgen::InsensitiveStr::Ascii("retarians"),
    ],
    values: &[
        &["library"],
        &["liberation"],
        &["liberate"],
        &["liberals"],
        &["liberate"],
        &["liberalism"],
        &["liberals"],
        &["liberalism"],
        &["liberalism"],
        &["liberalism"],
        &["liberalism"],
        &["liberation"],
        &["liberals"],
        &["liberate"],
        &["liberation"],
        &["liberation"],
        &["liberate"],
        &["libertarians"],
        &["libertarianism"],
        &["libertarians"],
        &["liberate"],
        &["libertarians"],
        &["libertarians"],
        &["libertarian"],
        &["libertarianism"],
        &["libertarians"],
        &["libertarianism"],
        &["libertarianism"],
        &["libertarians"],
        &["libertarians"],
        &["libertarians"],
        &["libertarianism"],
        &["libertarianism"],
        &["libertarianism"],
        &["libertarians"],
        &["libertarian"],
        &["libertarians"],
        &["libertarianism"],
        &["libertarian"],
        &["libertarianism"],
        &["libertarians"],
        &["libertarian"],
        &["libertarianism"],
        &["libertarians"],
        &["liberate"],
        &["libertarian"],
        &["libertarianism"],
        &["libertarians"],
        &["linguistic"],
        &["linguistics"],
        &["libertarianism"],
        &["libel"],
        &["libraries"],
        &["libraries"],
        &["libertarian"],
        &["libertarianism"],
        &["libertarians"],
    ],
    range: 2..=12,
};

static WORD_LIA_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_LIA_CHILDREN),
    value: None,
};

pub static WORD_LIA_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("sion"),
        dictgen::InsensitiveStr::Ascii("son"),
        dictgen::InsensitiveStr::Ascii("sons"),
    ],
    values: &[&["liaison"], &["liaison"], &["liaisons"]],
    range: 3..=4,
};

static WORD_LF_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_LF_CHILDREN),
    value: None,
};

pub static WORD_LF_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("iesteal")],
    values: &[&["lifesteal"]],
    range: 7..=7,
};

static WORD_LE_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_LE_CHILDREN),
    value: None,
};

static WORD_LE_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    Some(&WORD_LEA_NODE),
    Some(&WORD_LEB_NODE),
    Some(&WORD_LEC_NODE),
    None,
    None,
    Some(&WORD_LEF_NODE),
    Some(&WORD_LEG_NODE),
    None,
    Some(&WORD_LEI_NODE),
    None,
    None,
    None,
    None,
    Some(&WORD_LEN_NODE),
    None,
    Some(&WORD_LEP_NODE),
    None,
    Some(&WORD_LER_NODE),
    Some(&WORD_LES_NODE),
    Some(&WORD_LET_NODE),
    Some(&WORD_LEU_NODE),
    Some(&WORD_LEV_NODE),
    None,
    None,
    None,
    None,
];

static WORD_LEV_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_LEV_CHILDREN),
    value: None,
};

pub static WORD_LEV_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("aithan"),
        dictgen::InsensitiveStr::Ascii("ander"),
        dictgen::InsensitiveStr::Ascii("elign"),
        dictgen::InsensitiveStr::Ascii("ellign"),
        dictgen::InsensitiveStr::Ascii("etate"),
        dictgen::InsensitiveStr::Ascii("etated"),
        dictgen::InsensitiveStr::Ascii("etates"),
        dictgen::InsensitiveStr::Ascii("etating"),
        dictgen::InsensitiveStr::Ascii("iathn"),
        dictgen::InsensitiveStr::Ascii("icitus"),
        dictgen::InsensitiveStr::Ascii("le"),
        dictgen::InsensitiveStr::Ascii("leing"),
        dictgen::InsensitiveStr::Ascii("leling"),
    ],
    values: &[
        &["leviathan"],
        &["lavender"],
        &["leveling"],
        &["levelling"],
        &["levitate"],
        &["levitated"],
        &["levitates"],
        &["levitating"],
        &["leviathan"],
        &["leviticus"],
        &["level"],
        &["leveling"],
        &["leveling"],
    ],
    range: 2..=7,
};

static WORD_LEU_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_LEU_CHILDREN),
    value: None,
};

pub static WORD_LEU_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("itenant"),
        dictgen::InsensitiveStr::Ascii("tenant"),
    ],
    values: &[&["lieutenant"], &["lieutenant"]],
    range: 6..=7,
};

static WORD_LET_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_LET_CHILDREN),
    value: None,
};

pub static WORD_LET_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("ivicus")],
    values: &[&["leviticus"]],
    range: 6..=6,
};

static WORD_LES_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_LES_CHILDREN),
    value: None,
};

pub static WORD_LES_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("bain"),
        dictgen::InsensitiveStr::Ascii("bains"),
        dictgen::InsensitiveStr::Ascii("bianas"),
        dictgen::InsensitiveStr::Ascii("bianese"),
        dictgen::InsensitiveStr::Ascii("bianest"),
        dictgen::InsensitiveStr::Ascii("bianus"),
        dictgen::InsensitiveStr::Ascii("iban"),
        dictgen::InsensitiveStr::Ascii("ibans"),
        dictgen::InsensitiveStr::Ascii("iure"),
    ],
    values: &[
        &["lesbian"],
        &["lesbians"],
        &["lesbians"],
        &["lesbians"],
        &["lesbians"],
        &["lesbians"],
        &["lesbian"],
        &["lesbians"],
        &["leisure"],
    ],
    range: 4..=7,
};

static WORD_LER_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_LER_CHILDREN),
    value: None,
};

pub static WORD_LER_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("an"),
        dictgen::InsensitiveStr::Ascii("ans"),
    ],
    values: &[&["learn"], &["learns"]],
    range: 2..=3,
};

static WORD_LEP_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_LEP_CHILDREN),
    value: None,
};

pub static WORD_LEP_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("oard")],
    values: &[&["leopard"]],
    range: 4..=4,
};

static WORD_LEN_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_LEN_CHILDREN),
    value: None,
};

pub static WORD_LEN_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("gedaries"),
        dictgen::InsensitiveStr::Ascii("ght"),
        dictgen::InsensitiveStr::Ascii("ghts"),
        dictgen::InsensitiveStr::Ascii("gthes"),
        dictgen::InsensitiveStr::Ascii("gthly"),
        dictgen::InsensitiveStr::Ascii("oard"),
        dictgen::InsensitiveStr::Ascii("tiles"),
        dictgen::InsensitiveStr::Ascii("tills"),
    ],
    values: &[
        &["legendaries"],
        &["length"],
        &["lengths"],
        &["lengths"],
        &["lengthy"],
        &["leonard"],
        &["lentils"],
        &["lentils"],
    ],
    range: 3..=8,
};

static WORD_LEI_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_LEI_CHILDREN),
    value: None,
};

pub static WORD_LEI_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("gons"),
        dictgen::InsensitiveStr::Ascii("utenant"),
    ],
    values: &[&["legions"], &["lieutenant"]],
    range: 4..=7,
};

static WORD_LEG_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_LEG_CHILDREN),
    value: None,
};

pub static WORD_LEG_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("alazing"),
        dictgen::InsensitiveStr::Ascii("alizacion"),
        dictgen::InsensitiveStr::Ascii("alizaing"),
        dictgen::InsensitiveStr::Ascii("alizaiton"),
        dictgen::InsensitiveStr::Ascii("alizare"),
        dictgen::InsensitiveStr::Ascii("alizate"),
        dictgen::InsensitiveStr::Ascii("alizaton"),
        dictgen::InsensitiveStr::Ascii("alizeing"),
        dictgen::InsensitiveStr::Ascii("enadries"),
        dictgen::InsensitiveStr::Ascii("endaies"),
        dictgen::InsensitiveStr::Ascii("endaires"),
        dictgen::InsensitiveStr::Ascii("endarios"),
        dictgen::InsensitiveStr::Ascii("endaris"),
        dictgen::InsensitiveStr::Ascii("endarisk"),
        dictgen::InsensitiveStr::Ascii("endariske"),
        dictgen::InsensitiveStr::Ascii("endaryes"),
        dictgen::InsensitiveStr::Ascii("enday"),
        dictgen::InsensitiveStr::Ascii("enderies"),
        dictgen::InsensitiveStr::Ascii("ilsation"),
        dictgen::InsensitiveStr::Ascii("imitacy"),
        dictgen::InsensitiveStr::Ascii("imitate"),
        dictgen::InsensitiveStr::Ascii("imitately"),
        dictgen::InsensitiveStr::Ascii("ionis"),
        dictgen::InsensitiveStr::Ascii("islacion"),
        dictgen::InsensitiveStr::Ascii("islatie"),
        dictgen::InsensitiveStr::Ascii("islatiors"),
        dictgen::InsensitiveStr::Ascii("islativo"),
        dictgen::InsensitiveStr::Ascii("istation"),
        dictgen::InsensitiveStr::Ascii("istative"),
        dictgen::InsensitiveStr::Ascii("istators"),
        dictgen::InsensitiveStr::Ascii("istration"),
        dictgen::InsensitiveStr::Ascii("itamacy"),
        dictgen::InsensitiveStr::Ascii("itamate"),
        dictgen::InsensitiveStr::Ascii("itamately"),
        dictgen::InsensitiveStr::Ascii("itamicy"),
        dictgen::InsensitiveStr::Ascii("itamite"),
        dictgen::InsensitiveStr::Ascii("itamitely"),
        dictgen::InsensitiveStr::Ascii("itemacy"),
        dictgen::InsensitiveStr::Ascii("itemate"),
        dictgen::InsensitiveStr::Ascii("itemately"),
        dictgen::InsensitiveStr::Ascii("itematly"),
        dictgen::InsensitiveStr::Ascii("itimaly"),
        dictgen::InsensitiveStr::Ascii("itimancy"),
        dictgen::InsensitiveStr::Ascii("itimatcy"),
        dictgen::InsensitiveStr::Ascii("itimatelly"),
        dictgen::InsensitiveStr::Ascii("itimatley"),
        dictgen::InsensitiveStr::Ascii("itimatly"),
        dictgen::InsensitiveStr::Ascii("itimetly"),
        dictgen::InsensitiveStr::Ascii("itimicy"),
        dictgen::InsensitiveStr::Ascii("itimite"),
        dictgen::InsensitiveStr::Ascii("itimitely"),
        dictgen::InsensitiveStr::Ascii("itimt"),
        dictgen::InsensitiveStr::Ascii("itmate"),
        dictgen::InsensitiveStr::Ascii("nedaries"),
        dictgen::InsensitiveStr::Ascii("nedary"),
        dictgen::InsensitiveStr::Ascii("nths"),
        dictgen::InsensitiveStr::Ascii("nthy"),
        dictgen::InsensitiveStr::Ascii("oins"),
    ],
    values: &[
        &["legalizing"],
        &["legalization"],
        &["legalizing"],
        &["legalization"],
        &["legalize"],
        &["legalize"],
        &["legalization"],
        &["legalizing"],
        &["legendaries"],
        &["legendaries"],
        &["legendaries"],
        &["legendaries"],
        &["legendaries"],
        &["legendaries"],
        &["legendaries"],
        &["legendaries"],
        &["legendary"],
        &["legendaries"],
        &["legislation"],
        &["legitimacy"],
        &["legitimate"],
        &["legitimately"],
        &["legions"],
        &["legislation"],
        &["legislative"],
        &["legislators"],
        &["legislation"],
        &["legislation"],
        &["legislative"],
        &["legislators"],
        &["registration"],
        &["legitimacy"],
        &["legitimate"],
        &["legitimately"],
        &["legitimacy"],
        &["legitimate"],
        &["legitimately"],
        &["legitimacy"],
        &["legitimate"],
        &["legitimately"],
        &["legitimately"],
        &["legitimacy"],
        &["legitimacy"],
        &["legitimacy"],
        &["legitimately"],
        &["legitimately"],
        &["legitimately"],
        &["legitimately"],
        &["legitimacy"],
        &["legitimate"],
        &["legitimately"],
        &["legitimate"],
        &["legitimate"],
        &["legendaries"],
        &["legendary"],
        &["lengths"],
        &["lengthy"],
        &["legions"],
    ],
    range: 4..=10,
};

static WORD_LEF_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_LEF_CHILDREN),
    value: None,
};

pub static WORD_LEF_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("itst"),
        dictgen::InsensitiveStr::Ascii("itsts"),
        dictgen::InsensitiveStr::Ascii("ted"),
        dictgen::InsensitiveStr::Ascii("tits"),
        dictgen::InsensitiveStr::Ascii("tsits"),
    ],
    values: &[
        &["leftist"],
        &["leftists"],
        &["left"],
        &["leftist"],
        &["leftists"],
    ],
    range: 3..=5,
};

static WORD_LEC_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_LEC_CHILDREN),
    value: None,
};

pub static WORD_LEC_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("eister"),
        dictgen::InsensitiveStr::Ascii("iester"),
        dictgen::InsensitiveStr::Ascii("teurs"),
        dictgen::InsensitiveStr::Ascii("tureres"),
        dictgen::InsensitiveStr::Ascii("utres"),
    ],
    values: &[
        &["leicester"],
        &["leicester"],
        &["lectures"],
        &["lectures"],
        &["lectures"],
    ],
    range: 5..=7,
};

static WORD_LEB_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_LEB_CHILDREN),
    value: None,
};

pub static WORD_LEB_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("anesse")],
    values: &[&["lebanese"]],
    range: 6..=6,
};

static WORD_LEA_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_LEA_CHILDREN),
    value: None,
};

pub static WORD_LEA_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ge"),
        dictgen::InsensitiveStr::Ascii("glization"),
        dictgen::InsensitiveStr::Ascii("glize"),
        dictgen::InsensitiveStr::Ascii("glizing"),
        dictgen::InsensitiveStr::Ascii("nr"),
        dictgen::InsensitiveStr::Ascii("thal"),
    ],
    values: &[
        &["league"],
        &["legalization"],
        &["legalize"],
        &["legalizing"],
        &["lean"],
        &["lethal"],
    ],
    range: 2..=9,
};

static WORD_LA_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_LA_CHILDREN),
    value: None,
};

static WORD_LA_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    None,
    Some(&WORD_LAB_NODE),
    Some(&WORD_LAC_NODE),
    None,
    None,
    None,
    Some(&WORD_LAG_NODE),
    None,
    None,
    None,
    None,
    None,
    None,
    Some(&WORD_LAN_NODE),
    Some(&WORD_LAO_NODE),
    None,
    None,
    Some(&WORD_LAR_NODE),
    Some(&WORD_LAS_NODE),
    Some(&WORD_LAT_NODE),
    Some(&WORD_LAU_NODE),
    Some(&WORD_LAV_NODE),
    Some(&WORD_LAW_NODE),
    None,
    Some(&WORD_LAY_NODE),
    Some(&WORD_LAZ_NODE),
];

static WORD_LAZ_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_LAZ_CHILDREN),
    value: None,
};

pub static WORD_LAZ_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("yness")],
    values: &[&["laziness"]],
    range: 5..=5,
};

static WORD_LAY_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_LAY_CHILDREN),
    value: None,
};

pub static WORD_LAY_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("brinth"),
        dictgen::InsensitiveStr::Ascii("ed"),
    ],
    values: &[&["labyrinth"], &["laid"]],
    range: 2..=6,
};

static WORD_LAW_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_LAW_CHILDREN),
    value: None,
};

pub static WORD_LAW_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("ernce")],
    values: &[&["lawrence"]],
    range: 5..=5,
};

static WORD_LAV_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_LAV_CHILDREN),
    value: None,
};

pub static WORD_LAV_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ae"),
        dictgen::InsensitiveStr::Ascii("endr"),
    ],
    values: &[&["larvae"], &["lavender"]],
    range: 2..=4,
};

static WORD_LAU_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_LAU_CHILDREN),
    value: None,
};

pub static WORD_LAU_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("cnhed"),
        dictgen::InsensitiveStr::Ascii("cnher"),
        dictgen::InsensitiveStr::Ascii("cnhers"),
        dictgen::InsensitiveStr::Ascii("cnhes"),
        dictgen::InsensitiveStr::Ascii("cnhing"),
        dictgen::InsensitiveStr::Ascii("ghablely"),
        dictgen::InsensitiveStr::Ascii("ghabley"),
        dictgen::InsensitiveStr::Ascii("ghablly"),
        dictgen::InsensitiveStr::Ascii("nchered"),
        dictgen::InsensitiveStr::Ascii("nchign"),
        dictgen::InsensitiveStr::Ascii("ndrey"),
        dictgen::InsensitiveStr::Ascii("nhed"),
    ],
    values: &[
        &["launched"],
        &["launcher"],
        &["launchers"],
        &["launches"],
        &["launching"],
        &["laughably"],
        &["laughably"],
        &["laughably"],
        &["launched"],
        &["launching"],
        &["laundry"],
        &["launched"],
    ],
    range: 4..=8,
};

static WORD_LAT_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_LAT_CHILDREN),
    value: None,
};

pub static WORD_LAT_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("eration"),
        dictgen::InsensitiveStr::Ascii("itudie"),
        dictgen::InsensitiveStr::Ascii("itudine"),
        dictgen::InsensitiveStr::Ascii("itue"),
        dictgen::InsensitiveStr::Ascii("nern"),
        dictgen::InsensitiveStr::Ascii("titude"),
    ],
    values: &[
        &["alteration"],
        &["latitude"],
        &["latitude"],
        &["latitude"],
        &["lantern"],
        &["latitude"],
    ],
    range: 4..=7,
};

static WORD_LAS_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_LAS_CHILDREN),
    value: None,
};

pub static WORD_LAS_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("agnea"),
        dictgen::InsensitiveStr::Ascii("agnia"),
        dictgen::InsensitiveStr::Ascii("anga"),
        dictgen::InsensitiveStr::Ascii("gana"),
        dictgen::InsensitiveStr::Ascii("tr"),
    ],
    values: &[
        &["lasagna"],
        &["lasagna"],
        &["lasagna"],
        &["lasagna"],
        &["last"],
    ],
    range: 2..=5,
};

static WORD_LAR_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_LAR_CHILDREN),
    value: None,
};

pub static WORD_LAR_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("eady"),
        dictgen::InsensitiveStr::Ascii("egly"),
        dictgen::InsensitiveStr::Ascii("gley"),
        dictgen::InsensitiveStr::Ascii("gst"),
        dictgen::InsensitiveStr::Ascii("ington"),
        dictgen::InsensitiveStr::Ascii("rry"),
        dictgen::InsensitiveStr::Ascii("wence"),
    ],
    values: &[
        &["already"],
        &["largely"],
        &["largely"],
        &["largest"],
        &["arlington"],
        &["larry"],
        &["lawrence"],
    ],
    range: 3..=6,
};

static WORD_LAO_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_LAO_CHILDREN),
    value: None,
};

pub static WORD_LAO_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("douts")],
    values: &[&["loadouts"]],
    range: 5..=5,
};

static WORD_LAN_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_LAN_CHILDREN),
    value: None,
};

pub static WORD_LAN_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("dacapes"),
        dictgen::InsensitiveStr::Ascii("dingers"),
        dictgen::InsensitiveStr::Ascii("dins"),
        dictgen::InsensitiveStr::Ascii("dscae"),
        dictgen::InsensitiveStr::Ascii("dscaps"),
        dictgen::InsensitiveStr::Ascii("dscspe"),
        dictgen::InsensitiveStr::Ascii("dshapes"),
        dictgen::InsensitiveStr::Ascii("dspaces"),
        dictgen::InsensitiveStr::Ascii("gauge"),
        dictgen::InsensitiveStr::Ascii("gauges"),
        dictgen::InsensitiveStr::Ascii("guague"),
        dictgen::InsensitiveStr::Ascii("nasters"),
        dictgen::InsensitiveStr::Ascii("nesters"),
        dictgen::InsensitiveStr::Ascii("nistars"),
        dictgen::InsensitiveStr::Ascii("nsiters"),
        dictgen::InsensitiveStr::Ascii("tren"),
        dictgen::InsensitiveStr::Ascii("ucher"),
        dictgen::InsensitiveStr::Ascii("uchers"),
        dictgen::InsensitiveStr::Ascii("uches"),
        dictgen::InsensitiveStr::Ascii("ugages"),
    ],
    values: &[
        &["landscapes"],
        &["landings"],
        &["landings"],
        &["landscapes"],
        &["landscapes"],
        &["landscapes"],
        &["landscapes"],
        &["landscapes"],
        &["language"],
        &["languages"],
        &["language"],
        &["lannisters"],
        &["lannisters"],
        &["lannisters"],
        &["lannisters"],
        &["lantern"],
        &["launcher"],
        &["launchers"],
        &["launches"],
        &["languages"],
    ],
    range: 4..=7,
};

static WORD_LAG_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_LAG_CHILDREN),
    value: None,
};

pub static WORD_LAG_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("uage"),
        dictgen::InsensitiveStr::Ascii("uages"),
    ],
    values: &[&["language"], &["languages"]],
    range: 4..=5,
};

static WORD_LAC_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_LAC_CHILDREN),
    value: None,
};

pub static WORD_LAC_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("kbuster"),
        dictgen::InsensitiveStr::Ascii("klaster"),
        dictgen::InsensitiveStr::Ascii("klusture"),
    ],
    values: &[&["lackluster"], &["lackluster"], &["lacklustre"]],
    range: 7..=8,
};

static WORD_LAB_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_LAB_CHILDREN),
    value: None,
};

pub static WORD_LAB_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("arotory"),
        dictgen::InsensitiveStr::Ascii("atory"),
        dictgen::InsensitiveStr::Ascii("enese"),
        dictgen::InsensitiveStr::Ascii("irynth"),
        dictgen::InsensitiveStr::Ascii("led"),
        dictgen::InsensitiveStr::Ascii("oratoy"),
        dictgen::InsensitiveStr::Ascii("oratroy"),
        dictgen::InsensitiveStr::Ascii("oraty"),
        dictgen::InsensitiveStr::Ascii("orerers"),
        dictgen::InsensitiveStr::Ascii("oreres"),
        dictgen::InsensitiveStr::Ascii("oritory"),
        dictgen::InsensitiveStr::Ascii("orotory"),
        dictgen::InsensitiveStr::Ascii("ratory"),
        dictgen::InsensitiveStr::Ascii("riynth"),
        dictgen::InsensitiveStr::Ascii("ryinth"),
        dictgen::InsensitiveStr::Ascii("yrnith"),
    ],
    values: &[
        &["laboratory"],
        &["lavatory"],
        &["lebanese"],
        &["labyrinth"],
        &["labeled"],
        &["laboratory"],
        &["laboratory"],
        &["laboratory"],
        &["laborers"],
        &["laborers"],
        &["laboratory"],
        &["laboratory"],
        &["laboratory"],
        &["labyrinth"],
        &["labyrinth"],
        &["labyrinth"],
    ],
    range: 3..=7,
};

static WORD_K_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_K_CHILDREN),
    value: None,
};

static WORD_K_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    Some(&WORD_KA_NODE),
    None,
    None,
    None,
    Some(&WORD_KE_NODE),
    None,
    None,
    None,
    Some(&WORD_KI_NODE),
    None,
    None,
    Some(&WORD_KL_NODE),
    None,
    Some(&WORD_KN_NODE),
    Some(&WORD_KO_NODE),
    None,
    None,
    Some(&WORD_KR_NODE),
    None,
    Some(&WORD_KT_NODE),
    Some(&WORD_KU_NODE),
    None,
    Some(&WORD_KW_NODE),
    None,
    Some(&WORD_KY_NODE),
    None,
];

static WORD_KY_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_KY_CHILDREN),
    value: None,
};

pub static WORD_KY_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("rptonite")],
    values: &[&["kryptonite"]],
    range: 8..=8,
};

static WORD_KW_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_KW_CHILDREN),
    value: None,
};

pub static WORD_KW_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("no")],
    values: &[&["know"]],
    range: 2..=2,
};

static WORD_KU_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_KU_CHILDREN),
    value: None,
};

pub static WORD_KU_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("birck"),
        dictgen::InsensitiveStr::Ascii("nckle"),
        dictgen::InsensitiveStr::Ascii("nckles"),
        dictgen::InsensitiveStr::Ascii("rbick"),
        dictgen::InsensitiveStr::Ascii("rdisch"),
        dictgen::InsensitiveStr::Ascii("ridsh"),
    ],
    values: &[
        &["kubrick"],
        &["knuckle"],
        &["knuckles"],
        &["kubrick"],
        &["kurdish"],
        &["kurdish"],
    ],
    range: 5..=6,
};

static WORD_KT_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_KT_CHILDREN),
    value: None,
};

pub static WORD_KT_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("ichen")],
    values: &[&["kitchen"]],
    range: 5..=5,
};

static WORD_KR_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_KR_CHILDREN),
    value: None,
};

pub static WORD_KR_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ankenstein"),
        dictgen::InsensitiveStr::Ascii("oeans"),
        dictgen::InsensitiveStr::Ascii("pytonite"),
        dictgen::InsensitiveStr::Ascii("udish"),
        dictgen::InsensitiveStr::Ascii("ypotnite"),
        dictgen::InsensitiveStr::Ascii("ypronite"),
        dictgen::InsensitiveStr::Ascii("yptinite"),
        dictgen::InsensitiveStr::Ascii("yptolite"),
        dictgen::InsensitiveStr::Ascii("yptonie"),
        dictgen::InsensitiveStr::Ascii("yptoninte"),
        dictgen::InsensitiveStr::Ascii("yptonyte"),
        dictgen::InsensitiveStr::Ascii("ypyonite"),
        dictgen::InsensitiveStr::Ascii("ytponite"),
    ],
    values: &[
        &["frankenstein"],
        &["koreans"],
        &["kryptonite"],
        &["kurdish"],
        &["kryptonite"],
        &["kryptonite"],
        &["kryptonite"],
        &["kryptonite"],
        &["kryptonite"],
        &["kryptonite"],
        &["kryptonite"],
        &["kryptonite"],
        &["kryptonite"],
    ],
    range: 5..=10,
};

static WORD_KO_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_KO_CHILDREN),
    value: None,
};

pub static WORD_KO_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("llaboration"),
        dictgen::InsensitiveStr::Ascii("lonization"),
        dictgen::InsensitiveStr::Ascii("mbinations"),
        dictgen::InsensitiveStr::Ascii("mmissioner"),
        dictgen::InsensitiveStr::Ascii("mpensation"),
        dictgen::InsensitiveStr::Ascii("ncentration"),
        dictgen::InsensitiveStr::Ascii("ncentrations"),
        dictgen::InsensitiveStr::Ascii("nckback"),
        dictgen::InsensitiveStr::Ascii("nfidential"),
        dictgen::InsensitiveStr::Ascii("nfiguration"),
        dictgen::InsensitiveStr::Ascii("nfirmation"),
        dictgen::InsensitiveStr::Ascii("nfrontation"),
        dictgen::InsensitiveStr::Ascii("ngregation"),
        dictgen::InsensitiveStr::Ascii("nservatism"),
        dictgen::InsensitiveStr::Ascii("nservative"),
        dictgen::InsensitiveStr::Ascii("nservatives"),
        dictgen::InsensitiveStr::Ascii("nstellation"),
        dictgen::InsensitiveStr::Ascii("nsultation"),
        dictgen::InsensitiveStr::Ascii("ntamination"),
        dictgen::InsensitiveStr::Ascii("nversation"),
        dictgen::InsensitiveStr::Ascii("nw"),
        dictgen::InsensitiveStr::Ascii("nws"),
        dictgen::InsensitiveStr::Ascii("ordination"),
        dictgen::InsensitiveStr::Ascii("reanos"),
    ],
    values: &[
        &["collaboration"],
        &["colonization"],
        &["combinations"],
        &["commissioner"],
        &["compensation"],
        &["concentration"],
        &["concentrations"],
        &["knockback"],
        &["confidential"],
        &["configuration"],
        &["confirmation"],
        &["confrontation"],
        &["congregation"],
        &["conservatism"],
        &["conservative"],
        &["conservatives"],
        &["constellation"],
        &["consultation"],
        &["contamination"],
        &["conversation"],
        &["know"],
        &["knows"],
        &["coordination"],
        &["koreans"],
    ],
    range: 2..=12,
};

static WORD_KN_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_KN_CHILDREN),
    value: None,
};

pub static WORD_KN_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("cokback"),
        dictgen::InsensitiveStr::Ascii("ietic"),
        dictgen::InsensitiveStr::Ascii("igths"),
        dictgen::InsensitiveStr::Ascii("ockbak"),
        dictgen::InsensitiveStr::Ascii("olwedgable"),
        dictgen::InsensitiveStr::Ascii("oweldgable"),
        dictgen::InsensitiveStr::Ascii("oweldge"),
        dictgen::InsensitiveStr::Ascii("oweldgeable"),
        dictgen::InsensitiveStr::Ascii("owladgable"),
        dictgen::InsensitiveStr::Ascii("owldegable"),
        dictgen::InsensitiveStr::Ascii("owldgeable"),
        dictgen::InsensitiveStr::Ascii("owleagable"),
        dictgen::InsensitiveStr::Ascii("owledagble"),
        dictgen::InsensitiveStr::Ascii("owledeable"),
        dictgen::InsensitiveStr::Ascii("owledegable"),
        dictgen::InsensitiveStr::Ascii("owledgabe"),
        dictgen::InsensitiveStr::Ascii("owledgabel"),
        dictgen::InsensitiveStr::Ascii("owledgble"),
        dictgen::InsensitiveStr::Ascii("owledgebale"),
        dictgen::InsensitiveStr::Ascii("owledgeble"),
        dictgen::InsensitiveStr::Ascii("owledgebly"),
        dictgen::InsensitiveStr::Ascii("owledgible"),
        dictgen::InsensitiveStr::Ascii("owlegdable"),
        dictgen::InsensitiveStr::Ascii("owlegde"),
        dictgen::InsensitiveStr::Ascii("owlegdeable"),
        dictgen::InsensitiveStr::Ascii("owlege"),
        dictgen::InsensitiveStr::Ascii("owlegeable"),
        dictgen::InsensitiveStr::Ascii("uckel"),
        dictgen::InsensitiveStr::Ascii("uckels"),
        dictgen::InsensitiveStr::Ascii("wo"),
        dictgen::InsensitiveStr::Ascii("woledgable"),
        dictgen::InsensitiveStr::Ascii("wos"),
    ],
    values: &[
        &["knockback"],
        &["kinetic"],
        &["knights"],
        &["knockback"],
        &["knowledgable"],
        &["knowledgable"],
        &["knowledge"],
        &["knowledgeable"],
        &["knowledgable"],
        &["knowledgable"],
        &["knowledgable"],
        &["knowledgable"],
        &["knowledgable"],
        &["knowledgable"],
        &["knowledgeable"],
        &["knowledgable"],
        &["knowledgable"],
        &["knowledgable"],
        &["knowledgable"],
        &["knowledgeable"],
        &["knowledgable"],
        &["knowledgable"],
        &["knowledgable"],
        &["knowledge"],
        &["knowledgeable"],
        &["knowledge"],
        &["knowledgeable"],
        &["knuckle"],
        &["knuckles"],
        &["know"],
        &["knowledgable"],
        &["knows"],
    ],
    range: 2..=11,
};

static WORD_KL_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_KL_CHILDREN),
    value: None,
};

pub static WORD_KL_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("enex")],
    values: &[&["kleenex"]],
    range: 4..=4,
};

static WORD_KI_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_KI_CHILDREN),
    value: None,
};

pub static WORD_KI_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ckstarer"),
        dictgen::InsensitiveStr::Ascii("ckstartr"),
        dictgen::InsensitiveStr::Ascii("ckstater"),
        dictgen::InsensitiveStr::Ascii("cthen"),
        dictgen::InsensitiveStr::Ascii("cthens"),
        dictgen::InsensitiveStr::Ascii("dnapning"),
        dictgen::InsensitiveStr::Ascii("dnappade"),
        dictgen::InsensitiveStr::Ascii("dnappning"),
        dictgen::InsensitiveStr::Ascii("dnappping"),
        dictgen::InsensitiveStr::Ascii("dnergarten"),
        dictgen::InsensitiveStr::Ascii("llingest"),
        dictgen::InsensitiveStr::Ascii("llins"),
        dictgen::InsensitiveStr::Ascii("lometeres"),
        dictgen::InsensitiveStr::Ascii("lometes"),
        dictgen::InsensitiveStr::Ascii("lometros"),
        dictgen::InsensitiveStr::Ascii("lomiters"),
        dictgen::InsensitiveStr::Ascii("lomoters"),
        dictgen::InsensitiveStr::Ascii("lomteres"),
        dictgen::InsensitiveStr::Ascii("ndapped"),
        dictgen::InsensitiveStr::Ascii("ndapping"),
        dictgen::InsensitiveStr::Ascii("ndergarden"),
        dictgen::InsensitiveStr::Ascii("ndergaten"),
        dictgen::InsensitiveStr::Ascii("ndgoms"),
        dictgen::InsensitiveStr::Ascii("neitc"),
        dictgen::InsensitiveStr::Ascii("ngdomers"),
        dictgen::InsensitiveStr::Ascii("ngergarten"),
        dictgen::InsensitiveStr::Ascii("nghts"),
        dictgen::InsensitiveStr::Ascii("nteic"),
        dictgen::InsensitiveStr::Ascii("ntergarten"),
        dictgen::InsensitiveStr::Ascii("tches"),
        dictgen::InsensitiveStr::Ascii("tites"),
        dictgen::InsensitiveStr::Ascii("ttiens"),
    ],
    values: &[
        &["kickstarter"],
        &["kickstarter"],
        &["kickstarter"],
        &["kitchen"],
        &["kitchens"],
        &["kidnapping"],
        &["kidnapped"],
        &["kidnapping"],
        &["kidnapping"],
        &["kindergarten"],
        &["killings"],
        &["killings"],
        &["kilometers"],
        &["kilometers"],
        &["kilometres"],
        &["kilometers"],
        &["kilometers"],
        &["kilometers"],
        &["kidnapped"],
        &["kidnapping"],
        &["kindergarten"],
        &["kindergarten"],
        &["kingdoms"],
        &["kinetic"],
        &["kingdoms"],
        &["kindergarten"],
        &["knights"],
        &["kinetic"],
        &["kindergarten"],
        &["kitchens"],
        &["kitties"],
        &["kitties"],
    ],
    range: 5..=10,
};

static WORD_KE_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_KE_CHILDREN),
    value: None,
};

pub static WORD_KE_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("nendy"),
        dictgen::InsensitiveStr::Ascii("neysian"),
        dictgen::InsensitiveStr::Ascii("nndey"),
        dictgen::InsensitiveStr::Ascii("nnedey"),
        dictgen::InsensitiveStr::Ascii("ntuckey"),
        dictgen::InsensitiveStr::Ascii("ntucy"),
        dictgen::InsensitiveStr::Ascii("nyesian"),
        dictgen::InsensitiveStr::Ascii("tmaine"),
        dictgen::InsensitiveStr::Ascii("ybaord"),
        dictgen::InsensitiveStr::Ascii("ybaords"),
        dictgen::InsensitiveStr::Ascii("yboad"),
        dictgen::InsensitiveStr::Ascii("yboars"),
        dictgen::InsensitiveStr::Ascii("yborad"),
        dictgen::InsensitiveStr::Ascii("ychan"),
        dictgen::InsensitiveStr::Ascii("ychian"),
        dictgen::InsensitiveStr::Ascii("yensian"),
        dictgen::InsensitiveStr::Ascii("yesnian"),
        dictgen::InsensitiveStr::Ascii("ynode"),
        dictgen::InsensitiveStr::Ascii("ynseian"),
        dictgen::InsensitiveStr::Ascii("ysenian"),
    ],
    values: &[
        &["kennedy"],
        &["keynesian"],
        &["kennedy"],
        &["kennedy"],
        &["kentucky"],
        &["kentucky"],
        &["keynesian"],
        &["ketamine"],
        &["keyboard"],
        &["keyboards"],
        &["keyboard"],
        &["keyboards"],
        &["keyboard"],
        &["keychain"],
        &["keychain"],
        &["keynesian"],
        &["keynesian"],
        &["keynote"],
        &["keynesian"],
        &["keynesian"],
    ],
    range: 5..=7,
};

static WORD_KA_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_KA_CHILDREN),
    value: None,
};

pub static WORD_KA_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("rakoe"),
        dictgen::InsensitiveStr::Ascii("rbohydrates"),
        dictgen::InsensitiveStr::Ascii("roake"),
        dictgen::InsensitiveStr::Ascii("tastrophic"),
        dictgen::InsensitiveStr::Ascii("temine"),
    ],
    values: &[
        &["karaoke"],
        &["carbohydrates"],
        &["karaoke"],
        &["catastrophic"],
        &["ketamine"],
    ],
    range: 5..=11,
};

static WORD_J_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_J_CHILDREN),
    value: None,
};

static WORD_J_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    Some(&WORD_JA_NODE),
    None,
    None,
    None,
    Some(&WORD_JE_NODE),
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    Some(&WORD_JO_NODE),
    None,
    None,
    None,
    Some(&WORD_JS_NODE),
    None,
    Some(&WORD_JU_NODE),
    None,
    None,
    None,
    None,
    None,
];

static WORD_JU_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_JU_CHILDREN),
    value: None,
};

static WORD_JU_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    Some(&WORD_JUA_NODE),
    None,
    None,
    Some(&WORD_JUD_NODE),
    None,
    None,
    Some(&WORD_JUG_NODE),
    None,
    Some(&WORD_JUI_NODE),
    None,
    None,
    None,
    None,
    Some(&WORD_JUN_NODE),
    None,
    Some(&WORD_JUP_NODE),
    None,
    Some(&WORD_JUR_NODE),
    Some(&WORD_JUS_NODE),
    None,
    None,
    Some(&WORD_JUV_NODE),
    None,
    None,
    None,
    None,
];

static WORD_JUV_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_JUV_CHILDREN),
    value: None,
};

pub static WORD_JUV_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("eline"),
        dictgen::InsensitiveStr::Ascii("enille"),
        dictgen::InsensitiveStr::Ascii("enilles"),
        dictgen::InsensitiveStr::Ascii("enlie"),
    ],
    values: &[&["juvenile"], &["juvenile"], &["juvenile"], &["juvenile"]],
    range: 5..=7,
};

static WORD_JUS_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_JUS_CHILDREN),
    value: None,
};

pub static WORD_JUS_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("itfication"),
        dictgen::InsensitiveStr::Ascii("itfy"),
        dictgen::InsensitiveStr::Ascii("ridiction"),
        dictgen::InsensitiveStr::Ascii("tfiy"),
        dictgen::InsensitiveStr::Ascii("tifiaction"),
        dictgen::InsensitiveStr::Ascii("tifible"),
        dictgen::InsensitiveStr::Ascii("tificacion"),
        dictgen::InsensitiveStr::Ascii("tificaiton"),
        dictgen::InsensitiveStr::Ascii("tificatin"),
        dictgen::InsensitiveStr::Ascii("tificativo"),
        dictgen::InsensitiveStr::Ascii("tificativos"),
        dictgen::InsensitiveStr::Ascii("tificatons"),
        dictgen::InsensitiveStr::Ascii("tificstion"),
        dictgen::InsensitiveStr::Ascii("tifiy"),
        dictgen::InsensitiveStr::Ascii("tifyable"),
        dictgen::InsensitiveStr::Ascii("tiifcation"),
    ],
    values: &[
        &["justifications"],
        &["justify"],
        &["jurisdiction"],
        &["justify"],
        &["justifications"],
        &["justifiable"],
        &["justification"],
        &["justification"],
        &["justifications"],
        &["justification"],
        &["justifications"],
        &["justifications"],
        &["justifications"],
        &["justify"],
        &["justifiable"],
        &["justifications"],
    ],
    range: 4..=11,
};

static WORD_JUR_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_JUR_CHILDREN),
    value: None,
};

pub static WORD_JUR_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("idisction"),
        dictgen::InsensitiveStr::Ascii("isdiccion"),
        dictgen::InsensitiveStr::Ascii("isdiciton"),
        dictgen::InsensitiveStr::Ascii("isdicitons"),
        dictgen::InsensitiveStr::Ascii("isdiktion"),
        dictgen::InsensitiveStr::Ascii("isfiction"),
        dictgen::InsensitiveStr::Ascii("isidction"),
        dictgen::InsensitiveStr::Ascii("isidctions"),
        dictgen::InsensitiveStr::Ascii("istiction"),
        dictgen::InsensitiveStr::Ascii("istictions"),
        dictgen::InsensitiveStr::Ascii("sidiction"),
        dictgen::InsensitiveStr::Ascii("sidictions"),
    ],
    values: &[
        &["jurisdictions"],
        &["jurisdiction"],
        &["jurisdiction"],
        &["jurisdictions"],
        &["jurisdiction"],
        &["jurisdiction"],
        &["jurisdiction"],
        &["jurisdictions"],
        &["jurisdiction"],
        &["jurisdictions"],
        &["jurisdiction"],
        &["jurisdictions"],
    ],
    range: 9..=10,
};

static WORD_JUP_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_JUP_CHILDREN),
    value: None,
};

pub static WORD_JUP_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("tier")],
    values: &[&["jupiter"]],
    range: 4..=4,
};

static WORD_JUN_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_JUN_CHILDREN),
    value: None,
};

pub static WORD_JUN_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("glig"),
        dictgen::InsensitiveStr::Ascii("glign"),
        dictgen::InsensitiveStr::Ascii("lging"),
    ],
    values: &[&["jungling"], &["jungling"], &["jungling"]],
    range: 4..=5,
};

static WORD_JUI_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_JUI_CHILDREN),
    value: None,
};

pub static WORD_JUI_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("pter")],
    values: &[&["jupiter"]],
    range: 4..=4,
};

static WORD_JUG_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_JUG_CHILDREN),
    value: None,
};

pub static WORD_JUG_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("dement"),
        dictgen::InsensitiveStr::Ascii("demental"),
        dictgen::InsensitiveStr::Ascii("dements"),
        dictgen::InsensitiveStr::Ascii("garnaut"),
        dictgen::InsensitiveStr::Ascii("geranut"),
        dictgen::InsensitiveStr::Ascii("gernat"),
        dictgen::InsensitiveStr::Ascii("gernath"),
        dictgen::InsensitiveStr::Ascii("gernaugt"),
        dictgen::InsensitiveStr::Ascii("gernault"),
        dictgen::InsensitiveStr::Ascii("gernaunt"),
        dictgen::InsensitiveStr::Ascii("gernaunts"),
        dictgen::InsensitiveStr::Ascii("gernout"),
        dictgen::InsensitiveStr::Ascii("gernuat"),
        dictgen::InsensitiveStr::Ascii("getnaut"),
        dictgen::InsensitiveStr::Ascii("glenaut"),
        dictgen::InsensitiveStr::Ascii("gurnaut"),
        dictgen::InsensitiveStr::Ascii("nling"),
    ],
    values: &[
        &["judgement"],
        &["judgemental"],
        &["judgements"],
        &["juggernaut"],
        &["juggernaut"],
        &["juggernaut"],
        &["juggernaut"],
        &["juggernaut"],
        &["juggernaut"],
        &["juggernaut"],
        &["juggernaut"],
        &["juggernaut"],
        &["juggernaut"],
        &["juggernaut"],
        &["juggernaut"],
        &["juggernaut"],
        &["jungling"],
    ],
    range: 5..=9,
};

static WORD_JUD_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_JUD_CHILDREN),
    value: None,
};

pub static WORD_JUD_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("aisim"),
        dictgen::InsensitiveStr::Ascii("asim"),
        dictgen::InsensitiveStr::Ascii("egment"),
        dictgen::InsensitiveStr::Ascii("egmental"),
        dictgen::InsensitiveStr::Ascii("egments"),
        dictgen::InsensitiveStr::Ascii("gamental"),
        dictgen::InsensitiveStr::Ascii("gemant"),
        dictgen::InsensitiveStr::Ascii("gemenal"),
        dictgen::InsensitiveStr::Ascii("gementals"),
        dictgen::InsensitiveStr::Ascii("gementle"),
        dictgen::InsensitiveStr::Ascii("gementsl"),
        dictgen::InsensitiveStr::Ascii("gemet"),
        dictgen::InsensitiveStr::Ascii("gemetal"),
        dictgen::InsensitiveStr::Ascii("genental"),
        dictgen::InsensitiveStr::Ascii("ical"),
        dictgen::InsensitiveStr::Ascii("isuary"),
        dictgen::InsensitiveStr::Ascii("ucial"),
    ],
    values: &[
        &["judaism"],
        &["judaism"],
        &["judgment"],
        &["judgmental"],
        &["judgments"],
        &["judgemental"],
        &["judgemental"],
        &["judgemental"],
        &["judgements"],
        &["judgemental"],
        &["judgemental"],
        &["judgements"],
        &["judgemental"],
        &["judgemental"],
        &["judicial"],
        &["judiciary"],
        &["judicial"],
    ],
    range: 4..=9,
};

static WORD_JUA_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_JUA_CHILDREN),
    value: None,
};

pub static WORD_JUA_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("daism"),
        dictgen::InsensitiveStr::Ascii("dism"),
    ],
    values: &[&["judaism"], &["judaism"]],
    range: 4..=5,
};

static WORD_JS_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_JS_CHILDREN),
    value: None,
};

pub static WORD_JS_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("tu"),
        dictgen::InsensitiveStr::Ascii("ut"),
        dictgen::InsensitiveStr::Ascii("utification"),
    ],
    values: &[&["just"], &["just"], &["justifications"]],
    range: 2..=11,
};

static WORD_JO_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_JO_CHILDREN),
    value: None,
};

pub static WORD_JO_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("anthan"),
        dictgen::InsensitiveStr::Ascii("epardy"),
        dictgen::InsensitiveStr::Ascii("hanine"),
        dictgen::InsensitiveStr::Ascii("natahn"),
        dictgen::InsensitiveStr::Ascii("runal"),
        dictgen::InsensitiveStr::Ascii("speh"),
        dictgen::InsensitiveStr::Ascii("uney"),
        dictgen::InsensitiveStr::Ascii("unral"),
        dictgen::InsensitiveStr::Ascii("unralism"),
        dictgen::InsensitiveStr::Ascii("unralist"),
        dictgen::InsensitiveStr::Ascii("unralistic"),
        dictgen::InsensitiveStr::Ascii("unralists"),
        dictgen::InsensitiveStr::Ascii("uranlism"),
        dictgen::InsensitiveStr::Ascii("uranlist"),
        dictgen::InsensitiveStr::Ascii("uranlistic"),
        dictgen::InsensitiveStr::Ascii("uranlists"),
        dictgen::InsensitiveStr::Ascii("urnaal"),
        dictgen::InsensitiveStr::Ascii("urnalims"),
        dictgen::InsensitiveStr::Ascii("urnalis"),
        dictgen::InsensitiveStr::Ascii("urnalisim"),
        dictgen::InsensitiveStr::Ascii("urnalisitc"),
        dictgen::InsensitiveStr::Ascii("urnalisitic"),
        dictgen::InsensitiveStr::Ascii("urnalistc"),
        dictgen::InsensitiveStr::Ascii("urnalistens"),
        dictgen::InsensitiveStr::Ascii("urnalisters"),
        dictgen::InsensitiveStr::Ascii("urnalistes"),
        dictgen::InsensitiveStr::Ascii("urnalistisch"),
        dictgen::InsensitiveStr::Ascii("urnalistische"),
        dictgen::InsensitiveStr::Ascii("urnalistisk"),
        dictgen::InsensitiveStr::Ascii("urnalits"),
        dictgen::InsensitiveStr::Ascii("urnalizm"),
        dictgen::InsensitiveStr::Ascii("urnalsim"),
        dictgen::InsensitiveStr::Ascii("urnied"),
        dictgen::InsensitiveStr::Ascii("urnies"),
        dictgen::InsensitiveStr::Ascii("urnolist"),
        dictgen::InsensitiveStr::Ascii("urnolists"),
        dictgen::InsensitiveStr::Ascii("ysitck"),
        dictgen::InsensitiveStr::Ascii("ystik"),
    ],
    values: &[
        &["jonathan"],
        &["jeopardy"],
        &["johannine"],
        &["jonathan"],
        &["journal"],
        &["joseph"],
        &["journey"],
        &["journal"],
        &["journalism"],
        &["journalist"],
        &["journalistic"],
        &["journalists"],
        &["journalism"],
        &["journalist"],
        &["journalistic"],
        &["journalists"],
        &["journal"],
        &["journals"],
        &["journals"],
        &["journalism"],
        &["journalistic"],
        &["journalistic"],
        &["journalistic"],
        &["journalists"],
        &["journalists"],
        &["journalists"],
        &["journalistic"],
        &["journalistic"],
        &["journalists"],
        &["journals"],
        &["journalism"],
        &["journalism"],
        &["journeyed"],
        &["journeys"],
        &["journalist"],
        &["journalists"],
        &["joystick"],
        &["joystick"],
    ],
    range: 4..=13,
};

static WORD_JE_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_JE_CHILDREN),
    value: None,
};

pub static WORD_JE_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("apardy"),
        dictgen::InsensitiveStr::Ascii("fferry"),
        dictgen::InsensitiveStr::Ascii("fferty"),
        dictgen::InsensitiveStr::Ascii("ircho"),
        dictgen::InsensitiveStr::Ascii("nnigns"),
        dictgen::InsensitiveStr::Ascii("nnins"),
        dictgen::InsensitiveStr::Ascii("opary"),
        dictgen::InsensitiveStr::Ascii("oprady"),
        dictgen::InsensitiveStr::Ascii("poardy"),
        dictgen::InsensitiveStr::Ascii("resys"),
        dictgen::InsensitiveStr::Ascii("ricoh"),
        dictgen::InsensitiveStr::Ascii("rsualem"),
        dictgen::InsensitiveStr::Ascii("rsyes"),
        dictgen::InsensitiveStr::Ascii("rusaleum"),
        dictgen::InsensitiveStr::Ascii("rusalm"),
        dictgen::InsensitiveStr::Ascii("ruselam"),
        dictgen::InsensitiveStr::Ascii("ruslaem"),
        dictgen::InsensitiveStr::Ascii("welrey"),
        dictgen::InsensitiveStr::Ascii("werly"),
        dictgen::InsensitiveStr::Ascii("wllery"),
    ],
    values: &[
        &["jeopardy"],
        &["jeffery"],
        &["jeffery"],
        &["jericho"],
        &["jennings"],
        &["jennings"],
        &["jeopardy"],
        &["jeopardy"],
        &["jeopardy"],
        &["jerseys"],
        &["jericho"],
        &["jerusalem"],
        &["jerseys"],
        &["jerusalem"],
        &["jerusalem"],
        &["jerusalem"],
        &["jerusalem"],
        &["jewelry"],
        &["jewelry"],
        &["jewellery"],
    ],
    range: 5..=8,
};

static WORD_JA_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_JA_CHILDREN),
    value: None,
};

pub static WORD_JA_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ckonsville"),
        dictgen::InsensitiveStr::Ascii("cksonvile"),
        dictgen::InsensitiveStr::Ascii("cksonvillle"),
        dictgen::InsensitiveStr::Ascii("gaurs"),
        dictgen::InsensitiveStr::Ascii("guards"),
        dictgen::InsensitiveStr::Ascii("guares"),
        dictgen::InsensitiveStr::Ascii("guras"),
        dictgen::InsensitiveStr::Ascii("ilborken"),
        dictgen::InsensitiveStr::Ascii("ilbrake"),
        dictgen::InsensitiveStr::Ascii("ilbrek"),
        dictgen::InsensitiveStr::Ascii("ilbroaken"),
        dictgen::InsensitiveStr::Ascii("ilbrocken"),
        dictgen::InsensitiveStr::Ascii("imacan"),
        dictgen::InsensitiveStr::Ascii("libreak"),
        dictgen::InsensitiveStr::Ascii("libroken"),
        dictgen::InsensitiveStr::Ascii("macain"),
        dictgen::InsensitiveStr::Ascii("macia"),
        dictgen::InsensitiveStr::Ascii("maicain"),
        dictgen::InsensitiveStr::Ascii("maicains"),
        dictgen::InsensitiveStr::Ascii("maicaman"),
        dictgen::InsensitiveStr::Ascii("maicia"),
        dictgen::InsensitiveStr::Ascii("maina"),
        dictgen::InsensitiveStr::Ascii("miaca"),
        dictgen::InsensitiveStr::Ascii("miacan"),
        dictgen::InsensitiveStr::Ascii("msine"),
        dictgen::InsensitiveStr::Ascii("naury"),
        dictgen::InsensitiveStr::Ascii("nuaray"),
        dictgen::InsensitiveStr::Ascii("nurary"),
        dictgen::InsensitiveStr::Ascii("nuray"),
        dictgen::InsensitiveStr::Ascii("panes"),
        dictgen::InsensitiveStr::Ascii("ques"),
        dictgen::InsensitiveStr::Ascii("smien"),
        dictgen::InsensitiveStr::Ascii("ugars"),
        dictgen::InsensitiveStr::Ascii("unary"),
    ],
    values: &[
        &["jacksonville"],
        &["jacksonville"],
        &["jacksonville"],
        &["jaguars"],
        &["jaguars"],
        &["jaguars"],
        &["jaguars"],
        &["jailbroken"],
        &["jailbreak"],
        &["jailbreak"],
        &["jailbroken"],
        &["jailbroken"],
        &["jamaican"],
        &["jailbreak"],
        &["jailbroken"],
        &["jamaican"],
        &["jamaica"],
        &["jamaican"],
        &["jamaican"],
        &["jamaican"],
        &["jamaica"],
        &["jamaican"],
        &["jamaica"],
        &["jamaican"],
        &["jasmine"],
        &["january"],
        &["january"],
        &["january"],
        &["january"],
        &["japanese"],
        &["jacques"],
        &["jasmine"],
        &["jaguars"],
        &["january"],
    ],
    range: 4..=11,
};

static WORD_I_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_I_CHILDREN),
    value: None,
};

static WORD_I_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    None,
    Some(&WORD_IB_NODE),
    Some(&WORD_IC_NODE),
    Some(&WORD_ID_NODE),
    Some(&WORD_IE_NODE),
    None,
    Some(&WORD_IG_NODE),
    Some(&WORD_IH_NODE),
    None,
    None,
    None,
    Some(&WORD_IL_NODE),
    Some(&WORD_IM_NODE),
    Some(&WORD_IN_NODE),
    Some(&WORD_IO_NODE),
    Some(&WORD_IP_NODE),
    None,
    Some(&WORD_IR_NODE),
    Some(&WORD_IS_NODE),
    Some(&WORD_IT_NODE),
    Some(&WORD_IU_NODE),
    None,
    Some(&WORD_IW_NODE),
    None,
    None,
    None,
];

static WORD_IW_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_IW_CHILDREN),
    value: None,
};

pub static WORD_IW_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ll"),
        dictgen::InsensitiveStr::Ascii("th"),
    ],
    values: &[&["will"], &["with"]],
    range: 2..=2,
};

static WORD_IU_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_IU_CHILDREN),
    value: None,
};

pub static WORD_IU_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("nior")],
    values: &[&["junior"]],
    range: 4..=4,
};

static WORD_IT_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_IT_CHILDREN),
    value: None,
};

pub static WORD_IT_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("alains"),
        dictgen::InsensitiveStr::Ascii("alianas"),
        dictgen::InsensitiveStr::Ascii("alianess"),
        dictgen::InsensitiveStr::Ascii("alianos"),
        dictgen::InsensitiveStr::Ascii("alias"),
        dictgen::InsensitiveStr::Ascii("nroduced"),
    ],
    values: &[
        &["italians"],
        &["italians"],
        &["italians"],
        &["italians"],
        &["italians"],
        &["introduced"],
    ],
    range: 5..=8,
};

static WORD_IS_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_IS_CHILDREN),
    value: None,
};

pub static WORD_IS_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("almic"),
        dictgen::InsensitiveStr::Ascii("almist"),
        dictgen::InsensitiveStr::Ascii("almists"),
        dictgen::InsensitiveStr::Ascii("alnders"),
        dictgen::InsensitiveStr::Ascii("areli"),
        dictgen::InsensitiveStr::Ascii("arelis"),
        dictgen::InsensitiveStr::Ascii("definitely"),
        dictgen::InsensitiveStr::Ascii("lamisist"),
        dictgen::InsensitiveStr::Ascii("lamisists"),
        dictgen::InsensitiveStr::Ascii("lamiskt"),
        dictgen::InsensitiveStr::Ascii("lamistas"),
        dictgen::InsensitiveStr::Ascii("lamisters"),
        dictgen::InsensitiveStr::Ascii("lamistisk"),
        dictgen::InsensitiveStr::Ascii("lamit"),
        dictgen::InsensitiveStr::Ascii("lamits"),
        dictgen::InsensitiveStr::Ascii("lamsit"),
        dictgen::InsensitiveStr::Ascii("lamsits"),
        dictgen::InsensitiveStr::Ascii("landes"),
        dictgen::InsensitiveStr::Ascii("lmaic"),
        dictgen::InsensitiveStr::Ascii("lmaists"),
        dictgen::InsensitiveStr::Ascii("loate"),
        dictgen::InsensitiveStr::Ascii("malist"),
        dictgen::InsensitiveStr::Ascii("ntallation"),
        dictgen::InsensitiveStr::Ascii("ntaller"),
        dictgen::InsensitiveStr::Ascii("ntalling"),
        dictgen::InsensitiveStr::Ascii("ntalls"),
        dictgen::InsensitiveStr::Ascii("ntances"),
        dictgen::InsensitiveStr::Ascii("ntantly"),
        dictgen::InsensitiveStr::Ascii("ntructed"),
        dictgen::InsensitiveStr::Ascii("ntrument"),
        dictgen::InsensitiveStr::Ascii("ntrumental"),
        dictgen::InsensitiveStr::Ascii("ntruments"),
        dictgen::InsensitiveStr::Ascii("olatie"),
        dictgen::InsensitiveStr::Ascii("raeliens"),
        dictgen::InsensitiveStr::Ascii("raelies"),
        dictgen::InsensitiveStr::Ascii("raelitas"),
        dictgen::InsensitiveStr::Ascii("raelits"),
        dictgen::InsensitiveStr::Ascii("raelli"),
        dictgen::InsensitiveStr::Ascii("ralei"),
        dictgen::InsensitiveStr::Ascii("raleis"),
        dictgen::InsensitiveStr::Ascii("ralies"),
        dictgen::InsensitiveStr::Ascii("reali"),
        dictgen::InsensitiveStr::Ascii("realis"),
        dictgen::InsensitiveStr::Ascii("sueing"),
    ],
    values: &[
        &["islamic"],
        &["islamist"],
        &["islamists"],
        &["islanders"],
        &["israeli"],
        &["israelis"],
        &["indefinitely"],
        &["islamist"],
        &["islamists"],
        &["islamist"],
        &["islamists"],
        &["islamists"],
        &["islamists"],
        &["islamist"],
        &["islamist"],
        &["islamist"],
        &["islamists"],
        &["islanders"],
        &["islamic"],
        &["islamists"],
        &["isolate"],
        &["islamist"],
        &["installation"],
        &["installer"],
        &["installing"],
        &["installs"],
        &["instances"],
        &["instantly"],
        &["instructed"],
        &["instrument"],
        &["instrumental"],
        &["instruments"],
        &["isolate"],
        &["israelis"],
        &["israelis"],
        &["israelis"],
        &["israelis"],
        &["israeli"],
        &["israeli"],
        &["israelis"],
        &["israelis"],
        &["israeli"],
        &["israelis"],
        &["issuing"],
    ],
    range: 5..=10,
};

static WORD_IR_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_IR_CHILDREN),
    value: None,
};

pub static WORD_IR_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("anain"),
        dictgen::InsensitiveStr::Ascii("anains"),
        dictgen::InsensitiveStr::Ascii("anianos"),
        dictgen::InsensitiveStr::Ascii("anias"),
        dictgen::InsensitiveStr::Ascii("anina"),
        dictgen::InsensitiveStr::Ascii("aninas"),
        dictgen::InsensitiveStr::Ascii("elevent"),
        dictgen::InsensitiveStr::Ascii("esistable"),
        dictgen::InsensitiveStr::Ascii("esistably"),
        dictgen::InsensitiveStr::Ascii("esistible"),
        dictgen::InsensitiveStr::Ascii("esistibly"),
        dictgen::InsensitiveStr::Ascii("itable"),
        dictgen::InsensitiveStr::Ascii("itated"),
        dictgen::InsensitiveStr::Ascii("leand"),
        dictgen::InsensitiveStr::Ascii("onamn"),
        dictgen::InsensitiveStr::Ascii("oncially"),
        dictgen::InsensitiveStr::Ascii("onicaly"),
        dictgen::InsensitiveStr::Ascii("onicly"),
        dictgen::InsensitiveStr::Ascii("racional"),
        dictgen::InsensitiveStr::Ascii("rationably"),
        dictgen::InsensitiveStr::Ascii("rationallity"),
        dictgen::InsensitiveStr::Ascii("rationallly"),
        dictgen::InsensitiveStr::Ascii("rationaly"),
        dictgen::InsensitiveStr::Ascii("rationatly"),
        dictgen::InsensitiveStr::Ascii("rationel"),
        dictgen::InsensitiveStr::Ascii("rationella"),
        dictgen::InsensitiveStr::Ascii("rationnal"),
        dictgen::InsensitiveStr::Ascii("relavant"),
        dictgen::InsensitiveStr::Ascii("relavent"),
        dictgen::InsensitiveStr::Ascii("relevent"),
        dictgen::InsensitiveStr::Ascii("relivant"),
        dictgen::InsensitiveStr::Ascii("relivent"),
        dictgen::InsensitiveStr::Ascii("replacable"),
        dictgen::InsensitiveStr::Ascii("resistable"),
        dictgen::InsensitiveStr::Ascii("resistably"),
        dictgen::InsensitiveStr::Ascii("respecitve"),
        dictgen::InsensitiveStr::Ascii("responcible"),
        dictgen::InsensitiveStr::Ascii("responisble"),
        dictgen::InsensitiveStr::Ascii("responsable"),
        dictgen::InsensitiveStr::Ascii("responsbile"),
        dictgen::InsensitiveStr::Ascii("responsble"),
        dictgen::InsensitiveStr::Ascii("responsibe"),
        dictgen::InsensitiveStr::Ascii("responsibile"),
        dictgen::InsensitiveStr::Ascii("revelant"),
        dictgen::InsensitiveStr::Ascii("reverant"),
        dictgen::InsensitiveStr::Ascii("reverisble"),
        dictgen::InsensitiveStr::Ascii("reversebly"),
        dictgen::InsensitiveStr::Ascii("reversiable"),
        dictgen::InsensitiveStr::Ascii("reversibel"),
        dictgen::InsensitiveStr::Ascii("reversibelt"),
        dictgen::InsensitiveStr::Ascii("reversibile"),
        dictgen::InsensitiveStr::Ascii("revirsible"),
        dictgen::InsensitiveStr::Ascii("ridation"),
        dictgen::InsensitiveStr::Ascii("riration"),
        dictgen::InsensitiveStr::Ascii("rispective"),
        dictgen::InsensitiveStr::Ascii("risponsible"),
        dictgen::InsensitiveStr::Ascii("ritacion"),
        dictgen::InsensitiveStr::Ascii("ritatie"),
        dictgen::InsensitiveStr::Ascii("ritaties"),
        dictgen::InsensitiveStr::Ascii("ritatin"),
        dictgen::InsensitiveStr::Ascii("ritato"),
        dictgen::InsensitiveStr::Ascii("riversible"),
    ],
    values: &[
        &["iranian"],
        &["iranians"],
        &["iranians"],
        &["iranians"],
        &["iranian"],
        &["iranians"],
        &["irrelevant"],
        &["irresistible"],
        &["irresistibly"],
        &["irresistible"],
        &["irresistibly"],
        &["irritable"],
        &["irritated"],
        &["ireland"],
        &["ironman"],
        &["ironically"],
        &["ironically"],
        &["ironically"],
        &["irrational"],
        &["irrationally"],
        &["irrationally"],
        &["irrationally"],
        &["irrationally"],
        &["irrationally"],
        &["irrational"],
        &["irrational"],
        &["irrational"],
        &["irrelevant"],
        &["irrelevant"],
        &["irrelevant"],
        &["irrelevant"],
        &["irrelevant"],
        &["irreplaceable"],
        &["irresistible"],
        &["irresistibly"],
        &["irrespective"],
        &["irresponsible"],
        &["irresponsible"],
        &["irresponsible"],
        &["irresponsible"],
        &["irresponsible"],
        &["irresponsible"],
        &["irresponsible"],
        &["irrelevant"],
        &["irrelevant"],
        &["irreversible"],
        &["irreversible"],
        &["irreversible"],
        &["irreversible"],
        &["irreversible"],
        &["irreversible"],
        &["irreversible"],
        &["irritation"],
        &["irritation"],
        &["irrespective"],
        &["irresponsible"],
        &["irritation"],
        &["irritate"],
        &["irritate"],
        &["irritation"],
        &["irritation"],
        &["irreversible"],
    ],
    range: 5..=12,
};

static WORD_IP_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_IP_CHILDREN),
    value: None,
};

pub static WORD_IP_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("ubrofen")],
    values: &[&["ibuprofen"]],
    range: 7..=7,
};

static WORD_IO_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_IO_CHILDREN),
    value: None,
};

pub static WORD_IO_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("rnman")],
    values: &[&["ironman"]],
    range: 5..=5,
};

static WORD_IN_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_IN_CHILDREN),
    value: None,
};

static WORD_IN_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    Some(&WORD_INA_NODE),
    Some(&WORD_INB_NODE),
    Some(&WORD_INC_NODE),
    Some(&WORD_IND_NODE),
    Some(&WORD_INE_NODE),
    Some(&WORD_INF_NODE),
    Some(&WORD_ING_NODE),
    Some(&WORD_INH_NODE),
    Some(&WORD_INI_NODE),
    Some(&WORD_INJ_NODE),
    Some(&WORD_INK_NODE),
    Some(&WORD_INL_NODE),
    Some(&WORD_INM_NODE),
    Some(&WORD_INN_NODE),
    Some(&WORD_INO_NODE),
    Some(&WORD_INP_NODE),
    Some(&WORD_INQ_NODE),
    Some(&WORD_INR_NODE),
    Some(&WORD_INS_NODE),
    Some(&WORD_INT_NODE),
    Some(&WORD_INU_NODE),
    Some(&WORD_INV_NODE),
    None,
    None,
    None,
    None,
];

static WORD_INV_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_INV_CHILDREN),
    value: None,
};

static WORD_INV_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    Some(&WORD_INVA_NODE),
    None,
    None,
    None,
    Some(&WORD_INVE_NODE),
    None,
    None,
    None,
    Some(&WORD_INVI_NODE),
    None,
    None,
    Some(&WORD_INVL_NODE),
    None,
    None,
    Some(&WORD_INVO_NODE),
    None,
    None,
    None,
    None,
    None,
    Some(&WORD_INVU_NODE),
    None,
    None,
    None,
    None,
    None,
];

static WORD_INVU_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_INVU_CHILDREN),
    value: None,
};

pub static WORD_INVU_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("lenrable"),
        dictgen::InsensitiveStr::Ascii("lernable"),
        dictgen::InsensitiveStr::Ascii("lnarable"),
        dictgen::InsensitiveStr::Ascii("lnerabe"),
        dictgen::InsensitiveStr::Ascii("lnerabile"),
        dictgen::InsensitiveStr::Ascii("lnerbale"),
        dictgen::InsensitiveStr::Ascii("lnerble"),
        dictgen::InsensitiveStr::Ascii("lnurable"),
        dictgen::InsensitiveStr::Ascii("lverable"),
        dictgen::InsensitiveStr::Ascii("nlerable"),
        dictgen::InsensitiveStr::Ascii("rnerable"),
    ],
    values: &[
        &["invulnerable"],
        &["invulnerable"],
        &["invulnerable"],
        &["invulnerable"],
        &["invulnerable"],
        &["invulnerable"],
        &["invulnerable"],
        &["invulnerable"],
        &["invulnerable"],
        &["invulnerable"],
        &["invulnerable"],
    ],
    range: 7..=9,
};

static WORD_INVO_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_INVO_CHILDREN),
    value: None,
};

pub static WORD_INVO_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ekr"),
        dictgen::InsensitiveStr::Ascii("lantary"),
        dictgen::InsensitiveStr::Ascii("lentary"),
        dictgen::InsensitiveStr::Ascii("lintary"),
        dictgen::InsensitiveStr::Ascii("lnerable"),
        dictgen::InsensitiveStr::Ascii("lontary"),
        dictgen::InsensitiveStr::Ascii("lunary"),
        dictgen::InsensitiveStr::Ascii("lunatry"),
        dictgen::InsensitiveStr::Ascii("luntairy"),
        dictgen::InsensitiveStr::Ascii("luntarely"),
        dictgen::InsensitiveStr::Ascii("luntarity"),
        dictgen::InsensitiveStr::Ascii("luntarly"),
        dictgen::InsensitiveStr::Ascii("lvment"),
        dictgen::InsensitiveStr::Ascii("nvenient"),
        dictgen::InsensitiveStr::Ascii("vle"),
        dictgen::InsensitiveStr::Ascii("vled"),
        dictgen::InsensitiveStr::Ascii("vles"),
        dictgen::InsensitiveStr::Ascii("vling"),
    ],
    values: &[
        &["invoker"],
        &["involuntary"],
        &["involuntary"],
        &["involuntary"],
        &["invulnerable"],
        &["involuntary"],
        &["involuntary"],
        &["involuntary"],
        &["involuntary"],
        &["involuntary"],
        &["involuntary"],
        &["involuntary"],
        &["involvement"],
        &["inconvenient"],
        &["involve"],
        &["involved"],
        &["involves"],
        &["involving"],
    ],
    range: 3..=9,
};

static WORD_INVL_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_INVL_CHILDREN),
    value: None,
};

pub static WORD_INVL_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ove"),
        dictgen::InsensitiveStr::Ascii("oved"),
        dictgen::InsensitiveStr::Ascii("oves"),
        dictgen::InsensitiveStr::Ascii("oving"),
        dictgen::InsensitiveStr::Ascii("unerable"),
    ],
    values: &[
        &["involve"],
        &["involved"],
        &["involves"],
        &["involving"],
        &["invulnerable"],
    ],
    range: 3..=8,
};

static WORD_INVI_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_INVI_CHILDREN),
    value: None,
};

pub static WORD_INVI_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("cibility"),
        dictgen::InsensitiveStr::Ascii("cinble"),
        dictgen::InsensitiveStr::Ascii("didual"),
        dictgen::InsensitiveStr::Ascii("didually"),
        dictgen::InsensitiveStr::Ascii("ncable"),
        dictgen::InsensitiveStr::Ascii("nceble"),
        dictgen::InsensitiveStr::Ascii("ncibe"),
        dictgen::InsensitiveStr::Ascii("ncibile"),
        dictgen::InsensitiveStr::Ascii("ncil"),
        dictgen::InsensitiveStr::Ascii("ncinble"),
        dictgen::InsensitiveStr::Ascii("nicble"),
        dictgen::InsensitiveStr::Ascii("nsible"),
        dictgen::InsensitiveStr::Ascii("nvible"),
        dictgen::InsensitiveStr::Ascii("sibiity"),
        dictgen::InsensitiveStr::Ascii("sibiliy"),
        dictgen::InsensitiveStr::Ascii("sibillity"),
        dictgen::InsensitiveStr::Ascii("sibiltiy"),
        dictgen::InsensitiveStr::Ascii("sibily"),
        dictgen::InsensitiveStr::Ascii("silibity"),
        dictgen::InsensitiveStr::Ascii("sivility"),
        dictgen::InsensitiveStr::Ascii("tacion"),
        dictgen::InsensitiveStr::Ascii("tating"),
        dictgen::InsensitiveStr::Ascii("tato"),
    ],
    values: &[
        &["invisibility"],
        &["invincible"],
        &["individual"],
        &["individually"],
        &["invincible"],
        &["invincible"],
        &["invincible"],
        &["invincible"],
        &["invincible"],
        &["invincible"],
        &["invincible"],
        &["invincible"],
        &["invincible"],
        &["invisibility"],
        &["invisibility"],
        &["invisibility"],
        &["invisibility"],
        &["invisibility"],
        &["invisibility"],
        &["invisibility"],
        &["invitation"],
        &["invitation"],
        &["invitation"],
    ],
    range: 4..=9,
};

static WORD_INVE_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_INVE_CHILDREN),
    value: None,
};

pub static WORD_INVE_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("itable"),
        dictgen::InsensitiveStr::Ascii("itably"),
        dictgen::InsensitiveStr::Ascii("nsions"),
        dictgen::InsensitiveStr::Ascii("ntario"),
        dictgen::InsensitiveStr::Ascii("ntarlo"),
        dictgen::InsensitiveStr::Ascii("ntaron"),
        dictgen::InsensitiveStr::Ascii("nter"),
        dictgen::InsensitiveStr::Ascii("ntings"),
        dictgen::InsensitiveStr::Ascii("ntiones"),
        dictgen::InsensitiveStr::Ascii("ntios"),
        dictgen::InsensitiveStr::Ascii("ntivos"),
        dictgen::InsensitiveStr::Ascii("rtendo"),
        dictgen::InsensitiveStr::Ascii("rterad"),
        dictgen::InsensitiveStr::Ascii("rtes"),
        dictgen::InsensitiveStr::Ascii("rtibrates"),
        dictgen::InsensitiveStr::Ascii("rtions"),
        dictgen::InsensitiveStr::Ascii("rvention"),
        dictgen::InsensitiveStr::Ascii("sitgate"),
        dictgen::InsensitiveStr::Ascii("sitgation"),
        dictgen::InsensitiveStr::Ascii("sitgations"),
        dictgen::InsensitiveStr::Ascii("sitgative"),
        dictgen::InsensitiveStr::Ascii("sitgators"),
        dictgen::InsensitiveStr::Ascii("stagate"),
        dictgen::InsensitiveStr::Ascii("stagated"),
        dictgen::InsensitiveStr::Ascii("stagator"),
        dictgen::InsensitiveStr::Ascii("stagators"),
        dictgen::InsensitiveStr::Ascii("stegated"),
        dictgen::InsensitiveStr::Ascii("stegating"),
        dictgen::InsensitiveStr::Ascii("stegator"),
        dictgen::InsensitiveStr::Ascii("stegators"),
        dictgen::InsensitiveStr::Ascii("stemnt"),
        dictgen::InsensitiveStr::Ascii("stiage"),
        dictgen::InsensitiveStr::Ascii("stiagte"),
        dictgen::InsensitiveStr::Ascii("stiagtion"),
        dictgen::InsensitiveStr::Ascii("stiagtions"),
        dictgen::InsensitiveStr::Ascii("stiagtive"),
        dictgen::InsensitiveStr::Ascii("stigacion"),
        dictgen::InsensitiveStr::Ascii("stigaiton"),
        dictgen::InsensitiveStr::Ascii("stigare"),
        dictgen::InsensitiveStr::Ascii("stigaron"),
        dictgen::InsensitiveStr::Ascii("stigater"),
        dictgen::InsensitiveStr::Ascii("stigaters"),
        dictgen::InsensitiveStr::Ascii("stigatie"),
        dictgen::InsensitiveStr::Ascii("stigatin"),
        dictgen::InsensitiveStr::Ascii("stigatio"),
        dictgen::InsensitiveStr::Ascii("stigationes"),
        dictgen::InsensitiveStr::Ascii("stigatiors"),
        dictgen::InsensitiveStr::Ascii("stigativo"),
        dictgen::InsensitiveStr::Ascii("stigativos"),
        dictgen::InsensitiveStr::Ascii("stigaton"),
        dictgen::InsensitiveStr::Ascii("stigatons"),
        dictgen::InsensitiveStr::Ascii("stige"),
        dictgen::InsensitiveStr::Ascii("stigsting"),
        dictgen::InsensitiveStr::Ascii("stigstion"),
        dictgen::InsensitiveStr::Ascii("stigstions"),
        dictgen::InsensitiveStr::Ascii("stingate"),
        dictgen::InsensitiveStr::Ascii("stions"),
        dictgen::InsensitiveStr::Ascii("stirat"),
        dictgen::InsensitiveStr::Ascii("stmens"),
        dictgen::InsensitiveStr::Ascii("stmet"),
        dictgen::InsensitiveStr::Ascii("stogator"),
        dictgen::InsensitiveStr::Ascii("stogators"),
    ],
    values: &[
        &["inevitable"],
        &["inevitably"],
        &["inventions"],
        &["inventor"],
        &["inventor"],
        &["inventor"],
        &["inventor"],
        &["inventions"],
        &["inventions"],
        &["inventions"],
        &["inventions"],
        &["inverted"],
        &["inverted"],
        &["inverse"],
        &["invertebrates"],
        &["inventions"],
        &["intervention"],
        &["investigate"],
        &["investigation"],
        &["investigations"],
        &["investigative"],
        &["investigators"],
        &["investigate"],
        &["investigated"],
        &["investigator"],
        &["investigators"],
        &["investigated"],
        &["investigating"],
        &["investigator"],
        &["investigators"],
        &["investments"],
        &["investigate"],
        &["investigate"],
        &["investigation"],
        &["investigations"],
        &["investigative"],
        &["investigation"],
        &["investigations"],
        &["investigate"],
        &["investigator"],
        &["investigator"],
        &["investigators"],
        &["investigative"],
        &["investigation"],
        &["investigator"],
        &["investigations"],
        &["investigations"],
        &["investigation"],
        &["investigations"],
        &["investigation"],
        &["investigations"],
        &["investigate"],
        &["investigating"],
        &["investigations"],
        &["investigations"],
        &["investigate"],
        &["inventions"],
        &["investigator"],
        &["investments"],
        &["investments"],
        &["investigator"],
        &["investigators"],
    ],
    range: 4..=11,
};

static WORD_INVA_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_INVA_CHILDREN),
    value: None,
};

pub static WORD_INVA_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("deras"),
        dictgen::InsensitiveStr::Ascii("derats"),
        dictgen::InsensitiveStr::Ascii("ildate"),
        dictgen::InsensitiveStr::Ascii("irably"),
        dictgen::InsensitiveStr::Ascii("ldiate"),
        dictgen::InsensitiveStr::Ascii("ldiates"),
        dictgen::InsensitiveStr::Ascii("lidade"),
        dictgen::InsensitiveStr::Ascii("lidades"),
        dictgen::InsensitiveStr::Ascii("lidante"),
        dictgen::InsensitiveStr::Ascii("lidare"),
        dictgen::InsensitiveStr::Ascii("lidas"),
        dictgen::InsensitiveStr::Ascii("lubale"),
        dictgen::InsensitiveStr::Ascii("lueble"),
        dictgen::InsensitiveStr::Ascii("raibly"),
        dictgen::InsensitiveStr::Ascii("riabil"),
        dictgen::InsensitiveStr::Ascii("riabley"),
        dictgen::InsensitiveStr::Ascii("riablly"),
        dictgen::InsensitiveStr::Ascii("ribaly"),
        dictgen::InsensitiveStr::Ascii("ulable"),
    ],
    values: &[
        &["invaders"],
        &["invaders"],
        &["invalidates"],
        &["invariably"],
        &["invalidates"],
        &["invalidates"],
        &["invalidate"],
        &["invalidates"],
        &["invalidate"],
        &["invalidate"],
        &["invalidates"],
        &["invaluable"],
        &["invaluable"],
        &["invariably"],
        &["invariably"],
        &["invariably"],
        &["invariably"],
        &["invariably"],
        &["invaluable"],
    ],
    range: 5..=7,
};

static WORD_INU_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_INU_CHILDREN),
    value: None,
};

pub static WORD_INU_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("dstry"),
        dictgen::InsensitiveStr::Ascii("merable"),
        dictgen::InsensitiveStr::Ascii("srgency"),
        dictgen::InsensitiveStr::Ascii("tition"),
        dictgen::InsensitiveStr::Ascii("titive"),
        dictgen::InsensitiveStr::Ascii("titively"),
    ],
    values: &[
        &["industry"],
        &["enumerable"],
        &["insurgency"],
        &["intuition"],
        &["intuitive"],
        &["intuitively"],
    ],
    range: 5..=8,
};

static WORD_INT_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_INT_CHILDREN),
    value: None,
};

static WORD_INT_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    Some(&WORD_INTA_NODE),
    None,
    None,
    None,
    Some(&WORD_INTE_NODE),
    None,
    None,
    None,
    Some(&WORD_INTI_NODE),
    None,
    None,
    None,
    None,
    None,
    Some(&WORD_INTO_NODE),
    None,
    None,
    Some(&WORD_INTR_NODE),
    Some(&WORD_INTS_NODE),
    None,
    Some(&WORD_INTU_NODE),
    None,
    None,
    None,
    None,
    None,
];

static WORD_INTU_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_INTU_CHILDREN),
    value: None,
};

pub static WORD_INTU_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("atively"),
        dictgen::InsensitiveStr::Ascii("itevely"),
        dictgen::InsensitiveStr::Ascii("itevly"),
        dictgen::InsensitiveStr::Ascii("itivelly"),
        dictgen::InsensitiveStr::Ascii("itivley"),
        dictgen::InsensitiveStr::Ascii("itivly"),
        dictgen::InsensitiveStr::Ascii("itivno"),
        dictgen::InsensitiveStr::Ascii("ituvely"),
        dictgen::InsensitiveStr::Ascii("rrupting"),
        dictgen::InsensitiveStr::Ascii("tive"),
        dictgen::InsensitiveStr::Ascii("tively"),
    ],
    values: &[
        &["intuitively"],
        &["intuitively"],
        &["intuitively"],
        &["intuitively"],
        &["intuitively"],
        &["intuitively"],
        &["intuition"],
        &["intuitively"],
        &["interrupting"],
        &["intuitive"],
        &["intuitively"],
    ],
    range: 4..=8,
};

static WORD_INTS_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_INTS_CHILDREN),
    value: None,
};

pub static WORD_INTS_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("rumental")],
    values: &[&["instrumental"]],
    range: 8..=8,
};

static WORD_INTR_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_INTR_CHILDREN),
    value: None,
};

static WORD_INTR_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    Some(&WORD_INTRA_NODE),
    None,
    None,
    Some(&WORD_INTRD_NODE),
    Some(&WORD_INTRE_NODE),
    None,
    None,
    None,
    Some(&WORD_INTRI_NODE),
    None,
    None,
    None,
    None,
    None,
    Some(&WORD_INTRO_NODE),
    None,
    None,
    None,
    None,
    None,
    Some(&WORD_INTRU_NODE),
    None,
    None,
    None,
    None,
    None,
];

static WORD_INTRU_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_INTRU_CHILDREN),
    value: None,
};

pub static WORD_INTRU_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("duced"),
        dictgen::InsensitiveStr::Ascii("duces"),
        dictgen::InsensitiveStr::Ascii("ducing"),
        dictgen::InsensitiveStr::Ascii("duction"),
        dictgen::InsensitiveStr::Ascii("ductory"),
        dictgen::InsensitiveStr::Ascii("ige"),
        dictgen::InsensitiveStr::Ascii("iged"),
        dictgen::InsensitiveStr::Ascii("iging"),
        dictgen::InsensitiveStr::Ascii("ment"),
        dictgen::InsensitiveStr::Ascii("mental"),
        dictgen::InsensitiveStr::Ascii("ments"),
    ],
    values: &[
        &["introduced"],
        &["introduces"],
        &["introducing"],
        &["introduction"],
        &["introductory"],
        &["intrigue"],
        &["intrigued"],
        &["intriguing"],
        &["instrument"],
        &["instrumental"],
        &["instruments"],
    ],
    range: 3..=7,
};

static WORD_INTRO_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_INTRO_CHILDREN),
    value: None,
};

pub static WORD_INTRO_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("decks"),
        dictgen::InsensitiveStr::Ascii("diction"),
        dictgen::InsensitiveStr::Ascii("duccion"),
        dictgen::InsensitiveStr::Ascii("duceras"),
        dictgen::InsensitiveStr::Ascii("duceres"),
        dictgen::InsensitiveStr::Ascii("ducion"),
        dictgen::InsensitiveStr::Ascii("duciton"),
        dictgen::InsensitiveStr::Ascii("ductary"),
        dictgen::InsensitiveStr::Ascii("ducted"),
        dictgen::InsensitiveStr::Ascii("ductie"),
        dictgen::InsensitiveStr::Ascii("ducting"),
        dictgen::InsensitiveStr::Ascii("ductiory"),
        dictgen::InsensitiveStr::Ascii("ductury"),
        dictgen::InsensitiveStr::Ascii("due"),
        dictgen::InsensitiveStr::Ascii("dued"),
        dictgen::InsensitiveStr::Ascii("duktion"),
        dictgen::InsensitiveStr::Ascii("dus"),
        dictgen::InsensitiveStr::Ascii("duse"),
        dictgen::InsensitiveStr::Ascii("dused"),
        dictgen::InsensitiveStr::Ascii("speccion"),
        dictgen::InsensitiveStr::Ascii("spectin"),
        dictgen::InsensitiveStr::Ascii("spectivo"),
        dictgen::InsensitiveStr::Ascii("spektion"),
        dictgen::InsensitiveStr::Ascii("vents"),
        dictgen::InsensitiveStr::Ascii("vered"),
        dictgen::InsensitiveStr::Ascii("vers"),
        dictgen::InsensitiveStr::Ascii("versa"),
        dictgen::InsensitiveStr::Ascii("verse"),
        dictgen::InsensitiveStr::Ascii("versi"),
        dictgen::InsensitiveStr::Ascii("verso"),
        dictgen::InsensitiveStr::Ascii("versy"),
        dictgen::InsensitiveStr::Ascii("vertie"),
        dictgen::InsensitiveStr::Ascii("vertis"),
        dictgen::InsensitiveStr::Ascii("vet"),
        dictgen::InsensitiveStr::Ascii("veted"),
    ],
    values: &[
        &["introduces"],
        &["introduction"],
        &["introduction"],
        &["introduces"],
        &["introduces"],
        &["introduction"],
        &["introduction"],
        &["introductory"],
        &["introduced"],
        &["introduce"],
        &["introduction"],
        &["introductory"],
        &["introductory"],
        &["introduces"],
        &["introduced"],
        &["introduction"],
        &["introduces"],
        &["introduces"],
        &["introduces"],
        &["introspection"],
        &["introspection"],
        &["introspection"],
        &["introspection"],
        &["introverts"],
        &["introverted"],
        &["introverts"],
        &["introverts"],
        &["introverts"],
        &["introverts"],
        &["introverts"],
        &["introverts"],
        &["introverted"],
        &["introverts"],
        &["introvert"],
        &["introverted"],
    ],
    range: 3..=8,
};

static WORD_INTRI_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_INTRI_CHILDREN),
    value: None,
};

pub static WORD_INTRI_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("caces"),
        dictgen::InsensitiveStr::Ascii("casies"),
        dictgen::InsensitiveStr::Ascii("cicies"),
        dictgen::InsensitiveStr::Ascii("ge"),
        dictgen::InsensitiveStr::Ascii("gueing"),
        dictgen::InsensitiveStr::Ascii("guied"),
        dictgen::InsensitiveStr::Ascii("gured"),
        dictgen::InsensitiveStr::Ascii("nisc"),
        dictgen::InsensitiveStr::Ascii("niscally"),
        dictgen::InsensitiveStr::Ascii("nsecally"),
        dictgen::InsensitiveStr::Ascii("nseci"),
        dictgen::InsensitiveStr::Ascii("nsicaly"),
        dictgen::InsensitiveStr::Ascii("nsinc"),
        dictgen::InsensitiveStr::Ascii("nsisch"),
        dictgen::InsensitiveStr::Ascii("quing"),
        dictgen::InsensitiveStr::Ascii("sinc"),
        dictgen::InsensitiveStr::Ascii("sincally"),
        dictgen::InsensitiveStr::Ascii("snic"),
        dictgen::InsensitiveStr::Ascii("stically"),
        dictgen::InsensitiveStr::Ascii("uge"),
        dictgen::InsensitiveStr::Ascii("uged"),
        dictgen::InsensitiveStr::Ascii("uging"),
    ],
    values: &[
        &["intricacies"],
        &["intricacies"],
        &["intricacies"],
        &["intrigue"],
        &["intriguing"],
        &["intrigue"],
        &["intrigue"],
        &["intrinsic"],
        &["intrinsically"],
        &["intrinsically"],
        &["intrinsic"],
        &["intrinsically"],
        &["intrinsic"],
        &["intrinsic"],
        &["intriguing"],
        &["intrinsic"],
        &["intrinsically"],
        &["intrinsic"],
        &["intrinsically"],
        &["intrigue"],
        &["intrigued"],
        &["intriguing"],
    ],
    range: 2..=8,
};

static WORD_INTRE_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_INTRE_CHILDREN),
    value: None,
};

pub static WORD_INTRE_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("cacies"),
        dictgen::InsensitiveStr::Ascii("gal"),
        dictgen::InsensitiveStr::Ascii("gity"),
        dictgen::InsensitiveStr::Ascii("guing"),
        dictgen::InsensitiveStr::Ascii("nets"),
        dictgen::InsensitiveStr::Ascii("nsically"),
        dictgen::InsensitiveStr::Ascii("pret"),
        dictgen::InsensitiveStr::Ascii("pretation"),
        dictgen::InsensitiveStr::Ascii("pretations"),
        dictgen::InsensitiveStr::Ascii("preted"),
        dictgen::InsensitiveStr::Ascii("preter"),
        dictgen::InsensitiveStr::Ascii("preting"),
        dictgen::InsensitiveStr::Ascii("rupt"),
        dictgen::InsensitiveStr::Ascii("rupted"),
        dictgen::InsensitiveStr::Ascii("st"),
        dictgen::InsensitiveStr::Ascii("webs"),
    ],
    values: &[
        &["intricacies"],
        &["integral"],
        &["integrity"],
        &["intriguing"],
        &["internets"],
        &["intrinsically"],
        &["interpret"],
        &["interpretation"],
        &["interpretations"],
        &["interpreted"],
        &["interpreter"],
        &["interpreting"],
        &["interrupt"],
        &["interrupted"],
        &["interest"],
        &["interwebs"],
    ],
    range: 2..=10,
};

static WORD_INTRD_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_INTRD_CHILDREN),
    value: None,
};

pub static WORD_INTRD_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("uced")],
    values: &[&["introduced"]],
    range: 4..=4,
};

static WORD_INTRA_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_INTRA_CHILDREN),
    value: None,
};

pub static WORD_INTRA_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("cacies"),
        dictgen::InsensitiveStr::Ascii("cicies"),
        dictgen::InsensitiveStr::Ascii("cite"),
        dictgen::InsensitiveStr::Ascii("spection"),
        dictgen::InsensitiveStr::Ascii("verted"),
        dictgen::InsensitiveStr::Ascii("verts"),
    ],
    values: &[
        &["intricacies"],
        &["intricacies"],
        &["intricate"],
        &["introspection"],
        &["introverted"],
        &["introverts"],
    ],
    range: 4..=8,
};

static WORD_INTO_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_INTO_CHILDREN),
    value: None,
};

pub static WORD_INTO_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("larant"),
        dictgen::InsensitiveStr::Ascii("lerace"),
        dictgen::InsensitiveStr::Ascii("leranse"),
        dictgen::InsensitiveStr::Ascii("lerante"),
        dictgen::InsensitiveStr::Ascii("lerate"),
        dictgen::InsensitiveStr::Ascii("lerence"),
        dictgen::InsensitiveStr::Ascii("lerent"),
        dictgen::InsensitiveStr::Ascii("lernace"),
        dictgen::InsensitiveStr::Ascii("lorance"),
        dictgen::InsensitiveStr::Ascii("lorant"),
        dictgen::InsensitiveStr::Ascii("lorence"),
        dictgen::InsensitiveStr::Ascii("lorent"),
        dictgen::InsensitiveStr::Ascii("rduce"),
        dictgen::InsensitiveStr::Ascii("rduced"),
        dictgen::InsensitiveStr::Ascii("rduces"),
        dictgen::InsensitiveStr::Ascii("rducing"),
        dictgen::InsensitiveStr::Ascii("rduction"),
        dictgen::InsensitiveStr::Ascii("rductory"),
        dictgen::InsensitiveStr::Ascii("rvert"),
        dictgen::InsensitiveStr::Ascii("rverted"),
        dictgen::InsensitiveStr::Ascii("rverts"),
        dictgen::InsensitiveStr::Ascii("xicacion"),
        dictgen::InsensitiveStr::Ascii("xicatin"),
        dictgen::InsensitiveStr::Ascii("xicaton"),
        dictgen::InsensitiveStr::Ascii("xicted"),
        dictgen::InsensitiveStr::Ascii("xinated"),
        dictgen::InsensitiveStr::Ascii("xination"),
        dictgen::InsensitiveStr::Ascii("xocated"),
    ],
    values: &[
        &["intolerant"],
        &["intolerance"],
        &["intolerance"],
        &["intolerance"],
        &["intolerant"],
        &["intolerance"],
        &["intolerant"],
        &["intolerance"],
        &["intolerance"],
        &["intolerant"],
        &["intolerance"],
        &["intolerant"],
        &["introduce"],
        &["introduced"],
        &["introduces"],
        &["introducing"],
        &["introduction"],
        &["introductory"],
        &["introvert"],
        &["introverted"],
        &["introverts"],
        &["intoxication"],
        &["intoxication"],
        &["intoxication"],
        &["intoxicated"],
        &["intoxicated"],
        &["intoxication"],
        &["intoxicated"],
    ],
    range: 5..=8,
};

static WORD_INTI_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_INTI_CHILDREN),
    value: None,
};

pub static WORD_INTI_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("al"),
        dictgen::InsensitiveStr::Ascii("ally"),
        dictgen::InsensitiveStr::Ascii("cracies"),
        dictgen::InsensitiveStr::Ascii("crate"),
        dictgen::InsensitiveStr::Ascii("dimate"),
        dictgen::InsensitiveStr::Ascii("dimation"),
        dictgen::InsensitiveStr::Ascii("ials"),
        dictgen::InsensitiveStr::Ascii("llectual"),
        dictgen::InsensitiveStr::Ascii("llectually"),
        dictgen::InsensitiveStr::Ascii("llectuals"),
        dictgen::InsensitiveStr::Ascii("madate"),
        dictgen::InsensitiveStr::Ascii("madated"),
        dictgen::InsensitiveStr::Ascii("matley"),
        dictgen::InsensitiveStr::Ascii("maty"),
        dictgen::InsensitiveStr::Ascii("miated"),
        dictgen::InsensitiveStr::Ascii("midacion"),
        dictgen::InsensitiveStr::Ascii("midad"),
        dictgen::InsensitiveStr::Ascii("midade"),
        dictgen::InsensitiveStr::Ascii("midades"),
        dictgen::InsensitiveStr::Ascii("midant"),
        dictgen::InsensitiveStr::Ascii("midante"),
        dictgen::InsensitiveStr::Ascii("midare"),
        dictgen::InsensitiveStr::Ascii("midatie"),
        dictgen::InsensitiveStr::Ascii("midatin"),
        dictgen::InsensitiveStr::Ascii("midative"),
        dictgen::InsensitiveStr::Ascii("midaton"),
        dictgen::InsensitiveStr::Ascii("mide"),
        dictgen::InsensitiveStr::Ascii("midiate"),
        dictgen::InsensitiveStr::Ascii("minated"),
        dictgen::InsensitiveStr::Ascii("mitade"),
        dictgen::InsensitiveStr::Ascii("mitaded"),
        dictgen::InsensitiveStr::Ascii("mitading"),
        dictgen::InsensitiveStr::Ascii("mitaly"),
        dictgen::InsensitiveStr::Ascii("mitate"),
        dictgen::InsensitiveStr::Ascii("mitated"),
        dictgen::InsensitiveStr::Ascii("mitating"),
        dictgen::InsensitiveStr::Ascii("mitation"),
        dictgen::InsensitiveStr::Ascii("mitely"),
        dictgen::InsensitiveStr::Ascii("rcate"),
        dictgen::InsensitiveStr::Ascii("ution"),
        dictgen::InsensitiveStr::Ascii("utive"),
        dictgen::InsensitiveStr::Ascii("utively"),
    ],
    values: &[
        &["initial"],
        &["initially"],
        &["intricacies"],
        &["intricate"],
        &["intimidate"],
        &["intimidation"],
        &["initials"],
        &["intellectual"],
        &["intellectually"],
        &["intellectuals"],
        &["intimidate"],
        &["intimidated"],
        &["intimately"],
        &["intimately"],
        &["intimidate"],
        &["intimidation"],
        &["intimidated"],
        &["intimidated"],
        &["intimidated"],
        &["intimidate"],
        &["intimidate"],
        &["intimidate"],
        &["intimidated"],
        &["intimidation"],
        &["intimidate"],
        &["intimidation"],
        &["intimidate"],
        &["intimidate"],
        &["intimidated"],
        &["intimidated"],
        &["intimidated"],
        &["intimidating"],
        &["intimately"],
        &["intimidate"],
        &["intimidated"],
        &["intimidating"],
        &["intimidation"],
        &["intimately"],
        &["intricate"],
        &["intuition"],
        &["intuitive"],
        &["intuitively"],
    ],
    range: 2..=10,
};

static WORD_INTE_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_INTE_CHILDREN),
    value: None,
};

static WORD_INTE_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    None,
    None,
    None,
    None,
    None,
    Some(&WORD_INTEF_NODE),
    Some(&WORD_INTEG_NODE),
    None,
    None,
    None,
    None,
    Some(&WORD_INTEL_NODE),
    None,
    Some(&WORD_INTEN_NODE),
    None,
    Some(&WORD_INTEP_NODE),
    None,
    Some(&WORD_INTER_NODE),
    Some(&WORD_INTES_NODE),
    None,
    None,
    Some(&WORD_INTEV_NODE),
    None,
    None,
    None,
    None,
];

static WORD_INTEV_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_INTEV_CHILDREN),
    value: None,
};

pub static WORD_INTEV_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("ene")],
    values: &[&["intervene"]],
    range: 3..=3,
};

static WORD_INTES_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_INTES_CHILDREN),
    value: None,
};

pub static WORD_INTES_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("nely"),
        dictgen::InsensitiveStr::Ascii("nity"),
        dictgen::InsensitiveStr::Ascii("tents"),
        dictgen::InsensitiveStr::Ascii("tinas"),
        dictgen::InsensitiveStr::Ascii("tinces"),
        dictgen::InsensitiveStr::Ascii("tinos"),
        dictgen::InsensitiveStr::Ascii("tins"),
        dictgen::InsensitiveStr::Ascii("tions"),
    ],
    values: &[
        &["intensely"],
        &["intensity"],
        &["intestines"],
        &["intestines"],
        &["intestines"],
        &["intestines"],
        &["intestines"],
        &["intestines"],
    ],
    range: 4..=6,
};

static WORD_INTER_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_INTER_CHILDREN),
    value: None,
};

static WORD_INTER_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    Some(&WORD_INTERA_NODE),
    Some(&WORD_INTERB_NODE),
    Some(&WORD_INTERC_NODE),
    None,
    Some(&WORD_INTERE_NODE),
    Some(&WORD_INTERF_NODE),
    Some(&WORD_INTERG_NODE),
    None,
    Some(&WORD_INTERI_NODE),
    None,
    None,
    Some(&WORD_INTERL_NODE),
    Some(&WORD_INTERM_NODE),
    Some(&WORD_INTERN_NODE),
    None,
    Some(&WORD_INTERP_NODE),
    None,
    Some(&WORD_INTERR_NODE),
    Some(&WORD_INTERS_NODE),
    Some(&WORD_INTERT_NODE),
    Some(&WORD_INTERU_NODE),
    Some(&WORD_INTERV_NODE),
    Some(&WORD_INTERW_NODE),
    None,
    None,
    None,
];

static WORD_INTERW_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_INTERW_CHILDREN),
    value: None,
};

pub static WORD_INTERW_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ebbs"),
        dictgen::InsensitiveStr::Ascii("ebers"),
        dictgen::InsensitiveStr::Ascii("iever"),
    ],
    values: &[&["interwebs"], &["interwebs"], &["interviewer"]],
    range: 4..=5,
};

static WORD_INTERV_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_INTERV_CHILDREN),
    value: None,
};

pub static WORD_INTERV_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("alles"),
        dictgen::InsensitiveStr::Ascii("alls"),
        dictgen::InsensitiveStr::Ascii("alos"),
        dictgen::InsensitiveStr::Ascii("ation"),
        dictgen::InsensitiveStr::Ascii("een"),
        dictgen::InsensitiveStr::Ascii("eign"),
        dictgen::InsensitiveStr::Ascii("eing"),
        dictgen::InsensitiveStr::Ascii("eiwed"),
        dictgen::InsensitiveStr::Ascii("eiwer"),
        dictgen::InsensitiveStr::Ascii("eiwing"),
        dictgen::InsensitiveStr::Ascii("eiws"),
        dictgen::InsensitiveStr::Ascii("encion"),
        dictgen::InsensitiveStr::Ascii("eneing"),
        dictgen::InsensitiveStr::Ascii("enion"),
        dictgen::InsensitiveStr::Ascii("enire"),
        dictgen::InsensitiveStr::Ascii("ension"),
        dictgen::InsensitiveStr::Ascii("entie"),
        dictgen::InsensitiveStr::Ascii("ento"),
        dictgen::InsensitiveStr::Ascii("enue"),
        dictgen::InsensitiveStr::Ascii("eres"),
        dictgen::InsensitiveStr::Ascii("ewing"),
        dictgen::InsensitiveStr::Ascii("ied"),
        dictgen::InsensitiveStr::Ascii("iened"),
        dictgen::InsensitiveStr::Ascii("ieni"),
        dictgen::InsensitiveStr::Ascii("iening"),
        dictgen::InsensitiveStr::Ascii("ier"),
        dictgen::InsensitiveStr::Ascii("ies"),
        dictgen::InsensitiveStr::Ascii("ieuw"),
        dictgen::InsensitiveStr::Ascii("iewd"),
        dictgen::InsensitiveStr::Ascii("iewes"),
        dictgen::InsensitiveStr::Ascii("iewie"),
        dictgen::InsensitiveStr::Ascii("iewr"),
        dictgen::InsensitiveStr::Ascii("ines"),
        dictgen::InsensitiveStr::Ascii("ining"),
        dictgen::InsensitiveStr::Ascii("iwed"),
        dictgen::InsensitiveStr::Ascii("iwer"),
    ],
    values: &[
        &["intervals"],
        &["intervals"],
        &["intervals"],
        &["integration"],
        &["intervene"],
        &["intervening"],
        &["intervening"],
        &["interviewed"],
        &["interviewer"],
        &["interviewing"],
        &["interviews"],
        &["intervention"],
        &["intervening"],
        &["intervening"],
        &["intervene"],
        &["intervention"],
        &["intervene"],
        &["intervention"],
        &["intervene"],
        &["interferes"],
        &["intervening"],
        &["interviewed"],
        &["interviewed"],
        &["interviewing"],
        &["interviewing"],
        &["interviewer"],
        &["interviews"],
        &["interviews"],
        &["interviewed"],
        &["interviews"],
        &["interviewer"],
        &["interviewer"],
        &["intervenes"],
        &["intervening"],
        &["interviewed"],
        &["interviewer"],
    ],
    range: 3..=6,
};

static WORD_INTERU_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_INTERU_CHILDREN),
    value: None,
};

pub static WORD_INTERU_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("pt")],
    values: &[&["interrupt"]],
    range: 2..=2,
};

static WORD_INTERT_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_INTERT_CHILDREN),
    value: None,
};

pub static WORD_INTERT_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ained"),
        dictgen::InsensitiveStr::Ascii("aining"),
        dictgen::InsensitiveStr::Ascii("ainment"),
        dictgen::InsensitiveStr::Ascii("vined"),
        dictgen::InsensitiveStr::Ascii("winded"),
        dictgen::InsensitiveStr::Ascii("winned"),
        dictgen::InsensitiveStr::Ascii("wyned"),
    ],
    values: &[
        &["intertwined"],
        &["entertaining"],
        &["entertainment"],
        &["intertwined"],
        &["intertwined"],
        &["intertwined"],
        &["intertwined"],
    ],
    range: 5..=7,
};

static WORD_INTERS_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_INTERS_CHILDREN),
    value: None,
};

pub static WORD_INTERS_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("eccion"),
        dictgen::InsensitiveStr::Ascii("eciton"),
        dictgen::InsensitiveStr::Ascii("ectionals"),
        dictgen::InsensitiveStr::Ascii("ecton"),
        dictgen::InsensitiveStr::Ascii("eption"),
        dictgen::InsensitiveStr::Ascii("etllar"),
        dictgen::InsensitiveStr::Ascii("tae"),
        dictgen::InsensitiveStr::Ascii("tallar"),
        dictgen::InsensitiveStr::Ascii("taller"),
        dictgen::InsensitiveStr::Ascii("te"),
        dictgen::InsensitiveStr::Ascii("tela"),
        dictgen::InsensitiveStr::Ascii("telar"),
        dictgen::InsensitiveStr::Ascii("tellaire"),
        dictgen::InsensitiveStr::Ascii("teller"),
        dictgen::InsensitiveStr::Ascii("tellor"),
    ],
    values: &[
        &["intersection"],
        &["intersections"],
        &["intersections"],
        &["intersection"],
        &["interception"],
        &["interstellar"],
        &["interstate"],
        &["interstellar"],
        &["interstellar"],
        &["interstate"],
        &["interstellar"],
        &["interstellar"],
        &["interstellar"],
        &["interstellar"],
        &["interstellar"],
    ],
    range: 2..=9,
};

static WORD_INTERR_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_INTERR_CHILDREN),
    value: None,
};

pub static WORD_INTERR_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("accial"),
        dictgen::InsensitiveStr::Ascii("actial"),
        dictgen::InsensitiveStr::Ascii("agation"),
        dictgen::InsensitiveStr::Ascii("atial"),
        dictgen::InsensitiveStr::Ascii("egation"),
        dictgen::InsensitiveStr::Ascii("esing"),
        dictgen::InsensitiveStr::Ascii("igation"),
        dictgen::InsensitiveStr::Ascii("im"),
        dictgen::InsensitiveStr::Ascii("o"),
        dictgen::InsensitiveStr::Ascii("ogacion"),
        dictgen::InsensitiveStr::Ascii("ogatin"),
        dictgen::InsensitiveStr::Ascii("ogativo"),
        dictgen::InsensitiveStr::Ascii("ogato"),
        dictgen::InsensitiveStr::Ascii("puted"),
        dictgen::InsensitiveStr::Ascii("ugum"),
        dictgen::InsensitiveStr::Ascii("umping"),
        dictgen::InsensitiveStr::Ascii("uped"),
        dictgen::InsensitiveStr::Ascii("uping"),
        dictgen::InsensitiveStr::Ascii("ups"),
        dictgen::InsensitiveStr::Ascii("upteds"),
        dictgen::InsensitiveStr::Ascii("uptes"),
        dictgen::InsensitiveStr::Ascii("uptis"),
        dictgen::InsensitiveStr::Ascii("uptors"),
    ],
    values: &[
        &["interracial"],
        &["interracial"],
        &["interrogation"],
        &["interracial"],
        &["interrogation"],
        &["interfering"],
        &["interrogation"],
        &["interim"],
        &["interior"],
        &["interrogation"],
        &["interrogation"],
        &["interrogation"],
        &["interrogation"],
        &["interrupted"],
        &["interregnum"],
        &["interrupting"],
        &["interrupted"],
        &["interrupting"],
        &["interrupts"],
        &["interrupts"],
        &["interrupts"],
        &["interrupts"],
        &["interrupts"],
    ],
    range: 1..=7,
};

static WORD_INTERP_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_INTERP_CHILDREN),
    value: None,
};

pub static WORD_INTERP_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ersonel"),
        dictgen::InsensitiveStr::Ascii("ersonnal"),
        dictgen::InsensitiveStr::Ascii("ert"),
        dictgen::InsensitiveStr::Ascii("ertation"),
        dictgen::InsensitiveStr::Ascii("ertations"),
        dictgen::InsensitiveStr::Ascii("erted"),
        dictgen::InsensitiveStr::Ascii("erter"),
        dictgen::InsensitiveStr::Ascii("erters"),
        dictgen::InsensitiveStr::Ascii("erting"),
        dictgen::InsensitiveStr::Ascii("et"),
        dictgen::InsensitiveStr::Ascii("ratation"),
        dictgen::InsensitiveStr::Ascii("ratations"),
        dictgen::InsensitiveStr::Ascii("rate"),
        dictgen::InsensitiveStr::Ascii("rating"),
        dictgen::InsensitiveStr::Ascii("rered"),
        dictgen::InsensitiveStr::Ascii("resonal"),
        dictgen::InsensitiveStr::Ascii("retacion"),
        dictgen::InsensitiveStr::Ascii("retaciones"),
        dictgen::InsensitiveStr::Ascii("retaion"),
        dictgen::InsensitiveStr::Ascii("retaiton"),
        dictgen::InsensitiveStr::Ascii("retare"),
        dictgen::InsensitiveStr::Ascii("retarea"),
        dictgen::InsensitiveStr::Ascii("retarem"),
        dictgen::InsensitiveStr::Ascii("retares"),
        dictgen::InsensitiveStr::Ascii("retarse"),
        dictgen::InsensitiveStr::Ascii("retarte"),
        dictgen::InsensitiveStr::Ascii("retatin"),
        dictgen::InsensitiveStr::Ascii("retating"),
        dictgen::InsensitiveStr::Ascii("retationen"),
        dictgen::InsensitiveStr::Ascii("retato"),
        dictgen::InsensitiveStr::Ascii("reteer"),
        dictgen::InsensitiveStr::Ascii("reteert"),
        dictgen::InsensitiveStr::Ascii("retier"),
        dictgen::InsensitiveStr::Ascii("retion"),
        dictgen::InsensitiveStr::Ascii("retor"),
        dictgen::InsensitiveStr::Ascii("retter"),
        dictgen::InsensitiveStr::Ascii("ritation"),
        dictgen::InsensitiveStr::Ascii("ritations"),
        dictgen::InsensitiveStr::Ascii("riting"),
        dictgen::InsensitiveStr::Ascii("rut"),
    ],
    values: &[
        &["interpersonal"],
        &["interpersonal"],
        &["interpret"],
        &["interpretation"],
        &["interpretations"],
        &["interpreted"],
        &["interpreter"],
        &["interpreter"],
        &["interpreting"],
        &["interpret"],
        &["interpretation"],
        &["interpretations"],
        &["interpret"],
        &["interpreting"],
        &["interpreter"],
        &["interpersonal"],
        &["interpretation"],
        &["interpretations"],
        &["interpretation"],
        &["interpretations"],
        &["interpreter"],
        &["interpreter"],
        &["interpreter"],
        &["interpreter"],
        &["interpreter"],
        &["interpreter"],
        &["interpretations"],
        &["interpretation"],
        &["interpretations"],
        &["interpretation"],
        &["interpreter"],
        &["interpreter"],
        &["interpreter"],
        &["interpreting"],
        &["interpreter"],
        &["interpreter"],
        &["interpretation"],
        &["interpretations"],
        &["interpreting"],
        &["interrupt"],
    ],
    range: 2..=10,
};

static WORD_INTERN_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_INTERN_CHILDREN),
    value: None,
};

pub static WORD_INTERN_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("acional"),
        dictgen::InsensitiveStr::Ascii("atinal"),
        dictgen::InsensitiveStr::Ascii("ation"),
        dictgen::InsensitiveStr::Ascii("ationaal"),
        dictgen::InsensitiveStr::Ascii("ationaly"),
        dictgen::InsensitiveStr::Ascii("ationl"),
        dictgen::InsensitiveStr::Ascii("ationnal"),
        dictgen::InsensitiveStr::Ascii("ationnally"),
        dictgen::InsensitiveStr::Ascii("ations"),
        dictgen::InsensitiveStr::Ascii("ediate"),
        dictgen::InsensitiveStr::Ascii("elized"),
        dictgen::InsensitiveStr::Ascii("est"),
        dictgen::InsensitiveStr::Ascii("etbs"),
        dictgen::InsensitiveStr::Ascii("eters"),
        dictgen::InsensitiveStr::Ascii("etes"),
        dictgen::InsensitiveStr::Ascii("etese"),
        dictgen::InsensitiveStr::Ascii("etest"),
        dictgen::InsensitiveStr::Ascii("eting"),
        dictgen::InsensitiveStr::Ascii("etis"),
        dictgen::InsensitiveStr::Ascii("etors"),
        dictgen::InsensitiveStr::Ascii("ettes"),
        dictgen::InsensitiveStr::Ascii("etts"),
        dictgen::InsensitiveStr::Ascii("etus"),
        dictgen::InsensitiveStr::Ascii("ilized"),
        dictgen::InsensitiveStr::Ascii("t"),
        dictgen::InsensitiveStr::Ascii("ts"),
        dictgen::InsensitiveStr::Ascii("us"),
    ],
    values: &[
        &["international"],
        &["international"],
        &["international"],
        &["international"],
        &["internationally"],
        &["international"],
        &["international"],
        &["internationally"],
        &["interactions"],
        &["intermediate"],
        &["internalized"],
        &["internets"],
        &["internets"],
        &["internets"],
        &["internets"],
        &["internets"],
        &["internets"],
        &["interesting"],
        &["internets"],
        &["internets"],
        &["internets"],
        &["internets"],
        &["internets"],
        &["internalized"],
        &["internet"],
        &["interns"],
        &["interns"],
    ],
    range: 1..=10,
};

static WORD_INTERM_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_INTERM_CHILDREN),
    value: Some(&["interim"]),
};

pub static WORD_INTERM_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("edate"),
        dictgen::InsensitiveStr::Ascii("ediare"),
        dictgen::InsensitiveStr::Ascii("edie"),
        dictgen::InsensitiveStr::Ascii("ediete"),
        dictgen::InsensitiveStr::Ascii("edite"),
        dictgen::InsensitiveStr::Ascii("ettent"),
        dictgen::InsensitiveStr::Ascii("ideate"),
        dictgen::InsensitiveStr::Ascii("idiate"),
        dictgen::InsensitiveStr::Ascii("itent"),
        dictgen::InsensitiveStr::Ascii("ittient"),
        dictgen::InsensitiveStr::Ascii("ittment"),
    ],
    values: &[
        &["intermediate"],
        &["intermediate"],
        &["intermediate"],
        &["intermediate"],
        &["intermediate"],
        &["intermittent"],
        &["intermediate"],
        &["intermediate"],
        &["intermittent"],
        &["intermittent"],
        &["intermittent"],
    ],
    range: 4..=7,
};

static WORD_INTERL_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_INTERL_CHILDREN),
    value: None,
};

pub static WORD_INTERL_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ectual"),
        dictgen::InsensitiveStr::Ascii("ectually"),
        dictgen::InsensitiveStr::Ascii("ectuals"),
    ],
    values: &[&["intellectual"], &["intellectually"], &["intellectuals"]],
    range: 6..=8,
};

static WORD_INTERI_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_INTERI_CHILDREN),
    value: None,
};

pub static WORD_INTERI_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("oara"),
        dictgen::InsensitiveStr::Ascii("oare"),
        dictgen::InsensitiveStr::Ascii("our"),
    ],
    values: &[&["interior"], &["interior"], &["interior"]],
    range: 3..=4,
};

static WORD_INTERG_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_INTERG_CHILDREN),
    value: None,
};

pub static WORD_INTERG_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("al"),
        dictgen::InsensitiveStr::Ascii("ate"),
        dictgen::InsensitiveStr::Ascii("ated"),
        dictgen::InsensitiveStr::Ascii("ation"),
        dictgen::InsensitiveStr::Ascii("ity"),
        dictgen::InsensitiveStr::Ascii("rated"),
        dictgen::InsensitiveStr::Ascii("ration"),
    ],
    values: &[
        &["integral"],
        &["integrate"],
        &["integrated"],
        &["integration"],
        &["integrity"],
        &["integrated"],
        &["integration"],
    ],
    range: 2..=6,
};

static WORD_INTERF_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_INTERF_CHILDREN),
    value: None,
};

pub static WORD_INTERF_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("acce"),
        dictgen::InsensitiveStr::Ascii("ase"),
        dictgen::InsensitiveStr::Ascii("ce"),
        dictgen::InsensitiveStr::Ascii("ears"),
        dictgen::InsensitiveStr::Ascii("eer"),
        dictgen::InsensitiveStr::Ascii("eers"),
        dictgen::InsensitiveStr::Ascii("erance"),
        dictgen::InsensitiveStr::Ascii("erce"),
        dictgen::InsensitiveStr::Ascii("erece"),
        dictgen::InsensitiveStr::Ascii("ereing"),
        dictgen::InsensitiveStr::Ascii("erens"),
        dictgen::InsensitiveStr::Ascii("erire"),
        dictgen::InsensitiveStr::Ascii("erisce"),
        dictgen::InsensitiveStr::Ascii("erisse"),
        dictgen::InsensitiveStr::Ascii("ernce"),
        dictgen::InsensitiveStr::Ascii("erre"),
        dictgen::InsensitiveStr::Ascii("erred"),
        dictgen::InsensitiveStr::Ascii("erres"),
        dictgen::InsensitiveStr::Ascii("erring"),
        dictgen::InsensitiveStr::Ascii("ers"),
    ],
    values: &[
        &["interfaces"],
        &["interfaces"],
        &["interface"],
        &["interferes"],
        &["interfere"],
        &["interferes"],
        &["interference"],
        &["interferes"],
        &["interference"],
        &["interfering"],
        &["interferes"],
        &["interfere"],
        &["interferes"],
        &["interferes"],
        &["interference"],
        &["interfere"],
        &["interfere"],
        &["interferes"],
        &["interfering"],
        &["interferes"],
    ],
    range: 2..=6,
};

static WORD_INTERE_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_INTERE_CHILDREN),
    value: None,
};

pub static WORD_INTERE_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("action"),
        dictgen::InsensitiveStr::Ascii("actions"),
        dictgen::InsensitiveStr::Ascii("acts"),
        dictgen::InsensitiveStr::Ascii("ct"),
        dictgen::InsensitiveStr::Ascii("cted"),
        dictgen::InsensitiveStr::Ascii("cting"),
        dictgen::InsensitiveStr::Ascii("ction"),
        dictgen::InsensitiveStr::Ascii("ctions"),
        dictgen::InsensitiveStr::Ascii("d"),
        dictgen::InsensitiveStr::Ascii("fers"),
        dictgen::InsensitiveStr::Ascii("lated"),
        dictgen::InsensitiveStr::Ascii("nt"),
        dictgen::InsensitiveStr::Ascii("nts"),
        dictgen::InsensitiveStr::Ascii("rsted"),
        dictgen::InsensitiveStr::Ascii("rsting"),
        dictgen::InsensitiveStr::Ascii("sant"),
        dictgen::InsensitiveStr::Ascii("sat"),
        dictgen::InsensitiveStr::Ascii("sction"),
        dictgen::InsensitiveStr::Ascii("sctions"),
        dictgen::InsensitiveStr::Ascii("se"),
        dictgen::InsensitiveStr::Ascii("sing"),
        dictgen::InsensitiveStr::Ascii("sring"),
        dictgen::InsensitiveStr::Ascii("sst"),
        dictgen::InsensitiveStr::Ascii("ssted"),
        dictgen::InsensitiveStr::Ascii("stes"),
        dictgen::InsensitiveStr::Ascii("stigly"),
        dictgen::InsensitiveStr::Ascii("stinly"),
        dictgen::InsensitiveStr::Ascii("t"),
        dictgen::InsensitiveStr::Ascii("wbs"),
    ],
    values: &[
        &["intersection"],
        &["intersections"],
        &["interfaces"],
        &["interacted"],
        &["interacted"],
        &["interacting"],
        &["interaction"],
        &["interactions"],
        &["interred"],
        &["interferes"],
        &["interrelated"],
        &["internet"],
        &["internets"],
        &["interpreted"],
        &["interpreting"],
        &["interest"],
        &["interest"],
        &["intersection"],
        &["intersections"],
        &["interested"],
        &["interesting"],
        &["interfering"],
        &["interests"],
        &["interested"],
        &["interests"],
        &["interestingly"],
        &["interestingly"],
        &["interest"],
        &["interwebs"],
    ],
    range: 1..=7,
};

static WORD_INTERC_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_INTERC_CHILDREN),
    value: None,
};

pub static WORD_INTERC_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ation"),
        dictgen::InsensitiveStr::Ascii("ection"),
        dictgen::InsensitiveStr::Ascii("epcion"),
        dictgen::InsensitiveStr::Ascii("epticons"),
        dictgen::InsensitiveStr::Ascii("eptin"),
        dictgen::InsensitiveStr::Ascii("epto"),
        dictgen::InsensitiveStr::Ascii("eptons"),
        dictgen::InsensitiveStr::Ascii("hangable"),
        dictgen::InsensitiveStr::Ascii("hangabley"),
        dictgen::InsensitiveStr::Ascii("hangably"),
        dictgen::InsensitiveStr::Ascii("hangeablely"),
        dictgen::InsensitiveStr::Ascii("hangeabley"),
        dictgen::InsensitiveStr::Ascii("hangeablity"),
        dictgen::InsensitiveStr::Ascii("hangebale"),
        dictgen::InsensitiveStr::Ascii("hangeble"),
        dictgen::InsensitiveStr::Ascii("hangebly"),
        dictgen::InsensitiveStr::Ascii("oarse"),
        dictgen::InsensitiveStr::Ascii("ontinential"),
        dictgen::InsensitiveStr::Ascii("ontinetal"),
        dictgen::InsensitiveStr::Ascii("orse"),
        dictgen::InsensitiveStr::Ascii("ource"),
        dictgen::InsensitiveStr::Ascii("ouse"),
    ],
    values: &[
        &["integration"],
        &["interception"],
        &["interception"],
        &["interceptions"],
        &["interception"],
        &["interception"],
        &["interceptions"],
        &["interchangeable"],
        &["interchangeably"],
        &["interchangeably"],
        &["interchangeably"],
        &["interchangeably"],
        &["interchangeably"],
        &["interchangeable"],
        &["interchangeable"],
        &["interchangeably"],
        &["intercourse"],
        &["intercontinental"],
        &["intercontinental"],
        &["intercourse"],
        &["intercourse"],
        &["intercourse"],
    ],
    range: 4..=11,
};

static WORD_INTERB_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_INTERB_CHILDREN),
    value: None,
};

pub static WORD_INTERB_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("read")],
    values: &[&["interbreed"]],
    range: 4..=4,
};

static WORD_INTERA_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_INTERA_CHILDREN),
    value: None,
};

pub static WORD_INTERA_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ccion"),
        dictgen::InsensitiveStr::Ascii("ce"),
        dictgen::InsensitiveStr::Ascii("cive"),
        dictgen::InsensitiveStr::Ascii("cs"),
        dictgen::InsensitiveStr::Ascii("cte"),
        dictgen::InsensitiveStr::Ascii("ctes"),
        dictgen::InsensitiveStr::Ascii("ctice"),
        dictgen::InsensitiveStr::Ascii("ctie"),
        dictgen::InsensitiveStr::Ascii("cties"),
        dictgen::InsensitiveStr::Ascii("ctifs"),
        dictgen::InsensitiveStr::Ascii("ctins"),
        dictgen::InsensitiveStr::Ascii("ctios"),
        dictgen::InsensitiveStr::Ascii("ctivo"),
        dictgen::InsensitiveStr::Ascii("ctons"),
        dictgen::InsensitiveStr::Ascii("ctue"),
        dictgen::InsensitiveStr::Ascii("ktion"),
        dictgen::InsensitiveStr::Ascii("ktive"),
        dictgen::InsensitiveStr::Ascii("sted"),
        dictgen::InsensitiveStr::Ascii("sting"),
        dictgen::InsensitiveStr::Ascii("tellar"),
        dictgen::InsensitiveStr::Ascii("tional"),
    ],
    values: &[
        &["interaction"],
        &["interacted"],
        &["interactive"],
        &["interacts"],
        &["interactive"],
        &["interacts"],
        &["interactive"],
        &["interactive"],
        &["interacts"],
        &["interacts"],
        &["interacts"],
        &["interacts"],
        &["interaction"],
        &["interacts"],
        &["interacted"],
        &["interaction"],
        &["interactive"],
        &["interacted"],
        &["interacting"],
        &["interstellar"],
        &["international"],
    ],
    range: 2..=6,
};

static WORD_INTEP_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_INTEP_CHILDREN),
    value: None,
};

pub static WORD_INTEP_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("retation"),
        dictgen::InsensitiveStr::Ascii("retator"),
    ],
    values: &[&["interpretation"], &["interpretor"]],
    range: 7..=8,
};

static WORD_INTEN_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_INTEN_CHILDREN),
    value: None,
};

pub static WORD_INTEN_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ational"),
        dictgen::InsensitiveStr::Ascii("cional"),
        dictgen::InsensitiveStr::Ascii("des"),
        dictgen::InsensitiveStr::Ascii("dos"),
        dictgen::InsensitiveStr::Ascii("isty"),
        dictgen::InsensitiveStr::Ascii("seley"),
        dictgen::InsensitiveStr::Ascii("sitiy"),
        dictgen::InsensitiveStr::Ascii("sley"),
        dictgen::InsensitiveStr::Ascii("st"),
        dictgen::InsensitiveStr::Ascii("tas"),
        dictgen::InsensitiveStr::Ascii("ted"),
        dictgen::InsensitiveStr::Ascii("tinal"),
        dictgen::InsensitiveStr::Ascii("tines"),
        dictgen::InsensitiveStr::Ascii("tionly"),
        dictgen::InsensitiveStr::Ascii("tionnal"),
    ],
    values: &[
        &["international"],
        &["intentional"],
        &["intends"],
        &["intends"],
        &["intensity"],
        &["intensely"],
        &["intensity"],
        &["intensely"],
        &["intents"],
        &["intents"],
        &["intended"],
        &["intentional"],
        &["intestines"],
        &["intentional"],
        &["intentional"],
    ],
    range: 2..=7,
};

static WORD_INTEL_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_INTEL_CHILDREN),
    value: None,
};

pub static WORD_INTEL_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ectual"),
        dictgen::InsensitiveStr::Ascii("elctual"),
        dictgen::InsensitiveStr::Ascii("elctuals"),
        dictgen::InsensitiveStr::Ascii("igence"),
        dictgen::InsensitiveStr::Ascii("igent"),
        dictgen::InsensitiveStr::Ascii("lectals"),
        dictgen::InsensitiveStr::Ascii("lectaul"),
        dictgen::InsensitiveStr::Ascii("lectualis"),
        dictgen::InsensitiveStr::Ascii("lectualisme"),
        dictgen::InsensitiveStr::Ascii("lectualls"),
        dictgen::InsensitiveStr::Ascii("lectualy"),
        dictgen::InsensitiveStr::Ascii("lectuel"),
        dictgen::InsensitiveStr::Ascii("lectuels"),
        dictgen::InsensitiveStr::Ascii("lectul"),
        dictgen::InsensitiveStr::Ascii("lectus"),
        dictgen::InsensitiveStr::Ascii("lecual"),
        dictgen::InsensitiveStr::Ascii("lecutal"),
        dictgen::InsensitiveStr::Ascii("lecutally"),
        dictgen::InsensitiveStr::Ascii("lecutals"),
        dictgen::InsensitiveStr::Ascii("legent"),
        dictgen::InsensitiveStr::Ascii("legently"),
        dictgen::InsensitiveStr::Ascii("ligance"),
        dictgen::InsensitiveStr::Ascii("ligant"),
        dictgen::InsensitiveStr::Ascii("ligenly"),
        dictgen::InsensitiveStr::Ascii("ligente"),
        dictgen::InsensitiveStr::Ascii("ligenty"),
        dictgen::InsensitiveStr::Ascii("ligient"),
        dictgen::InsensitiveStr::Ascii("luctuals"),
    ],
    values: &[
        &["intellectual"],
        &["intellectuals"],
        &["intellectuals"],
        &["intelligence"],
        &["intelligent"],
        &["intellectuals"],
        &["intellectuals"],
        &["intellectuals"],
        &["intellectuals"],
        &["intellectuals"],
        &["intellectually"],
        &["intellectual"],
        &["intellectuals"],
        &["intellectuals"],
        &["intellectuals"],
        &["intellectual"],
        &["intellectual"],
        &["intellectually"],
        &["intellectuals"],
        &["intelligent"],
        &["intelligently"],
        &["intelligence"],
        &["intelligent"],
        &["intelligently"],
        &["intelligence"],
        &["intelligently"],
        &["intelligent"],
        &["intellectuals"],
    ],
    range: 5..=11,
};

static WORD_INTEG_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_INTEG_CHILDREN),
    value: None,
};

pub static WORD_INTEG_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("irty"),
        dictgen::InsensitiveStr::Ascii("raal"),
        dictgen::InsensitiveStr::Ascii("racion"),
        dictgen::InsensitiveStr::Ascii("rade"),
        dictgen::InsensitiveStr::Ascii("raded"),
        dictgen::InsensitiveStr::Ascii("rarla"),
        dictgen::InsensitiveStr::Ascii("rarlo"),
        dictgen::InsensitiveStr::Ascii("ratie"),
        dictgen::InsensitiveStr::Ascii("rato"),
        dictgen::InsensitiveStr::Ascii("ratron"),
        dictgen::InsensitiveStr::Ascii("reres"),
        dictgen::InsensitiveStr::Ascii("rering"),
        dictgen::InsensitiveStr::Ascii("reted"),
    ],
    values: &[
        &["integrity"],
        &["integral"],
        &["integration"],
        &["integrated"],
        &["integrated"],
        &["integral"],
        &["integral"],
        &["integrated"],
        &["integration"],
        &["integration"],
        &["interferes"],
        &["interfering"],
        &["integrated"],
    ],
    range: 4..=6,
};

static WORD_INTEF_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_INTEF_CHILDREN),
    value: None,
};

pub static WORD_INTEF_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("erring")],
    values: &[&["interfering"]],
    range: 6..=6,
};

static WORD_INTA_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_INTA_CHILDREN),
    value: None,
};

pub static WORD_INTA_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("micy"),
        dictgen::InsensitiveStr::Ascii("mite"),
        dictgen::InsensitiveStr::Ascii("ngable"),
        dictgen::InsensitiveStr::Ascii("ngeble"),
        dictgen::InsensitiveStr::Ascii("ngiable"),
        dictgen::InsensitiveStr::Ascii("ngibil"),
        dictgen::InsensitiveStr::Ascii("ngibile"),
        dictgen::InsensitiveStr::Ascii("njible"),
        dictgen::InsensitiveStr::Ascii("xication"),
    ],
    values: &[
        &["intimacy"],
        &["intimate"],
        &["intangible"],
        &["intangible"],
        &["intangible"],
        &["intangible"],
        &["intangible"],
        &["intangible"],
        &["intoxication"],
    ],
    range: 4..=8,
};

static WORD_INS_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_INS_CHILDREN),
    value: None,
};

static WORD_INS_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    Some(&WORD_INSA_NODE),
    None,
    Some(&WORD_INSC_NODE),
    None,
    Some(&WORD_INSE_NODE),
    None,
    None,
    None,
    Some(&WORD_INSI_NODE),
    None,
    None,
    Some(&WORD_INSL_NODE),
    Some(&WORD_INSM_NODE),
    None,
    Some(&WORD_INSO_NODE),
    Some(&WORD_INSP_NODE),
    None,
    Some(&WORD_INSR_NODE),
    None,
    Some(&WORD_INST_NODE),
    Some(&WORD_INSU_NODE),
    None,
    None,
    None,
    None,
    None,
];

static WORD_INSU_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_INSU_CHILDREN),
    value: None,
};

pub static WORD_INSU_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("alted"),
        dictgen::InsensitiveStr::Ascii("bstantiated"),
        dictgen::InsensitiveStr::Ascii("ccessful"),
        dictgen::InsensitiveStr::Ascii("fficent"),
        dictgen::InsensitiveStr::Ascii("fficiant"),
        dictgen::InsensitiveStr::Ascii("ffucient"),
        dictgen::InsensitiveStr::Ascii("inating"),
        dictgen::InsensitiveStr::Ascii("ltas"),
        dictgen::InsensitiveStr::Ascii("ltes"),
        dictgen::InsensitiveStr::Ascii("ltos"),
        dictgen::InsensitiveStr::Ascii("niating"),
        dictgen::InsensitiveStr::Ascii("rence"),
        dictgen::InsensitiveStr::Ascii("rgance"),
        dictgen::InsensitiveStr::Ascii("rgancy"),
        dictgen::InsensitiveStr::Ascii("rgencey"),
        dictgen::InsensitiveStr::Ascii("rgeny"),
        dictgen::InsensitiveStr::Ascii("specting"),
        dictgen::InsensitiveStr::Ascii("stainable"),
    ],
    values: &[
        &["insulated"],
        &["unsubstantiated"],
        &["unsuccessful"],
        &["insufficient"],
        &["insufficient"],
        &["insufficient"],
        &["insinuating"],
        &["insults"],
        &["insults"],
        &["insults"],
        &["insinuating"],
        &["insurance"],
        &["insurgency"],
        &["insurgency"],
        &["insurgency"],
        &["insurgency"],
        &["unsuspecting"],
        &["unsustainable"],
    ],
    range: 4..=11,
};

static WORD_INST_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_INST_CHILDREN),
    value: None,
};

static WORD_INST_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    Some(&WORD_INSTA_NODE),
    None,
    None,
    None,
    Some(&WORD_INSTE_NODE),
    None,
    None,
    None,
    Some(&WORD_INSTI_NODE),
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    Some(&WORD_INSTR_NODE),
    None,
    None,
    Some(&WORD_INSTU_NODE),
    None,
    None,
    None,
    None,
    None,
];

static WORD_INSTU_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_INSTU_CHILDREN),
    value: None,
};

pub static WORD_INSTU_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ction"),
        dictgen::InsensitiveStr::Ascii("ments"),
        dictgen::InsensitiveStr::Ascii("rcted"),
        dictgen::InsensitiveStr::Ascii("rction"),
        dictgen::InsensitiveStr::Ascii("rctor"),
        dictgen::InsensitiveStr::Ascii("rctors"),
        dictgen::InsensitiveStr::Ascii("rment"),
        dictgen::InsensitiveStr::Ascii("rmental"),
        dictgen::InsensitiveStr::Ascii("rmentals"),
        dictgen::InsensitiveStr::Ascii("rments"),
        dictgen::InsensitiveStr::Ascii("tionalized"),
        dictgen::InsensitiveStr::Ascii("tions"),
        dictgen::InsensitiveStr::Ascii("tition"),
        dictgen::InsensitiveStr::Ascii("titional"),
        dictgen::InsensitiveStr::Ascii("titionalized"),
        dictgen::InsensitiveStr::Ascii("titions"),
        dictgen::InsensitiveStr::Ascii("tuted"),
        dictgen::InsensitiveStr::Ascii("tution"),
        dictgen::InsensitiveStr::Ascii("tutionalized"),
    ],
    values: &[
        &["instruction"],
        &["instruments"],
        &["instructed"],
        &["instruction"],
        &["instructor"],
        &["instructors"],
        &["instrument"],
        &["instrumental"],
        &["instrumental"],
        &["instruments"],
        &["institutionalized"],
        &["intuitions"],
        &["institution"],
        &["institutional"],
        &["institutionalized"],
        &["institutions"],
        &["instituted"],
        &["institution"],
        &["institutionalized"],
    ],
    range: 5..=12,
};

static WORD_INSTR_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_INSTR_CHILDREN),
    value: None,
};

pub static WORD_INSTR_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ament"),
        dictgen::InsensitiveStr::Ascii("amental"),
        dictgen::InsensitiveStr::Ascii("aments"),
        dictgen::InsensitiveStr::Ascii("cutions"),
        dictgen::InsensitiveStr::Ascii("cutor"),
        dictgen::InsensitiveStr::Ascii("uccion"),
        dictgen::InsensitiveStr::Ascii("ucion"),
        dictgen::InsensitiveStr::Ascii("uciton"),
        dictgen::InsensitiveStr::Ascii("ucitons"),
        dictgen::InsensitiveStr::Ascii("ucter"),
        dictgen::InsensitiveStr::Ascii("ucters"),
        dictgen::InsensitiveStr::Ascii("uctie"),
        dictgen::InsensitiveStr::Ascii("uctior"),
        dictgen::InsensitiveStr::Ascii("uctios"),
        dictgen::InsensitiveStr::Ascii("uctiosn"),
        dictgen::InsensitiveStr::Ascii("uctivo"),
        dictgen::InsensitiveStr::Ascii("uctons"),
        dictgen::InsensitiveStr::Ascii("uctores"),
        dictgen::InsensitiveStr::Ascii("uktion"),
        dictgen::InsensitiveStr::Ascii("uktor"),
        dictgen::InsensitiveStr::Ascii("umenal"),
        dictgen::InsensitiveStr::Ascii("umentos"),
        dictgen::InsensitiveStr::Ascii("umentul"),
        dictgen::InsensitiveStr::Ascii("umetal"),
    ],
    values: &[
        &["instrument"],
        &["instrumental"],
        &["instruments"],
        &["instruction"],
        &["instructors"],
        &["instruction"],
        &["instruction"],
        &["instruction"],
        &["instruction"],
        &["instructor"],
        &["instructors"],
        &["instructed"],
        &["instructor"],
        &["instructors"],
        &["instruction"],
        &["instruction"],
        &["instructors"],
        &["instructors"],
        &["instruction"],
        &["instructor"],
        &["instrumental"],
        &["instruments"],
        &["instrumental"],
        &["instrumental"],
    ],
    range: 5..=7,
};

static WORD_INSTI_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_INSTI_CHILDREN),
    value: None,
};

pub static WORD_INSTI_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("cnt"),
        dictgen::InsensitiveStr::Ascii("cnts"),
        dictgen::InsensitiveStr::Ascii("ncitvely"),
        dictgen::InsensitiveStr::Ascii("ncs"),
        dictgen::InsensitiveStr::Ascii("nctivelly"),
        dictgen::InsensitiveStr::Ascii("nctivley"),
        dictgen::InsensitiveStr::Ascii("nctivly"),
        dictgen::InsensitiveStr::Ascii("nt"),
        dictgen::InsensitiveStr::Ascii("titional"),
        dictgen::InsensitiveStr::Ascii("tucion"),
        dictgen::InsensitiveStr::Ascii("tucionalized"),
        dictgen::InsensitiveStr::Ascii("tude"),
        dictgen::InsensitiveStr::Ascii("tuded"),
        dictgen::InsensitiveStr::Ascii("tue"),
        dictgen::InsensitiveStr::Ascii("tuion"),
        dictgen::InsensitiveStr::Ascii("tutie"),
        dictgen::InsensitiveStr::Ascii("tutiei"),
        dictgen::InsensitiveStr::Ascii("tutionale"),
        dictgen::InsensitiveStr::Ascii("tutionals"),
        dictgen::InsensitiveStr::Ascii("tutionel"),
        dictgen::InsensitiveStr::Ascii("tutionella"),
        dictgen::InsensitiveStr::Ascii("tutionilized"),
        dictgen::InsensitiveStr::Ascii("tutionlized"),
        dictgen::InsensitiveStr::Ascii("tutionnal"),
        dictgen::InsensitiveStr::Ascii("tutionnels"),
        dictgen::InsensitiveStr::Ascii("tuto"),
        dictgen::InsensitiveStr::Ascii("tuttet"),
        dictgen::InsensitiveStr::Ascii("tutue"),
        dictgen::InsensitiveStr::Ascii("tutuion"),
    ],
    values: &[
        &["instinct"],
        &["instincts"],
        &["instinctively"],
        &["instincts"],
        &["instinctively"],
        &["instinctively"],
        &["instinctively"],
        &["instinct"],
        &["institutional"],
        &["institution"],
        &["institutionalized"],
        &["instituted"],
        &["instituted"],
        &["institute"],
        &["institution"],
        &["institute"],
        &["institute"],
        &["institutionalized"],
        &["institutions"],
        &["institutional"],
        &["institutional"],
        &["institutionalized"],
        &["institutionalized"],
        &["institutional"],
        &["institutions"],
        &["institution"],
        &["institute"],
        &["instituted"],
        &["institution"],
    ],
    range: 2..=12,
};

static WORD_INSTE_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_INSTE_CHILDREN),
    value: None,
};

pub static WORD_INSTE_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("lling"),
        dictgen::InsensitiveStr::Ascii("red"),
        dictgen::InsensitiveStr::Ascii("ring"),
    ],
    values: &[&["installing"], &["inserted"], &["inserting"]],
    range: 3..=5,
};

static WORD_INSTA_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_INSTA_CHILDREN),
    value: None,
};

pub static WORD_INSTA_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("biliy"),
        dictgen::InsensitiveStr::Ascii("billity"),
        dictgen::InsensitiveStr::Ascii("bilt"),
        dictgen::InsensitiveStr::Ascii("bilty"),
        dictgen::InsensitiveStr::Ascii("de"),
        dictgen::InsensitiveStr::Ascii("laltion"),
        dictgen::InsensitiveStr::Ascii("lation"),
        dictgen::InsensitiveStr::Ascii("lement"),
        dictgen::InsensitiveStr::Ascii("llatin"),
        dictgen::InsensitiveStr::Ascii("llatons"),
        dictgen::InsensitiveStr::Ascii("llatron"),
        dictgen::InsensitiveStr::Ascii("lleer"),
        dictgen::InsensitiveStr::Ascii("lleert"),
        dictgen::InsensitiveStr::Ascii("llemnt"),
        dictgen::InsensitiveStr::Ascii("llent"),
        dictgen::InsensitiveStr::Ascii("lles"),
        dictgen::InsensitiveStr::Ascii("llesd"),
        dictgen::InsensitiveStr::Ascii("llion"),
        dictgen::InsensitiveStr::Ascii("llling"),
        dictgen::InsensitiveStr::Ascii("llmant"),
        dictgen::InsensitiveStr::Ascii("llus"),
        dictgen::InsensitiveStr::Ascii("nciate"),
        dictgen::InsensitiveStr::Ascii("nse"),
        dictgen::InsensitiveStr::Ascii("ntaenous"),
        dictgen::InsensitiveStr::Ascii("ntaneos"),
        dictgen::InsensitiveStr::Ascii("ntaneoulsy"),
        dictgen::InsensitiveStr::Ascii("ntaneu"),
        dictgen::InsensitiveStr::Ascii("ntaneus"),
        dictgen::InsensitiveStr::Ascii("ntanious"),
        dictgen::InsensitiveStr::Ascii("ntanous"),
        dictgen::InsensitiveStr::Ascii("nteneous"),
        dictgen::InsensitiveStr::Ascii("ntenious"),
        dictgen::InsensitiveStr::Ascii("nty"),
        dictgen::InsensitiveStr::Ascii("tance"),
        dictgen::InsensitiveStr::Ascii("tutionalized"),
    ],
    values: &[
        &["instability"],
        &["instability"],
        &["instability"],
        &["instability"],
        &["instead"],
        &["installations"],
        &["installation"],
        &["installment"],
        &["installations"],
        &["installations"],
        &["installation"],
        &["installer"],
        &["installer"],
        &["installment"],
        &["installment"],
        &["installs"],
        &["installs"],
        &["installing"],
        &["installing"],
        &["installment"],
        &["installs"],
        &["instantiate"],
        &["instances"],
        &["instantaneous"],
        &["instantaneous"],
        &["instantaneous"],
        &["instantaneous"],
        &["instantaneous"],
        &["instantaneous"],
        &["instantaneous"],
        &["instantaneous"],
        &["instantaneous"],
        &["instantly"],
        &["instance"],
        &["institutionalized"],
    ],
    range: 2..=12,
};

static WORD_INSR_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_INSR_CHILDREN),
    value: None,
};

pub static WORD_INSR_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("ugency")],
    values: &[&["insurgency"]],
    range: 6..=6,
};

static WORD_INSP_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_INSP_CHILDREN),
    value: None,
};

pub static WORD_INSP_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("aration"),
        dictgen::InsensitiveStr::Ascii("eccion"),
        dictgen::InsensitiveStr::Ascii("eciton"),
        dictgen::InsensitiveStr::Ascii("ecticon"),
        dictgen::InsensitiveStr::Ascii("ectin"),
        dictgen::InsensitiveStr::Ascii("ectons"),
        dictgen::InsensitiveStr::Ascii("ectoras"),
        dictgen::InsensitiveStr::Ascii("ectres"),
        dictgen::InsensitiveStr::Ascii("ektion"),
        dictgen::InsensitiveStr::Ascii("ektors"),
        dictgen::InsensitiveStr::Ascii("eration"),
        dictgen::InsensitiveStr::Ascii("erational"),
        dictgen::InsensitiveStr::Ascii("iracion"),
        dictgen::InsensitiveStr::Ascii("iraste"),
        dictgen::InsensitiveStr::Ascii("irating"),
        dictgen::InsensitiveStr::Ascii("irationnal"),
        dictgen::InsensitiveStr::Ascii("iraton"),
        dictgen::InsensitiveStr::Ascii("irerad"),
        dictgen::InsensitiveStr::Ascii("ireras"),
        dictgen::InsensitiveStr::Ascii("iritional"),
        dictgen::InsensitiveStr::Ascii("riation"),
        dictgen::InsensitiveStr::Ascii("riational"),
        dictgen::InsensitiveStr::Ascii("ried"),
        dictgen::InsensitiveStr::Ascii("ries"),
    ],
    values: &[
        &["inspiration"],
        &["inspection"],
        &["inspections"],
        &["inspection"],
        &["inspection"],
        &["inspections"],
        &["inspectors"],
        &["inspectors"],
        &["inspection"],
        &["inspectors"],
        &["inspiration"],
        &["inspirational"],
        &["inspiration"],
        &["inspires"],
        &["inspiration"],
        &["inspirational"],
        &["inspiration"],
        &["inspired"],
        &["inspires"],
        &["inspirational"],
        &["inspiration"],
        &["inspirational"],
        &["inspired"],
        &["inspires"],
    ],
    range: 4..=10,
};

static WORD_INSO_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_INSO_CHILDREN),
    value: None,
};

pub static WORD_INSO_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("mina"),
        dictgen::InsensitiveStr::Ascii("nmia"),
    ],
    values: &[&["insomnia"], &["insomnia"]],
    range: 4..=4,
};

static WORD_INSM_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_INSM_CHILDREN),
    value: None,
};

pub static WORD_INSM_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("onia")],
    values: &[&["insomnia"]],
    range: 4..=4,
};

static WORD_INSL_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_INSL_CHILDREN),
    value: None,
};

pub static WORD_INSL_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("uated"),
        dictgen::InsensitiveStr::Ascii("uts"),
    ],
    values: &[&["insulated"], &["insults"]],
    range: 3..=5,
};

static WORD_INSI_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_INSI_CHILDREN),
    value: None,
};

pub static WORD_INSI_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("dios"),
        dictgen::InsensitiveStr::Ascii("diuos"),
        dictgen::InsensitiveStr::Ascii("ginficant"),
        dictgen::InsensitiveStr::Ascii("ginifcant"),
        dictgen::InsensitiveStr::Ascii("gnifiant"),
        dictgen::InsensitiveStr::Ascii("gnificat"),
        dictgen::InsensitiveStr::Ascii("gnificent"),
        dictgen::InsensitiveStr::Ascii("gnificunt"),
        dictgen::InsensitiveStr::Ascii("gnifigant"),
        dictgen::InsensitiveStr::Ascii("gths"),
        dictgen::InsensitiveStr::Ascii("nuationg"),
        dictgen::InsensitiveStr::Ascii("pration"),
        dictgen::InsensitiveStr::Ascii("prational"),
        dictgen::InsensitiveStr::Ascii("pre"),
        dictgen::InsensitiveStr::Ascii("pred"),
        dictgen::InsensitiveStr::Ascii("pres"),
        dictgen::InsensitiveStr::Ascii("pring"),
        dictgen::InsensitiveStr::Ascii("stance"),
        dictgen::InsensitiveStr::Ascii("stas"),
        dictgen::InsensitiveStr::Ascii("stente"),
        dictgen::InsensitiveStr::Ascii("stenze"),
        dictgen::InsensitiveStr::Ascii("stes"),
        dictgen::InsensitiveStr::Ascii("stince"),
        dictgen::InsensitiveStr::Ascii("stis"),
        dictgen::InsensitiveStr::Ascii("tution"),
        dictgen::InsensitiveStr::Ascii("tutions"),
    ],
    values: &[
        &["insidious"],
        &["insidious"],
        &["insignificant"],
        &["insignificant"],
        &["insignificant"],
        &["insignificant"],
        &["insignificant"],
        &["insignificant"],
        &["insignificant"],
        &["insights"],
        &["insinuating"],
        &["inspiration"],
        &["inspirational"],
        &["inspire"],
        &["inspired"],
        &["inspires"],
        &["inspiring"],
        &["insistence"],
        &["insists"],
        &["insistence"],
        &["insistence"],
        &["insists"],
        &["insistence"],
        &["insists"],
        &["institution"],
        &["institutions"],
    ],
    range: 3..=9,
};

static WORD_INSE_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_INSE_CHILDREN),
    value: None,
};

pub static WORD_INSE_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ctes"),
        dictgen::InsensitiveStr::Ascii("ctiverous"),
        dictgen::InsensitiveStr::Ascii("ctos"),
        dictgen::InsensitiveStr::Ascii("curites"),
        dictgen::InsensitiveStr::Ascii("curitites"),
        dictgen::InsensitiveStr::Ascii("nsative"),
        dictgen::InsensitiveStr::Ascii("nsetive"),
        dictgen::InsensitiveStr::Ascii("nsitve"),
        dictgen::InsensitiveStr::Ascii("ntitive"),
        dictgen::InsensitiveStr::Ascii("ntivised"),
        dictgen::InsensitiveStr::Ascii("ntivises"),
        dictgen::InsensitiveStr::Ascii("pct"),
        dictgen::InsensitiveStr::Ascii("pction"),
        dictgen::InsensitiveStr::Ascii("pctions"),
        dictgen::InsensitiveStr::Ascii("pctor"),
        dictgen::InsensitiveStr::Ascii("perable"),
        dictgen::InsensitiveStr::Ascii("rtas"),
        dictgen::InsensitiveStr::Ascii("rtes"),
        dictgen::InsensitiveStr::Ascii("rtos"),
    ],
    values: &[
        &["insects"],
        &["insectivorous"],
        &["insects"],
        &["insecurities"],
        &["insecurities"],
        &["insensitive"],
        &["insensitive"],
        &["insensitive"],
        &["insensitive"],
        &["insensitive"],
        &["insensitive"],
        &["inspect"],
        &["inspection"],
        &["inspections"],
        &["inspector"],
        &["inseparable"],
        &["inserts"],
        &["inserts"],
        &["inserts"],
    ],
    range: 3..=9,
};

static WORD_INSC_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_INSC_CHILDREN),
    value: None,
};

pub static WORD_INSC_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("ets")],
    values: &[&["insects"]],
    range: 3..=3,
};

static WORD_INSA_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_INSA_CHILDREN),
    value: None,
};

pub static WORD_INSA_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("nelly"),
        dictgen::InsensitiveStr::Ascii("ney"),
        dictgen::InsensitiveStr::Ascii("nley"),
    ],
    values: &[&["insanely"], &["insanely"], &["insanely"]],
    range: 3..=5,
};

static WORD_INR_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_INR_CHILDREN),
    value: None,
};

pub static WORD_INR_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("esponsible"),
        dictgen::InsensitiveStr::Ascii("esponsive"),
        dictgen::InsensitiveStr::Ascii("ested"),
        dictgen::InsensitiveStr::Ascii("esting"),
    ],
    values: &[
        &["irresponsible"],
        &["unresponsive"],
        &["inserted"],
        &["inserting"],
    ],
    range: 5..=10,
};

static WORD_INQ_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_INQ_CHILDREN),
    value: None,
};

pub static WORD_INQ_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("uier"),
        dictgen::InsensitiveStr::Ascii("uirey"),
        dictgen::InsensitiveStr::Ascii("uirie"),
        dictgen::InsensitiveStr::Ascii("uiriy"),
        dictgen::InsensitiveStr::Ascii("uisator"),
        dictgen::InsensitiveStr::Ascii("uisicion"),
        dictgen::InsensitiveStr::Ascii("uisidor"),
        dictgen::InsensitiveStr::Ascii("uisistor"),
        dictgen::InsensitiveStr::Ascii("uisiter"),
        dictgen::InsensitiveStr::Ascii("uisiting"),
        dictgen::InsensitiveStr::Ascii("uisitio"),
        dictgen::InsensitiveStr::Ascii("uisitior"),
        dictgen::InsensitiveStr::Ascii("uisitir"),
        dictgen::InsensitiveStr::Ascii("uisitivo"),
        dictgen::InsensitiveStr::Ascii("uisito"),
        dictgen::InsensitiveStr::Ascii("uisiton"),
        dictgen::InsensitiveStr::Ascii("uisitr"),
        dictgen::InsensitiveStr::Ascii("uistior"),
        dictgen::InsensitiveStr::Ascii("uizition"),
        dictgen::InsensitiveStr::Ascii("uizitor"),
        dictgen::InsensitiveStr::Ascii("uriy"),
        dictgen::InsensitiveStr::Ascii("usitior"),
    ],
    values: &[
        &["inquire"],
        &["inquiry"],
        &["inquire"],
        &["inquiry"],
        &["inquisitor"],
        &["inquisition"],
        &["inquisitor"],
        &["inquisitor"],
        &["inquisitor"],
        &["inquisition"],
        &["inquisitor"],
        &["inquisitor"],
        &["inquisitor"],
        &["inquisition"],
        &["inquisition"],
        &["inquisition"],
        &["inquisitor"],
        &["inquisitor"],
        &["inquisition"],
        &["inquisitor"],
        &["inquiry"],
        &["inquisitor"],
    ],
    range: 4..=8,
};

static WORD_INP_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_INP_CHILDREN),
    value: None,
};

pub static WORD_INP_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("each"),
        dictgen::InsensitiveStr::Ascii("ection"),
        dictgen::InsensitiveStr::Ascii("ending"),
        dictgen::InsensitiveStr::Ascii("enetrable"),
        dictgen::InsensitiveStr::Ascii("erfections"),
        dictgen::InsensitiveStr::Ascii("ersonating"),
        dictgen::InsensitiveStr::Ascii("lementation"),
        dictgen::InsensitiveStr::Ascii("lementations"),
        dictgen::InsensitiveStr::Ascii("lementing"),
        dictgen::InsensitiveStr::Ascii("lications"),
        dictgen::InsensitiveStr::Ascii("olite"),
        dictgen::InsensitiveStr::Ascii("ossibility"),
        dictgen::InsensitiveStr::Ascii("overished"),
        dictgen::InsensitiveStr::Ascii("redictable"),
        dictgen::InsensitiveStr::Ascii("risonment"),
        dictgen::InsensitiveStr::Ascii("roductive"),
        dictgen::InsensitiveStr::Ascii("rovements"),
        dictgen::InsensitiveStr::Ascii("roving"),
        dictgen::InsensitiveStr::Ascii("sect"),
        dictgen::InsensitiveStr::Ascii("section"),
        dictgen::InsensitiveStr::Ascii("sector"),
        dictgen::InsensitiveStr::Ascii("siration"),
        dictgen::InsensitiveStr::Ascii("sire"),
        dictgen::InsensitiveStr::Ascii("sired"),
        dictgen::InsensitiveStr::Ascii("siring"),
    ],
    values: &[
        &["impeach"],
        &["inception"],
        &["impending"],
        &["impenetrable"],
        &["imperfections"],
        &["impersonating"],
        &["implementation"],
        &["implementations"],
        &["implementing"],
        &["implications"],
        &["impolite"],
        &["impossibility"],
        &["impoverished"],
        &["unpredictable"],
        &["imprisonment"],
        &["unproductive"],
        &["improvements"],
        &["improving"],
        &["inspect"],
        &["inspection"],
        &["inspector"],
        &["inspiration"],
        &["inspire"],
        &["inspired"],
        &["inspiring"],
    ],
    range: 4..=12,
};

static WORD_INO_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_INO_CHILDREN),
    value: None,
};

pub static WORD_INO_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("cence"),
        dictgen::InsensitiveStr::Ascii("fficial"),
        dictgen::InsensitiveStr::Ascii("t"),
        dictgen::InsensitiveStr::Ascii("vker"),
    ],
    values: &[&["innocence"], &["unofficial"], &["into"], &["invoker"]],
    range: 1..=7,
};

static WORD_INN_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_INN_CHILDREN),
    value: None,
};

pub static WORD_INN_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ersection"),
        dictgen::InsensitiveStr::Ascii("erstellar"),
        dictgen::InsensitiveStr::Ascii("oavtion"),
        dictgen::InsensitiveStr::Ascii("ocens"),
        dictgen::InsensitiveStr::Ascii("ocenters"),
        dictgen::InsensitiveStr::Ascii("ocentes"),
        dictgen::InsensitiveStr::Ascii("ocentius"),
        dictgen::InsensitiveStr::Ascii("oculated"),
        dictgen::InsensitiveStr::Ascii("ocuos"),
        dictgen::InsensitiveStr::Ascii("otation"),
        dictgen::InsensitiveStr::Ascii("oucous"),
        dictgen::InsensitiveStr::Ascii("ovacion"),
        dictgen::InsensitiveStr::Ascii("ovaiton"),
        dictgen::InsensitiveStr::Ascii("ovatief"),
        dictgen::InsensitiveStr::Ascii("ovaties"),
        dictgen::InsensitiveStr::Ascii("ovatin"),
        dictgen::InsensitiveStr::Ascii("ovativo"),
        dictgen::InsensitiveStr::Ascii("ovatve"),
        dictgen::InsensitiveStr::Ascii("voate"),
        dictgen::InsensitiveStr::Ascii("voation"),
    ],
    values: &[
        &["intersection"],
        &["interstellar"],
        &["innovations"],
        &["innocents"],
        &["innocents"],
        &["innocents"],
        &["innocents"],
        &["inoculated"],
        &["innocuous"],
        &["innovation"],
        &["innocuous"],
        &["innovation"],
        &["innovations"],
        &["innovate"],
        &["innovate"],
        &["innovations"],
        &["innovation"],
        &["innovate"],
        &["innovate"],
        &["innovation"],
    ],
    range: 5..=9,
};

static WORD_INM_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_INM_CHILDREN),
    value: None,
};

pub static WORD_INM_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("igrant"),
        dictgen::InsensitiveStr::Ascii("igrants"),
    ],
    values: &[&["immigrant"], &["immigrants"]],
    range: 6..=7,
};

static WORD_INL_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_INL_CHILDREN),
    value: None,
};

pub static WORD_INL_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("cine"),
        dictgen::InsensitiveStr::Ascii("cuded"),
        dictgen::InsensitiveStr::Ascii("cudes"),
        dictgen::InsensitiveStr::Ascii("cuding"),
        dictgen::InsensitiveStr::Ascii("ightening"),
    ],
    values: &[
        &["incline"],
        &["included"],
        &["includes"],
        &["including"],
        &["enlightening"],
    ],
    range: 4..=9,
};

static WORD_INK_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_INK_CHILDREN),
    value: None,
};

pub static WORD_INK_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ompatible"),
        dictgen::InsensitiveStr::Ascii("ompetence"),
        dictgen::InsensitiveStr::Ascii("onsistent"),
    ],
    values: &[&["incompatible"], &["incompetence"], &["inconsistent"]],
    range: 9..=9,
};

static WORD_INJ_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_INJ_CHILDREN),
    value: None,
};

pub static WORD_INJ_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ustaces"),
        dictgen::InsensitiveStr::Ascii("usticas"),
        dictgen::InsensitiveStr::Ascii("ustics"),
        dictgen::InsensitiveStr::Ascii("ustie"),
    ],
    values: &[
        &["injustices"],
        &["injustices"],
        &["injustices"],
        &["injustices"],
    ],
    range: 5..=7,
};

static WORD_INI_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_INI_CHILDREN),
    value: None,
};

pub static WORD_INI_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("dans"),
        dictgen::InsensitiveStr::Ascii("fnite"),
        dictgen::InsensitiveStr::Ascii("fnitely"),
        dictgen::InsensitiveStr::Ascii("fnity"),
        dictgen::InsensitiveStr::Ascii("ntelligent"),
        dictgen::InsensitiveStr::Ascii("nterested"),
        dictgen::InsensitiveStr::Ascii("nteresting"),
        dictgen::InsensitiveStr::Ascii("sghts"),
        dictgen::InsensitiveStr::Ascii("tailly"),
        dictgen::InsensitiveStr::Ascii("tails"),
        dictgen::InsensitiveStr::Ascii("taite"),
        dictgen::InsensitiveStr::Ascii("taition"),
        dictgen::InsensitiveStr::Ascii("taitives"),
        dictgen::InsensitiveStr::Ascii("tal"),
        dictgen::InsensitiveStr::Ascii("taled"),
        dictgen::InsensitiveStr::Ascii("talese"),
        dictgen::InsensitiveStr::Ascii("taling"),
        dictgen::InsensitiveStr::Ascii("talisation"),
        dictgen::InsensitiveStr::Ascii("talisations"),
        dictgen::InsensitiveStr::Ascii("talise"),
        dictgen::InsensitiveStr::Ascii("talised"),
        dictgen::InsensitiveStr::Ascii("taliser"),
        dictgen::InsensitiveStr::Ascii("talisers"),
        dictgen::InsensitiveStr::Ascii("talises"),
        dictgen::InsensitiveStr::Ascii("talising"),
        dictgen::InsensitiveStr::Ascii("talism"),
        dictgen::InsensitiveStr::Ascii("talisms"),
        dictgen::InsensitiveStr::Ascii("talizable"),
        dictgen::InsensitiveStr::Ascii("talization"),
        dictgen::InsensitiveStr::Ascii("talizations"),
        dictgen::InsensitiveStr::Ascii("talize"),
        dictgen::InsensitiveStr::Ascii("talized"),
        dictgen::InsensitiveStr::Ascii("talizer"),
        dictgen::InsensitiveStr::Ascii("talizers"),
        dictgen::InsensitiveStr::Ascii("talizes"),
        dictgen::InsensitiveStr::Ascii("talizing"),
        dictgen::InsensitiveStr::Ascii("talled"),
        dictgen::InsensitiveStr::Ascii("talling"),
        dictgen::InsensitiveStr::Ascii("tally"),
        dictgen::InsensitiveStr::Ascii("talness"),
        dictgen::InsensitiveStr::Ascii("tals"),
        dictgen::InsensitiveStr::Ascii("tation"),
        dictgen::InsensitiveStr::Ascii("tiaitive"),
        dictgen::InsensitiveStr::Ascii("tiaitve"),
        dictgen::InsensitiveStr::Ascii("tiales"),
        dictgen::InsensitiveStr::Ascii("tialy"),
        dictgen::InsensitiveStr::Ascii("tiatie"),
        dictgen::InsensitiveStr::Ascii("tiaties"),
        dictgen::InsensitiveStr::Ascii("tiatin"),
        dictgen::InsensitiveStr::Ascii("tiativs"),
        dictgen::InsensitiveStr::Ascii("tiatve"),
        dictgen::InsensitiveStr::Ascii("tiatves"),
        dictgen::InsensitiveStr::Ascii("tiavite"),
        dictgen::InsensitiveStr::Ascii("tisl"),
        dictgen::InsensitiveStr::Ascii("titaive"),
        dictgen::InsensitiveStr::Ascii("titiave"),
        dictgen::InsensitiveStr::Ascii("titiaves"),
        dictgen::InsensitiveStr::Ascii("tmacy"),
        dictgen::InsensitiveStr::Ascii("tmate"),
        dictgen::InsensitiveStr::Ascii("tmately"),
        dictgen::InsensitiveStr::Ascii("tmidate"),
        dictgen::InsensitiveStr::Ascii("tuition"),
    ],
    values: &[
        &["indians"],
        &["infinite"],
        &["infinitely"],
        &["infinity"],
        &["unintelligent"],
        &["uninterested"],
        &["uninteresting"],
        &["insights"],
        &["initially"],
        &["initials"],
        &["initiate"],
        &["initiation"],
        &["initiatives"],
        &["initial"],
        &["initialed"],
        &["initialese"],
        &["initialing"],
        &["initialisation"],
        &["initialisations"],
        &["initialise"],
        &["initialised"],
        &["initialiser"],
        &["initialisers"],
        &["initialises"],
        &["initialising"],
        &["initialism"],
        &["initialisms"],
        &["initializable"],
        &["initialization"],
        &["initializations"],
        &["initialize"],
        &["initialized"],
        &["initializer"],
        &["initializers"],
        &["initializes"],
        &["initializing"],
        &["initialled"],
        &["initialling"],
        &["initially"],
        &["initialness"],
        &["initials"],
        &["initiation"],
        &["initiative"],
        &["initiatives"],
        &["initials"],
        &["initially"],
        &["initiatives"],
        &["initiatives"],
        &["initiation"],
        &["initiatives"],
        &["initiate"],
        &["initiatives"],
        &["initiatives"],
        &["initials"],
        &["initiatives"],
        &["initiatives"],
        &["initiatives"],
        &["intimacy"],
        &["intimate"],
        &["intimately"],
        &["intimidate"],
        &["initiation"],
    ],
    range: 3..=11,
};

static WORD_INH_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_INH_CHILDREN),
    value: None,
};

pub static WORD_INH_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("abitans"),
        dictgen::InsensitiveStr::Ascii("abitat"),
        dictgen::InsensitiveStr::Ascii("abitats"),
        dictgen::InsensitiveStr::Ascii("abitents"),
        dictgen::InsensitiveStr::Ascii("eirt"),
        dictgen::InsensitiveStr::Ascii("eirtance"),
        dictgen::InsensitiveStr::Ascii("eirted"),
        dictgen::InsensitiveStr::Ascii("erantly"),
        dictgen::InsensitiveStr::Ascii("eratance"),
        dictgen::InsensitiveStr::Ascii("eretance"),
        dictgen::InsensitiveStr::Ascii("eriet"),
        dictgen::InsensitiveStr::Ascii("erint"),
        dictgen::InsensitiveStr::Ascii("erintly"),
        dictgen::InsensitiveStr::Ascii("eritage"),
        dictgen::InsensitiveStr::Ascii("eritence"),
        dictgen::InsensitiveStr::Ascii("ernetly"),
        dictgen::InsensitiveStr::Ascii("ertiance"),
        dictgen::InsensitiveStr::Ascii("ertied"),
        dictgen::InsensitiveStr::Ascii("umaan"),
        dictgen::InsensitiveStr::Ascii("umain"),
    ],
    values: &[
        &["inhabitants"],
        &["inhabitants"],
        &["inhabitants"],
        &["inhabitants"],
        &["inherit"],
        &["inheritance"],
        &["inherited"],
        &["inherently"],
        &["inheritance"],
        &["inheritance"],
        &["inherit"],
        &["inherit"],
        &["inherently"],
        &["heritage"],
        &["inheritance"],
        &["inherently"],
        &["inheritance"],
        &["inherited"],
        &["inhuman"],
        &["inhuman"],
    ],
    range: 4..=8,
};

static WORD_ING_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_ING_CHILDREN),
    value: None,
};

pub static WORD_ING_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("enius"),
        dictgen::InsensitiveStr::Ascii("eniuty"),
        dictgen::InsensitiveStr::Ascii("enuitiy"),
        dictgen::InsensitiveStr::Ascii("erdients"),
        dictgen::InsensitiveStr::Ascii("estigator"),
        dictgen::InsensitiveStr::Ascii("eunity"),
        dictgen::InsensitiveStr::Ascii("ition"),
        dictgen::InsensitiveStr::Ascii("ocnito"),
        dictgen::InsensitiveStr::Ascii("orance"),
        dictgen::InsensitiveStr::Ascii("orant"),
        dictgen::InsensitiveStr::Ascii("rediant"),
        dictgen::InsensitiveStr::Ascii("rediants"),
        dictgen::InsensitiveStr::Ascii("rediens"),
        dictgen::InsensitiveStr::Ascii("redientes"),
        dictgen::InsensitiveStr::Ascii("rediets"),
        dictgen::InsensitiveStr::Ascii("reediants"),
        dictgen::InsensitiveStr::Ascii("reidents"),
        dictgen::InsensitiveStr::Ascii("riedents"),
        dictgen::InsensitiveStr::Ascii("uenity"),
    ],
    values: &[
        &["ingenious"],
        &["ingenuity"],
        &["ingenuity"],
        &["ingredients"],
        &["investigator"],
        &["ingenuity"],
        &["ignition"],
        &["incognito"],
        &["ignorance"],
        &["ignorant"],
        &["ingredient"],
        &["ingredients"],
        &["ingredients"],
        &["ingredients"],
        &["ingredient"],
        &["ingredients"],
        &["ingredient"],
        &["ingredient"],
        &["ingenuity"],
    ],
    range: 5..=9,
};

static WORD_INF_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_INF_CHILDREN),
    value: None,
};

static WORD_INF_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    Some(&WORD_INFA_NODE),
    None,
    None,
    None,
    Some(&WORD_INFE_NODE),
    None,
    None,
    None,
    Some(&WORD_INFI_NODE),
    None,
    None,
    Some(&WORD_INFL_NODE),
    None,
    None,
    Some(&WORD_INFO_NODE),
    None,
    None,
    Some(&WORD_INFR_NODE),
    None,
    None,
    Some(&WORD_INFU_NODE),
    None,
    None,
    None,
    None,
    None,
];

static WORD_INFU_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_INFU_CHILDREN),
    value: None,
};

pub static WORD_INFU_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("lenced"),
        dictgen::InsensitiveStr::Ascii("lences"),
        dictgen::InsensitiveStr::Ascii("lential"),
    ],
    values: &[&["influenced"], &["influences"], &["influential"]],
    range: 6..=7,
};

static WORD_INFR_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_INFR_CHILDREN),
    value: None,
};

pub static WORD_INFR_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("antryman"),
        dictgen::InsensitiveStr::Ascii("aread"),
        dictgen::InsensitiveStr::Ascii("astracture"),
        dictgen::InsensitiveStr::Ascii("astructre"),
        dictgen::InsensitiveStr::Ascii("astructuur"),
        dictgen::InsensitiveStr::Ascii("astrucure"),
        dictgen::InsensitiveStr::Ascii("astrucutre"),
        dictgen::InsensitiveStr::Ascii("astrukture"),
        dictgen::InsensitiveStr::Ascii("astrutture"),
        dictgen::InsensitiveStr::Ascii("asturcture"),
        dictgen::InsensitiveStr::Ascii("idgement"),
        dictgen::InsensitiveStr::Ascii("idging"),
        dictgen::InsensitiveStr::Ascii("igement"),
        dictgen::InsensitiveStr::Ascii("ignement"),
        dictgen::InsensitiveStr::Ascii("igning"),
        dictgen::InsensitiveStr::Ascii("ingeing"),
        dictgen::InsensitiveStr::Ascii("omal"),
        dictgen::InsensitiveStr::Ascii("omation"),
        dictgen::InsensitiveStr::Ascii("omative"),
        dictgen::InsensitiveStr::Ascii("omed"),
        dictgen::InsensitiveStr::Ascii("oms"),
        dictgen::InsensitiveStr::Ascii("otn"),
    ],
    values: &[
        &["infantryman"],
        &["infrared"],
        &["infrastructure"],
        &["infrastructure"],
        &["infrastructure"],
        &["infrastructure"],
        &["infrastructure"],
        &["infrastructure"],
        &["infrastructure"],
        &["infrastructure"],
        &["infringement"],
        &["infringing"],
        &["infringement"],
        &["infringement"],
        &["infringing"],
        &["infringing"],
        &["informal"],
        &["information"],
        &["informative"],
        &["informed"],
        &["informs"],
        &["infront"],
    ],
    range: 3..=10,
};

static WORD_INFO_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_INFO_CHILDREN),
    value: None,
};

pub static WORD_INFO_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("grahic"),
        dictgen::InsensitiveStr::Ascii("grahpic"),
        dictgen::InsensitiveStr::Ascii("grapgic"),
        dictgen::InsensitiveStr::Ascii("grapic"),
        dictgen::InsensitiveStr::Ascii("grpahic"),
        dictgen::InsensitiveStr::Ascii("grpahics"),
        dictgen::InsensitiveStr::Ascii("mation"),
        dictgen::InsensitiveStr::Ascii("rgivable"),
        dictgen::InsensitiveStr::Ascii("rmable"),
        dictgen::InsensitiveStr::Ascii("rmacion"),
        dictgen::InsensitiveStr::Ascii("rmarla"),
        dictgen::InsensitiveStr::Ascii("rmarle"),
        dictgen::InsensitiveStr::Ascii("rmarlo"),
        dictgen::InsensitiveStr::Ascii("rmas"),
        dictgen::InsensitiveStr::Ascii("rmate"),
        dictgen::InsensitiveStr::Ascii("rmatice"),
        dictgen::InsensitiveStr::Ascii("rmatie"),
        dictgen::InsensitiveStr::Ascii("rmatief"),
        dictgen::InsensitiveStr::Ascii("rmatiei"),
        dictgen::InsensitiveStr::Ascii("rmatike"),
        dictgen::InsensitiveStr::Ascii("rmativo"),
        dictgen::InsensitiveStr::Ascii("rmella"),
        dictgen::InsensitiveStr::Ascii("rmerad"),
        dictgen::InsensitiveStr::Ascii("rmis"),
        dictgen::InsensitiveStr::Ascii("rmitive"),
        dictgen::InsensitiveStr::Ascii("rmtion"),
        dictgen::InsensitiveStr::Ascii("rnt"),
    ],
    values: &[
        &["infographic"],
        &["infographic"],
        &["infographic"],
        &["infographic"],
        &["infographic"],
        &["infographic"],
        &["information"],
        &["unforgivable"],
        &["informal"],
        &["information"],
        &["informal"],
        &["informal"],
        &["informal"],
        &["informs"],
        &["informative"],
        &["informative"],
        &["informative"],
        &["informative"],
        &["informative"],
        &["informative"],
        &["information"],
        &["informal"],
        &["informed"],
        &["informs"],
        &["informative"],
        &["information"],
        &["infront"],
    ],
    range: 3..=8,
};

static WORD_INFL_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_INFL_CHILDREN),
    value: None,
};

pub static WORD_INFL_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("amable"),
        dictgen::InsensitiveStr::Ascii("amation"),
        dictgen::InsensitiveStr::Ascii("atabale"),
        dictgen::InsensitiveStr::Ascii("atabe"),
        dictgen::InsensitiveStr::Ascii("ateble"),
        dictgen::InsensitiveStr::Ascii("atible"),
        dictgen::InsensitiveStr::Ascii("atie"),
        dictgen::InsensitiveStr::Ascii("eunced"),
        dictgen::InsensitiveStr::Ascii("itrate"),
        dictgen::InsensitiveStr::Ascii("itrator"),
        dictgen::InsensitiveStr::Ascii("uanced"),
        dictgen::InsensitiveStr::Ascii("uances"),
        dictgen::InsensitiveStr::Ascii("uancing"),
        dictgen::InsensitiveStr::Ascii("uenceing"),
        dictgen::InsensitiveStr::Ascii("uencial"),
        dictgen::InsensitiveStr::Ascii("uencian"),
        dictgen::InsensitiveStr::Ascii("uencie"),
        dictgen::InsensitiveStr::Ascii("uening"),
        dictgen::InsensitiveStr::Ascii("uens"),
        dictgen::InsensitiveStr::Ascii("uense"),
        dictgen::InsensitiveStr::Ascii("uensed"),
        dictgen::InsensitiveStr::Ascii("uenser"),
        dictgen::InsensitiveStr::Ascii("uenses"),
        dictgen::InsensitiveStr::Ascii("uenta"),
        dictgen::InsensitiveStr::Ascii("uental"),
        dictgen::InsensitiveStr::Ascii("uented"),
        dictgen::InsensitiveStr::Ascii("uentes"),
        dictgen::InsensitiveStr::Ascii("uenting"),
        dictgen::InsensitiveStr::Ascii("uentual"),
        dictgen::InsensitiveStr::Ascii("uincing"),
        dictgen::InsensitiveStr::Ascii("uneced"),
    ],
    values: &[
        &["inflatable"],
        &["inflammation"],
        &["inflatable"],
        &["inflatable"],
        &["inflatable"],
        &["inflatable"],
        &["inflate"],
        &["influenced"],
        &["infiltrate"],
        &["infiltrator"],
        &["influenced"],
        &["influences"],
        &["influencing"],
        &["influencing"],
        &["influential"],
        &["influencing"],
        &["influences"],
        &["influencing"],
        &["influences"],
        &["influences"],
        &["influences"],
        &["influences"],
        &["influences"],
        &["influential"],
        &["influential"],
        &["influenced"],
        &["influences"],
        &["influencing"],
        &["influential"],
        &["influencing"],
        &["influenced"],
    ],
    range: 4..=8,
};

static WORD_INFI_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_INFI_CHILDREN),
    value: None,
};

pub static WORD_INFI_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("deltiy"),
        dictgen::InsensitiveStr::Ascii("dility"),
        dictgen::InsensitiveStr::Ascii("litrate"),
        dictgen::InsensitiveStr::Ascii("litrated"),
        dictgen::InsensitiveStr::Ascii("litration"),
        dictgen::InsensitiveStr::Ascii("ltartor"),
        dictgen::InsensitiveStr::Ascii("ltrade"),
        dictgen::InsensitiveStr::Ascii("ltrait"),
        dictgen::InsensitiveStr::Ascii("ltraitor"),
        dictgen::InsensitiveStr::Ascii("ltrar"),
        dictgen::InsensitiveStr::Ascii("ltrare"),
        dictgen::InsensitiveStr::Ascii("ltraron"),
        dictgen::InsensitiveStr::Ascii("ltrarte"),
        dictgen::InsensitiveStr::Ascii("ltrase"),
        dictgen::InsensitiveStr::Ascii("ltrater"),
        dictgen::InsensitiveStr::Ascii("ltratie"),
        dictgen::InsensitiveStr::Ascii("ltratior"),
        dictgen::InsensitiveStr::Ascii("ltratred"),
        dictgen::InsensitiveStr::Ascii("ltre"),
        dictgen::InsensitiveStr::Ascii("ltrerat"),
        dictgen::InsensitiveStr::Ascii("nately"),
        dictgen::InsensitiveStr::Ascii("net"),
        dictgen::InsensitiveStr::Ascii("netely"),
        dictgen::InsensitiveStr::Ascii("nie"),
        dictgen::InsensitiveStr::Ascii("niment"),
        dictgen::InsensitiveStr::Ascii("nit"),
        dictgen::InsensitiveStr::Ascii("nitelly"),
        dictgen::InsensitiveStr::Ascii("nitey"),
        dictgen::InsensitiveStr::Ascii("nitie"),
        dictgen::InsensitiveStr::Ascii("nitiy"),
        dictgen::InsensitiveStr::Ascii("nitley"),
        dictgen::InsensitiveStr::Ascii("nitly"),
        dictgen::InsensitiveStr::Ascii("ntie"),
        dictgen::InsensitiveStr::Ascii("ntiely"),
        dictgen::InsensitiveStr::Ascii("ntiy"),
        dictgen::InsensitiveStr::Ascii("ntrator"),
    ],
    values: &[
        &["infidelity"],
        &["infidelity"],
        &["infiltrate"],
        &["infiltrated"],
        &["infiltration"],
        &["infiltrator"],
        &["infiltrate"],
        &["infiltrate"],
        &["infiltrator"],
        &["infiltrator"],
        &["infiltrate"],
        &["infiltrator"],
        &["infiltrate"],
        &["infiltrate"],
        &["infiltrator"],
        &["infiltrate"],
        &["infiltrator"],
        &["infiltrate"],
        &["infiltrate"],
        &["infiltrate"],
        &["infinitely"],
        &["infinite"],
        &["infinitely"],
        &["infinite"],
        &["infinite"],
        &["infinite"],
        &["infinitely"],
        &["infinity"],
        &["infinite"],
        &["infinity"],
        &["infinitely"],
        &["infinity"],
        &["infinite"],
        &["infinitely"],
        &["infinity"],
        &["infiltrator"],
    ],
    range: 3..=9,
};

static WORD_INFE_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_INFE_CHILDREN),
    value: None,
};

pub static WORD_INFE_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ccious"),
        dictgen::InsensitiveStr::Ascii("ctation"),
        dictgen::InsensitiveStr::Ascii("cteous"),
        dictgen::InsensitiveStr::Ascii("ctin"),
        dictgen::InsensitiveStr::Ascii("ctuous"),
        dictgen::InsensitiveStr::Ascii("dility"),
        dictgen::InsensitiveStr::Ascii("ktious"),
        dictgen::InsensitiveStr::Ascii("nro"),
        dictgen::InsensitiveStr::Ascii("red"),
        dictgen::InsensitiveStr::Ascii("rioara"),
        dictgen::InsensitiveStr::Ascii("rioare"),
        dictgen::InsensitiveStr::Ascii("rioir"),
        dictgen::InsensitiveStr::Ascii("rioirty"),
        dictgen::InsensitiveStr::Ascii("riorty"),
        dictgen::InsensitiveStr::Ascii("riour"),
        dictgen::InsensitiveStr::Ascii("rir"),
        dictgen::InsensitiveStr::Ascii("rmon"),
        dictgen::InsensitiveStr::Ascii("rrence"),
        dictgen::InsensitiveStr::Ascii("staion"),
        dictgen::InsensitiveStr::Ascii("stating"),
        dictgen::InsensitiveStr::Ascii("stato"),
        dictgen::InsensitiveStr::Ascii("staton"),
        dictgen::InsensitiveStr::Ascii("stions"),
    ],
    values: &[
        &["infectious"],
        &["infestation"],
        &["infectious"],
        &["infections"],
        &["infectious"],
        &["infidelity"],
        &["infectious"],
        &["inferno"],
        &["inferred"],
        &["inferior"],
        &["inferior"],
        &["inferior"],
        &["inferiority"],
        &["inferiority"],
        &["inferior"],
        &["inferior"],
        &["inferno"],
        &["inference"],
        &["infestation"],
        &["infestation"],
        &["infestation"],
        &["infestation"],
        &["infections"],
    ],
    range: 3..=7,
};

static WORD_INFA_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_INFA_CHILDREN),
    value: None,
};

pub static WORD_INFA_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("lability"),
        dictgen::InsensitiveStr::Ascii("llable"),
        dictgen::InsensitiveStr::Ascii("llibale"),
        dictgen::InsensitiveStr::Ascii("llibe"),
        dictgen::InsensitiveStr::Ascii("llibile"),
        dictgen::InsensitiveStr::Ascii("ltable"),
        dictgen::InsensitiveStr::Ascii("lte"),
        dictgen::InsensitiveStr::Ascii("ntis"),
        dictgen::InsensitiveStr::Ascii("ntus"),
        dictgen::InsensitiveStr::Ascii("rred"),
    ],
    values: &[
        &["infallibility"],
        &["infallible"],
        &["infallible"],
        &["infallible"],
        &["infallible"],
        &["inflatable"],
        &["inflate"],
        &["infants"],
        &["infants"],
        &["infrared"],
    ],
    range: 3..=8,
};

static WORD_INE_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_INE_CHILDREN),
    value: None,
};

pub static WORD_INE_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ffecitve"),
        dictgen::InsensitiveStr::Ascii("ffektive"),
        dictgen::InsensitiveStr::Ascii("fficeint"),
        dictgen::InsensitiveStr::Ascii("fficent"),
        dictgen::InsensitiveStr::Ascii("fficiant"),
        dictgen::InsensitiveStr::Ascii("fficienct"),
        dictgen::InsensitiveStr::Ascii("fficienty"),
        dictgen::InsensitiveStr::Ascii("ffictive"),
        dictgen::InsensitiveStr::Ascii("ffizient"),
        dictgen::InsensitiveStr::Ascii("qaulity"),
        dictgen::InsensitiveStr::Ascii("quailty"),
        dictgen::InsensitiveStr::Ascii("quallity"),
        dictgen::InsensitiveStr::Ascii("rsting"),
        dictgen::InsensitiveStr::Ascii("vatible"),
        dictgen::InsensitiveStr::Ascii("vetable"),
        dictgen::InsensitiveStr::Ascii("vetably"),
        dictgen::InsensitiveStr::Ascii("vetible"),
        dictgen::InsensitiveStr::Ascii("vidable"),
        dictgen::InsensitiveStr::Ascii("vidably"),
        dictgen::InsensitiveStr::Ascii("vitabile"),
        dictgen::InsensitiveStr::Ascii("vitabily"),
        dictgen::InsensitiveStr::Ascii("vitablely"),
        dictgen::InsensitiveStr::Ascii("vitabley"),
        dictgen::InsensitiveStr::Ascii("vitablity"),
        dictgen::InsensitiveStr::Ascii("vitablly"),
        dictgen::InsensitiveStr::Ascii("vitible"),
        dictgen::InsensitiveStr::Ascii("vitibly"),
        dictgen::InsensitiveStr::Ascii("vititably"),
        dictgen::InsensitiveStr::Ascii("vtiable"),
        dictgen::InsensitiveStr::Ascii("vtiably"),
        dictgen::InsensitiveStr::Ascii("xblicably"),
        dictgen::InsensitiveStr::Ascii("xeprienced"),
        dictgen::InsensitiveStr::Ascii("xpectedly"),
        dictgen::InsensitiveStr::Ascii("xpeirenced"),
        dictgen::InsensitiveStr::Ascii("xpencive"),
        dictgen::InsensitiveStr::Ascii("xpenisve"),
        dictgen::InsensitiveStr::Ascii("xpense"),
        dictgen::InsensitiveStr::Ascii("xpereince"),
        dictgen::InsensitiveStr::Ascii("xpereinced"),
        dictgen::InsensitiveStr::Ascii("xperiance"),
        dictgen::InsensitiveStr::Ascii("xperianced"),
        dictgen::InsensitiveStr::Ascii("xperiece"),
        dictgen::InsensitiveStr::Ascii("xperieced"),
        dictgen::InsensitiveStr::Ascii("xperiecned"),
        dictgen::InsensitiveStr::Ascii("xperiencable"),
        dictgen::InsensitiveStr::Ascii("xperiened"),
        dictgen::InsensitiveStr::Ascii("xperiente"),
        dictgen::InsensitiveStr::Ascii("xperince"),
        dictgen::InsensitiveStr::Ascii("xperineced"),
        dictgen::InsensitiveStr::Ascii("xpierence"),
        dictgen::InsensitiveStr::Ascii("xpierenced"),
        dictgen::InsensitiveStr::Ascii("xplicabil"),
        dictgen::InsensitiveStr::Ascii("xplicablely"),
        dictgen::InsensitiveStr::Ascii("xplicabley"),
        dictgen::InsensitiveStr::Ascii("xplicablly"),
        dictgen::InsensitiveStr::Ascii("xplicaby"),
        dictgen::InsensitiveStr::Ascii("xplicibly"),
    ],
    values: &[
        &["ineffective"],
        &["ineffective"],
        &["inefficient"],
        &["inefficient"],
        &["inefficient"],
        &["inefficient"],
        &["inefficiently"],
        &["ineffective"],
        &["inefficient"],
        &["inequality"],
        &["inequality"],
        &["inequality"],
        &["inserting"],
        &["inevitable"],
        &["inevitable"],
        &["inevitably"],
        &["inevitable"],
        &["inevitable"],
        &["inevitably"],
        &["inevitable"],
        &["inevitably"],
        &["inevitably"],
        &["inevitably"],
        &["inevitably"],
        &["inevitably"],
        &["inevitable"],
        &["inevitably"],
        &["inevitably"],
        &["inevitable"],
        &["inevitably"],
        &["inexplicably"],
        &["inexperience"],
        &["unexpectedly"],
        &["inexperience"],
        &["inexpensive"],
        &["inexpensive"],
        &["inexpensive"],
        &["inexperience"],
        &["inexperienced"],
        &["inexperience"],
        &["inexperienced"],
        &["inexperience"],
        &["inexperienced"],
        &["inexperience"],
        &["inexperience"],
        &["inexperienced"],
        &["inexperience"],
        &["inexperience"],
        &["inexperience"],
        &["inexperienced"],
        &["inexperienced"],
        &["inexplicably"],
        &["inexplicably"],
        &["inexplicably"],
        &["inexplicably"],
        &["inexplicably"],
        &["inexplicably"],
    ],
    range: 6..=12,
};

static WORD_IND_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_IND_CHILDREN),
    value: None,
};

static WORD_IND_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    Some(&WORD_INDA_NODE),
    None,
    None,
    None,
    Some(&WORD_INDE_NODE),
    None,
    None,
    None,
    Some(&WORD_INDI_NODE),
    None,
    None,
    Some(&WORD_INDL_NODE),
    None,
    None,
    Some(&WORD_INDO_NODE),
    Some(&WORD_INDP_NODE),
    None,
    Some(&WORD_INDR_NODE),
    None,
    None,
    Some(&WORD_INDU_NODE),
    Some(&WORD_INDV_NODE),
    None,
    None,
    None,
    None,
];

static WORD_INDV_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_INDV_CHILDREN),
    value: None,
};

pub static WORD_INDV_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("iduals")],
    values: &[&["individuals"]],
    range: 6..=6,
};

static WORD_INDU_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_INDU_CHILDREN),
    value: None,
};

pub static WORD_INDU_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("gle"),
        dictgen::InsensitiveStr::Ascii("lgue"),
        dictgen::InsensitiveStr::Ascii("stiral"),
        dictgen::InsensitiveStr::Ascii("stiralized"),
        dictgen::InsensitiveStr::Ascii("stires"),
        dictgen::InsensitiveStr::Ascii("strail"),
        dictgen::InsensitiveStr::Ascii("strailized"),
        dictgen::InsensitiveStr::Ascii("strees"),
        dictgen::InsensitiveStr::Ascii("strialied"),
        dictgen::InsensitiveStr::Ascii("strialzed"),
        dictgen::InsensitiveStr::Ascii("strias"),
        dictgen::InsensitiveStr::Ascii("striel"),
        dictgen::InsensitiveStr::Ascii("striella"),
        dictgen::InsensitiveStr::Ascii("striels"),
        dictgen::InsensitiveStr::Ascii("strija"),
        dictgen::InsensitiveStr::Ascii("strije"),
        dictgen::InsensitiveStr::Ascii("strijske"),
        dictgen::InsensitiveStr::Ascii("strualized"),
        dictgen::InsensitiveStr::Ascii("structible"),
        dictgen::InsensitiveStr::Ascii("trial"),
    ],
    values: &[
        &["indulge"],
        &["indulge"],
        &["industrial"],
        &["industrialized"],
        &["industries"],
        &["industrial"],
        &["industrialized"],
        &["industries"],
        &["industrialized"],
        &["industrialized"],
        &["industries"],
        &["industrial"],
        &["industrial"],
        &["industries"],
        &["industrial"],
        &["industries"],
        &["industries"],
        &["industrialized"],
        &["indestructible"],
        &["industrial"],
    ],
    range: 3..=10,
};

static WORD_INDR_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_INDR_CHILDREN),
    value: None,
};

pub static WORD_INDR_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("oduction"),
        dictgen::InsensitiveStr::Ascii("oductory"),
    ],
    values: &[&["introduction"], &["introductory"]],
    range: 8..=8,
};

static WORD_INDP_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_INDP_CHILDREN),
    value: None,
};

pub static WORD_INDP_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("endent"),
        dictgen::InsensitiveStr::Ascii("endently"),
    ],
    values: &[&["independent"], &["independently"]],
    range: 6..=8,
};

static WORD_INDO_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_INDO_CHILDREN),
    value: None,
};

pub static WORD_INDO_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("crtinated"),
        dictgen::InsensitiveStr::Ascii("crtination"),
        dictgen::InsensitiveStr::Ascii("cternated"),
        dictgen::InsensitiveStr::Ascii("ctornated"),
        dictgen::InsensitiveStr::Ascii("ctrication"),
        dictgen::InsensitiveStr::Ascii("ctrinatie"),
        dictgen::InsensitiveStr::Ascii("ctrinatin"),
        dictgen::InsensitiveStr::Ascii("ctronated"),
        dictgen::InsensitiveStr::Ascii("ensia"),
        dictgen::InsensitiveStr::Ascii("ensian"),
        dictgen::InsensitiveStr::Ascii("ktrination"),
        dictgen::InsensitiveStr::Ascii("nasian"),
        dictgen::InsensitiveStr::Ascii("neisa"),
        dictgen::InsensitiveStr::Ascii("neisan"),
        dictgen::InsensitiveStr::Ascii("nesa"),
        dictgen::InsensitiveStr::Ascii("nesean"),
        dictgen::InsensitiveStr::Ascii("nesien"),
        dictgen::InsensitiveStr::Ascii("nesion"),
        dictgen::InsensitiveStr::Ascii("nisian"),
        dictgen::InsensitiveStr::Ascii("nistan"),
    ],
    values: &[
        &["indoctrinated"],
        &["indoctrination"],
        &["indoctrinated"],
        &["indoctrinated"],
        &["indoctrination"],
        &["indoctrinated"],
        &["indoctrination"],
        &["indoctrinated"],
        &["indonesia"],
        &["indonesian"],
        &["indoctrination"],
        &["indonesian"],
        &["indonesia"],
        &["indonesian"],
        &["indonesia"],
        &["indonesian"],
        &["indonesian"],
        &["indonesian"],
        &["indonesian"],
        &["indonesian"],
    ],
    range: 4..=10,
};

static WORD_INDL_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_INDL_CHILDREN),
    value: None,
};

pub static WORD_INDL_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("uge")],
    values: &[&["indulge"]],
    range: 3..=3,
};

static WORD_INDI_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_INDI_CHILDREN),
    value: None,
};

static WORD_INDI_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    Some(&WORD_INDIA_NODE),
    None,
    Some(&WORD_INDIC_NODE),
    None,
    None,
    Some(&WORD_INDIF_NODE),
    Some(&WORD_INDIG_NODE),
    None,
    None,
    None,
    Some(&WORD_INDIK_NODE),
    None,
    Some(&WORD_INDIM_NODE),
    None,
    None,
    Some(&WORD_INDIP_NODE),
    None,
    Some(&WORD_INDIR_NODE),
    Some(&WORD_INDIS_NODE),
    None,
    None,
    Some(&WORD_INDIV_NODE),
    None,
    None,
    None,
    None,
];

static WORD_INDIV_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_INDIV_CHILDREN),
    value: None,
};

pub static WORD_INDIV_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("idiual"),
        dictgen::InsensitiveStr::Ascii("iduais"),
        dictgen::InsensitiveStr::Ascii("iduales"),
        dictgen::InsensitiveStr::Ascii("iduallity"),
        dictgen::InsensitiveStr::Ascii("idualty"),
        dictgen::InsensitiveStr::Ascii("idualy"),
        dictgen::InsensitiveStr::Ascii("iduati"),
        dictgen::InsensitiveStr::Ascii("iduel"),
        dictgen::InsensitiveStr::Ascii("iduella"),
        dictgen::InsensitiveStr::Ascii("iduels"),
        dictgen::InsensitiveStr::Ascii("idul"),
        dictgen::InsensitiveStr::Ascii("idus"),
        dictgen::InsensitiveStr::Ascii("iudal"),
        dictgen::InsensitiveStr::Ascii("iudally"),
        dictgen::InsensitiveStr::Ascii("udual"),
        dictgen::InsensitiveStr::Ascii("uduality"),
        dictgen::InsensitiveStr::Ascii("udually"),
        dictgen::InsensitiveStr::Ascii("uduals"),
    ],
    values: &[
        &["individual"],
        &["individuals"],
        &["individuals"],
        &["individuality"],
        &["individuality"],
        &["individually"],
        &["individuality"],
        &["individual"],
        &["individual"],
        &["individuals"],
        &["individual"],
        &["individuals"],
        &["individuals"],
        &["individually"],
        &["individual"],
        &["individuality"],
        &["individually"],
        &["individuals"],
    ],
    range: 4..=9,
};

static WORD_INDIS_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_INDIS_CHILDREN),
    value: None,
};

pub static WORD_INDIS_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ious"),
        dictgen::InsensitiveStr::Ascii("pensible"),
        dictgen::InsensitiveStr::Ascii("putible"),
        dictgen::InsensitiveStr::Ascii("putibly"),
        dictgen::InsensitiveStr::Ascii("tinguisable"),
        dictgen::InsensitiveStr::Ascii("tinguishible"),
        dictgen::InsensitiveStr::Ascii("tingusihable"),
        dictgen::InsensitiveStr::Ascii("tinquishable"),
        dictgen::InsensitiveStr::Ascii("tructible"),
        dictgen::InsensitiveStr::Ascii("tuingishable"),
    ],
    values: &[
        &["insidious"],
        &["indispensable"],
        &["indisputable"],
        &["indisputably"],
        &["indistinguishable"],
        &["indistinguishable"],
        &["indistinguishable"],
        &["indistinguishable"],
        &["indestructible"],
        &["indistinguishable"],
    ],
    range: 4..=12,
};

static WORD_INDIR_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_INDIR_CHILDREN),
    value: None,
};

pub static WORD_INDIR_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("eclty"),
        dictgen::InsensitiveStr::Ascii("ectely"),
        dictgen::InsensitiveStr::Ascii("ecty"),
        dictgen::InsensitiveStr::Ascii("ektly"),
    ],
    values: &[
        &["indirectly"],
        &["indirectly"],
        &["indirectly"],
        &["indirectly"],
    ],
    range: 4..=6,
};

static WORD_INDIP_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_INDIP_CHILDREN),
    value: None,
};

pub static WORD_INDIP_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("endence"),
        dictgen::InsensitiveStr::Ascii("endent"),
        dictgen::InsensitiveStr::Ascii("endently"),
    ],
    values: &[&["independence"], &["independent"], &["independently"]],
    range: 6..=8,
};

static WORD_INDIM_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_INDIM_CHILDREN),
    value: None,
};

pub static WORD_INDIM_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("idating"),
        dictgen::InsensitiveStr::Ascii("idation"),
    ],
    values: &[&["intimidating"], &["intimidation"]],
    range: 7..=7,
};

static WORD_INDIK_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_INDIK_CHILDREN),
    value: None,
};

pub static WORD_INDIK_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("ation")],
    values: &[&["indication"]],
    range: 5..=5,
};

static WORD_INDIG_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_INDIG_CHILDREN),
    value: None,
};

pub static WORD_INDIG_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("eneous"),
        dictgen::InsensitiveStr::Ascii("enious"),
        dictgen::InsensitiveStr::Ascii("enius"),
        dictgen::InsensitiveStr::Ascii("enos"),
        dictgen::InsensitiveStr::Ascii("enuous"),
        dictgen::InsensitiveStr::Ascii("ineous"),
        dictgen::InsensitiveStr::Ascii("inous"),
        dictgen::InsensitiveStr::Ascii("neous"),
    ],
    values: &[
        &["indigenous"],
        &["indigenous"],
        &["indigenous"],
        &["indigenous"],
        &["indigenous"],
        &["indigenous"],
        &["indigenous"],
        &["indigenous"],
    ],
    range: 4..=6,
};

static WORD_INDIF_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_INDIF_CHILDREN),
    value: None,
};

pub static WORD_INDIF_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ferance"),
        dictgen::InsensitiveStr::Ascii("ferant"),
        dictgen::InsensitiveStr::Ascii("ferente"),
        dictgen::InsensitiveStr::Ascii("fernce"),
        dictgen::InsensitiveStr::Ascii("fernece"),
        dictgen::InsensitiveStr::Ascii("fernt"),
    ],
    values: &[
        &["indifference"],
        &["indifferent"],
        &["indifference"],
        &["indifference"],
        &["indifference"],
        &["indifferent"],
    ],
    range: 5..=7,
};

static WORD_INDIC_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_INDIC_CHILDREN),
    value: None,
};

pub static WORD_INDIC_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("aste"),
        dictgen::InsensitiveStr::Ascii("aters"),
        dictgen::InsensitiveStr::Ascii("ateurs"),
        dictgen::InsensitiveStr::Ascii("atie"),
        dictgen::InsensitiveStr::Ascii("atiors"),
        dictgen::InsensitiveStr::Ascii("ativo"),
        dictgen::InsensitiveStr::Ascii("ato"),
        dictgen::InsensitiveStr::Ascii("atore"),
        dictgen::InsensitiveStr::Ascii("ats"),
        dictgen::InsensitiveStr::Ascii("ence"),
        dictgen::InsensitiveStr::Ascii("entally"),
        dictgen::InsensitiveStr::Ascii("ents"),
        dictgen::InsensitiveStr::Ascii("itave"),
        dictgen::InsensitiveStr::Ascii("itive"),
        dictgen::InsensitiveStr::Ascii("tement"),
        dictgen::InsensitiveStr::Ascii("trinated"),
    ],
    values: &[
        &["indicates"],
        &["indicates"],
        &["indicates"],
        &["indicative"],
        &["indicators"],
        &["indication"],
        &["indication"],
        &["indicate"],
        &["indicators"],
        &["incidence"],
        &["incidentally"],
        &["incidents"],
        &["indicative"],
        &["indicative"],
        &["indictment"],
        &["indoctrinated"],
    ],
    range: 3..=8,
};

static WORD_INDIA_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_INDIA_CHILDREN),
    value: None,
};

pub static WORD_INDIA_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("an"),
        dictgen::InsensitiveStr::Ascii("naoplis"),
        dictgen::InsensitiveStr::Ascii("napols"),
        dictgen::InsensitiveStr::Ascii("nas"),
        dictgen::InsensitiveStr::Ascii("nds"),
        dictgen::InsensitiveStr::Ascii("nia"),
        dictgen::InsensitiveStr::Ascii("nna"),
        dictgen::InsensitiveStr::Ascii("nopolis"),
        dictgen::InsensitiveStr::Ascii("nos"),
    ],
    values: &[
        &["indiana"],
        &["indianapolis"],
        &["indianapolis"],
        &["indians"],
        &["indians"],
        &["indiana"],
        &["indiana"],
        &["indianapolis"],
        &["indians"],
    ],
    range: 2..=7,
};

static WORD_INDE_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_INDE_CHILDREN),
    value: None,
};

pub static WORD_INDE_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("fenite"),
        dictgen::InsensitiveStr::Ascii("finate"),
        dictgen::InsensitiveStr::Ascii("finately"),
        dictgen::InsensitiveStr::Ascii("fineable"),
        dictgen::InsensitiveStr::Ascii("finete"),
        dictgen::InsensitiveStr::Ascii("finetely"),
        dictgen::InsensitiveStr::Ascii("finetly"),
        dictgen::InsensitiveStr::Ascii("fininte"),
        dictgen::InsensitiveStr::Ascii("finitelly"),
        dictgen::InsensitiveStr::Ascii("finitive"),
        dictgen::InsensitiveStr::Ascii("finitley"),
        dictgen::InsensitiveStr::Ascii("finitly"),
        dictgen::InsensitiveStr::Ascii("finity"),
        dictgen::InsensitiveStr::Ascii("fintiely"),
        dictgen::InsensitiveStr::Ascii("ginous"),
        dictgen::InsensitiveStr::Ascii("ntical"),
        dictgen::InsensitiveStr::Ascii("pdenent"),
        dictgen::InsensitiveStr::Ascii("pedantly"),
        dictgen::InsensitiveStr::Ascii("pedence"),
        dictgen::InsensitiveStr::Ascii("pednent"),
        dictgen::InsensitiveStr::Ascii("pencence"),
        dictgen::InsensitiveStr::Ascii("pendance"),
        dictgen::InsensitiveStr::Ascii("pendant"),
        dictgen::InsensitiveStr::Ascii("pendante"),
        dictgen::InsensitiveStr::Ascii("pendantes"),
        dictgen::InsensitiveStr::Ascii("pendantly"),
        dictgen::InsensitiveStr::Ascii("pendece"),
        dictgen::InsensitiveStr::Ascii("pendendet"),
        dictgen::InsensitiveStr::Ascii("pendendly"),
        dictgen::InsensitiveStr::Ascii("pendenet"),
        dictgen::InsensitiveStr::Ascii("pendenly"),
        dictgen::InsensitiveStr::Ascii("pendens"),
        dictgen::InsensitiveStr::Ascii("pendense"),
        dictgen::InsensitiveStr::Ascii("pendente"),
        dictgen::InsensitiveStr::Ascii("pendentisme"),
        dictgen::InsensitiveStr::Ascii("pendentiste"),
        dictgen::InsensitiveStr::Ascii("pendentness"),
        dictgen::InsensitiveStr::Ascii("pendet"),
        dictgen::InsensitiveStr::Ascii("pendetly"),
        dictgen::InsensitiveStr::Ascii("pendetn"),
        dictgen::InsensitiveStr::Ascii("pendets"),
        dictgen::InsensitiveStr::Ascii("pendnet"),
        dictgen::InsensitiveStr::Ascii("penent"),
        dictgen::InsensitiveStr::Ascii("pentend"),
        dictgen::InsensitiveStr::Ascii("pentent"),
        dictgen::InsensitiveStr::Ascii("pentently"),
        dictgen::InsensitiveStr::Ascii("pentents"),
        dictgen::InsensitiveStr::Ascii("rictly"),
        dictgen::InsensitiveStr::Ascii("spensable"),
        dictgen::InsensitiveStr::Ascii("spensible"),
        dictgen::InsensitiveStr::Ascii("strictible"),
        dictgen::InsensitiveStr::Ascii("structble"),
        dictgen::InsensitiveStr::Ascii("structibe"),
        dictgen::InsensitiveStr::Ascii("structuble"),
        dictgen::InsensitiveStr::Ascii("tifiable"),
        dictgen::InsensitiveStr::Ascii("tification"),
    ],
    values: &[
        &["indefinite"],
        &["indefinite"],
        &["indefinitely"],
        &["undefinable"],
        &["indefinite"],
        &["indefinitely"],
        &["indefinitely"],
        &["indefinite"],
        &["indefinitely"],
        &["indefinite"],
        &["indefinitely"],
        &["indefinitely"],
        &["indefinitely"],
        &["indefinitely"],
        &["indigenous"],
        &["identical"],
        &["independents"],
        &["independently"],
        &["independence"],
        &["independents"],
        &["independence"],
        &["independence"],
        &["independent"],
        &["independents"],
        &["independents"],
        &["independently"],
        &["independence"],
        &["independent"],
        &["independently"],
        &["independents"],
        &["independently"],
        &["independents"],
        &["independents"],
        &["independence"],
        &["independents"],
        &["independents"],
        &["independents"],
        &["independent"],
        &["independently"],
        &["independents"],
        &["independents"],
        &["independents"],
        &["independent"],
        &["independents"],
        &["independent"],
        &["independently"],
        &["independents"],
        &["indirectly"],
        &["indispensable"],
        &["indispensable"],
        &["indestructible"],
        &["indestructible"],
        &["indestructible"],
        &["indestructible"],
        &["identifiable"],
        &["identification"],
    ],
    range: 6..=11,
};

static WORD_INDA_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_INDA_CHILDREN),
    value: None,
};

pub static WORD_INDA_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ins"),
        dictgen::InsensitiveStr::Ascii("vertently"),
    ],
    values: &[&["indians"], &["inadvertently"]],
    range: 3..=9,
};

static WORD_INC_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_INC_CHILDREN),
    value: None,
};

static WORD_INC_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    Some(&WORD_INCA_NODE),
    None,
    None,
    None,
    Some(&WORD_INCE_NODE),
    None,
    Some(&WORD_INCG_NODE),
    Some(&WORD_INCH_NODE),
    Some(&WORD_INCI_NODE),
    None,
    None,
    Some(&WORD_INCL_NODE),
    None,
    None,
    Some(&WORD_INCO_NODE),
    Some(&WORD_INCP_NODE),
    None,
    Some(&WORD_INCR_NODE),
    None,
    Some(&WORD_INCT_NODE),
    Some(&WORD_INCU_NODE),
    None,
    None,
    None,
    None,
    None,
];

static WORD_INCU_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_INCU_CHILDREN),
    value: None,
};

pub static WORD_INCU_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ding"),
        dictgen::InsensitiveStr::Ascii("lded"),
        dictgen::InsensitiveStr::Ascii("lding"),
        dictgen::InsensitiveStr::Ascii("nabla"),
    ],
    values: &[
        &["including"],
        &["included"],
        &["including"],
        &["incunabula"],
    ],
    range: 4..=5,
};

static WORD_INCT_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_INCT_CHILDREN),
    value: None,
};

pub static WORD_INCT_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("roduce"),
        dictgen::InsensitiveStr::Ascii("roduced"),
    ],
    values: &[&["introduce"], &["introduced"]],
    range: 6..=7,
};

static WORD_INCR_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_INCR_CHILDREN),
    value: None,
};

pub static WORD_INCR_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("amental"),
        dictgen::InsensitiveStr::Ascii("amentally"),
        dictgen::InsensitiveStr::Ascii("aments"),
        dictgen::InsensitiveStr::Ascii("eadible"),
        dictgen::InsensitiveStr::Ascii("edable"),
        dictgen::InsensitiveStr::Ascii("edably"),
        dictgen::InsensitiveStr::Ascii("ediable"),
        dictgen::InsensitiveStr::Ascii("ediably"),
        dictgen::InsensitiveStr::Ascii("edibe"),
        dictgen::InsensitiveStr::Ascii("edibile"),
        dictgen::InsensitiveStr::Ascii("edibily"),
        dictgen::InsensitiveStr::Ascii("ediblely"),
        dictgen::InsensitiveStr::Ascii("edibley"),
        dictgen::InsensitiveStr::Ascii("ediby"),
        dictgen::InsensitiveStr::Ascii("ememnts"),
        dictgen::InsensitiveStr::Ascii("emenets"),
        dictgen::InsensitiveStr::Ascii("ementarla"),
        dictgen::InsensitiveStr::Ascii("ementarlo"),
        dictgen::InsensitiveStr::Ascii("ementas"),
        dictgen::InsensitiveStr::Ascii("ementers"),
        dictgen::InsensitiveStr::Ascii("emential"),
        dictgen::InsensitiveStr::Ascii("emently"),
        dictgen::InsensitiveStr::Ascii("ementos"),
        dictgen::InsensitiveStr::Ascii("emetal"),
        dictgen::InsensitiveStr::Ascii("imental"),
        dictgen::InsensitiveStr::Ascii("iments"),
        dictgen::InsensitiveStr::Ascii("ompehensible"),
    ],
    values: &[
        &["incremental"],
        &["incrementally"],
        &["increments"],
        &["incredible"],
        &["incredible"],
        &["incredibly"],
        &["incredible"],
        &["incredibly"],
        &["incredible"],
        &["incredible"],
        &["incredibly"],
        &["incredibly"],
        &["incredibly"],
        &["incredibly"],
        &["increments"],
        &["increments"],
        &["incremental"],
        &["incremental"],
        &["increments"],
        &["increments"],
        &["incremental"],
        &["incremental"],
        &["increments"],
        &["incremental"],
        &["incremental"],
        &["increments"],
        &["incomprehensible"],
    ],
    range: 5..=12,
};

static WORD_INCP_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_INCP_CHILDREN),
    value: None,
};

pub static WORD_INCP_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("etion")],
    values: &[&["inception"]],
    range: 5..=5,
};

static WORD_INCO_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_INCO_CHILDREN),
    value: None,
};

static WORD_INCO_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    None,
    None,
    None,
    None,
    None,
    None,
    Some(&WORD_INCOG_NODE),
    Some(&WORD_INCOH_NODE),
    None,
    None,
    None,
    None,
    Some(&WORD_INCOM_NODE),
    Some(&WORD_INCON_NODE),
    None,
    None,
    None,
    Some(&WORD_INCOR_NODE),
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
];

static WORD_INCOR_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_INCOR_CHILDREN),
    value: None,
};

pub static WORD_INCOR_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ect"),
        dictgen::InsensitiveStr::Ascii("ectly"),
        dictgen::InsensitiveStr::Ascii("oporated"),
        dictgen::InsensitiveStr::Ascii("oprate"),
        dictgen::InsensitiveStr::Ascii("parate"),
        dictgen::InsensitiveStr::Ascii("parated"),
        dictgen::InsensitiveStr::Ascii("parating"),
        dictgen::InsensitiveStr::Ascii("perate"),
        dictgen::InsensitiveStr::Ascii("perated"),
        dictgen::InsensitiveStr::Ascii("perating"),
        dictgen::InsensitiveStr::Ascii("peration"),
        dictgen::InsensitiveStr::Ascii("porare"),
        dictgen::InsensitiveStr::Ascii("pore"),
        dictgen::InsensitiveStr::Ascii("portaed"),
        dictgen::InsensitiveStr::Ascii("portate"),
        dictgen::InsensitiveStr::Ascii("ported"),
        dictgen::InsensitiveStr::Ascii("prates"),
        dictgen::InsensitiveStr::Ascii("proate"),
        dictgen::InsensitiveStr::Ascii("recly"),
        dictgen::InsensitiveStr::Ascii("recty"),
        dictgen::InsensitiveStr::Ascii("retly"),
        dictgen::InsensitiveStr::Ascii("ruptable"),
    ],
    values: &[
        &["incorrect"],
        &["incorrectly"],
        &["incorporated"],
        &["incorporate"],
        &["incorporate"],
        &["incorporated"],
        &["incorporating"],
        &["incorporate"],
        &["incorporated"],
        &["incorporating"],
        &["incorporation"],
        &["incorporate"],
        &["incorporate"],
        &["incorporated"],
        &["incorporate"],
        &["incorporated"],
        &["incorporates"],
        &["incorporated"],
        &["incorrectly"],
        &["incorrectly"],
        &["incorrectly"],
        &["incorruptible"],
    ],
    range: 3..=8,
};

static WORD_INCON_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_INCON_CHILDREN),
    value: None,
};

pub static WORD_INCON_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("cequential"),
        dictgen::InsensitiveStr::Ascii("ciderate"),
        dictgen::InsensitiveStr::Ascii("cistencies"),
        dictgen::InsensitiveStr::Ascii("cistency"),
        dictgen::InsensitiveStr::Ascii("cistent"),
        dictgen::InsensitiveStr::Ascii("ditional"),
        dictgen::InsensitiveStr::Ascii("ditionally"),
        dictgen::InsensitiveStr::Ascii("gito"),
        dictgen::InsensitiveStr::Ascii("prehensible"),
        dictgen::InsensitiveStr::Ascii("sciously"),
        dictgen::InsensitiveStr::Ascii("secuential"),
        dictgen::InsensitiveStr::Ascii("sequantial"),
        dictgen::InsensitiveStr::Ascii("sequencial"),
        dictgen::InsensitiveStr::Ascii("sequental"),
        dictgen::InsensitiveStr::Ascii("sequentional"),
        dictgen::InsensitiveStr::Ascii("sequentual"),
        dictgen::InsensitiveStr::Ascii("siderant"),
        dictgen::InsensitiveStr::Ascii("siquential"),
        dictgen::InsensitiveStr::Ascii("sisent"),
        dictgen::InsensitiveStr::Ascii("sistance"),
        dictgen::InsensitiveStr::Ascii("sistancies"),
        dictgen::InsensitiveStr::Ascii("sistancy"),
        dictgen::InsensitiveStr::Ascii("sistant"),
        dictgen::InsensitiveStr::Ascii("sistecy"),
        dictgen::InsensitiveStr::Ascii("sistencias"),
        dictgen::InsensitiveStr::Ascii("sistenly"),
        dictgen::InsensitiveStr::Ascii("sistensies"),
        dictgen::InsensitiveStr::Ascii("sistensy"),
        dictgen::InsensitiveStr::Ascii("sistentcies"),
        dictgen::InsensitiveStr::Ascii("sistentcy"),
        dictgen::InsensitiveStr::Ascii("sistenties"),
        dictgen::InsensitiveStr::Ascii("sistenty"),
        dictgen::InsensitiveStr::Ascii("sisteny"),
        dictgen::InsensitiveStr::Ascii("stitutional"),
        dictgen::InsensitiveStr::Ascii("trollably"),
        dictgen::InsensitiveStr::Ascii("veinence"),
        dictgen::InsensitiveStr::Ascii("veinent"),
        dictgen::InsensitiveStr::Ascii("veniance"),
        dictgen::InsensitiveStr::Ascii("veniant"),
        dictgen::InsensitiveStr::Ascii("veniece"),
        dictgen::InsensitiveStr::Ascii("veniente"),
        dictgen::InsensitiveStr::Ascii("veniet"),
        dictgen::InsensitiveStr::Ascii("venince"),
        dictgen::InsensitiveStr::Ascii("ventional"),
        dictgen::InsensitiveStr::Ascii("vienence"),
        dictgen::InsensitiveStr::Ascii("vienenced"),
        dictgen::InsensitiveStr::Ascii("vienent"),
    ],
    values: &[
        &["inconsequential"],
        &["inconsiderate"],
        &["inconsistencies"],
        &["inconsistency"],
        &["inconsistent"],
        &["unconditional"],
        &["unconditionally"],
        &["incognito"],
        &["incomprehensible"],
        &["unconsciously"],
        &["inconsequential"],
        &["inconsequential"],
        &["inconsequential"],
        &["inconsequential"],
        &["inconsequential"],
        &["inconsequential"],
        &["inconsiderate"],
        &["inconsequential"],
        &["inconsistent"],
        &["inconsistency"],
        &["inconsistencies"],
        &["inconsistency"],
        &["inconsistent"],
        &["inconsistency"],
        &["inconsistencies"],
        &["inconsistency"],
        &["inconsistencies"],
        &["inconsistency"],
        &["inconsistencies"],
        &["inconsistency"],
        &["inconsistencies"],
        &["inconsistency"],
        &["inconsistency"],
        &["unconstitutional"],
        &["uncontrollably"],
        &["inconvenience"],
        &["inconvenient"],
        &["inconvenience"],
        &["inconvenient"],
        &["inconvenience"],
        &["inconvenience"],
        &["inconvenient"],
        &["inconvenience"],
        &["unconventional"],
        &["inconvenience"],
        &["inconvenience"],
        &["inconvenient"],
    ],
    range: 4..=12,
};

static WORD_INCOM_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_INCOM_CHILDREN),
    value: None,
};

pub static WORD_INCOM_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("aptible"),
        dictgen::InsensitiveStr::Ascii("fortable"),
        dictgen::InsensitiveStr::Ascii("fortably"),
        dictgen::InsensitiveStr::Ascii("parible"),
        dictgen::InsensitiveStr::Ascii("patabile"),
        dictgen::InsensitiveStr::Ascii("patabilities"),
        dictgen::InsensitiveStr::Ascii("patability"),
        dictgen::InsensitiveStr::Ascii("patable"),
        dictgen::InsensitiveStr::Ascii("patablities"),
        dictgen::InsensitiveStr::Ascii("patablity"),
        dictgen::InsensitiveStr::Ascii("patble"),
        dictgen::InsensitiveStr::Ascii("patent"),
        dictgen::InsensitiveStr::Ascii("patiable"),
        dictgen::InsensitiveStr::Ascii("patibil"),
        dictgen::InsensitiveStr::Ascii("patibile"),
        dictgen::InsensitiveStr::Ascii("patiblities"),
        dictgen::InsensitiveStr::Ascii("patiblity"),
        dictgen::InsensitiveStr::Ascii("petance"),
        dictgen::InsensitiveStr::Ascii("petant"),
        dictgen::InsensitiveStr::Ascii("petente"),
        dictgen::InsensitiveStr::Ascii("petentence"),
        dictgen::InsensitiveStr::Ascii("pitable"),
        dictgen::InsensitiveStr::Ascii("pitent"),
        dictgen::InsensitiveStr::Ascii("potent"),
        dictgen::InsensitiveStr::Ascii("prehencible"),
        dictgen::InsensitiveStr::Ascii("prehendible"),
        dictgen::InsensitiveStr::Ascii("prehenisble"),
        dictgen::InsensitiveStr::Ascii("prehensable"),
        dictgen::InsensitiveStr::Ascii("prehensibe"),
        dictgen::InsensitiveStr::Ascii("prehesible"),
        dictgen::InsensitiveStr::Ascii("prehinsible"),
        dictgen::InsensitiveStr::Ascii("prihensible"),
        dictgen::InsensitiveStr::Ascii("ptable"),
        dictgen::InsensitiveStr::Ascii("ptetent"),
    ],
    values: &[
        &["incompatible"],
        &["uncomfortable"],
        &["uncomfortably"],
        &["incompatible"],
        &["incompatible"],
        &["incompatibilities"],
        &["incompatibility"],
        &["incompatible"],
        &["incompatibilities"],
        &["incompatibility"],
        &["incompatible"],
        &["incompetent"],
        &["incompatible"],
        &["incompatible"],
        &["incompatible"],
        &["incompatibilities"],
        &["incompatibility"],
        &["incompetence"],
        &["incompetent"],
        &["incompetence"],
        &["incompetence"],
        &["incompatible"],
        &["incompetent"],
        &["incompetent"],
        &["incomprehensible"],
        &["incomprehensible"],
        &["incomprehensible"],
        &["incomprehensible"],
        &["incomprehensible"],
        &["incomprehensible"],
        &["incomprehensible"],
        &["incomprehensible"],
        &["incompatible"],
        &["incompetent"],
    ],
    range: 6..=12,
};

static WORD_INCOH_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_INCOH_CHILDREN),
    value: None,
};

pub static WORD_INCOH_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("erant"),
        dictgen::InsensitiveStr::Ascii("errent"),
        dictgen::InsensitiveStr::Ascii("orent"),
    ],
    values: &[&["incoherent"], &["incoherent"], &["incoherent"]],
    range: 5..=6,
};

static WORD_INCOG_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_INCOG_CHILDREN),
    value: None,
};

pub static WORD_INCOG_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("into"),
        dictgen::InsensitiveStr::Ascii("nitio"),
        dictgen::InsensitiveStr::Ascii("nition"),
    ],
    values: &[&["incognito"], &["incognito"], &["incognito"]],
    range: 4..=6,
};

static WORD_INCL_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_INCL_CHILDREN),
    value: None,
};

pub static WORD_INCL_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("anation"),
        dictgen::InsensitiveStr::Ascii("due"),
        dictgen::InsensitiveStr::Ascii("enation"),
        dictgen::InsensitiveStr::Ascii("inacion"),
        dictgen::InsensitiveStr::Ascii("inaison"),
        dictgen::InsensitiveStr::Ascii("inato"),
        dictgen::InsensitiveStr::Ascii("ince"),
        dictgen::InsensitiveStr::Ascii("inde"),
        dictgen::InsensitiveStr::Ascii("reased"),
        dictgen::InsensitiveStr::Ascii("ud"),
        dictgen::InsensitiveStr::Ascii("udeds"),
        dictgen::InsensitiveStr::Ascii("udng"),
        dictgen::InsensitiveStr::Ascii("use"),
    ],
    values: &[
        &["inclination"],
        &["include"],
        &["inclination"],
        &["inclination"],
        &["inclination"],
        &["inclination"],
        &["incline"],
        &["incline"],
        &["increased"],
        &["include"],
        &["includes"],
        &["including"],
        &["includes"],
    ],
    range: 2..=7,
};

static WORD_INCI_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_INCI_CHILDREN),
    value: None,
};

pub static WORD_INCI_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("dencies"),
        dictgen::InsensitiveStr::Ascii("dentaly"),
        dictgen::InsensitiveStr::Ascii("dentes"),
        dictgen::InsensitiveStr::Ascii("dential"),
        dictgen::InsensitiveStr::Ascii("dentially"),
        dictgen::InsensitiveStr::Ascii("dently"),
        dictgen::InsensitiveStr::Ascii("dentul"),
    ],
    values: &[
        &["incidence"],
        &["incidentally"],
        &["incidents"],
        &["incidental"],
        &["incidentally"],
        &["incidentally"],
        &["incidental"],
    ],
    range: 6..=9,
};

static WORD_INCH_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_INCH_CHILDREN),
    value: None,
};

pub static WORD_INCH_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("oerent")],
    values: &[&["incoherent"]],
    range: 6..=6,
};

static WORD_INCG_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_INCG_CHILDREN),
    value: None,
};

pub static WORD_INCG_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("onito")],
    values: &[&["incognito"]],
    range: 5..=5,
};

static WORD_INCE_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_INCE_CHILDREN),
    value: None,
};

pub static WORD_INCE_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("dentally"),
        dictgen::InsensitiveStr::Ascii("ntivare"),
        dictgen::InsensitiveStr::Ascii("ntivate"),
        dictgen::InsensitiveStr::Ascii("ntiveise"),
        dictgen::InsensitiveStr::Ascii("ntivice"),
        dictgen::InsensitiveStr::Ascii("ntivies"),
        dictgen::InsensitiveStr::Ascii("ntivos"),
        dictgen::InsensitiveStr::Ascii("rceration"),
        dictgen::InsensitiveStr::Ascii("stigator"),
    ],
    values: &[
        &["incidentally"],
        &["incentive"],
        &["incentive"],
        &["incentives"],
        &["incentive"],
        &["incentives"],
        &["incentives"],
        &["incarceration"],
        &["investigator"],
    ],
    range: 6..=9,
};

static WORD_INCA_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_INCA_CHILDREN),
    value: None,
};

pub static WORD_INCA_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("rantion"),
        dictgen::InsensitiveStr::Ascii("rcaration"),
        dictgen::InsensitiveStr::Ascii("rcelated"),
        dictgen::InsensitiveStr::Ascii("rcerato"),
        dictgen::InsensitiveStr::Ascii("rcirated"),
        dictgen::InsensitiveStr::Ascii("rciration"),
        dictgen::InsensitiveStr::Ascii("rnacion"),
        dictgen::InsensitiveStr::Ascii("rnato"),
        dictgen::InsensitiveStr::Ascii("rnaton"),
        dictgen::InsensitiveStr::Ascii("rserated"),
        dictgen::InsensitiveStr::Ascii("rseration"),
    ],
    values: &[
        &["incarnation"],
        &["incarceration"],
        &["incarcerated"],
        &["incarceration"],
        &["incarcerated"],
        &["incarceration"],
        &["incarnation"],
        &["incarnation"],
        &["incarnation"],
        &["incarcerated"],
        &["incarceration"],
    ],
    range: 5..=9,
};

static WORD_INB_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_INB_CHILDREN),
    value: None,
};

pub static WORD_INB_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("alance"),
        dictgen::InsensitiveStr::Ascii("alanced"),
        dictgen::InsensitiveStr::Ascii("eetwen"),
        dictgen::InsensitiveStr::Ascii("elievable"),
        dictgen::InsensitiveStr::Ascii("etweeen"),
        dictgen::InsensitiveStr::Ascii("etween"),
        dictgen::InsensitiveStr::Ascii("etwen"),
        dictgen::InsensitiveStr::Ascii("ewteen"),
    ],
    values: &[
        &["imbalance"],
        &["imbalanced"],
        &["inbetween"],
        &["unbelievable"],
        &["inbetween"],
        &["between"],
        &["inbetween"],
        &["inbetween"],
    ],
    range: 5..=9,
};

static WORD_INA_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_INA_CHILDREN),
    value: None,
};

pub static WORD_INA_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("blility"),
        dictgen::InsensitiveStr::Ascii("ccesibles"),
        dictgen::InsensitiveStr::Ascii("ccessable"),
        dictgen::InsensitiveStr::Ascii("ccessbile"),
        dictgen::InsensitiveStr::Ascii("ccessble"),
        dictgen::InsensitiveStr::Ascii("ccessibile"),
        dictgen::InsensitiveStr::Ascii("ccruate"),
        dictgen::InsensitiveStr::Ascii("ccuraces"),
        dictgen::InsensitiveStr::Ascii("ccurasies"),
        dictgen::InsensitiveStr::Ascii("ccuraties"),
        dictgen::InsensitiveStr::Ascii("ccuricies"),
        dictgen::InsensitiveStr::Ascii("ccurrate"),
        dictgen::InsensitiveStr::Ascii("curaccies"),
        dictgen::InsensitiveStr::Ascii("daquate"),
        dictgen::InsensitiveStr::Ascii("daquete"),
        dictgen::InsensitiveStr::Ascii("decuate"),
        dictgen::InsensitiveStr::Ascii("deguate"),
        dictgen::InsensitiveStr::Ascii("deqaute"),
        dictgen::InsensitiveStr::Ascii("dequet"),
        dictgen::InsensitiveStr::Ascii("dequete"),
        dictgen::InsensitiveStr::Ascii("dequite"),
        dictgen::InsensitiveStr::Ascii("diquate"),
        dictgen::InsensitiveStr::Ascii("dquate"),
        dictgen::InsensitiveStr::Ascii("dventently"),
        dictgen::InsensitiveStr::Ascii("dverdently"),
        dictgen::InsensitiveStr::Ascii("dvertant"),
        dictgen::InsensitiveStr::Ascii("dvertantely"),
        dictgen::InsensitiveStr::Ascii("dvertantly"),
        dictgen::InsensitiveStr::Ascii("dvertendly"),
        dictgen::InsensitiveStr::Ascii("dvertenly"),
        dictgen::InsensitiveStr::Ascii("gurated"),
        dictgen::InsensitiveStr::Ascii("guration"),
        dictgen::InsensitiveStr::Ascii("hbitants"),
        dictgen::InsensitiveStr::Ascii("pporpriate"),
        dictgen::InsensitiveStr::Ascii("pporpriately"),
        dictgen::InsensitiveStr::Ascii("ppropiate"),
        dictgen::InsensitiveStr::Ascii("ppropirate"),
        dictgen::InsensitiveStr::Ascii("ppropraite"),
        dictgen::InsensitiveStr::Ascii("ppropraitely"),
        dictgen::InsensitiveStr::Ascii("pproprate"),
        dictgen::InsensitiveStr::Ascii("ppropriae"),
        dictgen::InsensitiveStr::Ascii("ppropriatelly"),
        dictgen::InsensitiveStr::Ascii("ppropriatley"),
        dictgen::InsensitiveStr::Ascii("ppropriatly"),
        dictgen::InsensitiveStr::Ascii("ppropriet"),
        dictgen::InsensitiveStr::Ascii("pproprietly"),
        dictgen::InsensitiveStr::Ascii("proppriate"),
        dictgen::InsensitiveStr::Ascii("ttractive"),
        dictgen::InsensitiveStr::Ascii("ugures"),
    ],
    values: &[
        &["inability"],
        &["inaccessible"],
        &["inaccessible"],
        &["inaccessible"],
        &["inaccessible"],
        &["inaccessible"],
        &["inaccurate"],
        &["inaccuracies"],
        &["inaccuracies"],
        &["inaccuracies"],
        &["inaccuracies"],
        &["inaccurate"],
        &["inaccuracies"],
        &["inadequate"],
        &["inadequate"],
        &["inadequate"],
        &["inadequate"],
        &["inadequate"],
        &["inadequate"],
        &["inadequate"],
        &["inadequate"],
        &["inadequate"],
        &["inadequate"],
        &["inadvertently"],
        &["inadvertently"],
        &["inadvertent"],
        &["inadvertently"],
        &["inadvertently"],
        &["inadvertently"],
        &["inadvertently"],
        &["inaugurated"],
        &["inauguration"],
        &["inhabitants"],
        &["inappropriate"],
        &["inappropriately"],
        &["inappropriate"],
        &["inappropriate"],
        &["inappropriate"],
        &["inappropriately"],
        &["inappropriate"],
        &["inappropriately"],
        &["inappropriately"],
        &["inappropriately"],
        &["inappropriately"],
        &["inappropriately"],
        &["inappropriately"],
        &["inappropriate"],
        &["unattractive"],
        &["inaugurates"],
    ],
    range: 6..=13,
};

static WORD_IM_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_IM_CHILDREN),
    value: None,
};

static WORD_IM_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    Some(&WORD_IMA_NODE),
    Some(&WORD_IMB_NODE),
    Some(&WORD_IMC_NODE),
    None,
    Some(&WORD_IME_NODE),
    None,
    Some(&WORD_IMG_NODE),
    None,
    Some(&WORD_IMI_NODE),
    None,
    None,
    Some(&WORD_IML_NODE),
    Some(&WORD_IMM_NODE),
    None,
    None,
    Some(&WORD_IMP_NODE),
    None,
    Some(&WORD_IMR_NODE),
    None,
    Some(&WORD_IMT_NODE),
    None,
    None,
    None,
    None,
    None,
    None,
];

static WORD_IMT_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_IMT_CHILDREN),
    value: None,
};

pub static WORD_IMT_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("imidating"),
        dictgen::InsensitiveStr::Ascii("imidation"),
    ],
    values: &[&["intimidating"], &["intimidation"]],
    range: 9..=9,
};

static WORD_IMR_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_IMR_CHILDREN),
    value: None,
};

pub static WORD_IMR_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("pove"),
        dictgen::InsensitiveStr::Ascii("poved"),
        dictgen::InsensitiveStr::Ascii("povement"),
        dictgen::InsensitiveStr::Ascii("povements"),
        dictgen::InsensitiveStr::Ascii("poves"),
        dictgen::InsensitiveStr::Ascii("poving"),
        dictgen::InsensitiveStr::Ascii("povised"),
    ],
    values: &[
        &["improve"],
        &["improved"],
        &["improvement"],
        &["improvements"],
        &["improves"],
        &["improving"],
        &["improvised"],
    ],
    range: 4..=9,
};

static WORD_IMP_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_IMP_CHILDREN),
    value: None,
};

static WORD_IMP_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    Some(&WORD_IMPA_NODE),
    None,
    None,
    None,
    Some(&WORD_IMPE_NODE),
    None,
    None,
    None,
    None,
    None,
    None,
    Some(&WORD_IMPL_NODE),
    None,
    None,
    Some(&WORD_IMPO_NODE),
    None,
    None,
    Some(&WORD_IMPR_NODE),
    None,
    None,
    Some(&WORD_IMPU_NODE),
    None,
    None,
    None,
    None,
    None,
];

static WORD_IMPU_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_IMPU_CHILDREN),
    value: None,
};

pub static WORD_IMPU_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("les"),
        dictgen::InsensitiveStr::Ascii("lisve"),
        dictgen::InsensitiveStr::Ascii("lsemos"),
        dictgen::InsensitiveStr::Ascii("lsivley"),
        dictgen::InsensitiveStr::Ascii("sle"),
        dictgen::InsensitiveStr::Ascii("sles"),
        dictgen::InsensitiveStr::Ascii("slive"),
    ],
    values: &[
        &["impulse"],
        &["impulsive"],
        &["impulses"],
        &["impulsive"],
        &["impulse"],
        &["impulses"],
        &["impulsive"],
    ],
    range: 3..=7,
};

static WORD_IMPR_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_IMPR_CHILDREN),
    value: None,
};

pub static WORD_IMPR_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("actial"),
        dictgen::InsensitiveStr::Ascii("acticle"),
        dictgen::InsensitiveStr::Ascii("eative"),
        dictgen::InsensitiveStr::Ascii("efect"),
        dictgen::InsensitiveStr::Ascii("efection"),
        dictgen::InsensitiveStr::Ascii("efections"),
        dictgen::InsensitiveStr::Ascii("esison"),
        dictgen::InsensitiveStr::Ascii("esonating"),
        dictgen::InsensitiveStr::Ascii("essario"),
        dictgen::InsensitiveStr::Ascii("essin"),
        dictgen::InsensitiveStr::Ascii("essoin"),
        dictgen::InsensitiveStr::Ascii("essons"),
        dictgen::InsensitiveStr::Ascii("esssion"),
        dictgen::InsensitiveStr::Ascii("ioned"),
        dictgen::InsensitiveStr::Ascii("isonent"),
        dictgen::InsensitiveStr::Ascii("isonned"),
        dictgen::InsensitiveStr::Ascii("obabe"),
        dictgen::InsensitiveStr::Ascii("obabil"),
        dictgen::InsensitiveStr::Ascii("obabile"),
        dictgen::InsensitiveStr::Ascii("obible"),
        dictgen::InsensitiveStr::Ascii("opable"),
        dictgen::InsensitiveStr::Ascii("opre"),
        dictgen::InsensitiveStr::Ascii("osined"),
        dictgen::InsensitiveStr::Ascii("osoned"),
        dictgen::InsensitiveStr::Ascii("osonment"),
        dictgen::InsensitiveStr::Ascii("otantly"),
        dictgen::InsensitiveStr::Ascii("oted"),
        dictgen::InsensitiveStr::Ascii("ovemnt"),
        dictgen::InsensitiveStr::Ascii("ovemnts"),
        dictgen::InsensitiveStr::Ascii("ovents"),
        dictgen::InsensitiveStr::Ascii("ovie"),
        dictgen::InsensitiveStr::Ascii("oviserad"),
        dictgen::InsensitiveStr::Ascii("ovished"),
        dictgen::InsensitiveStr::Ascii("ovision"),
        dictgen::InsensitiveStr::Ascii("ovized"),
        dictgen::InsensitiveStr::Ascii("ovments"),
        dictgen::InsensitiveStr::Ascii("sioned"),
    ],
    values: &[
        &["impractical"],
        &["impractical"],
        &["imperative"],
        &["imperfect"],
        &["imperfections"],
        &["imperfections"],
        &["impressions"],
        &["impersonating"],
        &["impresario"],
        &["impressions"],
        &["impressions"],
        &["impressions"],
        &["impressions"],
        &["imprisoned"],
        &["imprisonment"],
        &["imprisoned"],
        &["improbable"],
        &["improbable"],
        &["improbable"],
        &["improbable"],
        &["improbable"],
        &["improper"],
        &["imprisoned"],
        &["imprisoned"],
        &["imprisonment"],
        &["importantly"],
        &["imported"],
        &["improvement"],
        &["improvements"],
        &["improves"],
        &["improvised"],
        &["improvised"],
        &["improvised"],
        &["improvisation"],
        &["improvised"],
        &["improvements"],
        &["imprisoned"],
    ],
    range: 4..=9,
};

static WORD_IMPO_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_IMPO_CHILDREN),
    value: None,
};

pub static WORD_IMPO_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("lde"),
        dictgen::InsensitiveStr::Ascii("rbable"),
        dictgen::InsensitiveStr::Ascii("rper"),
        dictgen::InsensitiveStr::Ascii("rtamt"),
        dictgen::InsensitiveStr::Ascii("rtanly"),
        dictgen::InsensitiveStr::Ascii("rtantce"),
        dictgen::InsensitiveStr::Ascii("rtanty"),
        dictgen::InsensitiveStr::Ascii("rtas"),
        dictgen::InsensitiveStr::Ascii("rtd"),
        dictgen::InsensitiveStr::Ascii("rten"),
        dictgen::InsensitiveStr::Ascii("rtence"),
        dictgen::InsensitiveStr::Ascii("rtend"),
        dictgen::InsensitiveStr::Ascii("rtently"),
        dictgen::InsensitiveStr::Ascii("rterad"),
        dictgen::InsensitiveStr::Ascii("rtes"),
        dictgen::InsensitiveStr::Ascii("rve"),
        dictgen::InsensitiveStr::Ascii("rved"),
        dictgen::InsensitiveStr::Ascii("rvement"),
        dictgen::InsensitiveStr::Ascii("rvements"),
        dictgen::InsensitiveStr::Ascii("rves"),
        dictgen::InsensitiveStr::Ascii("rving"),
        dictgen::InsensitiveStr::Ascii("rvised"),
        dictgen::InsensitiveStr::Ascii("ssable"),
        dictgen::InsensitiveStr::Ascii("ssbily"),
        dictgen::InsensitiveStr::Ascii("ssibal"),
        dictgen::InsensitiveStr::Ascii("ssibe"),
        dictgen::InsensitiveStr::Ascii("ssibel"),
        dictgen::InsensitiveStr::Ascii("ssibile"),
        dictgen::InsensitiveStr::Ascii("ssibillity"),
        dictgen::InsensitiveStr::Ascii("ssibilty"),
        dictgen::InsensitiveStr::Ascii("ssibily"),
        dictgen::InsensitiveStr::Ascii("ssiblely"),
        dictgen::InsensitiveStr::Ascii("ssibley"),
        dictgen::InsensitiveStr::Ascii("ssiblity"),
        dictgen::InsensitiveStr::Ascii("ssiblly"),
        dictgen::InsensitiveStr::Ascii("ssibry"),
        dictgen::InsensitiveStr::Ascii("ssibul"),
        dictgen::InsensitiveStr::Ascii("verised"),
        dictgen::InsensitiveStr::Ascii("vershied"),
        dictgen::InsensitiveStr::Ascii("versihed"),
    ],
    values: &[
        &["implode"],
        &["improbable"],
        &["improper"],
        &["important"],
        &["importantly"],
        &["importance"],
        &["importantly"],
        &["imports"],
        &["imported"],
        &["importance"],
        &["importance"],
        &["imported"],
        &["importantly"],
        &["imported"],
        &["imports"],
        &["improve"],
        &["improved"],
        &["improvement"],
        &["improvements"],
        &["improves"],
        &["improving"],
        &["improvised"],
        &["impossible"],
        &["impossibly"],
        &["impossibly"],
        &["impossible"],
        &["impossibly"],
        &["impossible"],
        &["impossibility"],
        &["impossibility"],
        &["impossibly"],
        &["impossibly"],
        &["impossibly"],
        &["impossibly"],
        &["impossibly"],
        &["impossibly"],
        &["impossibly"],
        &["impoverished"],
        &["impoverished"],
        &["impoverished"],
    ],
    range: 3..=10,
};

static WORD_IMPL_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_IMPL_CHILDREN),
    value: None,
};

pub static WORD_IMPL_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("amenting"),
        dictgen::InsensitiveStr::Ascii("aments"),
        dictgen::InsensitiveStr::Ascii("antase"),
        dictgen::InsensitiveStr::Ascii("antes"),
        dictgen::InsensitiveStr::Ascii("ausable"),
        dictgen::InsensitiveStr::Ascii("ausbile"),
        dictgen::InsensitiveStr::Ascii("ausble"),
        dictgen::InsensitiveStr::Ascii("ausibe"),
        dictgen::InsensitiveStr::Ascii("ausibile"),
        dictgen::InsensitiveStr::Ascii("ecations"),
        dictgen::InsensitiveStr::Ascii("emenet"),
        dictgen::InsensitiveStr::Ascii("ementacion"),
        dictgen::InsensitiveStr::Ascii("ementaciones"),
        dictgen::InsensitiveStr::Ascii("ementaion"),
        dictgen::InsensitiveStr::Ascii("ementaiton"),
        dictgen::InsensitiveStr::Ascii("ementaitons"),
        dictgen::InsensitiveStr::Ascii("ementas"),
        dictgen::InsensitiveStr::Ascii("ementase"),
        dictgen::InsensitiveStr::Ascii("ementasi"),
        dictgen::InsensitiveStr::Ascii("ementatin"),
        dictgen::InsensitiveStr::Ascii("ementating"),
        dictgen::InsensitiveStr::Ascii("ementatino"),
        dictgen::InsensitiveStr::Ascii("ementationen"),
        dictgen::InsensitiveStr::Ascii("ementationer"),
        dictgen::InsensitiveStr::Ascii("ementato"),
        dictgen::InsensitiveStr::Ascii("ementes"),
        dictgen::InsensitiveStr::Ascii("ementig"),
        dictgen::InsensitiveStr::Ascii("ementos"),
        dictgen::InsensitiveStr::Ascii("emet"),
        dictgen::InsensitiveStr::Ascii("emetnation"),
        dictgen::InsensitiveStr::Ascii("entation"),
        dictgen::InsensitiveStr::Ascii("icacion"),
        dictgen::InsensitiveStr::Ascii("icati"),
        dictgen::InsensitiveStr::Ascii("icatia"),
        dictgen::InsensitiveStr::Ascii("icatie"),
        dictgen::InsensitiveStr::Ascii("icatii"),
        dictgen::InsensitiveStr::Ascii("icatons"),
        dictgen::InsensitiveStr::Ascii("icetly"),
        dictgen::InsensitiveStr::Ascii("iciet"),
        dictgen::InsensitiveStr::Ascii("iciete"),
        dictgen::InsensitiveStr::Ascii("icilty"),
        dictgen::InsensitiveStr::Ascii("icitely"),
        dictgen::InsensitiveStr::Ascii("icitily"),
        dictgen::InsensitiveStr::Ascii("icity"),
        dictgen::InsensitiveStr::Ascii("ict"),
        dictgen::InsensitiveStr::Ascii("ikation"),
        dictgen::InsensitiveStr::Ascii("imenation"),
        dictgen::InsensitiveStr::Ascii("iment"),
        dictgen::InsensitiveStr::Ascii("imentation"),
        dictgen::InsensitiveStr::Ascii("imentations"),
        dictgen::InsensitiveStr::Ascii("imented"),
        dictgen::InsensitiveStr::Ascii("imenting"),
        dictgen::InsensitiveStr::Ascii("iments"),
        dictgen::InsensitiveStr::Ascii("oed"),
        dictgen::InsensitiveStr::Ascii("osed"),
        dictgen::InsensitiveStr::Ascii("oys"),
        dictgen::InsensitiveStr::Ascii("use"),
        dictgen::InsensitiveStr::Ascii("uses"),
        dictgen::InsensitiveStr::Ascii("usive"),
    ],
    values: &[
        &["implementing"],
        &["implements"],
        &["implants"],
        &["implants"],
        &["implausible"],
        &["implausible"],
        &["implausible"],
        &["implausible"],
        &["implausible"],
        &["implications"],
        &["implements"],
        &["implementation"],
        &["implementations"],
        &["implementation"],
        &["implementation"],
        &["implementations"],
        &["implements"],
        &["implements"],
        &["implements"],
        &["implementations"],
        &["implementation"],
        &["implementations"],
        &["implementations"],
        &["implementations"],
        &["implementation"],
        &["implements"],
        &["implementing"],
        &["implements"],
        &["implements"],
        &["implementations"],
        &["implementation"],
        &["implication"],
        &["implicit"],
        &["implicit"],
        &["implicit"],
        &["implicit"],
        &["implications"],
        &["implicitly"],
        &["implicit"],
        &["implicit"],
        &["implicitly"],
        &["implicitly"],
        &["implicitly"],
        &["implicitly"],
        &["implicit"],
        &["implication"],
        &["implementation"],
        &["implement"],
        &["implementation"],
        &["implementations"],
        &["implemented"],
        &["implementing"],
        &["implements"],
        &["implode"],
        &["implode"],
        &["employs"],
        &["impulse"],
        &["impulses"],
        &["impulsive"],
    ],
    range: 3..=12,
};

static WORD_IMPE_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_IMPE_CHILDREN),
    value: None,
};

pub static WORD_IMPE_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("cabbly"),
        dictgen::InsensitiveStr::Ascii("ccabile"),
        dictgen::InsensitiveStr::Ascii("ccible"),
        dictgen::InsensitiveStr::Ascii("ckable"),
        dictgen::InsensitiveStr::Ascii("dence"),
        dictgen::InsensitiveStr::Ascii("lmentation"),
        dictgen::InsensitiveStr::Ascii("lments"),
        dictgen::InsensitiveStr::Ascii("railist"),
        dictgen::InsensitiveStr::Ascii("ravi"),
        dictgen::InsensitiveStr::Ascii("realist"),
        dictgen::InsensitiveStr::Ascii("retive"),
        dictgen::InsensitiveStr::Ascii("rfactions"),
        dictgen::InsensitiveStr::Ascii("rfectionists"),
        dictgen::InsensitiveStr::Ascii("rfet"),
        dictgen::InsensitiveStr::Ascii("rialfist"),
        dictgen::InsensitiveStr::Ascii("rialims"),
        dictgen::InsensitiveStr::Ascii("rialisim"),
        dictgen::InsensitiveStr::Ascii("rialsim"),
        dictgen::InsensitiveStr::Ascii("rialsm"),
        dictgen::InsensitiveStr::Ascii("rialst"),
        dictgen::InsensitiveStr::Ascii("rialstic"),
        dictgen::InsensitiveStr::Ascii("riarist"),
        dictgen::InsensitiveStr::Ascii("rically"),
        dictgen::InsensitiveStr::Ascii("rislist"),
        dictgen::InsensitiveStr::Ascii("ritave"),
        dictgen::InsensitiveStr::Ascii("ritive"),
        dictgen::InsensitiveStr::Ascii("rsinating"),
        dictgen::InsensitiveStr::Ascii("rsonationg"),
    ],
    values: &[
        &["impeccably"],
        &["impeccable"],
        &["impeccable"],
        &["impeccable"],
        &["impedance"],
        &["implementations"],
        &["implements"],
        &["imperialist"],
        &["imperative"],
        &["imperialist"],
        &["imperative"],
        &["imperfections"],
        &["imperfections"],
        &["imperfect"],
        &["imperialist"],
        &["imperialism"],
        &["imperialism"],
        &["imperialism"],
        &["imperialism"],
        &["imperialist"],
        &["imperialist"],
        &["imperialist"],
        &["empirically"],
        &["imperialist"],
        &["imperative"],
        &["imperative"],
        &["impersonating"],
        &["impersonating"],
    ],
    range: 4..=12,
};

static WORD_IMPA_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_IMPA_CHILDREN),
    value: None,
};

pub static WORD_IMPA_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ctes"),
        dictgen::InsensitiveStr::Ascii("ctos"),
        dictgen::InsensitiveStr::Ascii("itent"),
        dictgen::InsensitiveStr::Ascii("ried"),
        dictgen::InsensitiveStr::Ascii("rital"),
        dictgen::InsensitiveStr::Ascii("rtirla"),
    ],
    values: &[
        &["impacts"],
        &["impacts"],
        &["impatient"],
        &["impaired"],
        &["impartial"],
        &["impartial"],
    ],
    range: 4..=6,
};

static WORD_IMM_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_IMM_CHILDREN),
    value: None,
};

pub static WORD_IMM_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("aturaty"),
        dictgen::InsensitiveStr::Ascii("atureity"),
        dictgen::InsensitiveStr::Ascii("aturety"),
        dictgen::InsensitiveStr::Ascii("boile"),
        dictgen::InsensitiveStr::Ascii("edeately"),
        dictgen::InsensitiveStr::Ascii("edeatly"),
        dictgen::InsensitiveStr::Ascii("ediantly"),
        dictgen::InsensitiveStr::Ascii("ediatelly"),
        dictgen::InsensitiveStr::Ascii("ediatley"),
        dictgen::InsensitiveStr::Ascii("ediatly"),
        dictgen::InsensitiveStr::Ascii("edietely"),
        dictgen::InsensitiveStr::Ascii("edietly"),
        dictgen::InsensitiveStr::Ascii("enint"),
        dictgen::InsensitiveStr::Ascii("enseley"),
        dictgen::InsensitiveStr::Ascii("ensley"),
        dictgen::InsensitiveStr::Ascii("erisve"),
        dictgen::InsensitiveStr::Ascii("ersie"),
        dictgen::InsensitiveStr::Ascii("ersve"),
        dictgen::InsensitiveStr::Ascii("esnely"),
        dictgen::InsensitiveStr::Ascii("idately"),
        dictgen::InsensitiveStr::Ascii("ideately"),
        dictgen::InsensitiveStr::Ascii("idiate"),
        dictgen::InsensitiveStr::Ascii("idiately"),
        dictgen::InsensitiveStr::Ascii("igraiton"),
        dictgen::InsensitiveStr::Ascii("igrantes"),
        dictgen::InsensitiveStr::Ascii("igranti"),
        dictgen::InsensitiveStr::Ascii("igrato"),
        dictgen::InsensitiveStr::Ascii("igrents"),
        dictgen::InsensitiveStr::Ascii("inet"),
        dictgen::InsensitiveStr::Ascii("itate"),
        dictgen::InsensitiveStr::Ascii("itated"),
        dictgen::InsensitiveStr::Ascii("itating"),
        dictgen::InsensitiveStr::Ascii("itator"),
        dictgen::InsensitiveStr::Ascii("obilie"),
        dictgen::InsensitiveStr::Ascii("obilien"),
        dictgen::InsensitiveStr::Ascii("obilier"),
        dictgen::InsensitiveStr::Ascii("obille"),
        dictgen::InsensitiveStr::Ascii("obilze"),
        dictgen::InsensitiveStr::Ascii("obilzed"),
        dictgen::InsensitiveStr::Ascii("obilzer"),
        dictgen::InsensitiveStr::Ascii("obilzes"),
        dictgen::InsensitiveStr::Ascii("oblie"),
        dictgen::InsensitiveStr::Ascii("oratlity"),
        dictgen::InsensitiveStr::Ascii("ortailty"),
        dictgen::InsensitiveStr::Ascii("ortales"),
        dictgen::InsensitiveStr::Ascii("ortalis"),
        dictgen::InsensitiveStr::Ascii("ortalisy"),
        dictgen::InsensitiveStr::Ascii("ortaliy"),
        dictgen::InsensitiveStr::Ascii("ortallity"),
        dictgen::InsensitiveStr::Ascii("ortalls"),
        dictgen::InsensitiveStr::Ascii("ortalty"),
        dictgen::InsensitiveStr::Ascii("ortaly"),
        dictgen::InsensitiveStr::Ascii("ortas"),
        dictgen::InsensitiveStr::Ascii("serive"),
        dictgen::InsensitiveStr::Ascii("unosupressant"),
    ],
    values: &[
        &["immaturity"],
        &["immaturity"],
        &["immaturity"],
        &["immobile"],
        &["immediately"],
        &["immediately"],
        &["immediately"],
        &["immediately"],
        &["immediately"],
        &["immediately"],
        &["immediately"],
        &["immediately"],
        &["imminent"],
        &["immensely"],
        &["immensely"],
        &["immersive"],
        &["immerse"],
        &["immerse"],
        &["immensely"],
        &["immediately"],
        &["immediately"],
        &["immediate"],
        &["immediately"],
        &["immigration"],
        &["immigrants"],
        &["immigration"],
        &["immigration"],
        &["immigrants"],
        &["imminent"],
        &["imitate"],
        &["imitated"],
        &["imitating"],
        &["imitator"],
        &["immobile"],
        &["immobile"],
        &["immobile"],
        &["immobile"],
        &["immobile"],
        &["immobile"],
        &["immobile"],
        &["immobile"],
        &["immobile"],
        &["immortality"],
        &["immortality"],
        &["immortals"],
        &["immortals"],
        &["immortals"],
        &["immortality"],
        &["immortality"],
        &["immortals"],
        &["immortality"],
        &["immortality"],
        &["immortals"],
        &["immersive"],
        &["immunosuppressant"],
    ],
    range: 4..=13,
};

static WORD_IML_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_IML_CHILDREN),
    value: None,
};

pub static WORD_IML_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("pementation")],
    values: &[&["implementations"]],
    range: 11..=11,
};

static WORD_IMI_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_IMI_CHILDREN),
    value: None,
};

pub static WORD_IMI_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("grant"),
        dictgen::InsensitiveStr::Ascii("grated"),
        dictgen::InsensitiveStr::Ascii("gration"),
        dictgen::InsensitiveStr::Ascii("nent"),
    ],
    values: &[&["emigrant"], &["emigrated"], &["emigration"], &["eminent"]],
    range: 4..=7,
};

static WORD_IMG_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_IMG_CHILDREN),
    value: None,
};

pub static WORD_IMG_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("rants")],
    values: &[&["migrants"]],
    range: 5..=5,
};

static WORD_IME_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_IME_CHILDREN),
    value: None,
};

pub static WORD_IME_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("diately"),
        dictgen::InsensitiveStr::Ascii("nse"),
        dictgen::InsensitiveStr::Ascii("xperience"),
    ],
    values: &[&["immediately"], &["immense"], &["inexperience"]],
    range: 3..=9,
};

static WORD_IMC_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_IMC_CHILDREN),
    value: None,
};

pub static WORD_IMC_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ompatible"),
        dictgen::InsensitiveStr::Ascii("ompetence"),
        dictgen::InsensitiveStr::Ascii("omplete"),
        dictgen::InsensitiveStr::Ascii("omprehensible"),
    ],
    values: &[
        &["incompatible"],
        &["incompetence"],
        &["incomplete"],
        &["incomprehensible"],
    ],
    range: 7..=13,
};

static WORD_IMB_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_IMB_CHILDREN),
    value: None,
};

pub static WORD_IMB_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("alanaced"),
        dictgen::InsensitiveStr::Ascii("alanaces"),
        dictgen::InsensitiveStr::Ascii("alancers"),
        dictgen::InsensitiveStr::Ascii("alenced"),
        dictgen::InsensitiveStr::Ascii("alences"),
    ],
    values: &[
        &["imbalanced"],
        &["imbalances"],
        &["imbalances"],
        &["imbalanced"],
        &["imbalances"],
    ],
    range: 7..=8,
};

static WORD_IMA_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_IMA_CHILDREN),
    value: None,
};

pub static WORD_IMA_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("blanced"),
        dictgen::InsensitiveStr::Ascii("blances"),
        dictgen::InsensitiveStr::Ascii("ganative"),
        dictgen::InsensitiveStr::Ascii("ganitive"),
        dictgen::InsensitiveStr::Ascii("genary"),
        dictgen::InsensitiveStr::Ascii("gin"),
        dictgen::InsensitiveStr::Ascii("ginacion"),
        dictgen::InsensitiveStr::Ascii("ginatie"),
        dictgen::InsensitiveStr::Ascii("ginatiei"),
        dictgen::InsensitiveStr::Ascii("ginating"),
        dictgen::InsensitiveStr::Ascii("ginativo"),
        dictgen::InsensitiveStr::Ascii("ginaton"),
        dictgen::InsensitiveStr::Ascii("ginery"),
        dictgen::InsensitiveStr::Ascii("ginitave"),
        dictgen::InsensitiveStr::Ascii("ginitve"),
        dictgen::InsensitiveStr::Ascii("nent"),
        dictgen::InsensitiveStr::Ascii("pcts"),
        dictgen::InsensitiveStr::Ascii("pired"),
        dictgen::InsensitiveStr::Ascii("ptient"),
    ],
    values: &[
        &["imbalanced"],
        &["imbalances"],
        &["imaginative"],
        &["imaginative"],
        &["imaginary"],
        &["imagine"],
        &["imagination"],
        &["imaginative"],
        &["imaginative"],
        &["imagination"],
        &["imagination"],
        &["imagination"],
        &["imaginary"],
        &["imaginative"],
        &["imaginative"],
        &["eminent"],
        &["impacts"],
        &["impaired"],
        &["impatient"],
    ],
    range: 3..=8,
};

static WORD_IL_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_IL_CHILDREN),
    value: None,
};

static WORD_IL_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    Some(&WORD_ILL_NODE),
    None,
    Some(&WORD_ILN_NODE),
    Some(&WORD_ILO_NODE),
    None,
    None,
    None,
    None,
    Some(&WORD_ILT_NODE),
    None,
    None,
    None,
    None,
    None,
    None,
];

static WORD_ILT_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_ILT_CHILDREN),
    value: None,
};

pub static WORD_ILT_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("erate")],
    values: &[&["literate"]],
    range: 5..=5,
};

static WORD_ILO_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_ILO_CHILDREN),
    value: None,
};

pub static WORD_ILO_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("gical")],
    values: &[&["illogical"]],
    range: 5..=5,
};

static WORD_ILN_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_ILN_CHILDREN),
    value: None,
};

pub static WORD_ILN_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("ess")],
    values: &[&["illness"]],
    range: 3..=3,
};

static WORD_ILL_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_ILL_CHILDREN),
    value: None,
};

static WORD_ILL_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    None,
    None,
    None,
    None,
    Some(&WORD_ILLE_NODE),
    None,
    None,
    None,
    Some(&WORD_ILLI_NODE),
    None,
    None,
    None,
    None,
    Some(&WORD_ILLN_NODE),
    None,
    None,
    None,
    None,
    Some(&WORD_ILLS_NODE),
    None,
    Some(&WORD_ILLU_NODE),
    None,
    None,
    None,
    None,
    None,
];

static WORD_ILLU_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_ILLU_CHILDREN),
    value: None,
};

pub static WORD_ILLU_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("manati"),
        dictgen::InsensitiveStr::Ascii("maniti"),
        dictgen::InsensitiveStr::Ascii("mianti"),
        dictgen::InsensitiveStr::Ascii("mimati"),
        dictgen::InsensitiveStr::Ascii("minaci"),
        dictgen::InsensitiveStr::Ascii("minadi"),
        dictgen::InsensitiveStr::Ascii("minai"),
        dictgen::InsensitiveStr::Ascii("minami"),
        dictgen::InsensitiveStr::Ascii("minanti"),
        dictgen::InsensitiveStr::Ascii("minarti"),
        dictgen::InsensitiveStr::Ascii("minatti"),
        dictgen::InsensitiveStr::Ascii("minauti"),
        dictgen::InsensitiveStr::Ascii("minazi"),
        dictgen::InsensitiveStr::Ascii("mini"),
        dictgen::InsensitiveStr::Ascii("miniati"),
        dictgen::InsensitiveStr::Ascii("minista"),
        dictgen::InsensitiveStr::Ascii("minite"),
        dictgen::InsensitiveStr::Ascii("miniti"),
        dictgen::InsensitiveStr::Ascii("minoti"),
        dictgen::InsensitiveStr::Ascii("mintati"),
        dictgen::InsensitiveStr::Ascii("minuti"),
        dictgen::InsensitiveStr::Ascii("mniati"),
        dictgen::InsensitiveStr::Ascii("munati"),
        dictgen::InsensitiveStr::Ascii("ninati"),
        dictgen::InsensitiveStr::Ascii("siones"),
        dictgen::InsensitiveStr::Ascii("started"),
        dictgen::InsensitiveStr::Ascii("startion"),
        dictgen::InsensitiveStr::Ascii("startions"),
        dictgen::InsensitiveStr::Ascii("startor"),
        dictgen::InsensitiveStr::Ascii("straded"),
        dictgen::InsensitiveStr::Ascii("straion"),
        dictgen::InsensitiveStr::Ascii("straitor"),
        dictgen::InsensitiveStr::Ascii("strant"),
        dictgen::InsensitiveStr::Ascii("strare"),
        dictgen::InsensitiveStr::Ascii("strater"),
        dictgen::InsensitiveStr::Ascii("stratie"),
        dictgen::InsensitiveStr::Ascii("straties"),
        dictgen::InsensitiveStr::Ascii("stratin"),
        dictgen::InsensitiveStr::Ascii("stratior"),
        dictgen::InsensitiveStr::Ascii("strato"),
        dictgen::InsensitiveStr::Ascii("straton"),
        dictgen::InsensitiveStr::Ascii("stre"),
        dictgen::InsensitiveStr::Ascii("tion"),
    ],
    values: &[
        &["illuminati"],
        &["illuminati"],
        &["illuminati"],
        &["illuminati"],
        &["illuminati"],
        &["illuminati"],
        &["illuminati"],
        &["illuminati"],
        &["illuminati"],
        &["illuminati"],
        &["illuminati"],
        &["illuminati"],
        &["illuminati"],
        &["illuminati"],
        &["illuminati"],
        &["illuminati"],
        &["illuminati"],
        &["illuminati"],
        &["illuminati"],
        &["illuminati"],
        &["illuminati"],
        &["illuminati"],
        &["illuminati"],
        &["illuminati"],
        &["illusions"],
        &["illustrated"],
        &["illustration"],
        &["illustrations"],
        &["illustrator"],
        &["illustrated"],
        &["illustration"],
        &["illustrator"],
        &["illustrate"],
        &["illustrate"],
        &["illustrator"],
        &["illustrate"],
        &["illustrate"],
        &["illustrations"],
        &["illustrator"],
        &["illustration"],
        &["illustration"],
        &["illustrate"],
        &["illusion"],
    ],
    range: 4..=9,
};

static WORD_ILLS_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_ILLS_CHILDREN),
    value: None,
};

pub static WORD_ILLS_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("uions"),
        dictgen::InsensitiveStr::Ascii("utration"),
        dictgen::InsensitiveStr::Ascii("utrator"),
    ],
    values: &[&["illusions"], &["illustrations"], &["illustrator"]],
    range: 5..=8,
};

static WORD_ILLN_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_ILLN_CHILDREN),
    value: None,
};

pub static WORD_ILLN_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("esess"),
        dictgen::InsensitiveStr::Ascii("esss"),
    ],
    values: &[&["illnesses"], &["illnesses"]],
    range: 4..=5,
};

static WORD_ILLI_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_ILLI_CHILDREN),
    value: None,
};

pub static WORD_ILLI_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("egal"),
        dictgen::InsensitiveStr::Ascii("getimate"),
        dictgen::InsensitiveStr::Ascii("gitemate"),
        dictgen::InsensitiveStr::Ascii("munati"),
        dictgen::InsensitiveStr::Ascii("nios"),
        dictgen::InsensitiveStr::Ascii("noians"),
        dictgen::InsensitiveStr::Ascii("nos"),
        dictgen::InsensitiveStr::Ascii("onis"),
        dictgen::InsensitiveStr::Ascii("strate"),
        dictgen::InsensitiveStr::Ascii("stration"),
        dictgen::InsensitiveStr::Ascii("strations"),
        dictgen::InsensitiveStr::Ascii("tarate"),
        dictgen::InsensitiveStr::Ascii("tirate"),
    ],
    values: &[
        &["illegal"],
        &["illegitimate"],
        &["illegitimate"],
        &["illuminati"],
        &["illinois"],
        &["illinois"],
        &["illinois"],
        &["illinois"],
        &["illiterate"],
        &["illustration"],
        &["illustrations"],
        &["illiterate"],
        &["illiterate"],
    ],
    range: 3..=9,
};

static WORD_ILLE_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_ILLE_CHILDREN),
    value: None,
};

pub static WORD_ILLE_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("gales"),
        dictgen::InsensitiveStr::Ascii("galest"),
        dictgen::InsensitiveStr::Ascii("galis"),
        dictgen::InsensitiveStr::Ascii("gallity"),
        dictgen::InsensitiveStr::Ascii("gallly"),
        dictgen::InsensitiveStr::Ascii("galls"),
        dictgen::InsensitiveStr::Ascii("gas"),
        dictgen::InsensitiveStr::Ascii("getimate"),
        dictgen::InsensitiveStr::Ascii("gimacy"),
        dictgen::InsensitiveStr::Ascii("gitamate"),
        dictgen::InsensitiveStr::Ascii("gitamite"),
        dictgen::InsensitiveStr::Ascii("gitamte"),
        dictgen::InsensitiveStr::Ascii("gitemate"),
        dictgen::InsensitiveStr::Ascii("gitime"),
        dictgen::InsensitiveStr::Ascii("gitimite"),
        dictgen::InsensitiveStr::Ascii("gitimt"),
        dictgen::InsensitiveStr::Ascii("gitmate"),
        dictgen::InsensitiveStr::Ascii("gsl"),
        dictgen::InsensitiveStr::Ascii("ss"),
    ],
    values: &[
        &["illegals"],
        &["illegals"],
        &["illegals"],
        &["illegally"],
        &["illegally"],
        &["illegals"],
        &["illegals"],
        &["illegitimate"],
        &["illegitimacy"],
        &["illegitimate"],
        &["illegitimate"],
        &["illegitimate"],
        &["illegitimate"],
        &["illegitimate"],
        &["illegitimate"],
        &["illegitimate"],
        &["illegitimate"],
        &["illegals"],
        &["illness"],
    ],
    range: 2..=8,
};

static WORD_IH_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_IH_CHILDREN),
    value: None,
};

pub static WORD_IH_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("aca")],
    values: &[&["ithaca"]],
    range: 3..=3,
};

static WORD_IG_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_IG_CHILDREN),
    value: None,
};

pub static WORD_IG_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("nitin"),
        dictgen::InsensitiveStr::Ascii("norat"),
        dictgen::InsensitiveStr::Ascii("nornace"),
    ],
    values: &[&["ignition"], &["ignorant"], &["ignorance"]],
    range: 5..=7,
};

static WORD_IE_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_IE_CHILDREN),
    value: None,
};

pub static WORD_IE_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("rland")],
    values: &[&["ireland"]],
    range: 5..=5,
};

static WORD_ID_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_ID_CHILDREN),
    value: None,
};

pub static WORD_ID_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("aeidae"),
        dictgen::InsensitiveStr::Ascii("aes"),
        dictgen::InsensitiveStr::Ascii("ealisim"),
        dictgen::InsensitiveStr::Ascii("ealisitc"),
        dictgen::InsensitiveStr::Ascii("ealisitic"),
        dictgen::InsensitiveStr::Ascii("ealistc"),
        dictgen::InsensitiveStr::Ascii("ealistisch"),
        dictgen::InsensitiveStr::Ascii("ealogies"),
        dictgen::InsensitiveStr::Ascii("ealogy"),
        dictgen::InsensitiveStr::Ascii("ealsim"),
        dictgen::InsensitiveStr::Ascii("enfity"),
        dictgen::InsensitiveStr::Ascii("enitfy"),
        dictgen::InsensitiveStr::Ascii("enticial"),
        dictgen::InsensitiveStr::Ascii("entifible"),
        dictgen::InsensitiveStr::Ascii("entificacion"),
        dictgen::InsensitiveStr::Ascii("entificaiton"),
        dictgen::InsensitiveStr::Ascii("entificativo"),
        dictgen::InsensitiveStr::Ascii("entificato"),
        dictgen::InsensitiveStr::Ascii("entificaton"),
        dictgen::InsensitiveStr::Ascii("entifierad"),
        dictgen::InsensitiveStr::Ascii("entifieras"),
        dictgen::InsensitiveStr::Ascii("entifikation"),
        dictgen::InsensitiveStr::Ascii("entifiy"),
        dictgen::InsensitiveStr::Ascii("entifyable"),
        dictgen::InsensitiveStr::Ascii("entifyed"),
        dictgen::InsensitiveStr::Ascii("entite"),
        dictgen::InsensitiveStr::Ascii("entitets"),
        dictgen::InsensitiveStr::Ascii("entitites"),
        dictgen::InsensitiveStr::Ascii("entitties"),
        dictgen::InsensitiveStr::Ascii("eolagies"),
        dictgen::InsensitiveStr::Ascii("eoligically"),
        dictgen::InsensitiveStr::Ascii("eoligies"),
        dictgen::InsensitiveStr::Ascii("eologe"),
        dictgen::InsensitiveStr::Ascii("eologias"),
        dictgen::InsensitiveStr::Ascii("eologicaly"),
        dictgen::InsensitiveStr::Ascii("eologice"),
        dictgen::InsensitiveStr::Ascii("eologiers"),
        dictgen::InsensitiveStr::Ascii("eologije"),
        dictgen::InsensitiveStr::Ascii("eologins"),
        dictgen::InsensitiveStr::Ascii("eologis"),
        dictgen::InsensitiveStr::Ascii("eologisen"),
        dictgen::InsensitiveStr::Ascii("eologiset"),
        dictgen::InsensitiveStr::Ascii("eologisk"),
        dictgen::InsensitiveStr::Ascii("eologiske"),
        dictgen::InsensitiveStr::Ascii("eolouges"),
        dictgen::InsensitiveStr::Ascii("eosyncratic"),
        dictgen::InsensitiveStr::Ascii("esa"),
        dictgen::InsensitiveStr::Ascii("iologically"),
        dictgen::InsensitiveStr::Ascii("iosynchracies"),
        dictgen::InsensitiveStr::Ascii("iosyncracy"),
    ],
    values: &[
        &["idea"],
        &["ideas"],
        &["idealism"],
        &["idealistic"],
        &["idealistic"],
        &["idealistic"],
        &["idealistic"],
        &["ideologies"],
        &["ideology"],
        &["idealism"],
        &["identify"],
        &["identify"],
        &["identical"],
        &["identifiable"],
        &["identification"],
        &["identification"],
        &["identification"],
        &["identification"],
        &["identification"],
        &["identified"],
        &["identifies"],
        &["identification"],
        &["identify"],
        &["identifiable"],
        &["identified"],
        &["identities"],
        &["identities"],
        &["identities"],
        &["identities"],
        &["ideologies"],
        &["ideologically"],
        &["ideologies"],
        &["ideologies"],
        &["ideologies"],
        &["ideologically"],
        &["ideologies"],
        &["ideologies"],
        &["ideologies"],
        &["ideologies"],
        &["ideologies"],
        &["ideologies"],
        &["ideologies"],
        &["ideologies"],
        &["ideologies"],
        &["ideologies"],
        &["idiosyncratic"],
        &["ideas"],
        &["ideologically"],
        &["idiosyncrasies"],
        &["idiosyncrasy"],
    ],
    range: 3..=13,
};

static WORD_IC_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_IC_CHILDREN),
    value: None,
};

pub static WORD_IC_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("eforg"),
        dictgen::InsensitiveStr::Ascii("efrong"),
        dictgen::InsensitiveStr::Ascii("elandinc"),
        dictgen::InsensitiveStr::Ascii("elings"),
        dictgen::InsensitiveStr::Ascii("leandic"),
        dictgen::InsensitiveStr::Ascii("onclastic"),
        dictgen::InsensitiveStr::Ascii("ongnito"),
    ],
    values: &[
        &["icefrog"],
        &["icefrog"],
        &["icelandic"],
        &["ceilings"],
        &["icelandic"],
        &["iconoclastic"],
        &["incognito"],
    ],
    range: 5..=9,
};

static WORD_IB_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_IB_CHILDREN),
    value: None,
};

pub static WORD_IB_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("uprofein"),
        dictgen::InsensitiveStr::Ascii("uprofine"),
        dictgen::InsensitiveStr::Ascii("urpofen"),
    ],
    values: &[&["ibuprofen"], &["ibuprofen"], &["ibuprofen"]],
    range: 7..=8,
};

static WORD_H_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_H_CHILDREN),
    value: None,
};

static WORD_H_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    Some(&WORD_HA_NODE),
    None,
    None,
    Some(&WORD_HD_NODE),
    Some(&WORD_HE_NODE),
    None,
    None,
    None,
    Some(&WORD_HI_NODE),
    None,
    None,
    None,
    None,
    None,
    Some(&WORD_HO_NODE),
    None,
    None,
    None,
    Some(&WORD_HS_NODE),
    Some(&WORD_HT_NODE),
    Some(&WORD_HU_NODE),
    Some(&WORD_HV_NODE),
    Some(&WORD_HW_NODE),
    None,
    Some(&WORD_HY_NODE),
    None,
];

static WORD_HY_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_HY_CHILDREN),
    value: None,
};

static WORD_HY_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    None,
    Some(&WORD_HYB_NODE),
    None,
    Some(&WORD_HYD_NODE),
    None,
    None,
    Some(&WORD_HYG_NODE),
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    Some(&WORD_HYO_NODE),
    Some(&WORD_HYP_NODE),
    None,
    Some(&WORD_HYR_NODE),
    Some(&WORD_HYS_NODE),
    None,
    None,
    None,
    None,
    None,
    None,
    None,
];

static WORD_HYS_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_HYS_CHILDREN),
    value: None,
};

pub static WORD_HYS_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("tarical"),
        dictgen::InsensitiveStr::Ascii("tarically"),
        dictgen::InsensitiveStr::Ascii("tera"),
        dictgen::InsensitiveStr::Ascii("terica"),
        dictgen::InsensitiveStr::Ascii("tericallly"),
        dictgen::InsensitiveStr::Ascii("tericaly"),
        dictgen::InsensitiveStr::Ascii("tericlly"),
        dictgen::InsensitiveStr::Ascii("tericly"),
        dictgen::InsensitiveStr::Ascii("teriia"),
        dictgen::InsensitiveStr::Ascii("teriska"),
        dictgen::InsensitiveStr::Ascii("torically"),
    ],
    values: &[
        &["hysterical"],
        &["hysterically"],
        &["hysteria"],
        &["hysteria"],
        &["hysterically"],
        &["hysterically"],
        &["hysterically"],
        &["hysterical"],
        &["hysteria"],
        &["hysteria"],
        &["hysterically"],
    ],
    range: 4..=10,
};

static WORD_HYR_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_HYR_CHILDREN),
    value: None,
};

pub static WORD_HYR_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("bids"),
        dictgen::InsensitiveStr::Ascii("dation"),
        dictgen::InsensitiveStr::Ascii("daulic"),
        dictgen::InsensitiveStr::Ascii("dogen"),
    ],
    values: &[&["hybrids"], &["hydration"], &["hydraulic"], &["hydrogen"]],
    range: 4..=6,
};

static WORD_HYP_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_HYP_CHILDREN),
    value: None,
};

pub static WORD_HYP_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("athetical"),
        dictgen::InsensitiveStr::Ascii("athetically"),
        dictgen::InsensitiveStr::Ascii("corite"),
        dictgen::InsensitiveStr::Ascii("erbel"),
        dictgen::InsensitiveStr::Ascii("erbolie"),
        dictgen::InsensitiveStr::Ascii("erbollic"),
        dictgen::InsensitiveStr::Ascii("erbrophy"),
        dictgen::InsensitiveStr::Ascii("erlobic"),
        dictgen::InsensitiveStr::Ascii("erlogic"),
        dictgen::InsensitiveStr::Ascii("eroble"),
        dictgen::InsensitiveStr::Ascii("erthropy"),
        dictgen::InsensitiveStr::Ascii("ertorphy"),
        dictgen::InsensitiveStr::Ascii("ertrohpy"),
        dictgen::InsensitiveStr::Ascii("ertrohy"),
        dictgen::InsensitiveStr::Ascii("ertrophey"),
        dictgen::InsensitiveStr::Ascii("ertropy"),
        dictgen::InsensitiveStr::Ascii("ethetical"),
        dictgen::InsensitiveStr::Ascii("ethetically"),
        dictgen::InsensitiveStr::Ascii("hotesis"),
        dictgen::InsensitiveStr::Ascii("noss"),
        dictgen::InsensitiveStr::Ascii("ocracy"),
        dictgen::InsensitiveStr::Ascii("ocrasy"),
        dictgen::InsensitiveStr::Ascii("ocrates"),
        dictgen::InsensitiveStr::Ascii("ocricy"),
        dictgen::InsensitiveStr::Ascii("ocriet"),
        dictgen::InsensitiveStr::Ascii("ocriscy"),
        dictgen::InsensitiveStr::Ascii("ocrises"),
        dictgen::InsensitiveStr::Ascii("ocrit"),
        dictgen::InsensitiveStr::Ascii("ocritcal"),
        dictgen::InsensitiveStr::Ascii("ocritial"),
        dictgen::InsensitiveStr::Ascii("ocriticial"),
        dictgen::InsensitiveStr::Ascii("ocrities"),
        dictgen::InsensitiveStr::Ascii("ocrits"),
        dictgen::InsensitiveStr::Ascii("ocritus"),
        dictgen::InsensitiveStr::Ascii("ocrticial"),
        dictgen::InsensitiveStr::Ascii("ocrties"),
        dictgen::InsensitiveStr::Ascii("ocrytes"),
        dictgen::InsensitiveStr::Ascii("ocrytical"),
        dictgen::InsensitiveStr::Ascii("okrites"),
        dictgen::InsensitiveStr::Ascii("onsis"),
        dictgen::InsensitiveStr::Ascii("orcite"),
        dictgen::InsensitiveStr::Ascii("otehtical"),
        dictgen::InsensitiveStr::Ascii("otehtically"),
        dictgen::InsensitiveStr::Ascii("otethical"),
        dictgen::InsensitiveStr::Ascii("otethically"),
        dictgen::InsensitiveStr::Ascii("othecis"),
        dictgen::InsensitiveStr::Ascii("otheiss"),
        dictgen::InsensitiveStr::Ascii("otherical"),
        dictgen::InsensitiveStr::Ascii("othesees"),
        dictgen::InsensitiveStr::Ascii("othesies"),
        dictgen::InsensitiveStr::Ascii("othess"),
        dictgen::InsensitiveStr::Ascii("othesus"),
        dictgen::InsensitiveStr::Ascii("otheticaly"),
        dictgen::InsensitiveStr::Ascii("otheticly"),
        dictgen::InsensitiveStr::Ascii("othises"),
        dictgen::InsensitiveStr::Ascii("othisis"),
        dictgen::InsensitiveStr::Ascii("othosis"),
        dictgen::InsensitiveStr::Ascii("rocisy"),
        dictgen::InsensitiveStr::Ascii("rocite"),
        dictgen::InsensitiveStr::Ascii("rocites"),
    ],
    values: &[
        &["hypothetical"],
        &["hypothetically"],
        &["hypocrite"],
        &["hyperbole"],
        &["hyperbole"],
        &["hyperbolic"],
        &["hypertrophy"],
        &["hyperbolic"],
        &["hyperbolic"],
        &["hyperbole"],
        &["hypertrophy"],
        &["hypertrophy"],
        &["hypertrophy"],
        &["hypertrophy"],
        &["hypertrophy"],
        &["hypertrophy"],
        &["hypothetical"],
        &["hypothetically"],
        &["hypothesis"],
        &["hypnosis"],
        &["hypocrisy"],
        &["hypocrisy"],
        &["hypocrites"],
        &["hypocrisy"],
        &["hypocrite"],
        &["hypocrisy"],
        &["hypocrites"],
        &["hypocrite"],
        &["hypocritical"],
        &["hypocritical"],
        &["hypocritical"],
        &["hypocrite"],
        &["hypocrites"],
        &["hypocrites"],
        &["hypocritical"],
        &["hypocrites"],
        &["hypocrites"],
        &["hypocritical"],
        &["hypocrites"],
        &["hypnosis"],
        &["hypocrite"],
        &["hypothetical"],
        &["hypothetically"],
        &["hypothetical"],
        &["hypothetically"],
        &["hypothesis"],
        &["hypotheses"],
        &["hypothetical"],
        &["hypotheses"],
        &["hypothesis"],
        &["hypotheses"],
        &["hypotheses"],
        &["hypothetically"],
        &["hypothetical"],
        &["hypotheses"],
        &["hypothesis"],
        &["hypothesis"],
        &["hypocrisy"],
        &["hypocrite"],
        &["hypocrites"],
    ],
    range: 4..=11,
};

static WORD_HYO_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_HYO_CHILDREN),
    value: None,
};

pub static WORD_HYO_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("pcrite"),
        dictgen::InsensitiveStr::Ascii("pthetical"),
        dictgen::InsensitiveStr::Ascii("pthetically"),
    ],
    values: &[&["hypocrite"], &["hypothetical"], &["hypothetically"]],
    range: 6..=11,
};

static WORD_HYG_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_HYG_CHILDREN),
    value: None,
};

pub static WORD_HYG_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("eine"),
        dictgen::InsensitiveStr::Ascii("ience"),
        dictgen::InsensitiveStr::Ascii("ienne"),
    ],
    values: &[&["hygiene"], &["hygiene"], &["hygiene"]],
    range: 4..=5,
};

static WORD_HYD_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_HYD_CHILDREN),
    value: None,
};

pub static WORD_HYD_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ogen"),
        dictgen::InsensitiveStr::Ascii("orgen"),
        dictgen::InsensitiveStr::Ascii("raluic"),
        dictgen::InsensitiveStr::Ascii("ratin"),
        dictgen::InsensitiveStr::Ascii("regon"),
        dictgen::InsensitiveStr::Ascii("ropile"),
        dictgen::InsensitiveStr::Ascii("ropilic"),
        dictgen::InsensitiveStr::Ascii("ropobe"),
        dictgen::InsensitiveStr::Ascii("ropobic"),
        dictgen::InsensitiveStr::Ascii("rualic"),
    ],
    values: &[
        &["hydrogen"],
        &["hydrogen"],
        &["hydraulic"],
        &["hydration"],
        &["hydrogen"],
        &["hydrophile"],
        &["hydrophilic"],
        &["hydrophobe"],
        &["hydrophobic"],
        &["hydraulic"],
    ],
    range: 4..=7,
};

static WORD_HYB_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_HYB_CHILDREN),
    value: None,
};

pub static WORD_HYB_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("irds"),
        dictgen::InsensitiveStr::Ascii("rides"),
        dictgen::InsensitiveStr::Ascii("ridus"),
    ],
    values: &[&["hybrids"], &["hybrids"], &["hybrids"]],
    range: 4..=5,
};

static WORD_HW_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_HW_CHILDREN),
    value: None,
};

pub static WORD_HW_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("eaton"),
        dictgen::InsensitiveStr::Ascii("ihc"),
        dictgen::InsensitiveStr::Ascii("ile"),
        dictgen::InsensitiveStr::Ascii("ole"),
    ],
    values: &[&["wheaton"], &["which"], &["while"], &["whole"]],
    range: 3..=5,
};

static WORD_HV_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_HV_CHILDREN),
    value: None,
};

pub static WORD_HV_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ae"),
        dictgen::InsensitiveStr::Ascii("aing"),
        dictgen::InsensitiveStr::Ascii("ea"),
    ],
    values: &[&["have"], &["having"], &["have"]],
    range: 2..=4,
};

static WORD_HU_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_HU_CHILDREN),
    value: None,
};

pub static WORD_HU_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("anted"),
        dictgen::InsensitiveStr::Ascii("anting"),
        dictgen::InsensitiveStr::Ascii("llucination"),
        dictgen::InsensitiveStr::Ascii("llucinations"),
        dictgen::InsensitiveStr::Ascii("manaties"),
        dictgen::InsensitiveStr::Ascii("maniod"),
        dictgen::InsensitiveStr::Ascii("manit"),
        dictgen::InsensitiveStr::Ascii("manitarien"),
        dictgen::InsensitiveStr::Ascii("manitarion"),
        dictgen::InsensitiveStr::Ascii("manitarna"),
        dictgen::InsensitiveStr::Ascii("manitary"),
        dictgen::InsensitiveStr::Ascii("manitatian"),
        dictgen::InsensitiveStr::Ascii("manite"),
        dictgen::InsensitiveStr::Ascii("maniterian"),
        dictgen::InsensitiveStr::Ascii("manitis"),
        dictgen::InsensitiveStr::Ascii("manitites"),
        dictgen::InsensitiveStr::Ascii("manoind"),
        dictgen::InsensitiveStr::Ascii("mantiarian"),
        dictgen::InsensitiveStr::Ascii("mantiy"),
        dictgen::InsensitiveStr::Ascii("mants"),
        dictgen::InsensitiveStr::Ascii("merous"),
        dictgen::InsensitiveStr::Ascii("miditiy"),
        dictgen::InsensitiveStr::Ascii("midiy"),
        dictgen::InsensitiveStr::Ascii("miliatin"),
        dictgen::InsensitiveStr::Ascii("miliaton"),
        dictgen::InsensitiveStr::Ascii("militaing"),
        dictgen::InsensitiveStr::Ascii("militaion"),
        dictgen::InsensitiveStr::Ascii("militied"),
        dictgen::InsensitiveStr::Ascii("millated"),
        dictgen::InsensitiveStr::Ascii("millating"),
        dictgen::InsensitiveStr::Ascii("millation"),
        dictgen::InsensitiveStr::Ascii("minatarian"),
        dictgen::InsensitiveStr::Ascii("minoid"),
        dictgen::InsensitiveStr::Ascii("mitidy"),
        dictgen::InsensitiveStr::Ascii("moros"),
        dictgen::InsensitiveStr::Ascii("mouros"),
        dictgen::InsensitiveStr::Ascii("murous"),
        dictgen::InsensitiveStr::Ascii("nagrian"),
        dictgen::InsensitiveStr::Ascii("nagry"),
        dictgen::InsensitiveStr::Ascii("nderd"),
        dictgen::InsensitiveStr::Ascii("nderds"),
        dictgen::InsensitiveStr::Ascii("ndread"),
        dictgen::InsensitiveStr::Ascii("ndres"),
        dictgen::InsensitiveStr::Ascii("ngarin"),
        dictgen::InsensitiveStr::Ascii("ngray"),
        dictgen::InsensitiveStr::Ascii("nman"),
        dictgen::InsensitiveStr::Ascii("ntmsan"),
        dictgen::InsensitiveStr::Ascii("rdels"),
        dictgen::InsensitiveStr::Ascii("rldes"),
        dictgen::InsensitiveStr::Ascii("rriance"),
        dictgen::InsensitiveStr::Ascii("rricaines"),
        dictgen::InsensitiveStr::Ascii("rricance"),
        dictgen::InsensitiveStr::Ascii("rricances"),
        dictgen::InsensitiveStr::Ascii("rricanefps"),
        dictgen::InsensitiveStr::Ascii("rricanger"),
        dictgen::InsensitiveStr::Ascii("rricans"),
        dictgen::InsensitiveStr::Ascii("rriganes"),
        dictgen::InsensitiveStr::Ascii("rrikanes"),
        dictgen::InsensitiveStr::Ascii("rrycanes"),
        dictgen::InsensitiveStr::Ascii("sban"),
        dictgen::InsensitiveStr::Ascii("sbandos"),
        dictgen::InsensitiveStr::Ascii("sbans"),
        dictgen::InsensitiveStr::Ascii("tnsman"),
    ],
    values: &[
        &["haunted"],
        &["haunting"],
        &["hallucination"],
        &["hallucinations"],
        &["humanities"],
        &["humanoid"],
        &["humanist"],
        &["humanitarian"],
        &["humanitarian"],
        &["humanitarian"],
        &["humanity"],
        &["humanitarian"],
        &["humanities"],
        &["humanitarian"],
        &["humanities"],
        &["humanities"],
        &["humanoid"],
        &["humanitarian"],
        &["humanity"],
        &["humanist"],
        &["humorous"],
        &["humidity"],
        &["humidity"],
        &["humiliation"],
        &["humiliation"],
        &["humiliating"],
        &["humiliation"],
        &["humiliated"],
        &["humiliated"],
        &["humiliating"],
        &["humiliation"],
        &["humanitarian"],
        &["humanoid"],
        &["humidity"],
        &["humorous"],
        &["humorous"],
        &["humorous"],
        &["hungarian"],
        &["hungary"],
        &["hundred"],
        &["hundreds"],
        &["hundred"],
        &["hundreds"],
        &["hungarian"],
        &["hungary"],
        &["human"],
        &["huntsman"],
        &["hurdles"],
        &["hurdles"],
        &["hurricane"],
        &["hurricanes"],
        &["hurricane"],
        &["hurricanes"],
        &["hurricanes"],
        &["hurricane"],
        &["hurricanes"],
        &["hurricanes"],
        &["hurricanes"],
        &["hurricanes"],
        &["husband"],
        &["husbands"],
        &["husbands"],
        &["huntsman"],
    ],
    range: 4..=12,
};

static WORD_HT_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_HT_CHILDREN),
    value: None,
};

pub static WORD_HT_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("aching"),
        dictgen::InsensitiveStr::Ascii("en"),
        dictgen::InsensitiveStr::Ascii("ere"),
        dictgen::InsensitiveStr::Ascii("ey"),
        dictgen::InsensitiveStr::Ascii("iboxes"),
        dictgen::InsensitiveStr::Ascii("ikn"),
        dictgen::InsensitiveStr::Ascii("ing"),
        dictgen::InsensitiveStr::Ascii("ink"),
        dictgen::InsensitiveStr::Ascii("is"),
    ],
    values: &[
        &["hatching"],
        &["then"],
        &["there"],
        &["they"],
        &["hitboxes"],
        &["think"],
        &["thing"],
        &["think"],
        &["this"],
    ],
    range: 2..=6,
};

static WORD_HS_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_HS_CHILDREN),
    value: None,
};

pub static WORD_HS_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("eldon"),
        dictgen::InsensitiveStr::Ascii("itorians"),
        dictgen::InsensitiveStr::Ascii("tory"),
        dictgen::InsensitiveStr::Ascii("yteria"),
    ],
    values: &[&["sheldon"], &["historians"], &["history"], &["hysteria"]],
    range: 4..=8,
};

static WORD_HO_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_HO_CHILDREN),
    value: None,
};

static WORD_HO_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    None,
    None,
    None,
    Some(&WORD_HOD_NODE),
    Some(&WORD_HOE_NODE),
    None,
    None,
    None,
    Some(&WORD_HOI_NODE),
    None,
    Some(&WORD_HOK_NODE),
    Some(&WORD_HOL_NODE),
    Some(&WORD_HOM_NODE),
    Some(&WORD_HON_NODE),
    None,
    Some(&WORD_HOP_NODE),
    None,
    Some(&WORD_HOR_NODE),
    Some(&WORD_HOS_NODE),
    Some(&WORD_HOT_NODE),
    Some(&WORD_HOU_NODE),
    None,
    Some(&WORD_HOW_NODE),
    None,
    None,
    None,
];

static WORD_HOW_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_HOW_CHILDREN),
    value: None,
};

pub static WORD_HOW_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("ver")],
    values: &[&["however"]],
    range: 3..=3,
};

static WORD_HOU_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_HOU_CHILDREN),
    value: None,
};

pub static WORD_HOU_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("nour"),
        dictgen::InsensitiveStr::Ascii("rgalss"),
        dictgen::InsensitiveStr::Ascii("rlgass"),
        dictgen::InsensitiveStr::Ascii("sehols"),
        dictgen::InsensitiveStr::Ascii("sehoulds"),
        dictgen::InsensitiveStr::Ascii("sr"),
    ],
    values: &[
        &["honour"],
        &["hourglass"],
        &["hourglass"],
        &["households"],
        &["households"],
        &["hours"],
    ],
    range: 2..=8,
};

static WORD_HOT_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_HOT_CHILDREN),
    value: None,
};

pub static WORD_HOT_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("hsot"),
        dictgen::InsensitiveStr::Ascii("psot"),
        dictgen::InsensitiveStr::Ascii("shoot"),
        dictgen::InsensitiveStr::Ascii("sopt"),
        dictgen::InsensitiveStr::Ascii("sport"),
    ],
    values: &[
        &["hotshot"],
        &["hotspot"],
        &["hotshot"],
        &["hotspot"],
        &["hotspot"],
    ],
    range: 4..=5,
};

static WORD_HOS_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_HOS_CHILDREN),
    value: None,
};

pub static WORD_HOS_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ited"),
        dictgen::InsensitiveStr::Ascii("itlity"),
        dictgen::InsensitiveStr::Ascii("pitales"),
        dictgen::InsensitiveStr::Ascii("pitallity"),
        dictgen::InsensitiveStr::Ascii("pitalty"),
        dictgen::InsensitiveStr::Ascii("pitaly"),
        dictgen::InsensitiveStr::Ascii("pitalzed"),
        dictgen::InsensitiveStr::Ascii("pitible"),
        dictgen::InsensitiveStr::Ascii("pitilized"),
        dictgen::InsensitiveStr::Ascii("pitolized"),
        dictgen::InsensitiveStr::Ascii("potality"),
        dictgen::InsensitiveStr::Ascii("ptial"),
        dictgen::InsensitiveStr::Ascii("ptialized"),
        dictgen::InsensitiveStr::Ascii("ptials"),
        dictgen::InsensitiveStr::Ascii("teles"),
        dictgen::InsensitiveStr::Ascii("thot"),
        dictgen::InsensitiveStr::Ascii("tiliy"),
        dictgen::InsensitiveStr::Ascii("tles"),
        dictgen::InsensitiveStr::Ascii("tpot"),
    ],
    values: &[
        &["hoisted"],
        &["hostility"],
        &["hospitals"],
        &["hospitality"],
        &["hospitality"],
        &["hospitality"],
        &["hospitalized"],
        &["hospitable"],
        &["hospitalized"],
        &["hospitalized"],
        &["hospitality"],
        &["hospital"],
        &["hospitalized"],
        &["hospitals"],
        &["hostels"],
        &["hotshot"],
        &["hostility"],
        &["hostels"],
        &["hotspot"],
    ],
    range: 4..=9,
};

static WORD_HOR_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_HOR_CHILDREN),
    value: None,
};

pub static WORD_HOR_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ader"),
        dictgen::InsensitiveStr::Ascii("ading"),
        dictgen::InsensitiveStr::Ascii("ishima"),
        dictgen::InsensitiveStr::Ascii("isontal"),
        dictgen::InsensitiveStr::Ascii("isontally"),
        dictgen::InsensitiveStr::Ascii("izantal"),
        dictgen::InsensitiveStr::Ascii("izantally"),
        dictgen::InsensitiveStr::Ascii("izonatal"),
        dictgen::InsensitiveStr::Ascii("izones"),
        dictgen::InsensitiveStr::Ascii("izontaal"),
        dictgen::InsensitiveStr::Ascii("izontallly"),
        dictgen::InsensitiveStr::Ascii("izontaly"),
        dictgen::InsensitiveStr::Ascii("izontes"),
        dictgen::InsensitiveStr::Ascii("izonts"),
        dictgen::InsensitiveStr::Ascii("iztonal"),
        dictgen::InsensitiveStr::Ascii("iztonally"),
        dictgen::InsensitiveStr::Ascii("ozontally"),
        dictgen::InsensitiveStr::Ascii("rendeous"),
        dictgen::InsensitiveStr::Ascii("rendeus"),
        dictgen::InsensitiveStr::Ascii("rendious"),
        dictgen::InsensitiveStr::Ascii("rendos"),
        dictgen::InsensitiveStr::Ascii("renduous"),
        dictgen::InsensitiveStr::Ascii("riblely"),
        dictgen::InsensitiveStr::Ascii("ribley"),
        dictgen::InsensitiveStr::Ascii("riblly"),
        dictgen::InsensitiveStr::Ascii("rifing"),
        dictgen::InsensitiveStr::Ascii("zions"),
    ],
    values: &[
        &["hoarder"],
        &["hoarding"],
        &["hiroshima"],
        &["horizontal"],
        &["horizontally"],
        &["horizontal"],
        &["horizontally"],
        &["horizontal"],
        &["horizons"],
        &["horizontal"],
        &["horizontally"],
        &["horizontally"],
        &["horizons"],
        &["horizons"],
        &["horizontal"],
        &["horizontally"],
        &["horizontally"],
        &["horrendous"],
        &["horrendous"],
        &["horrendous"],
        &["horrendous"],
        &["horrendous"],
        &["horribly"],
        &["horribly"],
        &["horribly"],
        &["horrifying"],
        &["horizons"],
    ],
    range: 4..=10,
};

static WORD_HOP_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_HOP_CHILDREN),
    value: None,
};

pub static WORD_HOP_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("efullly"),
        dictgen::InsensitiveStr::Ascii("efuly"),
        dictgen::InsensitiveStr::Ascii("eleslly"),
        dictgen::InsensitiveStr::Ascii("elessely"),
        dictgen::InsensitiveStr::Ascii("elessley"),
        dictgen::InsensitiveStr::Ascii("elessy"),
        dictgen::InsensitiveStr::Ascii("kings"),
        dictgen::InsensitiveStr::Ascii("sital"),
        dictgen::InsensitiveStr::Ascii("sitality"),
        dictgen::InsensitiveStr::Ascii("sitalized"),
        dictgen::InsensitiveStr::Ascii("sitals"),
    ],
    values: &[
        &["hopefully"],
        &["hopefully"],
        &["hopelessly"],
        &["hopelessly"],
        &["hopelessly"],
        &["hopelessly"],
        &["hopkins"],
        &["hospital"],
        &["hospitality"],
        &["hospitalized"],
        &["hospitals"],
    ],
    range: 5..=9,
};

static WORD_HON_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_HON_CHILDREN),
    value: None,
};

pub static WORD_HON_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("eslty"),
        dictgen::InsensitiveStr::Ascii("eymon"),
        dictgen::InsensitiveStr::Ascii("eymooon"),
        dictgen::InsensitiveStr::Ascii("ory"),
        dictgen::InsensitiveStr::Ascii("setly"),
    ],
    values: &[
        &["honestly"],
        &["honeymoon"],
        &["honeymoon"],
        &["honorary"],
        &["honestly"],
    ],
    range: 3..=7,
};

static WORD_HOM_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_HOM_CHILDREN),
    value: None,
};

pub static WORD_HOM_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ecomeing"),
        dictgen::InsensitiveStr::Ascii("ecomming"),
        dictgen::InsensitiveStr::Ascii("ecuming"),
        dictgen::InsensitiveStr::Ascii("elesness"),
        dictgen::InsensitiveStr::Ascii("elessess"),
        dictgen::InsensitiveStr::Ascii("eoapthy"),
        dictgen::InsensitiveStr::Ascii("eonwer"),
        dictgen::InsensitiveStr::Ascii("eonwers"),
        dictgen::InsensitiveStr::Ascii("eopahty"),
        dictgen::InsensitiveStr::Ascii("eopaty"),
        dictgen::InsensitiveStr::Ascii("eophaty"),
        dictgen::InsensitiveStr::Ascii("eopothy"),
        dictgen::InsensitiveStr::Ascii("eothapy"),
        dictgen::InsensitiveStr::Ascii("eowneris"),
        dictgen::InsensitiveStr::Ascii("epoathy"),
        dictgen::InsensitiveStr::Ascii("esexuality"),
        dictgen::InsensitiveStr::Ascii("ewolrd"),
        dictgen::InsensitiveStr::Ascii("ewoner"),
        dictgen::InsensitiveStr::Ascii("ewoners"),
        dictgen::InsensitiveStr::Ascii("eword"),
        dictgen::InsensitiveStr::Ascii("ewrold"),
        dictgen::InsensitiveStr::Ascii("ineim"),
        dictgen::InsensitiveStr::Ascii("ineum"),
        dictgen::InsensitiveStr::Ascii("niem"),
        dictgen::InsensitiveStr::Ascii("oegenous"),
        dictgen::InsensitiveStr::Ascii("oepathy"),
        dictgen::InsensitiveStr::Ascii("ogeneize"),
        dictgen::InsensitiveStr::Ascii("ogeneized"),
        dictgen::InsensitiveStr::Ascii("ogenenous"),
        dictgen::InsensitiveStr::Ascii("ogeneos"),
        dictgen::InsensitiveStr::Ascii("ogenes"),
        dictgen::InsensitiveStr::Ascii("ogeneus"),
        dictgen::InsensitiveStr::Ascii("ogenious"),
        dictgen::InsensitiveStr::Ascii("ogenuous"),
        dictgen::InsensitiveStr::Ascii("ophibia"),
        dictgen::InsensitiveStr::Ascii("ophibic"),
        dictgen::InsensitiveStr::Ascii("ophobie"),
        dictgen::InsensitiveStr::Ascii("ophoboes"),
        dictgen::InsensitiveStr::Ascii("ophonia"),
        dictgen::InsensitiveStr::Ascii("ophopia"),
        dictgen::InsensitiveStr::Ascii("ophopic"),
        dictgen::InsensitiveStr::Ascii("osexaul"),
        dictgen::InsensitiveStr::Ascii("osexuais"),
        dictgen::InsensitiveStr::Ascii("osexuales"),
        dictgen::InsensitiveStr::Ascii("osexualiy"),
        dictgen::InsensitiveStr::Ascii("osexuallity"),
        dictgen::InsensitiveStr::Ascii("osexualls"),
        dictgen::InsensitiveStr::Ascii("osexualtiy"),
        dictgen::InsensitiveStr::Ascii("osexualty"),
        dictgen::InsensitiveStr::Ascii("osexuel"),
        dictgen::InsensitiveStr::Ascii("osexuella"),
        dictgen::InsensitiveStr::Ascii("osexuels"),
        dictgen::InsensitiveStr::Ascii("osexul"),
        dictgen::InsensitiveStr::Ascii("osexulaity"),
    ],
    values: &[
        &["homecoming"],
        &["homecoming"],
        &["homecoming"],
        &["homelessness"],
        &["homelessness"],
        &["homeopathy"],
        &["homeowner"],
        &["homeowners"],
        &["homeopathy"],
        &["homeopathy"],
        &["homeopathy"],
        &["homeopathy"],
        &["homeopathy"],
        &["homeowners"],
        &["homeopathy"],
        &["homosexuality"],
        &["homeworld"],
        &["homeowner"],
        &["homeowners"],
        &["homeworld"],
        &["homeworld"],
        &["hominem"],
        &["hominem"],
        &["hominem"],
        &["homogeneous"],
        &["homoeopathy"],
        &["homogenize"],
        &["homogenized"],
        &["homogeneous"],
        &["homogeneous"],
        &["homogeneous"],
        &["homogeneous"],
        &["homogeneous"],
        &["homogeneous"],
        &["homophobia"],
        &["homophobic"],
        &["homophobe"],
        &["homophobe"],
        &["homophobia"],
        &["homophobia"],
        &["homophobic"],
        &["homosexual"],
        &["homosexuals"],
        &["homosexuals"],
        &["homosexuality"],
        &["homosexuality"],
        &["homosexuals"],
        &["homosexuality"],
        &["homosexuality"],
        &["homosexual"],
        &["homosexual"],
        &["homosexuals"],
        &["homosexuals"],
        &["homosexuality"],
    ],
    range: 4..=11,
};

static WORD_HOL_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_HOL_CHILDREN),
    value: None,
};

pub static WORD_HOL_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("diay"),
        dictgen::InsensitiveStr::Ascii("diays"),
        dictgen::InsensitiveStr::Ascii("dins"),
        dictgen::InsensitiveStr::Ascii("f"),
        dictgen::InsensitiveStr::Ascii("lywod"),
        dictgen::InsensitiveStr::Ascii("lywoood"),
        dictgen::InsensitiveStr::Ascii("ocasut"),
        dictgen::InsensitiveStr::Ascii("ocuast"),
    ],
    values: &[
        &["holiday"],
        &["holidays"],
        &["holdings"],
        &["hold"],
        &["hollywood"],
        &["hollywood"],
        &["holocaust"],
        &["holocaust"],
    ],
    range: 1..=7,
};

static WORD_HOK_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_HOK_CHILDREN),
    value: None,
};

pub static WORD_HOK_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("pins")],
    values: &[&["hopkins"]],
    range: 4..=4,
};

static WORD_HOI_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_HOI_CHILDREN),
    value: None,
};

pub static WORD_HOI_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("lday"),
        dictgen::InsensitiveStr::Ascii("ldays"),
    ],
    values: &[&["holiday"], &["holidays"]],
    range: 4..=5,
};

static WORD_HOE_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_HOE_CHILDREN),
    value: None,
};

pub static WORD_HOE_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("mopathy"),
        dictgen::InsensitiveStr::Ascii("nstly"),
        dictgen::InsensitiveStr::Ascii("pfully"),
    ],
    values: &[&["homeopathy"], &["honestly"], &["hopefully"]],
    range: 5..=7,
};

static WORD_HOD_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_HOD_CHILDREN),
    value: None,
};

pub static WORD_HOD_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("lings")],
    values: &[&["holdings"]],
    range: 5..=5,
};

static WORD_HI_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_HI_CHILDREN),
    value: None,
};

static WORD_HI_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    None,
    None,
    None,
    None,
    Some(&WORD_HIE_NODE),
    None,
    Some(&WORD_HIG_NODE),
    None,
    None,
    None,
    None,
    Some(&WORD_HIL_NODE),
    Some(&WORD_HIM_NODE),
    Some(&WORD_HIN_NODE),
    None,
    Some(&WORD_HIP_NODE),
    None,
    Some(&WORD_HIR_NODE),
    Some(&WORD_HIS_NODE),
    Some(&WORD_HIT_NODE),
    None,
    None,
    None,
    None,
    None,
    None,
];

static WORD_HIT_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_HIT_CHILDREN),
    value: None,
};

pub static WORD_HIT_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("boxers"),
        dictgen::InsensitiveStr::Ascii("boxs"),
    ],
    values: &[&["hitboxes"], &["hitboxes"]],
    range: 4..=6,
};

static WORD_HIS_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_HIS_CHILDREN),
    value: None,
};

pub static WORD_HIS_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("melf"),
        dictgen::InsensitiveStr::Ascii("pancis"),
        dictgen::InsensitiveStr::Ascii("panicos"),
        dictgen::InsensitiveStr::Ascii("panicus"),
        dictgen::InsensitiveStr::Ascii("panis"),
        dictgen::InsensitiveStr::Ascii("pter"),
        dictgen::InsensitiveStr::Ascii("pters"),
        dictgen::InsensitiveStr::Ascii("tarical"),
        dictgen::InsensitiveStr::Ascii("tarically"),
        dictgen::InsensitiveStr::Ascii("terical"),
        dictgen::InsensitiveStr::Ascii("terically"),
        dictgen::InsensitiveStr::Ascii("tocompatability"),
        dictgen::InsensitiveStr::Ascii("toriaan"),
        dictgen::InsensitiveStr::Ascii("toricaly"),
        dictgen::InsensitiveStr::Ascii("toricans"),
        dictgen::InsensitiveStr::Ascii("toricas"),
        dictgen::InsensitiveStr::Ascii("toricians"),
        dictgen::InsensitiveStr::Ascii("toricly"),
        dictgen::InsensitiveStr::Ascii("toriens"),
        dictgen::InsensitiveStr::Ascii("torietas"),
        dictgen::InsensitiveStr::Ascii("torinhas"),
        dictgen::InsensitiveStr::Ascii("torisch"),
        dictgen::InsensitiveStr::Ascii("troic"),
    ],
    values: &[
        &["himself"],
        &["hispanics"],
        &["hispanics"],
        &["hispanics"],
        &["hispanics"],
        &["hipster"],
        &["hipsters"],
        &["historical"],
        &["historically"],
        &["historical"],
        &["historically"],
        &["histocompatibility"],
        &["historians"],
        &["historically"],
        &["historians"],
        &["historians"],
        &["historians"],
        &["historical"],
        &["histories"],
        &["histories"],
        &["historians"],
        &["historic"],
        &["historic"],
    ],
    range: 4..=15,
};

static WORD_HIR_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_HIR_CHILDREN),
    value: None,
};

pub static WORD_HIR_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("earchy"),
        dictgen::InsensitiveStr::Ascii("sohima"),
    ],
    values: &[&["hierarchy"], &["hiroshima"]],
    range: 6..=6,
};

static WORD_HIP_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_HIP_CHILDREN),
    value: None,
};

pub static WORD_HIP_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ocritical"),
        dictgen::InsensitiveStr::Ascii("opotamus"),
        dictgen::InsensitiveStr::Ascii("othetical"),
        dictgen::InsensitiveStr::Ascii("othetically"),
        dictgen::InsensitiveStr::Ascii("sanics"),
        dictgen::InsensitiveStr::Ascii("sterest"),
        dictgen::InsensitiveStr::Ascii("tser"),
        dictgen::InsensitiveStr::Ascii("tsers"),
    ],
    values: &[
        &["hypocritical"],
        &["hippopotamus"],
        &["hypothetical"],
        &["hypothetically"],
        &["hispanics"],
        &["hipsters"],
        &["hipster"],
        &["hipsters"],
    ],
    range: 4..=11,
};

static WORD_HIN_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_HIN_CHILDREN),
    value: None,
};

pub static WORD_HIN_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("derance"),
        dictgen::InsensitiveStr::Ascii("derence"),
        dictgen::InsensitiveStr::Ascii("disght"),
        dictgen::InsensitiveStr::Ascii("diusm"),
        dictgen::InsensitiveStr::Ascii("drence"),
        dictgen::InsensitiveStr::Ascii("duisim"),
        dictgen::InsensitiveStr::Ascii("duisum"),
        dictgen::InsensitiveStr::Ascii("dusim"),
        dictgen::InsensitiveStr::Ascii("udism"),
    ],
    values: &[
        &["hindrance"],
        &["hindrance"],
        &["hindsight"],
        &["hinduism"],
        &["hindrance"],
        &["hinduism"],
        &["hinduism"],
        &["hinduism"],
        &["hinduism"],
    ],
    range: 5..=7,
};

static WORD_HIM_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_HIM_CHILDREN),
    value: None,
};

pub static WORD_HIM_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("selv")],
    values: &[&["himself"]],
    range: 4..=4,
};

static WORD_HIL_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_HIL_CHILDREN),
    value: None,
};

pub static WORD_HIL_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("larious")],
    values: &[&["hilarious"]],
    range: 7..=7,
};

static WORD_HIG_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_HIG_CHILDREN),
    value: None,
};

pub static WORD_HIG_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("er"),
        dictgen::InsensitiveStr::Ascii("est"),
        dictgen::InsensitiveStr::Ascii("halnder"),
        dictgen::InsensitiveStr::Ascii("hlane"),
        dictgen::InsensitiveStr::Ascii("hlighed"),
        dictgen::InsensitiveStr::Ascii("hlighing"),
        dictgen::InsensitiveStr::Ascii("hlightning"),
        dictgen::InsensitiveStr::Ascii("hligted"),
        dictgen::InsensitiveStr::Ascii("hligthing"),
        dictgen::InsensitiveStr::Ascii("hloader"),
        dictgen::InsensitiveStr::Ascii("hpander"),
        dictgen::InsensitiveStr::Ascii("hschol"),
        dictgen::InsensitiveStr::Ascii("hscholl"),
        dictgen::InsensitiveStr::Ascii("hschoool"),
        dictgen::InsensitiveStr::Ascii("hshcool"),
        dictgen::InsensitiveStr::Ascii("way"),
    ],
    values: &[
        &["higher"],
        &["highest"],
        &["highlander"],
        &["highlander"],
        &["highlighted"],
        &["highlighting"],
        &["highlighting"],
        &["highlighted"],
        &["highlighting"],
        &["highlander"],
        &["highlander"],
        &["highschool"],
        &["highschool"],
        &["highschool"],
        &["highschool"],
        &["highway"],
    ],
    range: 2..=10,
};

static WORD_HIE_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_HIE_CHILDREN),
    value: None,
};

pub static WORD_HIE_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ght"),
        dictgen::InsensitiveStr::Ascii("ghtened"),
        dictgen::InsensitiveStr::Ascii("ghts"),
        dictgen::InsensitiveStr::Ascii("nous"),
        dictgen::InsensitiveStr::Ascii("rachical"),
        dictgen::InsensitiveStr::Ascii("rachies"),
        dictgen::InsensitiveStr::Ascii("rachy"),
        dictgen::InsensitiveStr::Ascii("rarcical"),
        dictgen::InsensitiveStr::Ascii("rarcy"),
        dictgen::InsensitiveStr::Ascii("roglph"),
        dictgen::InsensitiveStr::Ascii("roglphs"),
        dictgen::InsensitiveStr::Ascii("sman"),
    ],
    values: &[
        &["height"],
        &["heightened"],
        &["heights"],
        &["heinous"],
        &["hierarchical"],
        &["hierarchies"],
        &["hierarchy"],
        &["hierarchical"],
        &["hierarchy"],
        &["hieroglyph"],
        &["hieroglyphs"],
        &["heisman"],
    ],
    range: 3..=8,
};

static WORD_HE_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_HE_CHILDREN),
    value: None,
};

static WORD_HE_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    Some(&WORD_HEA_NODE),
    None,
    None,
    Some(&WORD_HED_NODE),
    None,
    None,
    Some(&WORD_HEG_NODE),
    None,
    Some(&WORD_HEI_NODE),
    None,
    None,
    Some(&WORD_HEL_NODE),
    Some(&WORD_HEM_NODE),
    Some(&WORD_HEN_NODE),
    Some(&WORD_HEO_NODE),
    None,
    None,
    Some(&WORD_HER_NODE),
    Some(&WORD_HES_NODE),
    Some(&WORD_HET_NODE),
    None,
    Some(&WORD_HEV_NODE),
    None,
    Some(&WORD_HEX_NODE),
    None,
    None,
];

static WORD_HEX_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_HEX_CHILDREN),
    value: None,
};

pub static WORD_HEX_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("idecimal")],
    values: &[&["hexadecimal"]],
    range: 8..=8,
};

static WORD_HEV_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_HEV_CHILDREN),
    value: None,
};

pub static WORD_HEV_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("eanly")],
    values: &[&["heavenly"]],
    range: 5..=5,
};

static WORD_HET_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_HET_CHILDREN),
    value: None,
};

pub static WORD_HET_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("eresexual"),
        dictgen::InsensitiveStr::Ascii("erosexal"),
        dictgen::InsensitiveStr::Ascii("erosexuella"),
        dictgen::InsensitiveStr::Ascii("reosexual"),
    ],
    values: &[
        &["heterosexual"],
        &["heterosexual"],
        &["heterosexual"],
        &["heterosexual"],
    ],
    range: 8..=11,
};

static WORD_HES_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_HES_CHILDREN),
    value: None,
};

pub static WORD_HES_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("iman"),
        dictgen::InsensitiveStr::Ascii("istant"),
        dictgen::InsensitiveStr::Ascii("istate"),
        dictgen::InsensitiveStr::Ascii("itatin"),
        dictgen::InsensitiveStr::Ascii("itstion"),
        dictgen::InsensitiveStr::Ascii("tiant"),
        dictgen::InsensitiveStr::Ascii("tiate"),
        dictgen::InsensitiveStr::Ascii("tiation"),
    ],
    values: &[
        &["heisman"],
        &["hesitant"],
        &["hesitate"],
        &["hesitation"],
        &["hesitation"],
        &["hesitant"],
        &["hesitate"],
        &["hesitation"],
    ],
    range: 4..=7,
};

static WORD_HER_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_HER_CHILDREN),
    value: None,
};

pub static WORD_HER_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ad"),
        dictgen::InsensitiveStr::Ascii("athstone"),
        dictgen::InsensitiveStr::Ascii("atige"),
        dictgen::InsensitiveStr::Ascii("clues"),
        dictgen::InsensitiveStr::Ascii("culase"),
        dictgen::InsensitiveStr::Ascii("culeans"),
        dictgen::InsensitiveStr::Ascii("culeas"),
        dictgen::InsensitiveStr::Ascii("culeasy"),
        dictgen::InsensitiveStr::Ascii("culeees"),
        dictgen::InsensitiveStr::Ascii("culees"),
        dictgen::InsensitiveStr::Ascii("culeus"),
        dictgen::InsensitiveStr::Ascii("erosexual"),
        dictgen::InsensitiveStr::Ascii("etosexual"),
        dictgen::InsensitiveStr::Ascii("iarchy"),
        dictgen::InsensitiveStr::Ascii("idity"),
        dictgen::InsensitiveStr::Ascii("iocs"),
        dictgen::InsensitiveStr::Ascii("ione"),
        dictgen::InsensitiveStr::Ascii("ocis"),
        dictgen::InsensitiveStr::Ascii("oe"),
        dictgen::InsensitiveStr::Ascii("oicas"),
        dictgen::InsensitiveStr::Ascii("oices"),
        dictgen::InsensitiveStr::Ascii("oicos"),
        dictgen::InsensitiveStr::Ascii("oicus"),
        dictgen::InsensitiveStr::Ascii("onie"),
        dictgen::InsensitiveStr::Ascii("tiage"),
        dictgen::InsensitiveStr::Ascii("tzs"),
        dictgen::InsensitiveStr::Ascii("ucles"),
    ],
    values: &[
        &["heard"],
        &["hearthstone"],
        &["heritage"],
        &["hercules"],
        &["hercules"],
        &["hercules"],
        &["hercules"],
        &["hercules"],
        &["hercules"],
        &["hercules"],
        &["hercules"],
        &["heterosexual"],
        &["heterosexual"],
        &["hierarchy"],
        &["heredity"],
        &["heroics"],
        &["heroine"],
        &["heroics"],
        &["hero"],
        &["heroics"],
        &["heroics"],
        &["heroics"],
        &["heroics"],
        &["heroine"],
        &["heritage"],
        &["hertz"],
        &["hercules"],
    ],
    range: 2..=9,
};

static WORD_HEO_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_HEO_CHILDREN),
    value: None,
};

pub static WORD_HEO_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("rics"),
        dictgen::InsensitiveStr::Ascii("rine"),
    ],
    values: &[&["heroics"], &["heroine"]],
    range: 4..=4,
};

static WORD_HEN_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_HEN_CHILDREN),
    value: None,
};

pub static WORD_HEN_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("ious")],
    values: &[&["heinous"]],
    range: 4..=4,
};

static WORD_HEM_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_HEM_CHILDREN),
    value: None,
};

pub static WORD_HEM_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ingwary"),
        dictgen::InsensitiveStr::Ascii("ingwavy"),
        dictgen::InsensitiveStr::Ascii("ipshere"),
        dictgen::InsensitiveStr::Ascii("ipsheres"),
        dictgen::InsensitiveStr::Ascii("ishpere"),
        dictgen::InsensitiveStr::Ascii("ishperes"),
        dictgen::InsensitiveStr::Ascii("lets"),
        dictgen::InsensitiveStr::Ascii("morhage"),
        dictgen::InsensitiveStr::Ascii("pishere"),
    ],
    values: &[
        &["hemingway"],
        &["hemingway"],
        &["hemisphere"],
        &["hemisphere"],
        &["hemisphere"],
        &["hemisphere"],
        &["helmets"],
        &["hemorrhage"],
        &["hemisphere"],
    ],
    range: 4..=8,
};

static WORD_HEL_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_HEL_CHILDREN),
    value: None,
};

pub static WORD_HEL_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("athcare"),
        dictgen::InsensitiveStr::Ascii("emts"),
        dictgen::InsensitiveStr::Ascii("icopers"),
        dictgen::InsensitiveStr::Ascii("icopteros"),
        dictgen::InsensitiveStr::Ascii("icoptor"),
        dictgen::InsensitiveStr::Ascii("icoptors"),
        dictgen::InsensitiveStr::Ascii("icotper"),
        dictgen::InsensitiveStr::Ascii("icotpers"),
        dictgen::InsensitiveStr::Ascii("icpoter"),
        dictgen::InsensitiveStr::Ascii("icpoters"),
        dictgen::InsensitiveStr::Ascii("ictoper"),
        dictgen::InsensitiveStr::Ascii("ictopers"),
        dictgen::InsensitiveStr::Ascii("ikopter"),
        dictgen::InsensitiveStr::Ascii("ikopters"),
        dictgen::InsensitiveStr::Ascii("lfie"),
        dictgen::InsensitiveStr::Ascii("lifre"),
        dictgen::InsensitiveStr::Ascii("lucination"),
        dictgen::InsensitiveStr::Ascii("lucinations"),
        dictgen::InsensitiveStr::Ascii("luvva"),
        dictgen::InsensitiveStr::Ascii("lvua"),
        dictgen::InsensitiveStr::Ascii("ment"),
        dictgen::InsensitiveStr::Ascii("pfull"),
        dictgen::InsensitiveStr::Ascii("pped"),
    ],
    values: &[
        &["healthcare"],
        &["helmets"],
        &["helicopters"],
        &["helicopters"],
        &["helicopter"],
        &["helicopters"],
        &["helicopters"],
        &["helicopters"],
        &["helicopter"],
        &["helicopters"],
        &["helicopters"],
        &["helicopters"],
        &["helicopter"],
        &["helicopters"],
        &["hellfire"],
        &["hellfire"],
        &["hallucination"],
        &["hallucinations"],
        &["helluva"],
        &["helluva"],
        &["helmet"],
        &["helpful"],
        &["helped"],
    ],
    range: 4..=11,
};

static WORD_HEI_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_HEI_CHILDREN),
    value: None,
};

pub static WORD_HEI_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("delburg"),
        dictgen::InsensitiveStr::Ascii("gher"),
        dictgen::InsensitiveStr::Ascii("ghest"),
        dictgen::InsensitiveStr::Ascii("ghted"),
        dictgen::InsensitiveStr::Ascii("ghtend"),
        dictgen::InsensitiveStr::Ascii("gthened"),
        dictgen::InsensitiveStr::Ascii("gths"),
        dictgen::InsensitiveStr::Ascii("rachy"),
        dictgen::InsensitiveStr::Ascii("rarchy"),
        dictgen::InsensitiveStr::Ascii("roglyphics"),
        dictgen::InsensitiveStr::Ascii("stant"),
        dictgen::InsensitiveStr::Ascii("state"),
        dictgen::InsensitiveStr::Ascii("station"),
    ],
    values: &[
        &["heidelberg"],
        &["higher"],
        &["heights"],
        &["heightened"],
        &["heightened"],
        &["heightened"],
        &["heights"],
        &["hierarchy"],
        &["hierarchy"],
        &["hieroglyphics"],
        &["hesitant"],
        &["hesitate"],
        &["hesitation"],
    ],
    range: 4..=10,
};

static WORD_HEG_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_HEG_CHILDREN),
    value: None,
};

pub static WORD_HEG_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("dehog")],
    values: &[&["hedgehog"]],
    range: 5..=5,
};

static WORD_HED_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_HED_CHILDREN),
    value: None,
};

pub static WORD_HED_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("eghog"),
        dictgen::InsensitiveStr::Ascii("gehodge"),
        dictgen::InsensitiveStr::Ascii("gehoog"),
        dictgen::InsensitiveStr::Ascii("gehorg"),
    ],
    values: &[&["hedgehog"], &["hedgehog"], &["hedgehog"], &["hedgehog"]],
    range: 5..=7,
};

static WORD_HEA_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_HEA_CHILDREN),
    value: None,
};

pub static WORD_HEA_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("dachs"),
        dictgen::InsensitiveStr::Ascii("dahces"),
        dictgen::InsensitiveStr::Ascii("dest"),
        dictgen::InsensitiveStr::Ascii("dests"),
        dictgen::InsensitiveStr::Ascii("dhpone"),
        dictgen::InsensitiveStr::Ascii("dhpones"),
        dictgen::InsensitiveStr::Ascii("dhsot"),
        dictgen::InsensitiveStr::Ascii("dphoens"),
        dictgen::InsensitiveStr::Ascii("dqaurters"),
        dictgen::InsensitiveStr::Ascii("dquarer"),
        dictgen::InsensitiveStr::Ascii("dquartes"),
        dictgen::InsensitiveStr::Ascii("dquater"),
        dictgen::InsensitiveStr::Ascii("dquatered"),
        dictgen::InsensitiveStr::Ascii("dquaters"),
        dictgen::InsensitiveStr::Ascii("dseat"),
        dictgen::InsensitiveStr::Ascii("dses"),
        dictgen::InsensitiveStr::Ascii("dshoot"),
        dictgen::InsensitiveStr::Ascii("dshoots"),
        dictgen::InsensitiveStr::Ascii("lither"),
        dictgen::InsensitiveStr::Ascii("ltchare"),
        dictgen::InsensitiveStr::Ascii("ltheast"),
        dictgen::InsensitiveStr::Ascii("ltheir"),
        dictgen::InsensitiveStr::Ascii("lthercare"),
        dictgen::InsensitiveStr::Ascii("lthiet"),
        dictgen::InsensitiveStr::Ascii("lthire"),
        dictgen::InsensitiveStr::Ascii("lthit"),
        dictgen::InsensitiveStr::Ascii("lthyest"),
        dictgen::InsensitiveStr::Ascii("pdhone"),
        dictgen::InsensitiveStr::Ascii("pdhones"),
        dictgen::InsensitiveStr::Ascii("red"),
        dictgen::InsensitiveStr::Ascii("rhtstone"),
        dictgen::InsensitiveStr::Ascii("rtbeart"),
        dictgen::InsensitiveStr::Ascii("rtbeast"),
        dictgen::InsensitiveStr::Ascii("rtborken"),
        dictgen::InsensitiveStr::Ascii("rtborne"),
        dictgen::InsensitiveStr::Ascii("rtbrake"),
        dictgen::InsensitiveStr::Ascii("rtbraker"),
        dictgen::InsensitiveStr::Ascii("rtbrakes"),
        dictgen::InsensitiveStr::Ascii("rthsone"),
        dictgen::InsensitiveStr::Ascii("rtsthone"),
        dictgen::InsensitiveStr::Ascii("stink"),
        dictgen::InsensitiveStr::Ascii("thern"),
        dictgen::InsensitiveStr::Ascii("tlhcare"),
        dictgen::InsensitiveStr::Ascii("tskin"),
        dictgen::InsensitiveStr::Ascii("veny"),
        dictgen::InsensitiveStr::Ascii("viliy"),
        dictgen::InsensitiveStr::Ascii("villy"),
        dictgen::InsensitiveStr::Ascii("viweight"),
        dictgen::InsensitiveStr::Ascii("vnely"),
        dictgen::InsensitiveStr::Ascii("vyweght"),
        dictgen::InsensitiveStr::Ascii("vyweigt"),
        dictgen::InsensitiveStr::Ascii("vyweigth"),
        dictgen::InsensitiveStr::Ascii("vywieght"),
        dictgen::InsensitiveStr::Ascii("vywieghts"),
    ],
    values: &[
        &["headaches"],
        &["headaches"],
        &["headset"],
        &["headsets"],
        &["headphone"],
        &["headphones"],
        &["headshot"],
        &["headphones"],
        &["headquarters"],
        &["headquarter"],
        &["headquarters"],
        &["headquarter"],
        &["headquartered"],
        &["headquarters"],
        &["headset"],
        &["headsets"],
        &["headshot"],
        &["headshot"],
        &["healthier"],
        &["healthcare"],
        &["healthiest"],
        &["healthier"],
        &["healthcare"],
        &["healthiest"],
        &["healthier"],
        &["healthiest"],
        &["healthiest"],
        &["headphone"],
        &["headphones"],
        &["heard"],
        &["hearthstone"],
        &["heartbeat"],
        &["heartbeat"],
        &["heartbroken"],
        &["heartbroken"],
        &["heartbreak"],
        &["heartbreak"],
        &["heartbreak"],
        &["hearthstone"],
        &["hearthstone"],
        &["heatsink"],
        &["heathen"],
        &["healthcare"],
        &["heatsink"],
        &["heavenly"],
        &["heavily"],
        &["heavily"],
        &["heavyweight"],
        &["heavenly"],
        &["heavyweight"],
        &["heavyweight"],
        &["heavyweight"],
        &["heavyweight"],
        &["heavyweight"],
    ],
    range: 3..=9,
};

static WORD_HD_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_HD_CHILDREN),
    value: None,
};

pub static WORD_HD_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("insight")],
    values: &[&["hindsight"]],
    range: 7..=7,
};

static WORD_HA_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_HA_CHILDREN),
    value: None,
};

static WORD_HA_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    None,
    Some(&WORD_HAB_NODE),
    Some(&WORD_HAC_NODE),
    None,
    Some(&WORD_HAE_NODE),
    Some(&WORD_HAF_NODE),
    None,
    None,
    Some(&WORD_HAI_NODE),
    None,
    None,
    Some(&WORD_HAL_NODE),
    Some(&WORD_HAM_NODE),
    Some(&WORD_HAN_NODE),
    Some(&WORD_HAO_NODE),
    Some(&WORD_HAP_NODE),
    None,
    Some(&WORD_HAR_NODE),
    None,
    Some(&WORD_HAT_NODE),
    Some(&WORD_HAU_NODE),
    Some(&WORD_HAV_NODE),
    None,
    None,
    None,
    None,
];

static WORD_HAV_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_HAV_CHILDREN),
    value: None,
};

pub static WORD_HAV_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ersting"),
        dictgen::InsensitiveStr::Ascii("iest"),
    ],
    values: &[&["harvesting"], &["heaviest"]],
    range: 4..=7,
};

static WORD_HAU_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_HAU_CHILDREN),
    value: None,
};

pub static WORD_HAU_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("ntig")],
    values: &[&["haunting"]],
    range: 4..=4,
};

static WORD_HAT_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_HAT_CHILDREN),
    value: None,
};

pub static WORD_HAT_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("chig"),
        dictgen::InsensitiveStr::Ascii("chign"),
        dictgen::InsensitiveStr::Ascii("esink"),
        dictgen::InsensitiveStr::Ascii("hcing"),
        dictgen::InsensitiveStr::Ascii("ian"),
    ],
    values: &[
        &["hatching"],
        &["hatching"],
        &["heatsink"],
        &["hatching"],
        &["haitian"],
    ],
    range: 3..=5,
};

static WORD_HAR_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_HAR_CHILDREN),
    value: None,
};

pub static WORD_HAR_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ased"),
        dictgen::InsensitiveStr::Ascii("ases"),
        dictgen::InsensitiveStr::Ascii("asment"),
        dictgen::InsensitiveStr::Ascii("asments"),
        dictgen::InsensitiveStr::Ascii("assement"),
        dictgen::InsensitiveStr::Ascii("dend"),
        dictgen::InsensitiveStr::Ascii("denend"),
        dictgen::InsensitiveStr::Ascii("dwod"),
        dictgen::InsensitiveStr::Ascii("dwoord"),
        dictgen::InsensitiveStr::Ascii("icut"),
        dictgen::InsensitiveStr::Ascii("istyle"),
        dictgen::InsensitiveStr::Ascii("ldine"),
        dictgen::InsensitiveStr::Ascii("moniacs"),
        dictgen::InsensitiveStr::Ascii("monisch"),
        dictgen::InsensitiveStr::Ascii("ras"),
        dictgen::InsensitiveStr::Ascii("rased"),
        dictgen::InsensitiveStr::Ascii("rases"),
        dictgen::InsensitiveStr::Ascii("rasing"),
        dictgen::InsensitiveStr::Ascii("rasment"),
        dictgen::InsensitiveStr::Ascii("rasments"),
        dictgen::InsensitiveStr::Ascii("rassed"),
        dictgen::InsensitiveStr::Ascii("rasses"),
        dictgen::InsensitiveStr::Ascii("rassing"),
        dictgen::InsensitiveStr::Ascii("rassment"),
        dictgen::InsensitiveStr::Ascii("rassments"),
        dictgen::InsensitiveStr::Ascii("vasting"),
        dictgen::InsensitiveStr::Ascii("vestgain"),
    ],
    values: &[
        &["harassed"],
        &["harasses"],
        &["harassment"],
        &["harassments"],
        &["harassment"],
        &["hardened"],
        &["hardened"],
        &["hardwood"],
        &["hardwood"],
        &["haircut"],
        &["hairstyle"],
        &["hardline"],
        &["harmonic"],
        &["harmonic"],
        &["harass"],
        &["harassed"],
        &["harasses"],
        &["harassing"],
        &["harassment"],
        &["harassments"],
        &["harassed"],
        &["harassed"],
        &["harassing"],
        &["harassment"],
        &["harassments"],
        &["harvesting"],
        &["harvesting"],
    ],
    range: 3..=9,
};

static WORD_HAP_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_HAP_CHILDREN),
    value: None,
};

pub static WORD_HAP_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("en"),
        dictgen::InsensitiveStr::Ascii("ened"),
        dictgen::InsensitiveStr::Ascii("ening"),
        dictgen::InsensitiveStr::Ascii("mshire"),
        dictgen::InsensitiveStr::Ascii("pend"),
        dictgen::InsensitiveStr::Ascii("pended"),
        dictgen::InsensitiveStr::Ascii("pends"),
        dictgen::InsensitiveStr::Ascii("penend"),
        dictgen::InsensitiveStr::Ascii("penes"),
        dictgen::InsensitiveStr::Ascii("penned"),
        dictgen::InsensitiveStr::Ascii("pilly"),
        dictgen::InsensitiveStr::Ascii("pliy"),
    ],
    values: &[
        &["happen"],
        &["happened"],
        &["happening"],
        &["hampshire"],
        &["happened"],
        &["happened"],
        &["happens"],
        &["happened"],
        &["happens"],
        &["happened"],
        &["happily"],
        &["happily"],
    ],
    range: 2..=6,
};

static WORD_HAO_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_HAO_CHILDREN),
    value: None,
};

pub static WORD_HAO_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("rder"),
        dictgen::InsensitiveStr::Ascii("rding"),
    ],
    values: &[&["hoarder"], &["hoarding"]],
    range: 4..=5,
};

static WORD_HAN_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_HAN_CHILDREN),
    value: None,
};

pub static WORD_HAN_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("dbok"),
        dictgen::InsensitiveStr::Ascii("dboook"),
        dictgen::InsensitiveStr::Ascii("dcuffes"),
        dictgen::InsensitiveStr::Ascii("dcufs"),
        dictgen::InsensitiveStr::Ascii("dedley"),
        dictgen::InsensitiveStr::Ascii("dedlly"),
        dictgen::InsensitiveStr::Ascii("dedy"),
        dictgen::InsensitiveStr::Ascii("delbars"),
        dictgen::InsensitiveStr::Ascii("deld"),
        dictgen::InsensitiveStr::Ascii("deldy"),
        dictgen::InsensitiveStr::Ascii("dicape"),
        dictgen::InsensitiveStr::Ascii("dicaped"),
        dictgen::InsensitiveStr::Ascii("dlade"),
        dictgen::InsensitiveStr::Ascii("dlare"),
        dictgen::InsensitiveStr::Ascii("dlebards"),
        dictgen::InsensitiveStr::Ascii("dledy"),
        dictgen::InsensitiveStr::Ascii("drwiting"),
        dictgen::InsensitiveStr::Ascii("dwritng"),
        dictgen::InsensitiveStr::Ascii("dwritting"),
        dictgen::InsensitiveStr::Ascii("dycapped"),
        dictgen::InsensitiveStr::Ascii("idcapped"),
        dictgen::InsensitiveStr::Ascii("lder"),
        dictgen::InsensitiveStr::Ascii("nbial"),
        dictgen::InsensitiveStr::Ascii("nibl"),
        dictgen::InsensitiveStr::Ascii("uted"),
    ],
    values: &[
        &["handbook"],
        &["handbook"],
        &["handcuffs"],
        &["handcuffs"],
        &["handedly"],
        &["handedly"],
        &["handedly"],
        &["handlebars"],
        &["handled"],
        &["handedly"],
        &["handicapped"],
        &["handicapped"],
        &["handled"],
        &["handler"],
        &["handlebars"],
        &["handedly"],
        &["handwriting"],
        &["handwriting"],
        &["handwriting"],
        &["handicapped"],
        &["handicapped"],
        &["handler"],
        &["hannibal"],
        &["hannibal"],
        &["haunted"],
    ],
    range: 4..=9,
};

static WORD_HAM_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_HAM_CHILDREN),
    value: None,
};

pub static WORD_HAM_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("bergers"),
        dictgen::InsensitiveStr::Ascii("bruger"),
        dictgen::InsensitiveStr::Ascii("burgare"),
        dictgen::InsensitiveStr::Ascii("burgaren"),
        dictgen::InsensitiveStr::Ascii("burgeres"),
        dictgen::InsensitiveStr::Ascii("burges"),
        dictgen::InsensitiveStr::Ascii("burgesa"),
        dictgen::InsensitiveStr::Ascii("burglers"),
        dictgen::InsensitiveStr::Ascii("burgles"),
        dictgen::InsensitiveStr::Ascii("burgr"),
        dictgen::InsensitiveStr::Ascii("burguers"),
        dictgen::InsensitiveStr::Ascii("burgurs"),
        dictgen::InsensitiveStr::Ascii("itlon"),
        dictgen::InsensitiveStr::Ascii("liton"),
        dictgen::InsensitiveStr::Ascii("phsire"),
        dictgen::InsensitiveStr::Ascii("sphire"),
    ],
    values: &[
        &["hamburgers"],
        &["hamburger"],
        &["hamburger"],
        &["hamburger"],
        &["hamburgers"],
        &["hamburgers"],
        &["hamburgers"],
        &["hamburgers"],
        &["hamburgers"],
        &["hamburgers"],
        &["hamburgers"],
        &["hamburgers"],
        &["hamilton"],
        &["hamilton"],
        &["hampshire"],
        &["hampshire"],
    ],
    range: 5..=8,
};

static WORD_HAL_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_HAL_CHILDREN),
    value: None,
};

pub static WORD_HAL_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("arious"),
        dictgen::InsensitiveStr::Ascii("fiax"),
        dictgen::InsensitiveStr::Ascii("fitme"),
        dictgen::InsensitiveStr::Ascii("lcuination"),
        dictgen::InsensitiveStr::Ascii("lcuinations"),
        dictgen::InsensitiveStr::Ascii("licunation"),
        dictgen::InsensitiveStr::Ascii("licunations"),
        dictgen::InsensitiveStr::Ascii("loweeen"),
        dictgen::InsensitiveStr::Ascii("lowen"),
        dictgen::InsensitiveStr::Ascii("lucenation"),
        dictgen::InsensitiveStr::Ascii("lucenations"),
        dictgen::InsensitiveStr::Ascii("luciantion"),
        dictgen::InsensitiveStr::Ascii("luciantions"),
        dictgen::InsensitiveStr::Ascii("lucinaitons"),
        dictgen::InsensitiveStr::Ascii("lucinatin"),
        dictgen::InsensitiveStr::Ascii("lucinaton"),
        dictgen::InsensitiveStr::Ascii("lukination"),
        dictgen::InsensitiveStr::Ascii("lunication"),
        dictgen::InsensitiveStr::Ascii("lunications"),
        dictgen::InsensitiveStr::Ascii("lusination"),
        dictgen::InsensitiveStr::Ascii("lusinations"),
        dictgen::InsensitiveStr::Ascii("luzination"),
        dictgen::InsensitiveStr::Ascii("luzinations"),
        dictgen::InsensitiveStr::Ascii("p"),
    ],
    values: &[
        &["hilarious"],
        &["halifax"],
        &["halftime"],
        &["hallucination"],
        &["hallucination"],
        &["hallucination"],
        &["hallucinations"],
        &["halloween"],
        &["halloween"],
        &["hallucination"],
        &["hallucinations"],
        &["hallucinations"],
        &["hallucinations"],
        &["hallucination"],
        &["hallucinations"],
        &["hallucination"],
        &["hallucination"],
        &["hallucination"],
        &["hallucinations"],
        &["hallucination"],
        &["hallucinations"],
        &["hallucination"],
        &["hallucinations"],
        &["help"],
    ],
    range: 1..=11,
};

static WORD_HAI_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_HAI_CHILDREN),
    value: None,
};

pub static WORD_HAI_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("lfax"),
        dictgen::InsensitiveStr::Ascii("rcuit"),
        dictgen::InsensitiveStr::Ascii("rstlye"),
        dictgen::InsensitiveStr::Ascii("rsytle"),
    ],
    values: &[&["halifax"], &["haircut"], &["hairstyle"], &["hairstyle"]],
    range: 4..=6,
};

static WORD_HAF_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_HAF_CHILDREN),
    value: None,
};

pub static WORD_HAF_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("ltime")],
    values: &[&["halftime"]],
    range: 5..=5,
};

static WORD_HAE_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_HAE_CHILDREN),
    value: None,
};

pub static WORD_HAE_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("morrage"),
        dictgen::InsensitiveStr::Ascii("then"),
        dictgen::InsensitiveStr::Ascii("v"),
    ],
    values: &[&["haemorrhage"], &["heathen"], &["have"]],
    range: 1..=7,
};

static WORD_HAC_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_HAC_CHILDREN),
    value: None,
};

pub static WORD_HAC_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("thing")],
    values: &[&["hatching"]],
    range: 5..=5,
};

static WORD_HAB_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_HAB_CHILDREN),
    value: None,
};

pub static WORD_HAB_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("aeus"),
        dictgen::InsensitiveStr::Ascii("eus"),
        dictgen::InsensitiveStr::Ascii("sbourg"),
    ],
    values: &[&["habeas"], &["habeas"], &["habsburg"]],
    range: 3..=6,
};

static WORD_G_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_G_CHILDREN),
    value: None,
};

static WORD_G_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    Some(&WORD_GA_NODE),
    None,
    None,
    None,
    Some(&WORD_GE_NODE),
    None,
    None,
    Some(&WORD_GH_NODE),
    Some(&WORD_GI_NODE),
    None,
    None,
    Some(&WORD_GL_NODE),
    Some(&WORD_GM_NODE),
    Some(&WORD_GN_NODE),
    Some(&WORD_GO_NODE),
    Some(&WORD_GP_NODE),
    None,
    Some(&WORD_GR_NODE),
    None,
    None,
    Some(&WORD_GU_NODE),
    None,
    None,
    None,
    Some(&WORD_GY_NODE),
    None,
];

static WORD_GY_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_GY_CHILDREN),
    value: None,
};

pub static WORD_GY_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("manstics"),
        dictgen::InsensitiveStr::Ascii("mnasitcs"),
        dictgen::InsensitiveStr::Ascii("nmastics"),
        dictgen::InsensitiveStr::Ascii("pises"),
        dictgen::InsensitiveStr::Ascii("spies"),
    ],
    values: &[
        &["gymnastics"],
        &["gymnastics"],
        &["gymnastics"],
        &["gypsies"],
        &["gypsies"],
    ],
    range: 5..=8,
};

static WORD_GU_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_GU_CHILDREN),
    value: None,
};

static WORD_GU_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    Some(&WORD_GUA_NODE),
    None,
    None,
    None,
    Some(&WORD_GUE_NODE),
    None,
    None,
    None,
    Some(&WORD_GUI_NODE),
    None,
    None,
    Some(&WORD_GUL_NODE),
    None,
    Some(&WORD_GUN_NODE),
    None,
    None,
    None,
    Some(&WORD_GUR_NODE),
    None,
    Some(&WORD_GUT_NODE),
    None,
    None,
    None,
    None,
    None,
    None,
];

static WORD_GUT_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_GUT_CHILDREN),
    value: None,
};

pub static WORD_GUT_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("iarist"),
        dictgen::InsensitiveStr::Ascii("iars"),
        dictgen::InsensitiveStr::Ascii("taral"),
        dictgen::InsensitiveStr::Ascii("teral"),
    ],
    values: &[&["guitarist"], &["guitars"], &["guttural"], &["guttural"]],
    range: 4..=6,
};

static WORD_GUR_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_GUR_CHILDREN),
    value: None,
};

pub static WORD_GUR_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("adian"),
        dictgen::InsensitiveStr::Ascii("adians"),
        dictgen::InsensitiveStr::Ascii("ading"),
        dictgen::InsensitiveStr::Ascii("antee"),
        dictgen::InsensitiveStr::Ascii("anteed"),
        dictgen::InsensitiveStr::Ascii("antees"),
        dictgen::InsensitiveStr::Ascii("esome"),
    ],
    values: &[
        &["guardian"],
        &["guardians"],
        &["guarding"],
        &["guarantee"],
        &["guaranteed"],
        &["guarantees"],
        &["gruesome"],
    ],
    range: 5..=6,
};

static WORD_GUN_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_GUN_CHILDREN),
    value: None,
};

pub static WORD_GUN_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("anine"),
        dictgen::InsensitiveStr::Ascii("atanamo"),
        dictgen::InsensitiveStr::Ascii("damentalists"),
        dictgen::InsensitiveStr::Ascii("iness"),
        dictgen::InsensitiveStr::Ascii("lsinger"),
        dictgen::InsensitiveStr::Ascii("niess"),
        dictgen::InsensitiveStr::Ascii("siinger"),
        dictgen::InsensitiveStr::Ascii("slanger"),
        dictgen::InsensitiveStr::Ascii("sligner"),
        dictgen::InsensitiveStr::Ascii("slingner"),
        dictgen::InsensitiveStr::Ascii("stinger"),
    ],
    values: &[
        &["guanine"],
        &["guantanamo"],
        &["fundamentalists"],
        &["guinness"],
        &["gunslinger"],
        &["guinness"],
        &["gunslinger"],
        &["gunslinger"],
        &["gunslinger"],
        &["gunslinger"],
        &["gunslinger"],
    ],
    range: 5..=12,
};

static WORD_GUL_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_GUL_CHILDREN),
    value: None,
};

pub static WORD_GUL_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("lbile"),
        dictgen::InsensitiveStr::Ascii("libe"),
    ],
    values: &[&["gullible"], &["gullible"]],
    range: 4..=5,
};

static WORD_GUI_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_GUI_CHILDREN),
    value: None,
};

pub static WORD_GUI_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("dence"),
        dictgen::InsensitiveStr::Ascii("lia"),
        dictgen::InsensitiveStr::Ascii("lio"),
        dictgen::InsensitiveStr::Ascii("ness"),
        dictgen::InsensitiveStr::Ascii("seppe"),
        dictgen::InsensitiveStr::Ascii("tards"),
        dictgen::InsensitiveStr::Ascii("tares"),
        dictgen::InsensitiveStr::Ascii("tarit"),
    ],
    values: &[
        &["guidance"],
        &["giulia"],
        &["giulio"],
        &["guinness"],
        &["giuseppe"],
        &["guitars"],
        &["guitars"],
        &["guitarist"],
    ],
    range: 3..=5,
};

static WORD_GUE_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_GUE_CHILDREN),
    value: None,
};

pub static WORD_GUE_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("rrila"),
        dictgen::InsensitiveStr::Ascii("rrilas"),
        dictgen::InsensitiveStr::Ascii("rrillera"),
    ],
    values: &[&["guerrilla"], &["guerrillas"], &["guerrilla"]],
    range: 5..=8,
};

static WORD_GUA_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_GUA_CHILDREN),
    value: None,
};

pub static WORD_GUA_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("duloupe"),
        dictgen::InsensitiveStr::Ascii("dulupe"),
        dictgen::InsensitiveStr::Ascii("ge"),
        dictgen::InsensitiveStr::Ascii("natanmo"),
        dictgen::InsensitiveStr::Ascii("ntamamo"),
        dictgen::InsensitiveStr::Ascii("ntamano"),
        dictgen::InsensitiveStr::Ascii("ntanameow"),
        dictgen::InsensitiveStr::Ascii("ntanamero"),
        dictgen::InsensitiveStr::Ascii("ntanano"),
        dictgen::InsensitiveStr::Ascii("ntanemo"),
        dictgen::InsensitiveStr::Ascii("ntano"),
        dictgen::InsensitiveStr::Ascii("ntanoma"),
        dictgen::InsensitiveStr::Ascii("ntanomo"),
        dictgen::InsensitiveStr::Ascii("ntonamo"),
        dictgen::InsensitiveStr::Ascii("ranted"),
        dictgen::InsensitiveStr::Ascii("ranteeds"),
        dictgen::InsensitiveStr::Ascii("rantes"),
        dictgen::InsensitiveStr::Ascii("rantess"),
        dictgen::InsensitiveStr::Ascii("rdain"),
        dictgen::InsensitiveStr::Ascii("rdains"),
        dictgen::InsensitiveStr::Ascii("rdiands"),
        dictgen::InsensitiveStr::Ascii("rdianes"),
        dictgen::InsensitiveStr::Ascii("rdianis"),
        dictgen::InsensitiveStr::Ascii("rdias"),
        dictgen::InsensitiveStr::Ascii("rdin"),
        dictgen::InsensitiveStr::Ascii("rentee"),
        dictgen::InsensitiveStr::Ascii("renteed"),
        dictgen::InsensitiveStr::Ascii("rentees"),
        dictgen::InsensitiveStr::Ascii("ridan"),
        dictgen::InsensitiveStr::Ascii("ridans"),
        dictgen::InsensitiveStr::Ascii("rnateed"),
        dictgen::InsensitiveStr::Ascii("rnatees"),
        dictgen::InsensitiveStr::Ascii("runteed"),
        dictgen::InsensitiveStr::Ascii("runtees"),
        dictgen::InsensitiveStr::Ascii("tamala"),
        dictgen::InsensitiveStr::Ascii("tamalan"),
    ],
    values: &[
        &["guadalupe"],
        &["guadalupe"],
        &["gage"],
        &["guantanamo"],
        &["guantanamo"],
        &["guantanamo"],
        &["guantanamo"],
        &["guantanamo"],
        &["guantanamo"],
        &["guantanamo"],
        &["guantanamo"],
        &["guantanamo"],
        &["guantanamo"],
        &["guantanamo"],
        &["guaranteed"],
        &["guarantees"],
        &["guarantees"],
        &["guarantees"],
        &["guardian"],
        &["guardians"],
        &["guardians"],
        &["guardians"],
        &["guardians"],
        &["guardians"],
        &["guardian"],
        &["guarantee"],
        &["guaranteed"],
        &["guarantees"],
        &["guardian"],
        &["guardians"],
        &["guaranteed"],
        &["guarantees"],
        &["guaranteed"],
        &["guarantees"],
        &["guatemala"],
        &["guatemalan"],
    ],
    range: 2..=9,
};

static WORD_GR_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_GR_CHILDREN),
    value: None,
};

static WORD_GR_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    Some(&WORD_GRA_NODE),
    None,
    None,
    None,
    Some(&WORD_GRE_NODE),
    None,
    None,
    None,
    Some(&WORD_GRI_NODE),
    None,
    None,
    None,
    None,
    None,
    Some(&WORD_GRO_NODE),
    Some(&WORD_GRP_NODE),
    None,
    None,
    None,
    None,
    Some(&WORD_GRU_NODE),
    None,
    Some(&WORD_GRW_NODE),
    None,
    None,
    None,
];

static WORD_GRW_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_GRW_CHILDREN),
    value: None,
};

pub static WORD_GRW_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("o")],
    values: &[&["grow"]],
    range: 1..=1,
};

static WORD_GRU_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_GRU_CHILDREN),
    value: None,
};

pub static WORD_GRU_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("seome")],
    values: &[&["gruesome"]],
    range: 5..=5,
};

static WORD_GRP_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_GRP_CHILDREN),
    value: None,
};

pub static WORD_GRP_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ahic"),
        dictgen::InsensitiveStr::Ascii("ahical"),
        dictgen::InsensitiveStr::Ascii("ahically"),
        dictgen::InsensitiveStr::Ascii("ahics"),
        dictgen::InsensitiveStr::Ascii("ahite"),
    ],
    values: &[
        &["graphic"],
        &["graphical"],
        &["graphically"],
        &["graphics"],
        &["graphite"],
    ],
    range: 4..=8,
};

static WORD_GRO_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_GRO_CHILDREN),
    value: None,
};

pub static WORD_GRO_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("pu"),
        dictgen::InsensitiveStr::Ascii("ubdbreaking"),
        dictgen::InsensitiveStr::Ascii("udnbreaking"),
    ],
    values: &[&["group"], &["groundbreaking"], &["groundbreaking"]],
    range: 2..=11,
};

static WORD_GRI_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_GRI_CHILDREN),
    value: None,
};

pub static WORD_GRI_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("affe"),
        dictgen::InsensitiveStr::Ascii("dles"),
        dictgen::InsensitiveStr::Ascii("eifng"),
        dictgen::InsensitiveStr::Ascii("evences"),
        dictgen::InsensitiveStr::Ascii("feing"),
        dictgen::InsensitiveStr::Ascii("lfriend"),
        dictgen::InsensitiveStr::Ascii("lfriends"),
        dictgen::InsensitiveStr::Ascii("llig"),
        dictgen::InsensitiveStr::Ascii("ngeworthy"),
        dictgen::InsensitiveStr::Ascii("zzlay"),
        dictgen::InsensitiveStr::Ascii("zzley"),
    ],
    values: &[
        &["giraffe"],
        &["griddles"],
        &["griefing"],
        &["grievances"],
        &["griefing"],
        &["girlfriend"],
        &["girlfriends"],
        &["grilling"],
        &["cringeworthy"],
        &["grizzly"],
        &["grizzly"],
    ],
    range: 4..=9,
};

static WORD_GRE_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_GRE_CHILDREN),
    value: None,
};

pub static WORD_GRE_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ande"),
        dictgen::InsensitiveStr::Ascii("andes"),
        dictgen::InsensitiveStr::Ascii("atful"),
        dictgen::InsensitiveStr::Ascii("atfully"),
        dictgen::InsensitiveStr::Ascii("enalnd"),
        dictgen::InsensitiveStr::Ascii("eneer"),
        dictgen::InsensitiveStr::Ascii("enhoe"),
        dictgen::InsensitiveStr::Ascii("enhosue"),
        dictgen::InsensitiveStr::Ascii("enlad"),
        dictgen::InsensitiveStr::Ascii("enore"),
        dictgen::InsensitiveStr::Ascii("if"),
        dictgen::InsensitiveStr::Ascii("naders"),
        dictgen::InsensitiveStr::Ascii("nads"),
        dictgen::InsensitiveStr::Ascii("neer"),
        dictgen::InsensitiveStr::Ascii("usome"),
        dictgen::InsensitiveStr::Ascii("viances"),
    ],
    values: &[
        &["grenade"],
        &["grenades"],
        &["grateful"],
        &["gratefully"],
        &["greenland"],
        &["greener"],
        &["greenhouse"],
        &["greenhouse"],
        &["greenland"],
        &["greener"],
        &["grief"],
        &["grenades"],
        &["grenades"],
        &["greener"],
        &["gruesome"],
        &["grievances"],
    ],
    range: 2..=7,
};

static WORD_GRA_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_GRA_CHILDREN),
    value: None,
};

static WORD_GRA_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    None,
    Some(&WORD_GRAB_NODE),
    Some(&WORD_GRAC_NODE),
    Some(&WORD_GRAD_NODE),
    Some(&WORD_GRAE_NODE),
    Some(&WORD_GRAF_NODE),
    None,
    Some(&WORD_GRAH_NODE),
    Some(&WORD_GRAI_NODE),
    None,
    None,
    None,
    Some(&WORD_GRAM_NODE),
    Some(&WORD_GRAN_NODE),
    None,
    Some(&WORD_GRAP_NODE),
    None,
    None,
    Some(&WORD_GRAS_NODE),
    Some(&WORD_GRAT_NODE),
    Some(&WORD_GRAU_NODE),
    Some(&WORD_GRAV_NODE),
    None,
    None,
    None,
    None,
];

static WORD_GRAV_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_GRAV_CHILDREN),
    value: None,
};

pub static WORD_GRAV_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("itacional"),
        dictgen::InsensitiveStr::Ascii("itaitonal"),
        dictgen::InsensitiveStr::Ascii("itatie"),
        dictgen::InsensitiveStr::Ascii("itatiei"),
        dictgen::InsensitiveStr::Ascii("itationnal"),
    ],
    values: &[
        &["gravitational"],
        &["gravitational"],
        &["gravitate"],
        &["gravitate"],
        &["gravitational"],
    ],
    range: 6..=10,
};

static WORD_GRAU_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_GRAU_CHILDREN),
    value: None,
};

pub static WORD_GRAU_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("dally"),
        dictgen::InsensitiveStr::Ascii("dates"),
        dictgen::InsensitiveStr::Ascii("dating"),
        dictgen::InsensitiveStr::Ascii("dation"),
    ],
    values: &[
        &["gradually"],
        &["graduates"],
        &["graduating"],
        &["graduation"],
    ],
    range: 5..=6,
};

static WORD_GRAT_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_GRAT_CHILDREN),
    value: None,
};

pub static WORD_GRAT_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ificacion"),
        dictgen::InsensitiveStr::Ascii("ificaiton"),
        dictgen::InsensitiveStr::Ascii("ituous"),
        dictgen::InsensitiveStr::Ascii("iutous"),
        dictgen::InsensitiveStr::Ascii("ivate"),
        dictgen::InsensitiveStr::Ascii("ivational"),
        dictgen::InsensitiveStr::Ascii("uidous"),
        dictgen::InsensitiveStr::Ascii("uitious"),
        dictgen::InsensitiveStr::Ascii("uituos"),
        dictgen::InsensitiveStr::Ascii("uituous"),
        dictgen::InsensitiveStr::Ascii("utious"),
    ],
    values: &[
        &["gratification"],
        &["gratification"],
        &["gratuitous"],
        &["gratuitous"],
        &["gravitate"],
        &["gravitational"],
        &["gratuitous"],
        &["gratuitous"],
        &["gratuitous"],
        &["gratuitous"],
        &["gratuitous"],
    ],
    range: 5..=9,
};

static WORD_GRAS_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_GRAS_CHILDREN),
    value: None,
};

pub static WORD_GRAS_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("srooots"),
        dictgen::InsensitiveStr::Ascii("srooters"),
    ],
    values: &[&["grassroots"], &["grassroots"]],
    range: 7..=8,
};

static WORD_GRAP_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_GRAP_CHILDREN),
    value: None,
};

pub static WORD_GRAP_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("efriut"),
        dictgen::InsensitiveStr::Ascii("efrukt"),
        dictgen::InsensitiveStr::Ascii("hcially"),
        dictgen::InsensitiveStr::Ascii("hcis"),
        dictgen::InsensitiveStr::Ascii("hicaly"),
        dictgen::InsensitiveStr::Ascii("hiclly"),
        dictgen::InsensitiveStr::Ascii("hie"),
        dictgen::InsensitiveStr::Ascii("his"),
        dictgen::InsensitiveStr::Ascii("ichs"),
        dictgen::InsensitiveStr::Ascii("pel"),
        dictgen::InsensitiveStr::Ascii("pnel"),
    ],
    values: &[
        &["grapefruit"],
        &["grapefruit"],
        &["graphically"],
        &["graphics"],
        &["graphically"],
        &["graphically"],
        &["graphite"],
        &["graphics"],
        &["graphics"],
        &["grapple"],
        &["grapple"],
    ],
    range: 3..=7,
};

static WORD_GRAN_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_GRAN_CHILDREN),
    value: None,
};

pub static WORD_GRAN_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("dchilden"),
        dictgen::InsensitiveStr::Ascii("dchilder"),
        dictgen::InsensitiveStr::Ascii("dchilderen"),
        dictgen::InsensitiveStr::Ascii("dchildern"),
        dictgen::InsensitiveStr::Ascii("dchilren"),
        dictgen::InsensitiveStr::Ascii("iet"),
        dictgen::InsensitiveStr::Ascii("olla"),
        dictgen::InsensitiveStr::Ascii("tie"),
    ],
    values: &[
        &["grandchildren"],
        &["grandchildren"],
        &["grandchildren"],
        &["grandchildren"],
        &["grandchildren"],
        &["granite"],
        &["granola"],
        &["granite"],
    ],
    range: 3..=10,
};

static WORD_GRAM_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_GRAM_CHILDREN),
    value: None,
};

pub static WORD_GRAM_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("marical"),
        dictgen::InsensitiveStr::Ascii("marically"),
        dictgen::InsensitiveStr::Ascii("maticaal"),
        dictgen::InsensitiveStr::Ascii("maticallity"),
        dictgen::InsensitiveStr::Ascii("maticaly"),
        dictgen::InsensitiveStr::Ascii("maticly"),
        dictgen::InsensitiveStr::Ascii("mer"),
        dictgen::InsensitiveStr::Ascii("mitical"),
    ],
    values: &[
        &["grammatical"],
        &["grammatically"],
        &["grammatical"],
        &["grammatically"],
        &["grammatically"],
        &["grammatical"],
        &["grammar"],
        &["grammatical"],
    ],
    range: 3..=11,
};

static WORD_GRAI_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_GRAI_CHILDREN),
    value: None,
};

pub static WORD_GRAI_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("dent"),
        dictgen::InsensitiveStr::Ascii("nte"),
    ],
    values: &[&["gradient"], &["granite"]],
    range: 3..=4,
};

static WORD_GRAH_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_GRAH_CHILDREN),
    value: None,
};

pub static WORD_GRAH_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("pic"),
        dictgen::InsensitiveStr::Ascii("pical"),
        dictgen::InsensitiveStr::Ascii("pically"),
        dictgen::InsensitiveStr::Ascii("pics"),
        dictgen::InsensitiveStr::Ascii("pite"),
    ],
    values: &[
        &["graphic"],
        &["graphical"],
        &["graphically"],
        &["graphics"],
        &["graphite"],
    ],
    range: 3..=7,
};

static WORD_GRAF_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_GRAF_CHILDREN),
    value: None,
};

pub static WORD_GRAF_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ield"),
        dictgen::InsensitiveStr::Ascii("itti"),
    ],
    values: &[&["garfield"], &["graffiti"]],
    range: 4..=4,
};

static WORD_GRAE_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_GRAE_CHILDREN),
    value: None,
};

pub static WORD_GRAE_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("t")],
    values: &[&["great"]],
    range: 1..=1,
};

static WORD_GRAD_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_GRAD_CHILDREN),
    value: None,
};

pub static WORD_GRAD_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("iating"),
        dictgen::InsensitiveStr::Ascii("iation"),
        dictgen::InsensitiveStr::Ascii("ification"),
        dictgen::InsensitiveStr::Ascii("uacion"),
        dictgen::InsensitiveStr::Ascii("ualy"),
        dictgen::InsensitiveStr::Ascii("uaste"),
        dictgen::InsensitiveStr::Ascii("uatin"),
    ],
    values: &[
        &["graduating"],
        &["graduation"],
        &["gratification"],
        &["graduation"],
        &["gradually"],
        &["graduates"],
        &["graduation"],
    ],
    range: 4..=9,
};

static WORD_GRAC_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_GRAC_CHILDREN),
    value: None,
};

pub static WORD_GRAC_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("efull"),
        dictgen::InsensitiveStr::Ascii("efullly"),
        dictgen::InsensitiveStr::Ascii("efuly"),
    ],
    values: &[&["graceful"], &["gracefully"], &["gracefully"]],
    range: 5..=7,
};

static WORD_GRAB_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_GRAB_CHILDREN),
    value: None,
};

pub static WORD_GRAB_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("age")],
    values: &[&["garbage"]],
    range: 3..=3,
};

static WORD_GP_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_GP_CHILDREN),
    value: None,
};

pub static WORD_GP_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("ysies")],
    values: &[&["gypsies"]],
    range: 5..=5,
};

static WORD_GO_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_GO_CHILDREN),
    value: None,
};

static WORD_GO_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    Some(&WORD_GOA_NODE),
    Some(&WORD_GOB_NODE),
    None,
    Some(&WORD_GOD_NODE),
    Some(&WORD_GOE_NODE),
    None,
    Some(&WORD_GOG_NODE),
    None,
    Some(&WORD_GOI_NODE),
    None,
    None,
    Some(&WORD_GOL_NODE),
    None,
    Some(&WORD_GON_NODE),
    Some(&WORD_GOO_NODE),
    None,
    None,
    Some(&WORD_GOR_NODE),
    Some(&WORD_GOS_NODE),
    Some(&WORD_GOT_NODE),
    Some(&WORD_GOU_NODE),
    Some(&WORD_GOV_NODE),
    None,
    None,
    None,
    None,
];

static WORD_GOV_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_GOV_CHILDREN),
    value: None,
};

pub static WORD_GOV_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ement"),
        dictgen::InsensitiveStr::Ascii("emrent"),
        dictgen::InsensitiveStr::Ascii("enment"),
        dictgen::InsensitiveStr::Ascii("enrment"),
        dictgen::InsensitiveStr::Ascii("enrments"),
        dictgen::InsensitiveStr::Ascii("erance"),
        dictgen::InsensitiveStr::Ascii("eremnt"),
        dictgen::InsensitiveStr::Ascii("erend"),
        dictgen::InsensitiveStr::Ascii("ermenet"),
        dictgen::InsensitiveStr::Ascii("erment"),
        dictgen::InsensitiveStr::Ascii("ermental"),
        dictgen::InsensitiveStr::Ascii("ermet"),
        dictgen::InsensitiveStr::Ascii("ermetn"),
        dictgen::InsensitiveStr::Ascii("ermnent"),
        dictgen::InsensitiveStr::Ascii("ermnet"),
        dictgen::InsensitiveStr::Ascii("ernemnt"),
        dictgen::InsensitiveStr::Ascii("ernemntal"),
        dictgen::InsensitiveStr::Ascii("ernemnts"),
        dictgen::InsensitiveStr::Ascii("ernened"),
        dictgen::InsensitiveStr::Ascii("erner"),
        dictgen::InsensitiveStr::Ascii("ernered"),
        dictgen::InsensitiveStr::Ascii("ernmanet"),
        dictgen::InsensitiveStr::Ascii("ernmant"),
        dictgen::InsensitiveStr::Ascii("ernmeant"),
        dictgen::InsensitiveStr::Ascii("ernmential"),
        dictgen::InsensitiveStr::Ascii("ernmently"),
        dictgen::InsensitiveStr::Ascii("ernmet"),
        dictgen::InsensitiveStr::Ascii("ernmetn"),
        dictgen::InsensitiveStr::Ascii("ernmnet"),
        dictgen::InsensitiveStr::Ascii("nerment"),
        dictgen::InsensitiveStr::Ascii("orment"),
        dictgen::InsensitiveStr::Ascii("ormental"),
        dictgen::InsensitiveStr::Ascii("ornment"),
        dictgen::InsensitiveStr::Ascii("rement"),
    ],
    values: &[
        &["government"],
        &["goverment"],
        &["government"],
        &["government"],
        &["governments"],
        &["governance"],
        &["goverment"],
        &["governed"],
        &["goverment"],
        &["government"],
        &["governmental"],
        &["goverment"],
        &["goverment"],
        &["governments"],
        &["goverment"],
        &["government"],
        &["governmental"],
        &["governments"],
        &["governed"],
        &["governor"],
        &["governed"],
        &["governmental"],
        &["governmental"],
        &["governmental"],
        &["governmental"],
        &["governmental"],
        &["governments"],
        &["governments"],
        &["government"],
        &["government"],
        &["government"],
        &["governmental"],
        &["government"],
        &["goverment"],
    ],
    range: 5..=10,
};

static WORD_GOU_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_GOU_CHILDREN),
    value: None,
};

pub static WORD_GOU_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("rmelt"),
        dictgen::InsensitiveStr::Ascii("rment"),
        dictgen::InsensitiveStr::Ascii("vener"),
    ],
    values: &[&["gourmet"], &["gourmet"], &["governor"]],
    range: 5..=5,
};

static WORD_GOT_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_GOT_CHILDREN),
    value: None,
};

pub static WORD_GOT_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("henberg"),
        dictgen::InsensitiveStr::Ascii("tleib"),
    ],
    values: &[&["gothenburg"], &["gottlieb"]],
    range: 5..=7,
};

static WORD_GOS_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_GOS_CHILDREN),
    value: None,
};

pub static WORD_GOS_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("epls"),
        dictgen::InsensitiveStr::Ascii("pells"),
        dictgen::InsensitiveStr::Ascii("ples"),
    ],
    values: &[&["gospels"], &["gospels"], &["gospels"]],
    range: 4..=5,
};

static WORD_GOR_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_GOR_CHILDREN),
    value: None,
};

pub static WORD_GOR_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("egous"),
        dictgen::InsensitiveStr::Ascii("eshadowing"),
        dictgen::InsensitiveStr::Ascii("goeus"),
        dictgen::InsensitiveStr::Ascii("illia"),
        dictgen::InsensitiveStr::Ascii("illla"),
        dictgen::InsensitiveStr::Ascii("umet"),
        dictgen::InsensitiveStr::Ascii("vement"),
    ],
    values: &[
        &["gorgeous"],
        &["foreshadowing"],
        &["gorgeous"],
        &["gorilla"],
        &["gorilla"],
        &["gourmet"],
        &["goverment"],
    ],
    range: 4..=10,
};

static WORD_GOO_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_GOO_CHILDREN),
    value: None,
};

pub static WORD_GOO_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("dlcuk"),
        dictgen::InsensitiveStr::Ascii("dluk"),
        dictgen::InsensitiveStr::Ascii("sebumbps"),
        dictgen::InsensitiveStr::Ascii("sebumbs"),
        dictgen::InsensitiveStr::Ascii("sebums"),
        dictgen::InsensitiveStr::Ascii("segumps"),
        dictgen::InsensitiveStr::Ascii("sepumps"),
    ],
    values: &[
        &["goodluck"],
        &["goodluck"],
        &["goosebumps"],
        &["goosebumps"],
        &["goosebumps"],
        &["goosebumps"],
        &["goosebumps"],
    ],
    range: 4..=8,
};

static WORD_GON_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_GON_CHILDREN),
    value: None,
};

pub static WORD_GON_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ewidl"),
        dictgen::InsensitiveStr::Ascii("gratulations"),
        dictgen::InsensitiveStr::Ascii("ig"),
    ],
    values: &[&["gonewild"], &["congratulations"], &["going"]],
    range: 2..=12,
};

static WORD_GOL_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_GOL_CHILDREN),
    value: None,
};

pub static WORD_GOL_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("aith"),
        dictgen::InsensitiveStr::Ascii("akeeper"),
        dictgen::InsensitiveStr::Ascii("bins"),
        dictgen::InsensitiveStr::Ascii("damn"),
        dictgen::InsensitiveStr::Ascii("dbeg"),
        dictgen::InsensitiveStr::Ascii("dburger"),
        dictgen::InsensitiveStr::Ascii("dfisch"),
        dictgen::InsensitiveStr::Ascii("difsh"),
        dictgen::InsensitiveStr::Ascii("dike"),
        dictgen::InsensitiveStr::Ascii("itah"),
    ],
    values: &[
        &["goliath"],
        &["goalkeeper"],
        &["goblins"],
        &["goldman"],
        &["goldberg"],
        &["goldberg"],
        &["goldfish"],
        &["goldfish"],
        &["godlike"],
        &["goliath"],
    ],
    range: 4..=7,
};

static WORD_GOI_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_GOI_CHILDREN),
    value: None,
};

pub static WORD_GOI_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("gn"),
        dictgen::InsensitiveStr::Ascii("lath"),
    ],
    values: &[&["going"], &["goliath"]],
    range: 2..=4,
};

static WORD_GOG_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_GOG_CHILDREN),
    value: None,
};

pub static WORD_GOG_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("in")],
    values: &[&["going"]],
    range: 2..=2,
};

static WORD_GOE_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_GOE_CHILDREN),
    value: None,
};

pub static WORD_GOE_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("graphic"),
        dictgen::InsensitiveStr::Ascii("graphical"),
        dictgen::InsensitiveStr::Ascii("graphically"),
        dictgen::InsensitiveStr::Ascii("graphy"),
        dictgen::InsensitiveStr::Ascii("rgia"),
    ],
    values: &[
        &["geographic"],
        &["geographical"],
        &["geographically"],
        &["geography"],
        &["georgia"],
    ],
    range: 4..=11,
};

static WORD_GOD_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_GOD_CHILDREN),
    value: None,
};

pub static WORD_GOD_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("afther"),
        dictgen::InsensitiveStr::Ascii("dammn"),
        dictgen::InsensitiveStr::Ascii("dammt"),
        dictgen::InsensitiveStr::Ascii("danm"),
        dictgen::InsensitiveStr::Ascii("dman"),
        dictgen::InsensitiveStr::Ascii("ess"),
        dictgen::InsensitiveStr::Ascii("esses"),
        dictgen::InsensitiveStr::Ascii("lberg"),
        dictgen::InsensitiveStr::Ascii("lfish"),
        dictgen::InsensitiveStr::Ascii("liek"),
        dictgen::InsensitiveStr::Ascii("lman"),
        dictgen::InsensitiveStr::Ascii("ounov"),
        dictgen::InsensitiveStr::Ascii("pseed"),
        dictgen::InsensitiveStr::Ascii("sped"),
        dictgen::InsensitiveStr::Ascii("spede"),
        dictgen::InsensitiveStr::Ascii("speeed"),
    ],
    values: &[
        &["godfather"],
        &["goddamn"],
        &["goddammit"],
        &["goddam"],
        &["goddamn"],
        &["goddess"],
        &["goddesses"],
        &["goldberg"],
        &["goldfish"],
        &["godlike"],
        &["goldman"],
        &["godunov"],
        &["godspeed"],
        &["godspeed"],
        &["godspeed"],
        &["godspeed"],
    ],
    range: 3..=6,
};

static WORD_GOB_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_GOB_CHILDREN),
    value: None,
};

pub static WORD_GOB_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("lings")],
    values: &[&["goblins"]],
    range: 5..=5,
};

static WORD_GOA_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_GOA_CHILDREN),
    value: None,
};

pub static WORD_GOA_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("lkeaper"),
        dictgen::InsensitiveStr::Ascii("lkeepr"),
        dictgen::InsensitiveStr::Ascii("lkeeprs"),
        dictgen::InsensitiveStr::Ascii("lkepeer"),
    ],
    values: &[
        &["goalkeeper"],
        &["goalkeeper"],
        &["goalkeeper"],
        &["goalkeeper"],
    ],
    range: 6..=7,
};

static WORD_GN_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_GN_CHILDREN),
    value: None,
};

pub static WORD_GN_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("aking"),
        dictgen::InsensitiveStr::Ascii("awwed"),
    ],
    values: &[&["ganking"], &["gnawed"]],
    range: 5..=5,
};

static WORD_GM_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_GM_CHILDREN),
    value: None,
};

pub static WORD_GM_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("aertag")],
    values: &[&["gamertag"]],
    range: 6..=6,
};

static WORD_GL_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_GL_CHILDREN),
    value: None,
};

pub static WORD_GL_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("adiatr"),
        dictgen::InsensitiveStr::Ascii("agsow"),
        dictgen::InsensitiveStr::Ascii("aicer"),
        dictgen::InsensitiveStr::Ascii("ichted"),
        dictgen::InsensitiveStr::Ascii("ichtes"),
        dictgen::InsensitiveStr::Ascii("icthed"),
        dictgen::InsensitiveStr::Ascii("icthes"),
        dictgen::InsensitiveStr::Ascii("icthy"),
        dictgen::InsensitiveStr::Ascii("ight"),
        dictgen::InsensitiveStr::Ascii("impes"),
        dictgen::InsensitiveStr::Ascii("imspe"),
        dictgen::InsensitiveStr::Ascii("ipmse"),
        dictgen::InsensitiveStr::Ascii("itchd"),
        dictgen::InsensitiveStr::Ascii("itchey"),
        dictgen::InsensitiveStr::Ascii("itchly"),
        dictgen::InsensitiveStr::Ascii("itchs"),
        dictgen::InsensitiveStr::Ascii("itchty"),
        dictgen::InsensitiveStr::Ascii("ithced"),
        dictgen::InsensitiveStr::Ascii("ithces"),
        dictgen::InsensitiveStr::Ascii("ithcy"),
        dictgen::InsensitiveStr::Ascii("oabl"),
        dictgen::InsensitiveStr::Ascii("oablly"),
        dictgen::InsensitiveStr::Ascii("obaly"),
        dictgen::InsensitiveStr::Ascii("odberg"),
        dictgen::InsensitiveStr::Ascii("odfish"),
        dictgen::InsensitiveStr::Ascii("oiath"),
        dictgen::InsensitiveStr::Ascii("orifierad"),
        dictgen::InsensitiveStr::Ascii("orifindel"),
        dictgen::InsensitiveStr::Ascii("orios"),
        dictgen::InsensitiveStr::Ascii("oriuos"),
        dictgen::InsensitiveStr::Ascii("tiched"),
        dictgen::InsensitiveStr::Ascii("tiches"),
        dictgen::InsensitiveStr::Ascii("tichy"),
    ],
    values: &[
        &["gladiator"],
        &["glasgow"],
        &["glacier"],
        &["glitched"],
        &["glitches"],
        &["glitched"],
        &["glitches"],
        &["glitchy"],
        &["flight"],
        &["glimpse"],
        &["glimpse"],
        &["glimpse"],
        &["glitched"],
        &["glitchy"],
        &["glitchy"],
        &["glitches"],
        &["glitchy"],
        &["glitched"],
        &["glitches"],
        &["glitchy"],
        &["global"],
        &["globally"],
        &["globally"],
        &["goldberg"],
        &["goldfish"],
        &["goliath"],
        &["glorified"],
        &["glorified"],
        &["glorious"],
        &["glorious"],
        &["glitched"],
        &["glitches"],
        &["glitchy"],
    ],
    range: 4..=9,
};

static WORD_GI_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_GI_CHILDREN),
    value: None,
};

pub static WORD_GI_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("agbyte"),
        dictgen::InsensitiveStr::Ascii("gabtye"),
        dictgen::InsensitiveStr::Ascii("gabye"),
        dictgen::InsensitiveStr::Ascii("gantisch"),
        dictgen::InsensitiveStr::Ascii("gaybte"),
        dictgen::InsensitiveStr::Ascii("gbayte"),
        dictgen::InsensitiveStr::Ascii("gnatic"),
        dictgen::InsensitiveStr::Ascii("ltched"),
        dictgen::InsensitiveStr::Ascii("ltches"),
        dictgen::InsensitiveStr::Ascii("ltchy"),
        dictgen::InsensitiveStr::Ascii("mmickers"),
        dictgen::InsensitiveStr::Ascii("mmickey"),
        dictgen::InsensitiveStr::Ascii("mmickly"),
        dictgen::InsensitiveStr::Ascii("mmics"),
        dictgen::InsensitiveStr::Ascii("mmicy"),
        dictgen::InsensitiveStr::Ascii("rafffe"),
        dictgen::InsensitiveStr::Ascii("refing"),
        dictgen::InsensitiveStr::Ascii("rlfirend"),
        dictgen::InsensitiveStr::Ascii("rlfirends"),
        dictgen::InsensitiveStr::Ascii("rlfreind"),
        dictgen::InsensitiveStr::Ascii("rlfreinds"),
        dictgen::InsensitiveStr::Ascii("rlfried"),
        dictgen::InsensitiveStr::Ascii("rlfriens"),
        dictgen::InsensitiveStr::Ascii("rlfrients"),
        dictgen::InsensitiveStr::Ascii("rlfrinds"),
        dictgen::InsensitiveStr::Ascii("rlfrined"),
        dictgen::InsensitiveStr::Ascii("rlling"),
        dictgen::InsensitiveStr::Ascii("rzzly"),
    ],
    values: &[
        &["gigabyte"],
        &["gigabyte"],
        &["gigabyte"],
        &["gigantic"],
        &["gigabyte"],
        &["gigabyte"],
        &["gigantic"],
        &["glitched"],
        &["glitches"],
        &["glitchy"],
        &["gimmicks"],
        &["gimmicky"],
        &["gimmicky"],
        &["gimmicks"],
        &["gimmicky"],
        &["giraffe"],
        &["griefing"],
        &["girlfriend"],
        &["girlfriends"],
        &["girlfriend"],
        &["girlfriends"],
        &["girlfriend"],
        &["girlfriends"],
        &["girlfriends"],
        &["girlfriends"],
        &["girlfriends"],
        &["grilling"],
        &["grizzly"],
    ],
    range: 5..=9,
};

static WORD_GH_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_GH_CHILDREN),
    value: None,
};

pub static WORD_GH_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("andi")],
    values: &[&["gandhi"]],
    range: 4..=4,
};

static WORD_GE_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_GE_CHILDREN),
    value: None,
};

static WORD_GE_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    Some(&WORD_GEM_NODE),
    Some(&WORD_GEN_NODE),
    Some(&WORD_GEO_NODE),
    None,
    None,
    Some(&WORD_GER_NODE),
    None,
    None,
    Some(&WORD_GEU_NODE),
    None,
    None,
    None,
    None,
    None,
];

static WORD_GEU_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_GEU_CHILDREN),
    value: None,
};

pub static WORD_GEU_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("rrilla")],
    values: &[&["guerrilla"]],
    range: 6..=6,
};

static WORD_GER_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_GER_CHILDREN),
    value: None,
};

pub static WORD_GER_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("at"),
        dictgen::InsensitiveStr::Ascii("maniac"),
        dictgen::InsensitiveStr::Ascii("manisch"),
        dictgen::InsensitiveStr::Ascii("manos"),
        dictgen::InsensitiveStr::Ascii("manus"),
        dictgen::InsensitiveStr::Ascii("nade"),
        dictgen::InsensitiveStr::Ascii("nades"),
        dictgen::InsensitiveStr::Ascii("ogia"),
    ],
    values: &[
        &["great"],
        &["germanic"],
        &["germanic"],
        &["germans"],
        &["germans"],
        &["grenade"],
        &["grenades"],
        &["georgia"],
    ],
    range: 2..=7,
};

static WORD_GEO_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_GEO_CHILDREN),
    value: None,
};

pub static WORD_GEO_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("grahpical"),
        dictgen::InsensitiveStr::Ascii("graphacilly"),
        dictgen::InsensitiveStr::Ascii("graphia"),
        dictgen::InsensitiveStr::Ascii("graphicaly"),
        dictgen::InsensitiveStr::Ascii("graphicial"),
        dictgen::InsensitiveStr::Ascii("graphicly"),
        dictgen::InsensitiveStr::Ascii("graphisch"),
        dictgen::InsensitiveStr::Ascii("graphycally"),
        dictgen::InsensitiveStr::Ascii("grapy"),
        dictgen::InsensitiveStr::Ascii("gria"),
        dictgen::InsensitiveStr::Ascii("grpahic"),
        dictgen::InsensitiveStr::Ascii("grpahical"),
        dictgen::InsensitiveStr::Ascii("grpahically"),
        dictgen::InsensitiveStr::Ascii("grpahy"),
        dictgen::InsensitiveStr::Ascii("merty"),
        dictgen::InsensitiveStr::Ascii("metricians"),
        dictgen::InsensitiveStr::Ascii("mety"),
        dictgen::InsensitiveStr::Ascii("mtery"),
        dictgen::InsensitiveStr::Ascii("praphically"),
        dictgen::InsensitiveStr::Ascii("riga"),
    ],
    values: &[
        &["geographical"],
        &["geographically"],
        &["geographical"],
        &["geographically"],
        &["geographical"],
        &["geographical"],
        &["geographic"],
        &["geographically"],
        &["geography"],
        &["georgia"],
        &["geographic"],
        &["geographical"],
        &["geographically"],
        &["geography"],
        &["geometry"],
        &["geometers"],
        &["geometry"],
        &["geometry"],
        &["geographically"],
        &["georgia"],
    ],
    range: 4..=11,
};

static WORD_GEN_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_GEN_CHILDREN),
    value: None,
};

static WORD_GEN_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    Some(&WORD_GENA_NODE),
    None,
    None,
    None,
    Some(&WORD_GENE_NODE),
    None,
    None,
    None,
    Some(&WORD_GENI_NODE),
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    Some(&WORD_GENR_NODE),
    None,
    Some(&WORD_GENT_NODE),
    Some(&WORD_GENU_NODE),
    None,
    None,
    None,
    None,
    None,
];

static WORD_GENU_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_GENU_CHILDREN),
    value: None,
};

pub static WORD_GENU_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ienly"),
        dictgen::InsensitiveStr::Ascii("inelly"),
        dictgen::InsensitiveStr::Ascii("inley"),
        dictgen::InsensitiveStr::Ascii("ises"),
    ],
    values: &[
        &["genuinely"],
        &["genuinely"],
        &["genuinely"],
        &["geniuses"],
    ],
    range: 4..=6,
};

static WORD_GENT_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_GENT_CHILDREN),
    value: None,
};

pub static WORD_GENT_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ailia"),
        dictgen::InsensitiveStr::Ascii("elmen"),
        dictgen::InsensitiveStr::Ascii("ialia"),
        dictgen::InsensitiveStr::Ascii("ials"),
        dictgen::InsensitiveStr::Ascii("lemanne"),
        dictgen::InsensitiveStr::Ascii("lemn"),
    ],
    values: &[
        &["genitalia"],
        &["gentlemen"],
        &["genitalia"],
        &["genitals"],
        &["gentlemen"],
        &["gentlemen"],
    ],
    range: 4..=7,
};

static WORD_GENR_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_GENR_CHILDREN),
    value: None,
};

pub static WORD_GENR_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("ates")],
    values: &[&["generates"]],
    range: 4..=4,
};

static WORD_GENI_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_GENI_CHILDREN),
    value: None,
};

pub static WORD_GENI_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("alia"),
        dictgen::InsensitiveStr::Ascii("sues"),
        dictgen::InsensitiveStr::Ascii("taila"),
        dictgen::InsensitiveStr::Ascii("tala"),
        dictgen::InsensitiveStr::Ascii("tales"),
        dictgen::InsensitiveStr::Ascii("talias"),
        dictgen::InsensitiveStr::Ascii("taliban"),
        dictgen::InsensitiveStr::Ascii("talis"),
        dictgen::InsensitiveStr::Ascii("unely"),
        dictgen::InsensitiveStr::Ascii("uss"),
    ],
    values: &[
        &["genitalia"],
        &["geniuses"],
        &["genitalia"],
        &["genitalia"],
        &["genitals"],
        &["genitals"],
        &["genitalia"],
        &["genitals"],
        &["genuinely"],
        &["geniuses"],
    ],
    range: 3..=7,
};

static WORD_GENE_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_GENE_CHILDREN),
    value: None,
};

pub static WORD_GENE_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ological"),
        dictgen::InsensitiveStr::Ascii("ologies"),
        dictgen::InsensitiveStr::Ascii("ology"),
        dictgen::InsensitiveStr::Ascii("racional"),
        dictgen::InsensitiveStr::Ascii("ralbs"),
        dictgen::InsensitiveStr::Ascii("ralice"),
        dictgen::InsensitiveStr::Ascii("ralife"),
        dictgen::InsensitiveStr::Ascii("ralis"),
        dictgen::InsensitiveStr::Ascii("ralizacion"),
        dictgen::InsensitiveStr::Ascii("ralizaing"),
        dictgen::InsensitiveStr::Ascii("ralizare"),
        dictgen::InsensitiveStr::Ascii("ralizate"),
        dictgen::InsensitiveStr::Ascii("ralizating"),
        dictgen::InsensitiveStr::Ascii("ralizaton"),
        dictgen::InsensitiveStr::Ascii("ralizng"),
        dictgen::InsensitiveStr::Ascii("ralnie"),
        dictgen::InsensitiveStr::Ascii("raly"),
        dictgen::InsensitiveStr::Ascii("ras"),
        dictgen::InsensitiveStr::Ascii("rase"),
        dictgen::InsensitiveStr::Ascii("raste"),
        dictgen::InsensitiveStr::Ascii("raters"),
        dictgen::InsensitiveStr::Ascii("ratie"),
        dictgen::InsensitiveStr::Ascii("raties"),
        dictgen::InsensitiveStr::Ascii("ratin"),
        dictgen::InsensitiveStr::Ascii("rationals"),
        dictgen::InsensitiveStr::Ascii("rationens"),
        dictgen::InsensitiveStr::Ascii("rationers"),
        dictgen::InsensitiveStr::Ascii("rationnal"),
        dictgen::InsensitiveStr::Ascii("ratios"),
        dictgen::InsensitiveStr::Ascii("ratons"),
        dictgen::InsensitiveStr::Ascii("ratore"),
        dictgen::InsensitiveStr::Ascii("ratos"),
        dictgen::InsensitiveStr::Ascii("rats"),
        dictgen::InsensitiveStr::Ascii("ratting"),
        dictgen::InsensitiveStr::Ascii("relization"),
        dictgen::InsensitiveStr::Ascii("relize"),
        dictgen::InsensitiveStr::Ascii("relizing"),
        dictgen::InsensitiveStr::Ascii("rocity"),
        dictgen::InsensitiveStr::Ascii("roisty"),
        dictgen::InsensitiveStr::Ascii("rostiy"),
        dictgen::InsensitiveStr::Ascii("rsl"),
        dictgen::InsensitiveStr::Ascii("ticaly"),
        dictgen::InsensitiveStr::Ascii("ticlly"),
    ],
    values: &[
        &["genealogical"],
        &["genealogies"],
        &["genealogy"],
        &["generational"],
        &["generals"],
        &["generalize"],
        &["generalize"],
        &["generals"],
        &["generalization"],
        &["generalizing"],
        &["generalize"],
        &["generalize"],
        &["generalization"],
        &["generalization"],
        &["generalizing"],
        &["generalize"],
        &["generally"],
        &["generals"],
        &["generates"],
        &["generates"],
        &["generates"],
        &["generate"],
        &["generate"],
        &["generations"],
        &["generations"],
        &["generations"],
        &["generations"],
        &["generational"],
        &["generators"],
        &["generators"],
        &["generate"],
        &["generators"],
        &["generates"],
        &["generating"],
        &["generalization"],
        &["generalize"],
        &["generalizing"],
        &["generosity"],
        &["generosity"],
        &["generosity"],
        &["generals"],
        &["genetically"],
        &["genetically"],
    ],
    range: 3..=10,
};

static WORD_GENA_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_GENA_CHILDREN),
    value: None,
};

pub static WORD_GENA_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("tilia")],
    values: &[&["genitalia"]],
    range: 5..=5,
};

static WORD_GEM_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_GEM_CHILDREN),
    value: None,
};

pub static WORD_GEM_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("oetry")],
    values: &[&["geometry"]],
    range: 5..=5,
};

static WORD_GA_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_GA_CHILDREN),
    value: None,
};

pub static WORD_GA_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("dgest"),
        dictgen::InsensitiveStr::Ascii("gdets"),
        dictgen::InsensitiveStr::Ascii("gnsters"),
        dictgen::InsensitiveStr::Ascii("latic"),
        dictgen::InsensitiveStr::Ascii("lations"),
        dictgen::InsensitiveStr::Ascii("lcier"),
        dictgen::InsensitiveStr::Ascii("ldiator"),
        dictgen::InsensitiveStr::Ascii("llaxies"),
        dictgen::InsensitiveStr::Ascii("lsgow"),
        dictgen::InsensitiveStr::Ascii("lvinized"),
        dictgen::InsensitiveStr::Ascii("memdoe"),
        dictgen::InsensitiveStr::Ascii("mepaly"),
        dictgen::InsensitiveStr::Ascii("meply"),
        dictgen::InsensitiveStr::Ascii("merga"),
        dictgen::InsensitiveStr::Ascii("mergat"),
        dictgen::InsensitiveStr::Ascii("mifications"),
        dictgen::InsensitiveStr::Ascii("mmeode"),
        dictgen::InsensitiveStr::Ascii("nerate"),
        dictgen::InsensitiveStr::Ascii("nes"),
        dictgen::InsensitiveStr::Ascii("ngsterest"),
        dictgen::InsensitiveStr::Ascii("ngsterous"),
        dictgen::InsensitiveStr::Ascii("nkign"),
        dictgen::InsensitiveStr::Ascii("nster"),
        dictgen::InsensitiveStr::Ascii("rabge"),
        dictgen::InsensitiveStr::Ascii("rantee"),
        dictgen::InsensitiveStr::Ascii("ranteed"),
        dictgen::InsensitiveStr::Ascii("rantees"),
        dictgen::InsensitiveStr::Ascii("rdai"),
        dictgen::InsensitiveStr::Ascii("rdient"),
        dictgen::InsensitiveStr::Ascii("rfeild"),
        dictgen::InsensitiveStr::Ascii("rfied"),
        dictgen::InsensitiveStr::Ascii("rfiled"),
        dictgen::InsensitiveStr::Ascii("rflied"),
        dictgen::InsensitiveStr::Ascii("rnison"),
        dictgen::InsensitiveStr::Ascii("rnola"),
        dictgen::InsensitiveStr::Ascii("rrions"),
        dictgen::InsensitiveStr::Ascii("rriosn"),
        dictgen::InsensitiveStr::Ascii("rrsion"),
        dictgen::InsensitiveStr::Ascii("ruantee"),
        dictgen::InsensitiveStr::Ascii("ruanteed"),
        dictgen::InsensitiveStr::Ascii("ruantees"),
        dictgen::InsensitiveStr::Ascii("therig"),
        dictgen::InsensitiveStr::Ascii("therins"),
        dictgen::InsensitiveStr::Ascii("uarana"),
        dictgen::InsensitiveStr::Ascii("untanamo"),
        dictgen::InsensitiveStr::Ascii("untelt"),
        dictgen::InsensitiveStr::Ascii("untelts"),
        dictgen::InsensitiveStr::Ascii("untlent"),
        dictgen::InsensitiveStr::Ascii("untlents"),
        dictgen::InsensitiveStr::Ascii("untles"),
        dictgen::InsensitiveStr::Ascii("untlettes"),
        dictgen::InsensitiveStr::Ascii("urantee"),
        dictgen::InsensitiveStr::Ascii("uranteed"),
        dictgen::InsensitiveStr::Ascii("urantees"),
        dictgen::InsensitiveStr::Ascii("urd"),
        dictgen::InsensitiveStr::Ascii("urdian"),
        dictgen::InsensitiveStr::Ascii("urding"),
        dictgen::InsensitiveStr::Ascii("urentee"),
        dictgen::InsensitiveStr::Ascii("urenteed"),
        dictgen::InsensitiveStr::Ascii("urentees"),
        dictgen::InsensitiveStr::Ascii("utnlet"),
    ],
    values: &[
        &["gadgets"],
        &["gadgets"],
        &["gangsters"],
        &["galactic"],
        &["galatians"],
        &["glacier"],
        &["gladiator"],
        &["galaxies"],
        &["glasgow"],
        &["galvanized"],
        &["gamemode"],
        &["gameplay"],
        &["gameplay"],
        &["gamertag"],
        &["gamertag"],
        &["ramifications"],
        &["gamemode"],
        &["generate"],
        &["games"],
        &["gangsters"],
        &["gangsters"],
        &["ganking"],
        &["gangster"],
        &["garbage"],
        &["guarantee"],
        &["guaranteed"],
        &["guarantees"],
        &["gardaí"],
        &["gradient"],
        &["garfield"],
        &["garfield"],
        &["garfield"],
        &["garfield"],
        &["garrison"],
        &["granola"],
        &["garrison"],
        &["garrison"],
        &["garrison"],
        &["guarantee"],
        &["guaranteed"],
        &["guarantees"],
        &["gatherings"],
        &["gatherings"],
        &["guaraná"],
        &["guantanamo"],
        &["gauntlet"],
        &["gauntlets"],
        &["gauntlet"],
        &["gauntlet"],
        &["gauntlets"],
        &["gauntlets"],
        &["guarantee"],
        &["guaranteed"],
        &["guarantees"],
        &["guard"],
        &["guardian"],
        &["guarding"],
        &["guarantee"],
        &["guaranteed"],
        &["guarantees"],
        &["gauntlet"],
    ],
    range: 3..=11,
};

static WORD_F_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_F_CHILDREN),
    value: None,
};

static WORD_F_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    Some(&WORD_FA_NODE),
    None,
    None,
    None,
    Some(&WORD_FE_NODE),
    None,
    None,
    None,
    Some(&WORD_FI_NODE),
    None,
    None,
    Some(&WORD_FL_NODE),
    None,
    Some(&WORD_FN_NODE),
    Some(&WORD_FO_NODE),
    None,
    None,
    Some(&WORD_FR_NODE),
    None,
    None,
    Some(&WORD_FU_NODE),
    None,
    Some(&WORD_FW_NODE),
    None,
    None,
    None,
];

static WORD_FW_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_FW_CHILDREN),
    value: None,
};

pub static WORD_FW_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("ankenstein")],
    values: &[&["frankenstein"]],
    range: 10..=10,
};

static WORD_FU_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_FU_CHILDREN),
    value: None,
};

static WORD_FU_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    None,
    None,
    Some(&WORD_FUC_NODE),
    None,
    None,
    Some(&WORD_FUF_NODE),
    None,
    None,
    None,
    None,
    None,
    Some(&WORD_FUL_NODE),
    None,
    Some(&WORD_FUN_NODE),
    None,
    None,
    None,
    Some(&WORD_FUR_NODE),
    None,
    Some(&WORD_FUT_NODE),
    None,
    None,
    None,
    None,
    None,
    None,
];

static WORD_FUT_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_FUT_CHILDREN),
    value: None,
};

pub static WORD_FUT_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("her"),
        dictgen::InsensitiveStr::Ascii("hermore"),
        dictgen::InsensitiveStr::Ascii("hroc"),
        dictgen::InsensitiveStr::Ascii("urers"),
        dictgen::InsensitiveStr::Ascii("urestic"),
        dictgen::InsensitiveStr::Ascii("ureus"),
        dictgen::InsensitiveStr::Ascii("urisitc"),
        dictgen::InsensitiveStr::Ascii("urisitic"),
        dictgen::InsensitiveStr::Ascii("uristc"),
        dictgen::InsensitiveStr::Ascii("uristisch"),
        dictgen::InsensitiveStr::Ascii("urustic"),
    ],
    values: &[
        &["further"],
        &["furthermore"],
        &["futhark"],
        &["futures"],
        &["futuristic"],
        &["futures"],
        &["futuristic"],
        &["futuristic"],
        &["futuristic"],
        &["futuristic"],
        &["futuristic"],
    ],
    range: 3..=9,
};

static WORD_FUR_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_FUR_CHILDREN),
    value: None,
};

pub static WORD_FUR_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ance"),
        dictgen::InsensitiveStr::Ascii("ctose"),
        dictgen::InsensitiveStr::Ascii("htermore"),
        dictgen::InsensitiveStr::Ascii("iosuly"),
        dictgen::InsensitiveStr::Ascii("ition"),
        dictgen::InsensitiveStr::Ascii("iuosly"),
        dictgen::InsensitiveStr::Ascii("ncae"),
        dictgen::InsensitiveStr::Ascii("strated"),
        dictgen::InsensitiveStr::Ascii("strates"),
        dictgen::InsensitiveStr::Ascii("stration"),
        dictgen::InsensitiveStr::Ascii("strations"),
        dictgen::InsensitiveStr::Ascii("thremore"),
        dictgen::InsensitiveStr::Ascii("thurmore"),
        dictgen::InsensitiveStr::Ascii("uther"),
        dictgen::InsensitiveStr::Ascii("utistic"),
    ],
    values: &[
        &["furnace"],
        &["fructose"],
        &["furthermore"],
        &["furiously"],
        &["fruition"],
        &["furiously"],
        &["furnace"],
        &["frustrated"],
        &["frustrates"],
        &["frustration"],
        &["frustrations"],
        &["furthermore"],
        &["furthermore"],
        &["further"],
        &["futuristic"],
    ],
    range: 4..=9,
};

static WORD_FUN_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_FUN_CHILDREN),
    value: None,
};

static WORD_FUN_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    None,
    None,
    Some(&WORD_FUNC_NODE),
    Some(&WORD_FUND_NODE),
    None,
    None,
    None,
    None,
    Some(&WORD_FUNI_NODE),
    None,
    None,
    None,
    None,
    Some(&WORD_FUNN_NODE),
    None,
    None,
    None,
    None,
    None,
    Some(&WORD_FUNT_NODE),
    None,
    None,
    None,
    None,
    None,
    None,
];

static WORD_FUNT_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_FUNT_CHILDREN),
    value: None,
};

pub static WORD_FUNT_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("ion")],
    values: &[&["function"]],
    range: 3..=3,
};

static WORD_FUNN_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_FUNN_CHILDREN),
    value: None,
};

pub static WORD_FUNN_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("iliy"),
        dictgen::InsensitiveStr::Ascii("illy"),
    ],
    values: &[&["funnily"], &["funnily"]],
    range: 4..=4,
};

static WORD_FUNI_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_FUNI_CHILDREN),
    value: None,
};

pub static WORD_FUNI_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("des")],
    values: &[&["fundies"]],
    range: 3..=3,
};

static WORD_FUND_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_FUND_CHILDREN),
    value: None,
};

pub static WORD_FUND_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("amendalist"),
        dictgen::InsensitiveStr::Ascii("amendalists"),
        dictgen::InsensitiveStr::Ascii("amentais"),
        dictgen::InsensitiveStr::Ascii("amentalis"),
        dictgen::InsensitiveStr::Ascii("amentalisme"),
        dictgen::InsensitiveStr::Ascii("amentalismo"),
        dictgen::InsensitiveStr::Ascii("amentalismos"),
        dictgen::InsensitiveStr::Ascii("amentalismus"),
        dictgen::InsensitiveStr::Ascii("amentalista"),
        dictgen::InsensitiveStr::Ascii("amentalistas"),
        dictgen::InsensitiveStr::Ascii("amentalisten"),
        dictgen::InsensitiveStr::Ascii("amentalister"),
        dictgen::InsensitiveStr::Ascii("amentalisti"),
        dictgen::InsensitiveStr::Ascii("amentalistisch"),
        dictgen::InsensitiveStr::Ascii("amentalistisk"),
        dictgen::InsensitiveStr::Ascii("amentalistiska"),
        dictgen::InsensitiveStr::Ascii("amentalistiske"),
        dictgen::InsensitiveStr::Ascii("amentalistiskt"),
        dictgen::InsensitiveStr::Ascii("amentalits"),
        dictgen::InsensitiveStr::Ascii("amentalt"),
        dictgen::InsensitiveStr::Ascii("amentaly"),
        dictgen::InsensitiveStr::Ascii("amentas"),
        dictgen::InsensitiveStr::Ascii("amently"),
        dictgen::InsensitiveStr::Ascii("ametal"),
        dictgen::InsensitiveStr::Ascii("ametals"),
        dictgen::InsensitiveStr::Ascii("amnetal"),
        dictgen::InsensitiveStr::Ascii("amnetalist"),
        dictgen::InsensitiveStr::Ascii("amnetalists"),
        dictgen::InsensitiveStr::Ascii("amnetally"),
        dictgen::InsensitiveStr::Ascii("emantal"),
        dictgen::InsensitiveStr::Ascii("emantalist"),
        dictgen::InsensitiveStr::Ascii("emantalists"),
        dictgen::InsensitiveStr::Ascii("emantals"),
        dictgen::InsensitiveStr::Ascii("emental"),
        dictgen::InsensitiveStr::Ascii("ementally"),
        dictgen::InsensitiveStr::Ascii("ementals"),
        dictgen::InsensitiveStr::Ascii("imental"),
        dictgen::InsensitiveStr::Ascii("imentalist"),
        dictgen::InsensitiveStr::Ascii("imentalists"),
        dictgen::InsensitiveStr::Ascii("imentally"),
        dictgen::InsensitiveStr::Ascii("imentals"),
        dictgen::InsensitiveStr::Ascii("irse"),
        dictgen::InsensitiveStr::Ascii("umentalist"),
        dictgen::InsensitiveStr::Ascii("umentalists"),
    ],
    values: &[
        &["fundamentalist"],
        &["fundamentalists"],
        &["fundamentals"],
        &["fundamentals"],
        &["fundamentals"],
        &["fundamentals"],
        &["fundamentalists"],
        &["fundamentalists"],
        &["fundamentals"],
        &["fundamentalists"],
        &["fundamentalists"],
        &["fundamentalists"],
        &["fundamentals"],
        &["fundamentalists"],
        &["fundamentalists"],
        &["fundamentalists"],
        &["fundamentalists"],
        &["fundamentalists"],
        &["fundamentalists"],
        &["fundamentalist"],
        &["fundamentally"],
        &["fundamentals"],
        &["fundamental"],
        &["fundamental"],
        &["fundamentals"],
        &["fundamentals"],
        &["fundamentalist"],
        &["fundamentalists"],
        &["fundamentally"],
        &["fundamental"],
        &["fundamentalist"],
        &["fundamentalists"],
        &["fundamentals"],
        &["fundamental"],
        &["fundamentally"],
        &["fundamentals"],
        &["fundamental"],
        &["fundamentalist"],
        &["fundamentalists"],
        &["fundamentally"],
        &["fundamentals"],
        &["fundies"],
        &["fundamentalist"],
        &["fundamentalists"],
    ],
    range: 4..=14,
};

static WORD_FUNC_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_FUNC_CHILDREN),
    value: None,
};

pub static WORD_FUNC_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("iton"),
        dictgen::InsensitiveStr::Ascii("itonal"),
        dictgen::InsensitiveStr::Ascii("itonality"),
        dictgen::InsensitiveStr::Ascii("itonally"),
        dictgen::InsensitiveStr::Ascii("itoning"),
        dictgen::InsensitiveStr::Ascii("itons"),
        dictgen::InsensitiveStr::Ascii("tionable"),
        dictgen::InsensitiveStr::Ascii("tionailty"),
        dictgen::InsensitiveStr::Ascii("tionaliy"),
        dictgen::InsensitiveStr::Ascii("tionallity"),
        dictgen::InsensitiveStr::Ascii("tionalty"),
        dictgen::InsensitiveStr::Ascii("tionaly"),
        dictgen::InsensitiveStr::Ascii("tiong"),
        dictgen::InsensitiveStr::Ascii("tionlity"),
        dictgen::InsensitiveStr::Ascii("tionnal"),
        dictgen::InsensitiveStr::Ascii("tionning"),
        dictgen::InsensitiveStr::Ascii("ttion"),
    ],
    values: &[
        &["function"],
        &["functional"],
        &["functionality"],
        &["functionally"],
        &["functioning"],
        &["functions"],
        &["functional"],
        &["functionality"],
        &["functionally"],
        &["functionality"],
        &["functionality"],
        &["functionally"],
        &["functioning"],
        &["functionality"],
        &["functional"],
        &["functioning"],
        &["function"],
    ],
    range: 4..=10,
};

static WORD_FUL_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_FUL_CHILDREN),
    value: None,
};

pub static WORD_FUL_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("filed"),
        dictgen::InsensitiveStr::Ascii("fillling"),
        dictgen::InsensitiveStr::Ascii("fulling"),
        dictgen::InsensitiveStr::Ascii("fullment"),
        dictgen::InsensitiveStr::Ascii("lets"),
        dictgen::InsensitiveStr::Ascii("lfiling"),
        dictgen::InsensitiveStr::Ascii("lfill"),
        dictgen::InsensitiveStr::Ascii("lfilled"),
        dictgen::InsensitiveStr::Ascii("lfilment"),
        dictgen::InsensitiveStr::Ascii("lscrean"),
        dictgen::InsensitiveStr::Ascii("lscreeen"),
        dictgen::InsensitiveStr::Ascii("lscren"),
        dictgen::InsensitiveStr::Ascii("lset"),
        dictgen::InsensitiveStr::Ascii("ttershy"),
    ],
    values: &[
        &["fulfilled"],
        &["fulfilling"],
        &["fulfilling"],
        &["fulfillment"],
        &["fullest"],
        &["fulfilling"],
        &["fulfill"],
        &["fulfilled"],
        &["fulfilment"],
        &["fullscreen"],
        &["fullscreen"],
        &["fullscreen"],
        &["fullest"],
        &["fluttershy"],
    ],
    range: 4..=8,
};

static WORD_FUF_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_FUF_CHILDREN),
    value: None,
};

pub static WORD_FUF_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ill"),
        dictgen::InsensitiveStr::Ascii("illed"),
    ],
    values: &[&["fulfill"], &["fulfilled"]],
    range: 3..=5,
};

static WORD_FUC_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_FUC_CHILDREN),
    value: None,
};

pub static WORD_FUC_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ntion"),
        dictgen::InsensitiveStr::Ascii("ntional"),
        dictgen::InsensitiveStr::Ascii("ntionality"),
        dictgen::InsensitiveStr::Ascii("ntionally"),
        dictgen::InsensitiveStr::Ascii("ntioning"),
        dictgen::InsensitiveStr::Ascii("ntions"),
    ],
    values: &[
        &["function"],
        &["functional"],
        &["functionality"],
        &["functionally"],
        &["functioning"],
        &["functions"],
    ],
    range: 5..=10,
};

static WORD_FR_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_FR_CHILDREN),
    value: None,
};

static WORD_FR_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    Some(&WORD_FRA_NODE),
    None,
    None,
    None,
    Some(&WORD_FRE_NODE),
    None,
    None,
    None,
    Some(&WORD_FRI_NODE),
    None,
    None,
    None,
    None,
    None,
    Some(&WORD_FRO_NODE),
    None,
    None,
    None,
    Some(&WORD_FRS_NODE),
    None,
    Some(&WORD_FRU_NODE),
    None,
    None,
    None,
    None,
    None,
];

static WORD_FRU_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_FRU_CHILDREN),
    value: None,
};

pub static WORD_FRU_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("adulent"),
        dictgen::InsensitiveStr::Ascii("itin"),
        dictgen::InsensitiveStr::Ascii("itsations"),
        dictgen::InsensitiveStr::Ascii("startion"),
        dictgen::InsensitiveStr::Ascii("stracion"),
        dictgen::InsensitiveStr::Ascii("straded"),
        dictgen::InsensitiveStr::Ascii("stradet"),
        dictgen::InsensitiveStr::Ascii("straited"),
        dictgen::InsensitiveStr::Ascii("straits"),
        dictgen::InsensitiveStr::Ascii("strantes"),
        dictgen::InsensitiveStr::Ascii("strants"),
        dictgen::InsensitiveStr::Ascii("strasion"),
        dictgen::InsensitiveStr::Ascii("strasted"),
        dictgen::InsensitiveStr::Ascii("strastion"),
        dictgen::InsensitiveStr::Ascii("straties"),
        dictgen::InsensitiveStr::Ascii("stratin"),
        dictgen::InsensitiveStr::Ascii("strato"),
        dictgen::InsensitiveStr::Ascii("strats"),
        dictgen::InsensitiveStr::Ascii("strsted"),
        dictgen::InsensitiveStr::Ascii("tcose"),
    ],
    values: &[
        &["fraudulent"],
        &["fruition"],
        &["frustrations"],
        &["frustrations"],
        &["frustration"],
        &["frustrated"],
        &["frustrates"],
        &["frustrated"],
        &["frustrates"],
        &["frustrates"],
        &["frustrates"],
        &["frustrations"],
        &["frustrates"],
        &["frustrations"],
        &["frustrates"],
        &["frustration"],
        &["frustration"],
        &["frustrates"],
        &["frustrates"],
        &["fructose"],
    ],
    range: 4..=9,
};

static WORD_FRS_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_FRS_CHILDREN),
    value: None,
};

pub static WORD_FRS_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("ibee")],
    values: &[&["frisbee"]],
    range: 4..=4,
};

static WORD_FRO_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_FRO_CHILDREN),
    value: None,
};

pub static WORD_FRO_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("given"),
        dictgen::InsensitiveStr::Ascii("inter"),
        dictgen::InsensitiveStr::Ascii("mation"),
        dictgen::InsensitiveStr::Ascii("matting"),
        dictgen::InsensitiveStr::Ascii("me"),
        dictgen::InsensitiveStr::Ascii("med"),
        dictgen::InsensitiveStr::Ascii("merly"),
        dictgen::InsensitiveStr::Ascii("midable"),
        dictgen::InsensitiveStr::Ascii("niter"),
        dictgen::InsensitiveStr::Ascii("nkenstein"),
        dictgen::InsensitiveStr::Ascii("ntapge"),
        dictgen::InsensitiveStr::Ascii("nteir"),
        dictgen::InsensitiveStr::Ascii("ntilne"),
        dictgen::InsensitiveStr::Ascii("ntlinie"),
        dictgen::InsensitiveStr::Ascii("ntlinies"),
        dictgen::InsensitiveStr::Ascii("ntlinjen"),
        dictgen::InsensitiveStr::Ascii("saken"),
        dictgen::InsensitiveStr::Ascii("stig"),
    ],
    values: &[
        &["forgiven"],
        &["frontier"],
        &["formation"],
        &["formatting"],
        &["from"],
        &["formed"],
        &["formerly"],
        &["formidable"],
        &["frontier"],
        &["frankenstein"],
        &["frontpage"],
        &["frontier"],
        &["frontline"],
        &["frontline"],
        &["frontline"],
        &["frontline"],
        &["forsaken"],
        &["frosting"],
    ],
    range: 2..=9,
};

static WORD_FRI_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_FRI_CHILDREN),
    value: None,
};

pub static WORD_FRI_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ednship"),
        dictgen::InsensitiveStr::Ascii("ednzone"),
        dictgen::InsensitiveStr::Ascii("endboned"),
        dictgen::InsensitiveStr::Ascii("endhsip"),
        dictgen::InsensitiveStr::Ascii("endle"),
        dictgen::InsensitiveStr::Ascii("endlines"),
        dictgen::InsensitiveStr::Ascii("endlis"),
        dictgen::InsensitiveStr::Ascii("endsi"),
        dictgen::InsensitiveStr::Ascii("endsies"),
        dictgen::InsensitiveStr::Ascii("endzies"),
        dictgen::InsensitiveStr::Ascii("endzond"),
        dictgen::InsensitiveStr::Ascii("endzonded"),
        dictgen::InsensitiveStr::Ascii("endzoneado"),
        dictgen::InsensitiveStr::Ascii("endzonie"),
        dictgen::InsensitiveStr::Ascii("endzonned"),
        dictgen::InsensitiveStr::Ascii("endzowned"),
        dictgen::InsensitiveStr::Ascii("entship"),
        dictgen::InsensitiveStr::Ascii("entships"),
        dictgen::InsensitiveStr::Ascii("entzoned"),
        dictgen::InsensitiveStr::Ascii("ghtend"),
        dictgen::InsensitiveStr::Ascii("ghtenend"),
        dictgen::InsensitiveStr::Ascii("ghtining"),
        dictgen::InsensitiveStr::Ascii("gign"),
        dictgen::InsensitiveStr::Ascii("gthened"),
        dictgen::InsensitiveStr::Ascii("gthening"),
        dictgen::InsensitiveStr::Ascii("mware"),
        dictgen::InsensitiveStr::Ascii("nedzoned"),
        dictgen::InsensitiveStr::Ascii("ngeworthy"),
        dictgen::InsensitiveStr::Ascii("stly"),
    ],
    values: &[
        &["friendships"],
        &["friendzoned"],
        &["friendzoned"],
        &["friendship"],
        &["friendlies"],
        &["friendlies"],
        &["friendlies"],
        &["friendlies"],
        &["friendlies"],
        &["friendlies"],
        &["friendzoned"],
        &["friendzoned"],
        &["friendzoned"],
        &["friendzoned"],
        &["friendzoned"],
        &["friendzoned"],
        &["friendship"],
        &["friendships"],
        &["friendzoned"],
        &["frightened"],
        &["frightened"],
        &["frightening"],
        &["friggin"],
        &["frightened"],
        &["frightening"],
        &["firmware"],
        &["friendzoned"],
        &["cringeworthy"],
        &["firstly"],
    ],
    range: 4..=10,
};

static WORD_FRE_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_FRE_CHILDREN),
    value: None,
};

pub static WORD_FRE_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ckels"),
        dictgen::InsensitiveStr::Ascii("cklers"),
        dictgen::InsensitiveStr::Ascii("edomers"),
        dictgen::InsensitiveStr::Ascii("edomes"),
        dictgen::InsensitiveStr::Ascii("edomest"),
        dictgen::InsensitiveStr::Ascii("edos"),
        dictgen::InsensitiveStr::Ascii("estlye"),
        dictgen::InsensitiveStr::Ascii("esytle"),
        dictgen::InsensitiveStr::Ascii("ind"),
        dictgen::InsensitiveStr::Ascii("indlies"),
        dictgen::InsensitiveStr::Ascii("indly"),
        dictgen::InsensitiveStr::Ascii("inds"),
        dictgen::InsensitiveStr::Ascii("indship"),
        dictgen::InsensitiveStr::Ascii("indships"),
        dictgen::InsensitiveStr::Ascii("indzoned"),
        dictgen::InsensitiveStr::Ascii("mentation"),
        dictgen::InsensitiveStr::Ascii("mented"),
        dictgen::InsensitiveStr::Ascii("qeuncy"),
        dictgen::InsensitiveStr::Ascii("quence"),
        dictgen::InsensitiveStr::Ascii("quencey"),
        dictgen::InsensitiveStr::Ascii("quenices"),
        dictgen::InsensitiveStr::Ascii("quensies"),
        dictgen::InsensitiveStr::Ascii("quenties"),
        dictgen::InsensitiveStr::Ascii("quentily"),
        dictgen::InsensitiveStr::Ascii("queny"),
        dictgen::InsensitiveStr::Ascii("quenzies"),
    ],
    values: &[
        &["freckles"],
        &["freckles"],
        &["freedoms"],
        &["freedoms"],
        &["freedoms"],
        &["freedoms"],
        &["freestyle"],
        &["freestyle"],
        &["friend"],
        &["friendlies"],
        &["friendly"],
        &["friends"],
        &["friendship"],
        &["friendships"],
        &["friendzoned"],
        &["fermentation"],
        &["fermented"],
        &["frequency"],
        &["frequencies"],
        &["frequency"],
        &["frequencies"],
        &["frequencies"],
        &["frequencies"],
        &["frequently"],
        &["frequency"],
        &["frequencies"],
    ],
    range: 3..=9,
};

static WORD_FRA_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_FRA_CHILDREN),
    value: None,
};

pub static WORD_FRA_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ckign"),
        dictgen::InsensitiveStr::Ascii("ctalers"),
        dictgen::InsensitiveStr::Ascii("ctales"),
        dictgen::InsensitiveStr::Ascii("ctalis"),
        dictgen::InsensitiveStr::Ascii("ctalius"),
        dictgen::InsensitiveStr::Ascii("ctalpus"),
        dictgen::InsensitiveStr::Ascii("ctalus"),
        dictgen::InsensitiveStr::Ascii("cter"),
        dictgen::InsensitiveStr::Ascii("cturare"),
        dictgen::InsensitiveStr::Ascii("gement"),
        dictgen::InsensitiveStr::Ascii("gmanted"),
        dictgen::InsensitiveStr::Ascii("gmenot"),
        dictgen::InsensitiveStr::Ascii("gmet"),
        dictgen::InsensitiveStr::Ascii("methrower"),
        dictgen::InsensitiveStr::Ascii("mgent"),
        dictgen::InsensitiveStr::Ascii("ncaises"),
        dictgen::InsensitiveStr::Ascii("nches"),
        dictgen::InsensitiveStr::Ascii("nchices"),
        dictgen::InsensitiveStr::Ascii("nchie"),
        dictgen::InsensitiveStr::Ascii("nchies"),
        dictgen::InsensitiveStr::Ascii("nchieses"),
        dictgen::InsensitiveStr::Ascii("nchines"),
        dictgen::InsensitiveStr::Ascii("nchizes"),
        dictgen::InsensitiveStr::Ascii("nchsies"),
        dictgen::InsensitiveStr::Ascii("nciso"),
        dictgen::InsensitiveStr::Ascii("ncsico"),
        dictgen::InsensitiveStr::Ascii("nkensite"),
        dictgen::InsensitiveStr::Ascii("nkenstain"),
        dictgen::InsensitiveStr::Ascii("nkensteen"),
        dictgen::InsensitiveStr::Ascii("nkensten"),
        dictgen::InsensitiveStr::Ascii("nkenstiens"),
        dictgen::InsensitiveStr::Ascii("nkenstine"),
        dictgen::InsensitiveStr::Ascii("nkenstined"),
        dictgen::InsensitiveStr::Ascii("nkenstiner"),
        dictgen::InsensitiveStr::Ascii("nkenstines"),
        dictgen::InsensitiveStr::Ascii("nkiln"),
        dictgen::InsensitiveStr::Ascii("nkinstein"),
        dictgen::InsensitiveStr::Ascii("nlkin"),
        dictgen::InsensitiveStr::Ascii("nscico"),
        dictgen::InsensitiveStr::Ascii("nsiscan"),
        dictgen::InsensitiveStr::Ascii("nsiscans"),
        dictgen::InsensitiveStr::Ascii("nticaly"),
        dictgen::InsensitiveStr::Ascii("nticlly"),
        dictgen::InsensitiveStr::Ascii("ternaty"),
        dictgen::InsensitiveStr::Ascii("ternety"),
        dictgen::InsensitiveStr::Ascii("terntiy"),
        dictgen::InsensitiveStr::Ascii("turnity"),
        dictgen::InsensitiveStr::Ascii("udalent"),
        dictgen::InsensitiveStr::Ascii("udelant"),
        dictgen::InsensitiveStr::Ascii("udelent"),
        dictgen::InsensitiveStr::Ascii("udolent"),
        dictgen::InsensitiveStr::Ascii("udulant"),
    ],
    values: &[
        &["fracking"],
        &["fractals"],
        &["fractals"],
        &["fractals"],
        &["fractals"],
        &["fractals"],
        &["fractals"],
        &["fracture"],
        &["fracture"],
        &["fragment"],
        &["fragment"],
        &["fragment"],
        &["fragment"],
        &["flamethrower"],
        &["fragment"],
        &["franchises"],
        &["franchise"],
        &["franchises"],
        &["franchises"],
        &["franchise"],
        &["franchises"],
        &["franchises"],
        &["franchises"],
        &["franchises"],
        &["francisco"],
        &["francisco"],
        &["frankenstein"],
        &["frankenstein"],
        &["frankenstein"],
        &["frankenstein"],
        &["frankenstein"],
        &["frankenstein"],
        &["frankenstein"],
        &["frankenstein"],
        &["frankenstein"],
        &["franklin"],
        &["frankenstein"],
        &["franklin"],
        &["francisco"],
        &["franciscan"],
        &["franciscans"],
        &["frantically"],
        &["frantically"],
        &["fraternity"],
        &["fraternity"],
        &["fraternity"],
        &["fraternity"],
        &["fraudulent"],
        &["fraudulent"],
        &["fraudulent"],
        &["fraudulent"],
        &["fraudulent"],
    ],
    range: 4..=10,
};

static WORD_FO_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_FO_CHILDREN),
    value: None,
};

static WORD_FO_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    Some(&WORD_FOL_NODE),
    Some(&WORD_FOM_NODE),
    Some(&WORD_FON_NODE),
    Some(&WORD_FOO_NODE),
    None,
    None,
    Some(&WORD_FOR_NODE),
    Some(&WORD_FOS_NODE),
    None,
    Some(&WORD_FOU_NODE),
    None,
    Some(&WORD_FOW_NODE),
    None,
    None,
    None,
];

static WORD_FOW_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_FOW_CHILDREN),
    value: None,
};

pub static WORD_FOW_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ard"),
        dictgen::InsensitiveStr::Ascii("rards"),
    ],
    values: &[&["forward"], &["forwards"]],
    range: 3..=5,
};

static WORD_FOU_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_FOU_CHILDREN),
    value: None,
};

pub static WORD_FOU_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("cs"),
        dictgen::InsensitiveStr::Ascii("dn"),
        dictgen::InsensitiveStr::Ascii("gth"),
        dictgen::InsensitiveStr::Ascii("ndaiton"),
        dictgen::InsensitiveStr::Ascii("ndaries"),
        dictgen::InsensitiveStr::Ascii("ndary"),
        dictgen::InsensitiveStr::Ascii("ndatin"),
        dictgen::InsensitiveStr::Ascii("ndatoin"),
        dictgen::InsensitiveStr::Ascii("ntan"),
        dictgen::InsensitiveStr::Ascii("ntian"),
        dictgen::InsensitiveStr::Ascii("rteeen"),
        dictgen::InsensitiveStr::Ascii("rten"),
        dictgen::InsensitiveStr::Ascii("rties"),
        dictgen::InsensitiveStr::Ascii("rty"),
        dictgen::InsensitiveStr::Ascii("th"),
    ],
    values: &[
        &["focus"],
        &["found"],
        &["fought"],
        &["foundations"],
        &["foundries"],
        &["foundry"],
        &["foundations"],
        &["foundations"],
        &["fountain"],
        &["fountain"],
        &["fourteen"],
        &["fourteen"],
        &["forties"],
        &["forty"],
        &["fourth"],
    ],
    range: 2..=7,
};

static WORD_FOS_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_FOS_CHILDREN),
    value: None,
};

pub static WORD_FOS_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("siles"),
        dictgen::InsensitiveStr::Ascii("silis"),
    ],
    values: &[&["fossils"], &["fossils"]],
    range: 5..=5,
};

static WORD_FOR_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_FOR_CHILDREN),
    value: None,
};

static WORD_FOR_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    Some(&WORD_FORA_NODE),
    Some(&WORD_FORB_NODE),
    Some(&WORD_FORC_NODE),
    None,
    Some(&WORD_FORE_NODE),
    Some(&WORD_FORF_NODE),
    Some(&WORD_FORG_NODE),
    Some(&WORD_FORH_NODE),
    Some(&WORD_FORI_NODE),
    None,
    None,
    None,
    Some(&WORD_FORM_NODE),
    Some(&WORD_FORN_NODE),
    None,
    None,
    None,
    Some(&WORD_FORR_NODE),
    Some(&WORD_FORS_NODE),
    Some(&WORD_FORT_NODE),
    Some(&WORD_FORU_NODE),
    None,
    None,
    None,
    None,
    None,
];

static WORD_FORU_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_FORU_CHILDREN),
    value: None,
};

pub static WORD_FORU_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("mla"),
        dictgen::InsensitiveStr::Ascii("mlas"),
        dictgen::InsensitiveStr::Ascii("mlate"),
        dictgen::InsensitiveStr::Ascii("nner"),
    ],
    values: &[&["formula"], &["formulas"], &["formulate"], &["forerunner"]],
    range: 3..=5,
};

static WORD_FORT_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_FORT_CHILDREN),
    value: None,
};

pub static WORD_FORT_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("elling"),
        dictgen::InsensitiveStr::Ascii("itudine"),
        dictgen::InsensitiveStr::Ascii("itue"),
        dictgen::InsensitiveStr::Ascii("uante"),
        dictgen::InsensitiveStr::Ascii("uantely"),
        dictgen::InsensitiveStr::Ascii("unae"),
        dictgen::InsensitiveStr::Ascii("unantly"),
        dictgen::InsensitiveStr::Ascii("unatelly"),
        dictgen::InsensitiveStr::Ascii("unatley"),
        dictgen::InsensitiveStr::Ascii("unatly"),
        dictgen::InsensitiveStr::Ascii("unetely"),
        dictgen::InsensitiveStr::Ascii("unetly"),
        dictgen::InsensitiveStr::Ascii("unte"),
    ],
    values: &[
        &["foretelling"],
        &["fortitude"],
        &["fortitude"],
        &["fortunate"],
        &["fortunately"],
        &["fortune"],
        &["fortunately"],
        &["fortunately"],
        &["fortunately"],
        &["fortunately"],
        &["fortunately"],
        &["fortunately"],
        &["fortune"],
    ],
    range: 4..=8,
};

static WORD_FORS_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_FORS_CHILDREN),
    value: None,
};

pub static WORD_FORS_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("akn"),
        dictgen::InsensitiveStr::Ascii("ane"),
        dictgen::InsensitiveStr::Ascii("aw"),
        dictgen::InsensitiveStr::Ascii("eeable"),
        dictgen::InsensitiveStr::Ascii("ekan"),
        dictgen::InsensitiveStr::Ascii("ekin"),
        dictgen::InsensitiveStr::Ascii("enic"),
        dictgen::InsensitiveStr::Ascii("kaen"),
        dictgen::InsensitiveStr::Ascii("ting"),
    ],
    values: &[
        &["forsaken"],
        &["forsaken"],
        &["foresaw"],
        &["foreseeable"],
        &["forsaken"],
        &["foreskin"],
        &["forensic"],
        &["forsaken"],
        &["frosting"],
    ],
    range: 2..=6,
};

static WORD_FORR_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_FORR_CHILDREN),
    value: None,
};

pub static WORD_FORR_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("esst"),
        dictgen::InsensitiveStr::Ascii("set"),
    ],
    values: &[&["forrest"], &["forrest"]],
    range: 3..=4,
};

static WORD_FORN_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_FORN_CHILDREN),
    value: None,
};

pub static WORD_FORN_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("esic"),
        dictgen::InsensitiveStr::Ascii("tline"),
        dictgen::InsensitiveStr::Ascii("tpage"),
    ],
    values: &[&["forensic"], &["frontline"], &["frontpage"]],
    range: 4..=5,
};

static WORD_FORM_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_FORM_CHILDREN),
    value: None,
};

pub static WORD_FORM_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("adible"),
        dictgen::InsensitiveStr::Ascii("alhaut"),
        dictgen::InsensitiveStr::Ascii("allity"),
        dictgen::InsensitiveStr::Ascii("allize"),
        dictgen::InsensitiveStr::Ascii("allized"),
        dictgen::InsensitiveStr::Ascii("aly"),
        dictgen::InsensitiveStr::Ascii("atiing"),
        dictgen::InsensitiveStr::Ascii("atin"),
        dictgen::InsensitiveStr::Ascii("atings"),
        dictgen::InsensitiveStr::Ascii("ativos"),
        dictgen::InsensitiveStr::Ascii("attting"),
        dictgen::InsensitiveStr::Ascii("elly"),
        dictgen::InsensitiveStr::Ascii("erlly"),
        dictgen::InsensitiveStr::Ascii("ery"),
        dictgen::InsensitiveStr::Ascii("idabble"),
        dictgen::InsensitiveStr::Ascii("idabel"),
        dictgen::InsensitiveStr::Ascii("idabelt"),
        dictgen::InsensitiveStr::Ascii("idabil"),
        dictgen::InsensitiveStr::Ascii("idabile"),
        dictgen::InsensitiveStr::Ascii("idible"),
        dictgen::InsensitiveStr::Ascii("inable"),
        dictgen::InsensitiveStr::Ascii("itable"),
        dictgen::InsensitiveStr::Ascii("ost"),
        dictgen::InsensitiveStr::Ascii("ual"),
        dictgen::InsensitiveStr::Ascii("uals"),
        dictgen::InsensitiveStr::Ascii("ualte"),
        dictgen::InsensitiveStr::Ascii("uladas"),
        dictgen::InsensitiveStr::Ascii("ulados"),
        dictgen::InsensitiveStr::Ascii("ulaes"),
        dictgen::InsensitiveStr::Ascii("ulars"),
        dictgen::InsensitiveStr::Ascii("uls"),
    ],
    values: &[
        &["formidable"],
        &["fomalhaut"],
        &["formally"],
        &["formalize"],
        &["formalized"],
        &["formally"],
        &["formatting"],
        &["formation"],
        &["formations"],
        &["formations"],
        &["formatting"],
        &["formerly"],
        &["formerly"],
        &["formerly"],
        &["formidable"],
        &["formidable"],
        &["formidable"],
        &["formidable"],
        &["formidable"],
        &["formidable"],
        &["formidable"],
        &["formidable"],
        &["foremost"],
        &["formula"],
        &["formulas"],
        &["formulate"],
        &["formulas"],
        &["formulas"],
        &["formulas"],
        &["formulas"],
        &["formulas"],
    ],
    range: 3..=7,
};

static WORD_FORI_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_FORI_CHILDREN),
    value: None,
};

pub static WORD_FORI_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("cbly"),
        dictgen::InsensitiveStr::Ascii("egn"),
        dictgen::InsensitiveStr::Ascii("egner"),
        dictgen::InsensitiveStr::Ascii("egners"),
        dictgen::InsensitiveStr::Ascii("gener"),
        dictgen::InsensitiveStr::Ascii("gven"),
    ],
    values: &[
        &["forcibly"],
        &["foreign"],
        &["foreigner"],
        &["foreigners"],
        &["foreigner"],
        &["forgiven"],
    ],
    range: 3..=6,
};

static WORD_FORH_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_FORH_CHILDREN),
    value: None,
};

pub static WORD_FORH_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("ead")],
    values: &[&["forehead"]],
    range: 3..=3,
};

static WORD_FORG_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_FORG_CHILDREN),
    value: None,
};

pub static WORD_FORG_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("einer"),
        dictgen::InsensitiveStr::Ascii("einers"),
        dictgen::InsensitiveStr::Ascii("ettting"),
        dictgen::InsensitiveStr::Ascii("iener"),
        dictgen::InsensitiveStr::Ascii("ieners"),
        dictgen::InsensitiveStr::Ascii("ivance"),
        dictgen::InsensitiveStr::Ascii("ivenness"),
        dictgen::InsensitiveStr::Ascii("ivens"),
        dictgen::InsensitiveStr::Ascii("ivenss"),
        dictgen::InsensitiveStr::Ascii("iviness"),
        dictgen::InsensitiveStr::Ascii("otting"),
    ],
    values: &[
        &["foreigner"],
        &["foreigners"],
        &["forgetting"],
        &["foreigner"],
        &["foreigners"],
        &["forgiven"],
        &["forgiveness"],
        &["forgiveness"],
        &["forgiveness"],
        &["forgiveness"],
        &["forgetting"],
    ],
    range: 5..=8,
};

static WORD_FORF_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_FORF_CHILDREN),
    value: None,
};

pub static WORD_FORF_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("iet")],
    values: &[&["forfeit"]],
    range: 3..=3,
};

static WORD_FORE_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_FORE_CHILDREN),
    value: None,
};

pub static WORD_FORE_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("amrs"),
        dictgen::InsensitiveStr::Ascii("armes"),
        dictgen::InsensitiveStr::Ascii("cfully"),
        dictgen::InsensitiveStr::Ascii("fit"),
        dictgen::InsensitiveStr::Ascii("gin"),
        dictgen::InsensitiveStr::Ascii("giner"),
        dictgen::InsensitiveStr::Ascii("giners"),
        dictgen::InsensitiveStr::Ascii("gorund"),
        dictgen::InsensitiveStr::Ascii("groud"),
        dictgen::InsensitiveStr::Ascii("ignese"),
        dictgen::InsensitiveStr::Ascii("igness"),
        dictgen::InsensitiveStr::Ascii("ignors"),
        dictgen::InsensitiveStr::Ascii("ing"),
        dictgen::InsensitiveStr::Ascii("inger"),
        dictgen::InsensitiveStr::Ascii("ingers"),
        dictgen::InsensitiveStr::Ascii("ksin"),
        dictgen::InsensitiveStr::Ascii("nics"),
        dictgen::InsensitiveStr::Ascii("nisc"),
        dictgen::InsensitiveStr::Ascii("nsisch"),
        dictgen::InsensitiveStr::Ascii("seaable"),
        dictgen::InsensitiveStr::Ascii("seeble"),
        dictgen::InsensitiveStr::Ascii("shadowning"),
        dictgen::InsensitiveStr::Ascii("snic"),
        dictgen::InsensitiveStr::Ascii("sseable"),
        dictgen::InsensitiveStr::Ascii("ward"),
    ],
    values: &[
        &["forearms"],
        &["forearms"],
        &["forcefully"],
        &["forfeit"],
        &["foreign"],
        &["foreigner"],
        &["foreigners"],
        &["foreground"],
        &["foreground"],
        &["foreigners"],
        &["foreigners"],
        &["foreigners"],
        &["foreign"],
        &["foreigner"],
        &["foreigners"],
        &["foreskin"],
        &["forensic"],
        &["forensic"],
        &["forensic"],
        &["foreseeable"],
        &["foreseeable"],
        &["foreshadowing"],
        &["forensic"],
        &["foreseeable"],
        &["foreword"],
    ],
    range: 3..=10,
};

static WORD_FORC_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_FORC_CHILDREN),
    value: None,
};

pub static WORD_FORC_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("efullly"),
        dictgen::InsensitiveStr::Ascii("efuly"),
        dictgen::InsensitiveStr::Ascii("ibley"),
        dictgen::InsensitiveStr::Ascii("iblly"),
        dictgen::InsensitiveStr::Ascii("ifully"),
    ],
    values: &[
        &["forcefully"],
        &["forcefully"],
        &["forcibly"],
        &["forcibly"],
        &["forcefully"],
    ],
    range: 5..=7,
};

static WORD_FORB_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_FORB_CHILDREN),
    value: None,
};

pub static WORD_FORB_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("iden")],
    values: &[&["forbidden"]],
    range: 4..=4,
};

static WORD_FORA_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_FORA_CHILDREN),
    value: None,
};

pub static WORD_FORA_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("sken")],
    values: &[&["forsaken"]],
    range: 4..=4,
};

static WORD_FOO_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_FOO_CHILDREN),
    value: None,
};

pub static WORD_FOO_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("otball")],
    values: &[&["football"]],
    range: 6..=6,
};

static WORD_FON_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_FON_CHILDREN),
    value: None,
};

pub static WORD_FON_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("damentalist"),
        dictgen::InsensitiveStr::Ascii("damentalists"),
        dictgen::InsensitiveStr::Ascii("etic"),
        dictgen::InsensitiveStr::Ascii("trier"),
    ],
    values: &[
        &["fundamentalist"],
        &["fundamentalists"],
        &["phonetic"],
        &["fontier"],
    ],
    range: 4..=12,
};

static WORD_FOM_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_FOM_CHILDREN),
    value: None,
};

pub static WORD_FOM_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("aing"),
        dictgen::InsensitiveStr::Ascii("ed"),
        dictgen::InsensitiveStr::Ascii("r"),
    ],
    values: &[&["foaming"], &["formed"], &["from"]],
    range: 1..=4,
};

static WORD_FOL_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_FOL_CHILDREN),
    value: None,
};

pub static WORD_FOL_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("lwoing"),
        dictgen::InsensitiveStr::Ascii("owing"),
    ],
    values: &[&["following"], &["following"]],
    range: 5..=6,
};

static WORD_FN_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_FN_CHILDREN),
    value: None,
};

pub static WORD_FN_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("aatic")],
    values: &[&["fanatic"]],
    range: 5..=5,
};

static WORD_FL_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_FL_CHILDREN),
    value: None,
};

static WORD_FL_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    Some(&WORD_FLA_NODE),
    None,
    Some(&WORD_FLC_NODE),
    None,
    Some(&WORD_FLE_NODE),
    None,
    None,
    None,
    Some(&WORD_FLI_NODE),
    None,
    None,
    None,
    None,
    None,
    Some(&WORD_FLO_NODE),
    None,
    None,
    None,
    None,
    None,
    Some(&WORD_FLU_NODE),
    None,
    None,
    None,
    None,
    None,
];

static WORD_FLU_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_FLU_CHILDREN),
    value: None,
};

pub static WORD_FLU_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ctaute"),
        dictgen::InsensitiveStr::Ascii("ctiations"),
        dictgen::InsensitiveStr::Ascii("ctuatie"),
        dictgen::InsensitiveStr::Ascii("ctuaties"),
        dictgen::InsensitiveStr::Ascii("ctuatin"),
        dictgen::InsensitiveStr::Ascii("ctuative"),
        dictgen::InsensitiveStr::Ascii("cutate"),
        dictgen::InsensitiveStr::Ascii("cutations"),
        dictgen::InsensitiveStr::Ascii("orish"),
        dictgen::InsensitiveStr::Ascii("roide"),
        dictgen::InsensitiveStr::Ascii("tterhsy"),
        dictgen::InsensitiveStr::Ascii("ttersky"),
        dictgen::InsensitiveStr::Ascii("tterspy"),
        dictgen::InsensitiveStr::Ascii("ttersy"),
        dictgen::InsensitiveStr::Ascii("tteryshy"),
        dictgen::InsensitiveStr::Ascii("xtuations"),
    ],
    values: &[
        &["fluctuate"],
        &["fluctuations"],
        &["fluctuate"],
        &["fluctuate"],
        &["fluctuations"],
        &["fluctuate"],
        &["fluctuate"],
        &["fluctuations"],
        &["flourish"],
        &["fluoride"],
        &["fluttershy"],
        &["fluttershy"],
        &["fluttershy"],
        &["fluttershy"],
        &["fluttershy"],
        &["fluctuations"],
    ],
    range: 5..=9,
};

static WORD_FLO_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_FLO_CHILDREN),
    value: None,
};

pub static WORD_FLO_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("rdia"),
        dictgen::InsensitiveStr::Ascii("recen"),
        dictgen::InsensitiveStr::Ascii("rene"),
        dictgen::InsensitiveStr::Ascii("ridia"),
        dictgen::InsensitiveStr::Ascii("ruide"),
        dictgen::InsensitiveStr::Ascii("ruish"),
        dictgen::InsensitiveStr::Ascii("urescent"),
        dictgen::InsensitiveStr::Ascii("urine"),
        dictgen::InsensitiveStr::Ascii("urishment"),
        dictgen::InsensitiveStr::Ascii("ursih"),
    ],
    values: &[
        &["florida"],
        &["florence"],
        &["florence"],
        &["florida"],
        &["fluoride"],
        &["flourish"],
        &["fluorescent"],
        &["fluorine"],
        &["flourishing"],
        &["flourish"],
    ],
    range: 4..=9,
};

static WORD_FLI_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_FLI_CHILDREN),
    value: None,
};

pub static WORD_FLI_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("mmakers"),
        dictgen::InsensitiveStr::Ascii("ppade"),
        dictgen::InsensitiveStr::Ascii("tered"),
        dictgen::InsensitiveStr::Ascii("ters"),
    ],
    values: &[&["filmmakers"], &["flipped"], &["filtered"], &["filters"]],
    range: 4..=7,
};

static WORD_FLE_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_FLE_CHILDREN),
    value: None,
};

pub static WORD_FLE_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("chter"),
        dictgen::InsensitiveStr::Ascii("cther"),
        dictgen::InsensitiveStr::Ascii("ed"),
        dictgen::InsensitiveStr::Ascii("mmish"),
        dictgen::InsensitiveStr::Ascii("thcer"),
        dictgen::InsensitiveStr::Ascii("xbile"),
        dictgen::InsensitiveStr::Ascii("xibel"),
        dictgen::InsensitiveStr::Ascii("xibiliy"),
        dictgen::InsensitiveStr::Ascii("xibillity"),
        dictgen::InsensitiveStr::Ascii("xibiltiy"),
        dictgen::InsensitiveStr::Ascii("xibilty"),
        dictgen::InsensitiveStr::Ascii("xibily"),
    ],
    values: &[
        &["fletcher"],
        &["fletcher"],
        &["fled"],
        &["flemish"],
        &["fletcher"],
        &["flexible"],
        &["flexible"],
        &["flexibility"],
        &["flexibility"],
        &["flexibility"],
        &["flexibility"],
        &["flexibility"],
    ],
    range: 2..=9,
};

static WORD_FLC_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_FLC_CHILDREN),
    value: None,
};

pub static WORD_FLC_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("iker")],
    values: &[&["flicker"]],
    range: 4..=4,
};

static WORD_FLA_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_FLA_CHILDREN),
    value: None,
};

pub static WORD_FLA_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("cons"),
        dictgen::InsensitiveStr::Ascii("ghsip"),
        dictgen::InsensitiveStr::Ascii("hsed"),
        dictgen::InsensitiveStr::Ascii("hses"),
        dictgen::InsensitiveStr::Ascii("mable"),
        dictgen::InsensitiveStr::Ascii("methorwer"),
        dictgen::InsensitiveStr::Ascii("metrhower"),
        dictgen::InsensitiveStr::Ascii("nethrower"),
        dictgen::InsensitiveStr::Ascii("ried"),
        dictgen::InsensitiveStr::Ascii("sely"),
        dictgen::InsensitiveStr::Ascii("sghip"),
        dictgen::InsensitiveStr::Ascii("shig"),
        dictgen::InsensitiveStr::Ascii("shligt"),
        dictgen::InsensitiveStr::Ascii("shligth"),
        dictgen::InsensitiveStr::Ascii("skbacks"),
        dictgen::InsensitiveStr::Ascii("tterd"),
        dictgen::InsensitiveStr::Ascii("tterende"),
        dictgen::InsensitiveStr::Ascii("tteur"),
        dictgen::InsensitiveStr::Ascii("ttire"),
        dictgen::InsensitiveStr::Ascii("vorade"),
        dictgen::InsensitiveStr::Ascii("vord"),
        dictgen::InsensitiveStr::Ascii("vores"),
        dictgen::InsensitiveStr::Ascii("voures"),
        dictgen::InsensitiveStr::Ascii("vourus"),
        dictgen::InsensitiveStr::Ascii("vous"),
        dictgen::InsensitiveStr::Ascii("wess"),
        dictgen::InsensitiveStr::Ascii("wleslly"),
        dictgen::InsensitiveStr::Ascii("wlessely"),
        dictgen::InsensitiveStr::Ascii("wlessley"),
        dictgen::InsensitiveStr::Ascii("wlessy"),
    ],
    values: &[
        &["falcons"],
        &["flagship"],
        &["flashed"],
        &["flashes"],
        &["flammable"],
        &["flamethrower"],
        &["flamethrower"],
        &["flamethrower"],
        &["flaired"],
        &["falsely"],
        &["flagship"],
        &["flashing"],
        &["flashlight"],
        &["flashlight"],
        &["flashbacks"],
        &["flattered"],
        &["flattered"],
        &["flatter"],
        &["flatter"],
        &["flavored"],
        &["flavored"],
        &["flavors"],
        &["flavours"],
        &["flavours"],
        &["flavours"],
        &["flawless"],
        &["flawlessly"],
        &["flawlessly"],
        &["flawlessly"],
        &["flawlessly"],
    ],
    range: 4..=9,
};

static WORD_FI_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_FI_CHILDREN),
    value: None,
};

static WORD_FI_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    Some(&WORD_FIA_NODE),
    None,
    Some(&WORD_FIC_NODE),
    Some(&WORD_FID_NODE),
    Some(&WORD_FIE_NODE),
    None,
    Some(&WORD_FIG_NODE),
    None,
    None,
    None,
    None,
    Some(&WORD_FIL_NODE),
    Some(&WORD_FIM_NODE),
    Some(&WORD_FIN_NODE),
    None,
    None,
    None,
    Some(&WORD_FIR_NODE),
    Some(&WORD_FIS_NODE),
    Some(&WORD_FIT_NODE),
    None,
    None,
    None,
    None,
    None,
    None,
];

static WORD_FIT_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_FIT_CHILDREN),
    value: None,
};

pub static WORD_FIT_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("lers")],
    values: &[&["filters"]],
    range: 4..=4,
};

static WORD_FIS_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_FIS_CHILDREN),
    value: None,
};

pub static WORD_FIS_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("ionable")],
    values: &[&["fissionable"]],
    range: 7..=7,
};

static WORD_FIR_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_FIR_CHILDREN),
    value: None,
};

pub static WORD_FIR_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("eballls"),
        dictgen::InsensitiveStr::Ascii("ebals"),
        dictgen::InsensitiveStr::Ascii("efigher"),
        dictgen::InsensitiveStr::Ascii("efighers"),
        dictgen::InsensitiveStr::Ascii("efigter"),
        dictgen::InsensitiveStr::Ascii("efigther"),
        dictgen::InsensitiveStr::Ascii("efigthers"),
        dictgen::InsensitiveStr::Ascii("endlies"),
        dictgen::InsensitiveStr::Ascii("endly"),
        dictgen::InsensitiveStr::Ascii("ends"),
        dictgen::InsensitiveStr::Ascii("endzoned"),
        dictgen::InsensitiveStr::Ascii("ggin"),
        dictgen::InsensitiveStr::Ascii("ghtened"),
        dictgen::InsensitiveStr::Ascii("ghtening"),
        dictgen::InsensitiveStr::Ascii("mwear"),
        dictgen::InsensitiveStr::Ascii("sbee"),
        dictgen::InsensitiveStr::Ascii("slty"),
        dictgen::InsensitiveStr::Ascii("ts"),
        dictgen::InsensitiveStr::Ascii("tsly"),
        dictgen::InsensitiveStr::Ascii("wmare"),
    ],
    values: &[
        &["fireballs"],
        &["fireballs"],
        &["firefighter"],
        &["firefighters"],
        &["firefighter"],
        &["firefighters"],
        &["firefighters"],
        &["friendlies"],
        &["friendly"],
        &["friends"],
        &["friendzoned"],
        &["friggin"],
        &["frightened"],
        &["frightening"],
        &["firmware"],
        &["frisbee"],
        &["firstly"],
        &["flirts"],
        &["firstly"],
        &["firmware"],
    ],
    range: 2..=9,
};

static WORD_FIN_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_FIN_CHILDREN),
    value: None,
};

pub static WORD_FIN_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("acee"),
        dictgen::InsensitiveStr::Ascii("acial"),
        dictgen::InsensitiveStr::Ascii("allizes"),
        dictgen::InsensitiveStr::Ascii("aly"),
        dictgen::InsensitiveStr::Ascii("ancialy"),
        dictgen::InsensitiveStr::Ascii("anically"),
        dictgen::InsensitiveStr::Ascii("antially"),
        dictgen::InsensitiveStr::Ascii("eses"),
        dictgen::InsensitiveStr::Ascii("eshes"),
        dictgen::InsensitiveStr::Ascii("gernal"),
        dictgen::InsensitiveStr::Ascii("gernals"),
        dictgen::InsensitiveStr::Ascii("gerpies"),
        dictgen::InsensitiveStr::Ascii("gerpint"),
        dictgen::InsensitiveStr::Ascii("gerpints"),
        dictgen::InsensitiveStr::Ascii("gerpoint"),
        dictgen::InsensitiveStr::Ascii("gerpoints"),
        dictgen::InsensitiveStr::Ascii("gersi"),
        dictgen::InsensitiveStr::Ascii("gertaps"),
        dictgen::InsensitiveStr::Ascii("gertits"),
        dictgen::InsensitiveStr::Ascii("gertops"),
        dictgen::InsensitiveStr::Ascii("gertrips"),
        dictgen::InsensitiveStr::Ascii("insh"),
        dictgen::InsensitiveStr::Ascii("ishs"),
        dictgen::InsensitiveStr::Ascii("isse"),
        dictgen::InsensitiveStr::Ascii("nisch"),
        dictgen::InsensitiveStr::Ascii("nsih"),
        dictgen::InsensitiveStr::Ascii("sihes"),
    ],
    values: &[
        &["fiancee"],
        &["financial"],
        &["finalizes"],
        &["finally"],
        &["financially"],
        &["financially"],
        &["financially"],
        &["finesse"],
        &["finesse"],
        &["fingernails"],
        &["fingernails"],
        &["fingertips"],
        &["fingerprint"],
        &["fingertips"],
        &["fingerprint"],
        &["fingerprints"],
        &["fingertips"],
        &["fingertips"],
        &["fingertips"],
        &["fingertips"],
        &["fingertips"],
        &["finnish"],
        &["finishes"],
        &["finishes"],
        &["finnish"],
        &["finnish"],
        &["finishes"],
    ],
    range: 3..=9,
};

static WORD_FIM_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_FIM_CHILDREN),
    value: None,
};

pub static WORD_FIM_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("ilies")],
    values: &[&["families"]],
    range: 5..=5,
};

static WORD_FIL_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_FIL_CHILDREN),
    value: None,
};

pub static WORD_FIL_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("cker"),
        dictgen::InsensitiveStr::Ascii("eding"),
        dictgen::InsensitiveStr::Ascii("essytem"),
        dictgen::InsensitiveStr::Ascii("esytems"),
        dictgen::InsensitiveStr::Ascii("etimes"),
        dictgen::InsensitiveStr::Ascii("iament"),
        dictgen::InsensitiveStr::Ascii("mamkers"),
        dictgen::InsensitiveStr::Ascii("mmakare"),
        dictgen::InsensitiveStr::Ascii("mmakes"),
        dictgen::InsensitiveStr::Ascii("pped"),
        dictgen::InsensitiveStr::Ascii("terd"),
    ],
    values: &[
        &["flicker"],
        &["fielding"],
        &["filesystem"],
        &["filesystem"],
        &["lifetimes"],
        &["filament"],
        &["filmmakers"],
        &["filmmakers"],
        &["filmmakers"],
        &["flipped"],
        &["filtered"],
    ],
    range: 4..=7,
};

static WORD_FIG_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_FIG_CHILDREN),
    value: None,
};

pub static WORD_FIG_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("hitng"),
        dictgen::InsensitiveStr::Ascii("htings"),
        dictgen::InsensitiveStr::Ascii("nernails"),
        dictgen::InsensitiveStr::Ascii("nerprint"),
        dictgen::InsensitiveStr::Ascii("thing"),
        dictgen::InsensitiveStr::Ascii("uartively"),
        dictgen::InsensitiveStr::Ascii("uratevely"),
        dictgen::InsensitiveStr::Ascii("urativeley"),
        dictgen::InsensitiveStr::Ascii("urativelly"),
        dictgen::InsensitiveStr::Ascii("urativley"),
        dictgen::InsensitiveStr::Ascii("urativly"),
        dictgen::InsensitiveStr::Ascii("uretively"),
        dictgen::InsensitiveStr::Ascii("uritively"),
    ],
    values: &[
        &["fighting"],
        &["fighting"],
        &["fingernails"],
        &["fingerprint"],
        &["fighting"],
        &["figuratively"],
        &["figuratively"],
        &["figuratively"],
        &["figuratively"],
        &["figuratively"],
        &["figuratively"],
        &["figuratively"],
        &["figuratively"],
    ],
    range: 5..=10,
};

static WORD_FIE_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_FIE_CHILDREN),
    value: None,
};

pub static WORD_FIE_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("dling"),
        dictgen::InsensitiveStr::Ascii("dlity"),
        dictgen::InsensitiveStr::Ascii("ls"),
        dictgen::InsensitiveStr::Ascii("rcly"),
    ],
    values: &[&["fielding"], &["fidelity"], &["fields"], &["fiercely"]],
    range: 2..=5,
};

static WORD_FID_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_FID_CHILDREN),
    value: None,
};

pub static WORD_FID_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("eling"),
        dictgen::InsensitiveStr::Ascii("eltiy"),
        dictgen::InsensitiveStr::Ascii("n"),
    ],
    values: &[&["fielding"], &["fidelity"], &["find"]],
    range: 1..=5,
};

static WORD_FIC_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_FIC_CHILDREN),
    value: None,
};

pub static WORD_FIC_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ticious"),
        dictgen::InsensitiveStr::Ascii("tionaries"),
        dictgen::InsensitiveStr::Ascii("tious"),
    ],
    values: &[&["fictitious"], &["dictionaries"], &["fictitious"]],
    range: 5..=9,
};

static WORD_FIA_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_FIA_CHILDREN),
    value: None,
};

pub static WORD_FIA_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("nite"),
        dictgen::InsensitiveStr::Ascii("nlly"),
    ],
    values: &[&["finite"], &["finally"]],
    range: 4..=4,
};

static WORD_FE_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_FE_CHILDREN),
    value: None,
};

static WORD_FE_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    Some(&WORD_FEA_NODE),
    Some(&WORD_FEB_NODE),
    Some(&WORD_FEC_NODE),
    Some(&WORD_FED_NODE),
    None,
    None,
    None,
    None,
    Some(&WORD_FEI_NODE),
    None,
    None,
    Some(&WORD_FEL_NODE),
    Some(&WORD_FEM_NODE),
    None,
    Some(&WORD_FEO_NODE),
    None,
    None,
    Some(&WORD_FER_NODE),
    Some(&WORD_FES_NODE),
    Some(&WORD_FET_NODE),
    None,
    None,
    None,
    None,
    None,
    None,
];

static WORD_FET_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_FET_CHILDREN),
    value: None,
};

pub static WORD_FET_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("hced"),
        dictgen::InsensitiveStr::Ascii("hces"),
        dictgen::InsensitiveStr::Ascii("ishers"),
        dictgen::InsensitiveStr::Ascii("ishiste"),
        dictgen::InsensitiveStr::Ascii("ishs"),
    ],
    values: &[
        &["fetched"],
        &["fetches"],
        &["fetishes"],
        &["fetishes"],
        &["fetishes"],
    ],
    range: 4..=7,
};

static WORD_FES_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_FES_CHILDREN),
    value: None,
};

pub static WORD_FES_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("iable"),
        dictgen::InsensitiveStr::Ascii("itvals"),
        dictgen::InsensitiveStr::Ascii("itve"),
        dictgen::InsensitiveStr::Ascii("tivalens"),
        dictgen::InsensitiveStr::Ascii("tivales"),
        dictgen::InsensitiveStr::Ascii("tivas"),
        dictgen::InsensitiveStr::Ascii("tivle"),
    ],
    values: &[
        &["feasible"],
        &["festivals"],
        &["festive"],
        &["festivals"],
        &["festivals"],
        &["festivals"],
        &["festive"],
    ],
    range: 4..=8,
};

static WORD_FER_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_FER_CHILDREN),
    value: None,
};

pub static WORD_FER_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("mantation"),
        dictgen::InsensitiveStr::Ascii("mentacion"),
        dictgen::InsensitiveStr::Ascii("mentaion"),
        dictgen::InsensitiveStr::Ascii("mentaiton"),
        dictgen::InsensitiveStr::Ascii("mentating"),
        dictgen::InsensitiveStr::Ascii("mentato"),
        dictgen::InsensitiveStr::Ascii("menterad"),
        dictgen::InsensitiveStr::Ascii("mintation"),
        dictgen::InsensitiveStr::Ascii("omone"),
        dictgen::InsensitiveStr::Ascii("talizer"),
        dictgen::InsensitiveStr::Ascii("telizer"),
        dictgen::InsensitiveStr::Ascii("tilizar"),
        dictgen::InsensitiveStr::Ascii("tilizier"),
        dictgen::InsensitiveStr::Ascii("tily"),
        dictgen::InsensitiveStr::Ascii("tilzier"),
        dictgen::InsensitiveStr::Ascii("tiziler"),
        dictgen::InsensitiveStr::Ascii("tizilers"),
    ],
    values: &[
        &["fermentation"],
        &["fermentation"],
        &["fermentation"],
        &["fermentation"],
        &["fermentation"],
        &["fermentation"],
        &["fermented"],
        &["fermentation"],
        &["pheromone"],
        &["fertilizer"],
        &["fertilizer"],
        &["fertilizer"],
        &["fertilizer"],
        &["fertility"],
        &["fertilizer"],
        &["fertilizer"],
        &["fertilizer"],
    ],
    range: 4..=9,
};

static WORD_FEO_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_FEO_CHILDREN),
    value: None,
};

pub static WORD_FEO_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("dras")],
    values: &[&["fedoras"]],
    range: 4..=4,
};

static WORD_FEM_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_FEM_CHILDREN),
    value: None,
};

pub static WORD_FEM_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("inen"),
        dictgen::InsensitiveStr::Ascii("inie"),
        dictgen::InsensitiveStr::Ascii("inim"),
        dictgen::InsensitiveStr::Ascii("inimity"),
        dictgen::InsensitiveStr::Ascii("inint"),
        dictgen::InsensitiveStr::Ascii("inisim"),
        dictgen::InsensitiveStr::Ascii("inistas"),
        dictgen::InsensitiveStr::Ascii("inisters"),
        dictgen::InsensitiveStr::Ascii("inistisk"),
        dictgen::InsensitiveStr::Ascii("initity"),
        dictgen::InsensitiveStr::Ascii("insim"),
        dictgen::InsensitiveStr::Ascii("insits"),
        dictgen::InsensitiveStr::Ascii("minist"),
    ],
    values: &[
        &["feminine"],
        &["feminine"],
        &["feminism"],
        &["femininity"],
        &["femininity"],
        &["feminism"],
        &["feminists"],
        &["feminists"],
        &["feminists"],
        &["femininity"],
        &["feminism"],
        &["feminists"],
        &["feminist"],
    ],
    range: 4..=8,
};

static WORD_FEL_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_FEL_CHILDREN),
    value: None,
};

pub static WORD_FEL_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("lowhsip"),
        dictgen::InsensitiveStr::Ascii("lowshop"),
        dictgen::InsensitiveStr::Ascii("tcher"),
        dictgen::InsensitiveStr::Ascii("xibility"),
        dictgen::InsensitiveStr::Ascii("xible"),
    ],
    values: &[
        &["fellowship"],
        &["fellowship"],
        &["fletcher"],
        &["flexibility"],
        &["flexible"],
    ],
    range: 5..=8,
};

static WORD_FEI_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_FEI_CHILDREN),
    value: None,
};

pub static WORD_FEI_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("lding"),
        dictgen::InsensitiveStr::Ascii("sable"),
        dictgen::InsensitiveStr::Ascii("tshes"),
    ],
    values: &[&["fielding"], &["feasible"], &["fetishes"]],
    range: 5..=5,
};

static WORD_FED_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_FED_CHILDREN),
    value: None,
};

pub static WORD_FED_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("eracion"),
        dictgen::InsensitiveStr::Ascii("erativo"),
        dictgen::InsensitiveStr::Ascii("ility"),
        dictgen::InsensitiveStr::Ascii("orahs"),
        dictgen::InsensitiveStr::Ascii("orans"),
        dictgen::InsensitiveStr::Ascii("really"),
    ],
    values: &[
        &["federation"],
        &["federation"],
        &["fidelity"],
        &["fedoras"],
        &["fedoras"],
        &["federally"],
    ],
    range: 5..=7,
};

static WORD_FEC_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_FEC_CHILDREN),
    value: None,
};

pub static WORD_FEC_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("thed"),
        dictgen::InsensitiveStr::Ascii("thes"),
    ],
    values: &[&["fetched"], &["fetches"]],
    range: 4..=4,
};

static WORD_FEB_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_FEB_CHILDREN),
    value: None,
};

pub static WORD_FEB_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("raury"),
        dictgen::InsensitiveStr::Ascii("ruray"),
        dictgen::InsensitiveStr::Ascii("uary"),
        dictgen::InsensitiveStr::Ascii("urary"),
    ],
    values: &[&["february"], &["february"], &["february"], &["february"]],
    range: 4..=5,
};

static WORD_FEA_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_FEA_CHILDREN),
    value: None,
};

pub static WORD_FEA_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("sable"),
        dictgen::InsensitiveStr::Ascii("sbile"),
    ],
    values: &[&["feasible"], &["feasible"]],
    range: 5..=5,
};

static WORD_FA_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_FA_CHILDREN),
    value: None,
};

static WORD_FA_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    None,
    Some(&WORD_FAB_NODE),
    Some(&WORD_FAC_NODE),
    None,
    None,
    None,
    Some(&WORD_FAG_NODE),
    Some(&WORD_FAH_NODE),
    Some(&WORD_FAI_NODE),
    None,
    None,
    Some(&WORD_FAL_NODE),
    Some(&WORD_FAM_NODE),
    Some(&WORD_FAN_NODE),
    Some(&WORD_FAO_NODE),
    Some(&WORD_FAP_NODE),
    None,
    Some(&WORD_FAR_NODE),
    Some(&WORD_FAS_NODE),
    Some(&WORD_FAT_NODE),
    Some(&WORD_FAU_NODE),
    Some(&WORD_FAV_NODE),
    None,
    None,
    None,
    None,
];

static WORD_FAV_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_FAV_CHILDREN),
    value: None,
};

pub static WORD_FAV_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("oritisme"),
        dictgen::InsensitiveStr::Ascii("orits"),
        dictgen::InsensitiveStr::Ascii("orties"),
        dictgen::InsensitiveStr::Ascii("oruite"),
        dictgen::InsensitiveStr::Ascii("oruites"),
        dictgen::InsensitiveStr::Ascii("ourates"),
        dictgen::InsensitiveStr::Ascii("ourie"),
        dictgen::InsensitiveStr::Ascii("ourits"),
        dictgen::InsensitiveStr::Ascii("ouritsm"),
        dictgen::InsensitiveStr::Ascii("ourtie"),
        dictgen::InsensitiveStr::Ascii("ourties"),
        dictgen::InsensitiveStr::Ascii("outrable"),
    ],
    values: &[
        &["favorites"],
        &["favorites"],
        &["favorites"],
        &["favorite"],
        &["favorites"],
        &["favourites"],
        &["favourites"],
        &["favourites"],
        &["favourites"],
        &["favourite"],
        &["favourites"],
        &["favourable"],
    ],
    range: 5..=8,
};

static WORD_FAU_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_FAU_CHILDREN),
    value: None,
};

pub static WORD_FAU_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("ght")],
    values: &[&["fought"]],
    range: 3..=3,
};

static WORD_FAT_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_FAT_CHILDREN),
    value: None,
};

pub static WORD_FAT_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("alaties"),
        dictgen::InsensitiveStr::Ascii("alitites"),
        dictgen::InsensitiveStr::Ascii("c"),
        dictgen::InsensitiveStr::Ascii("igure"),
        dictgen::InsensitiveStr::Ascii("iuge"),
    ],
    values: &[
        &["fatalities"],
        &["fatalities"],
        &["fact"],
        &["fatigue"],
        &["fatigue"],
    ],
    range: 1..=8,
};

static WORD_FAS_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_FAS_CHILDREN),
    value: None,
};

pub static WORD_FAS_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("cianted"),
        dictgen::InsensitiveStr::Ascii("cinacion"),
        dictgen::InsensitiveStr::Ascii("cinatie"),
        dictgen::InsensitiveStr::Ascii("cinatin"),
        dictgen::InsensitiveStr::Ascii("cinatinf"),
        dictgen::InsensitiveStr::Ascii("cisation"),
        dictgen::InsensitiveStr::Ascii("cisim"),
        dictgen::InsensitiveStr::Ascii("cistes"),
        dictgen::InsensitiveStr::Ascii("cistisk"),
        dictgen::InsensitiveStr::Ascii("cits"),
        dictgen::InsensitiveStr::Ascii("cization"),
        dictgen::InsensitiveStr::Ascii("hionalbe"),
        dictgen::InsensitiveStr::Ascii("hionalble"),
        dictgen::InsensitiveStr::Ascii("hiond"),
        dictgen::InsensitiveStr::Ascii("hoinable"),
        dictgen::InsensitiveStr::Ascii("hoined"),
        dictgen::InsensitiveStr::Ascii("icsm"),
        dictgen::InsensitiveStr::Ascii("icst"),
        dictgen::InsensitiveStr::Ascii("icsts"),
        dictgen::InsensitiveStr::Ascii("lely"),
    ],
    values: &[
        &["fascinated"],
        &["fascination"],
        &["fascinated"],
        &["fascination"],
        &["fascination"],
        &["fascination"],
        &["fascism"],
        &["fascists"],
        &["fascists"],
        &["fascist"],
        &["fascination"],
        &["fashionable"],
        &["fashionable"],
        &["fashioned"],
        &["fashionable"],
        &["fashioned"],
        &["fascism"],
        &["fascist"],
        &["fascists"],
        &["falsely"],
    ],
    range: 4..=9,
};

static WORD_FAR_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_FAR_CHILDREN),
    value: None,
};

pub static WORD_FAR_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("cking"),
        dictgen::InsensitiveStr::Ascii("ehnheit"),
        dictgen::InsensitiveStr::Ascii("enheit"),
        dictgen::InsensitiveStr::Ascii("henheit"),
    ],
    values: &[
        &["fracking"],
        &["fahrenheit"],
        &["fahrenheit"],
        &["fahrenheit"],
    ],
    range: 5..=7,
};

static WORD_FAP_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_FAP_CHILDREN),
    value: None,
};

pub static WORD_FAP_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("tastically")],
    values: &[&["fantastically"]],
    range: 10..=10,
};

static WORD_FAO_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_FAO_CHILDREN),
    value: None,
};

pub static WORD_FAO_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("ming")],
    values: &[&["foaming"]],
    range: 4..=4,
};

static WORD_FAN_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_FAN_CHILDREN),
    value: None,
};

pub static WORD_FAN_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("aticals"),
        dictgen::InsensitiveStr::Ascii("aticas"),
        dictgen::InsensitiveStr::Ascii("aticos"),
        dictgen::InsensitiveStr::Ascii("aticus"),
        dictgen::InsensitiveStr::Ascii("atism"),
        dictgen::InsensitiveStr::Ascii("atsic"),
        dictgen::InsensitiveStr::Ascii("atsies"),
        dictgen::InsensitiveStr::Ascii("atsize"),
        dictgen::InsensitiveStr::Ascii("atsizing"),
        dictgen::InsensitiveStr::Ascii("atsy"),
        dictgen::InsensitiveStr::Ascii("dation"),
        dictgen::InsensitiveStr::Ascii("faction"),
        dictgen::InsensitiveStr::Ascii("fcition"),
        dictgen::InsensitiveStr::Ascii("ficiton"),
        dictgen::InsensitiveStr::Ascii("ficitons"),
        dictgen::InsensitiveStr::Ascii("serivce"),
        dictgen::InsensitiveStr::Ascii("serve"),
        dictgen::InsensitiveStr::Ascii("servie"),
        dictgen::InsensitiveStr::Ascii("servise"),
        dictgen::InsensitiveStr::Ascii("servive"),
        dictgen::InsensitiveStr::Ascii("slaughter"),
        dictgen::InsensitiveStr::Ascii("tacising"),
        dictgen::InsensitiveStr::Ascii("tacizing"),
        dictgen::InsensitiveStr::Ascii("taic"),
        dictgen::InsensitiveStr::Ascii("tasazing"),
        dictgen::InsensitiveStr::Ascii("tasiaing"),
        dictgen::InsensitiveStr::Ascii("tasiose"),
        dictgen::InsensitiveStr::Ascii("tasitcally"),
        dictgen::InsensitiveStr::Ascii("tasmically"),
        dictgen::InsensitiveStr::Ascii("tasticaly"),
        dictgen::InsensitiveStr::Ascii("tasticlly"),
        dictgen::InsensitiveStr::Ascii("tasty"),
        dictgen::InsensitiveStr::Ascii("tasyzing"),
        dictgen::InsensitiveStr::Ascii("tazise"),
        dictgen::InsensitiveStr::Ascii("tazising"),
        dictgen::InsensitiveStr::Ascii("tistically"),
    ],
    values: &[
        &["fanatics"],
        &["fanatics"],
        &["fanatics"],
        &["fanatics"],
        &["fanaticism"],
        &["fanatics"],
        &["fantasies"],
        &["fantasize"],
        &["fantasizing"],
        &["fantasy"],
        &["foundation"],
        &["fanfiction"],
        &["fanfiction"],
        &["fanfiction"],
        &["fanfiction"],
        &["fanservice"],
        &["fanservice"],
        &["fanservice"],
        &["fanservice"],
        &["fanservice"],
        &["manslaughter"],
        &["fantasising"],
        &["fantasizing"],
        &["fanatic"],
        &["fantasizing"],
        &["fantasizing"],
        &["fantasies"],
        &["fantastically"],
        &["fantastically"],
        &["fantastically"],
        &["fantastically"],
        &["fantasy"],
        &["fantasizing"],
        &["fantasise"],
        &["fantasising"],
        &["fantastically"],
    ],
    range: 4..=10,
};

static WORD_FAM_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_FAM_CHILDREN),
    value: None,
};

pub static WORD_FAM_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ilair"),
        dictgen::InsensitiveStr::Ascii("ilairity"),
        dictgen::InsensitiveStr::Ascii("ilairize"),
        dictgen::InsensitiveStr::Ascii("iles"),
        dictgen::InsensitiveStr::Ascii("iliair"),
        dictgen::InsensitiveStr::Ascii("iliare"),
        dictgen::InsensitiveStr::Ascii("iliaries"),
        dictgen::InsensitiveStr::Ascii("iliarizate"),
        dictgen::InsensitiveStr::Ascii("iliarlize"),
        dictgen::InsensitiveStr::Ascii("iliarty"),
        dictgen::InsensitiveStr::Ascii("iliary"),
        dictgen::InsensitiveStr::Ascii("iliarze"),
        dictgen::InsensitiveStr::Ascii("ilierize"),
        dictgen::InsensitiveStr::Ascii("illiar"),
        dictgen::InsensitiveStr::Ascii("oulsy"),
        dictgen::InsensitiveStr::Ascii("oust"),
        dictgen::InsensitiveStr::Ascii("ousy"),
    ],
    values: &[
        &["familiar"],
        &["familiarity"],
        &["familiarize"],
        &["families"],
        &["familiar"],
        &["familiarize"],
        &["familiarize"],
        &["familiarize"],
        &["familiarize"],
        &["familiarity"],
        &["familiarity"],
        &["familiarize"],
        &["familiarize"],
        &["familiar"],
        &["famously"],
        &["famous"],
        &["famously"],
    ],
    range: 4..=10,
};

static WORD_FAL_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_FAL_CHILDREN),
    value: None,
};

pub static WORD_FAL_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("cones"),
        dictgen::InsensitiveStr::Ascii("esly"),
        dictgen::InsensitiveStr::Ascii("gship"),
        dictgen::InsensitiveStr::Ascii("ired"),
        dictgen::InsensitiveStr::Ascii("iures"),
        dictgen::InsensitiveStr::Ascii("latious"),
        dictgen::InsensitiveStr::Ascii("licious"),
        dictgen::InsensitiveStr::Ascii("methrower"),
        dictgen::InsensitiveStr::Ascii("seley"),
        dictgen::InsensitiveStr::Ascii("shbacks"),
        dictgen::InsensitiveStr::Ascii("shed"),
        dictgen::InsensitiveStr::Ascii("shes"),
        dictgen::InsensitiveStr::Ascii("shing"),
        dictgen::InsensitiveStr::Ascii("sley"),
        dictgen::InsensitiveStr::Ascii("vored"),
        dictgen::InsensitiveStr::Ascii("vors"),
        dictgen::InsensitiveStr::Ascii("vours"),
    ],
    values: &[
        &["falcons"],
        &["falsely"],
        &["flagship"],
        &["flaired"],
        &["failures"],
        &["fallacious"],
        &["fallacious"],
        &["flamethrower"],
        &["falsely"],
        &["flashbacks"],
        &["flashed"],
        &["flashes"],
        &["flashing"],
        &["falsely"],
        &["flavored"],
        &["flavors"],
        &["flavours"],
    ],
    range: 4..=9,
};

static WORD_FAI_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_FAI_CHILDREN),
    value: None,
};

pub static WORD_FAI_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("lurs"),
        dictgen::InsensitiveStr::Ascii("ncee"),
    ],
    values: &[&["failures"], &["fiancee"]],
    range: 4..=4,
};

static WORD_FAH_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_FAH_CHILDREN),
    value: None,
};

pub static WORD_FAH_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ernheit"),
        dictgen::InsensitiveStr::Ascii("renheight"),
        dictgen::InsensitiveStr::Ascii("renhiet"),
    ],
    values: &[&["fahrenheit"], &["fahrenheit"], &["fahrenheit"]],
    range: 7..=9,
};

static WORD_FAG_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_FAG_CHILDREN),
    value: None,
};

pub static WORD_FAG_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("gotts"),
        dictgen::InsensitiveStr::Ascii("gotus"),
    ],
    values: &[&["faggots"], &["faggots"]],
    range: 5..=5,
};

static WORD_FAC_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_FAC_CHILDREN),
    value: None,
};

pub static WORD_FAC_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ebok"),
        dictgen::InsensitiveStr::Ascii("eboook"),
        dictgen::InsensitiveStr::Ascii("epam"),
        dictgen::InsensitiveStr::Ascii("eplam"),
        dictgen::InsensitiveStr::Ascii("iliate"),
        dictgen::InsensitiveStr::Ascii("iliated"),
        dictgen::InsensitiveStr::Ascii("ilisi"),
        dictgen::InsensitiveStr::Ascii("ilitait"),
        dictgen::InsensitiveStr::Ascii("ilitant"),
        dictgen::InsensitiveStr::Ascii("ilitare"),
        dictgen::InsensitiveStr::Ascii("ilitarte"),
        dictgen::InsensitiveStr::Ascii("ilitatile"),
        dictgen::InsensitiveStr::Ascii("ilites"),
        dictgen::InsensitiveStr::Ascii("ilitiate"),
        dictgen::InsensitiveStr::Ascii("ilitiy"),
        dictgen::InsensitiveStr::Ascii("illitate"),
        dictgen::InsensitiveStr::Ascii("iltiy"),
        dictgen::InsensitiveStr::Ascii("inated"),
        dictgen::InsensitiveStr::Ascii("isnated"),
        dictgen::InsensitiveStr::Ascii("isnation"),
        dictgen::InsensitiveStr::Ascii("ist"),
        dictgen::InsensitiveStr::Ascii("itilies"),
        dictgen::InsensitiveStr::Ascii("lons"),
        dictgen::InsensitiveStr::Ascii("sinated"),
        dictgen::InsensitiveStr::Ascii("sination"),
        dictgen::InsensitiveStr::Ascii("sism"),
        dictgen::InsensitiveStr::Ascii("sist"),
        dictgen::InsensitiveStr::Ascii("sists"),
        dictgen::InsensitiveStr::Ascii("tores"),
        dictgen::InsensitiveStr::Ascii("torys"),
        dictgen::InsensitiveStr::Ascii("tuallity"),
        dictgen::InsensitiveStr::Ascii("tualy"),
        dictgen::InsensitiveStr::Ascii("utally"),
    ],
    values: &[
        &["facebook"],
        &["facebook"],
        &["facepalm"],
        &["facepalm"],
        &["facilitate"],
        &["facilitated"],
        &["facilities"],
        &["facilitate"],
        &["facilitate"],
        &["facilitate"],
        &["facilitate"],
        &["facilitate"],
        &["facilities"],
        &["facilitate"],
        &["facility"],
        &["facilitate"],
        &["facility"],
        &["fascinated"],
        &["fascinated"],
        &["fascination"],
        &["fascist"],
        &["facilities"],
        &["falcons"],
        &["fascinated"],
        &["fascination"],
        &["fascism"],
        &["fascist"],
        &["fascists"],
        &["factors"],
        &["factors"],
        &["factually"],
        &["factually"],
        &["factually"],
    ],
    range: 3..=9,
};

static WORD_FAB_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_FAB_CHILDREN),
    value: None,
};

pub static WORD_FAB_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ircation"),
        dictgen::InsensitiveStr::Ascii("oulus"),
        dictgen::InsensitiveStr::Ascii("riacted"),
        dictgen::InsensitiveStr::Ascii("ricacion"),
        dictgen::InsensitiveStr::Ascii("ricas"),
        dictgen::InsensitiveStr::Ascii("ricatie"),
        dictgen::InsensitiveStr::Ascii("rices"),
        dictgen::InsensitiveStr::Ascii("ricus"),
        dictgen::InsensitiveStr::Ascii("rikation"),
        dictgen::InsensitiveStr::Ascii("ulos"),
    ],
    values: &[
        &["fabrication"],
        &["fabulous"],
        &["fabricated"],
        &["fabrication"],
        &["fabrics"],
        &["fabricated"],
        &["fabrics"],
        &["fabrics"],
        &["fabrication"],
        &["fabulous"],
    ],
    range: 4..=8,
};

static WORD_E_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_E_CHILDREN),
    value: None,
};

static WORD_E_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    Some(&WORD_EA_NODE),
    Some(&WORD_EB_NODE),
    Some(&WORD_EC_NODE),
    Some(&WORD_ED_NODE),
    Some(&WORD_EE_NODE),
    Some(&WORD_EF_NODE),
    Some(&WORD_EG_NODE),
    Some(&WORD_EH_NODE),
    Some(&WORD_EI_NODE),
    Some(&WORD_EJ_NODE),
    None,
    Some(&WORD_EL_NODE),
    Some(&WORD_EM_NODE),
    Some(&WORD_EN_NODE),
    None,
    Some(&WORD_EP_NODE),
    Some(&WORD_EQ_NODE),
    Some(&WORD_ER_NODE),
    Some(&WORD_ES_NODE),
    Some(&WORD_ET_NODE),
    Some(&WORD_EU_NODE),
    Some(&WORD_EV_NODE),
    None,
    Some(&WORD_EX_NODE),
    Some(&WORD_EY_NODE),
    None,
];

static WORD_EY_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_EY_CHILDREN),
    value: None,
};

pub static WORD_EY_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ar"),
        dictgen::InsensitiveStr::Ascii("ars"),
        dictgen::InsensitiveStr::Ascii("asr"),
        dictgen::InsensitiveStr::Ascii("eballers"),
        dictgen::InsensitiveStr::Ascii("eballls"),
        dictgen::InsensitiveStr::Ascii("ebals"),
        dictgen::InsensitiveStr::Ascii("ebros"),
        dictgen::InsensitiveStr::Ascii("ebrowes"),
        dictgen::InsensitiveStr::Ascii("ebrowns"),
        dictgen::InsensitiveStr::Ascii("esahdow"),
        dictgen::InsensitiveStr::Ascii("eshdaow"),
        dictgen::InsensitiveStr::Ascii("gptian"),
        dictgen::InsensitiveStr::Ascii("gptians"),
        dictgen::InsensitiveStr::Ascii("tmology"),
    ],
    values: &[
        &["year"],
        &["years"],
        &["years"],
        &["eyeballs"],
        &["eyeballs"],
        &["eyeballs"],
        &["eyebrows"],
        &["eyebrows"],
        &["eyebrows"],
        &["eyeshadow"],
        &["eyeshadow"],
        &["egyptian"],
        &["egyptians"],
        &["etymology"],
    ],
    range: 2..=8,
};

static WORD_EX_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_EX_CHILDREN),
    value: None,
};

static WORD_EX_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    Some(&WORD_EXA_NODE),
    None,
    Some(&WORD_EXC_NODE),
    None,
    Some(&WORD_EXE_NODE),
    None,
    None,
    Some(&WORD_EXH_NODE),
    Some(&WORD_EXI_NODE),
    None,
    None,
    Some(&WORD_EXL_NODE),
    Some(&WORD_EXM_NODE),
    None,
    Some(&WORD_EXO_NODE),
    Some(&WORD_EXP_NODE),
    None,
    Some(&WORD_EXR_NODE),
    Some(&WORD_EXS_NODE),
    Some(&WORD_EXT_NODE),
    None,
    None,
    None,
    None,
    None,
    None,
];

static WORD_EXT_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_EXT_CHILDREN),
    value: None,
};

static WORD_EXT_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    Some(&WORD_EXTA_NODE),
    None,
    None,
    None,
    Some(&WORD_EXTE_NODE),
    None,
    None,
    None,
    Some(&WORD_EXTI_NODE),
    None,
    None,
    None,
    None,
    None,
    Some(&WORD_EXTO_NODE),
    None,
    None,
    Some(&WORD_EXTR_NODE),
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
];

static WORD_EXTR_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_EXTR_CHILDREN),
    value: None,
};

static WORD_EXTR_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    Some(&WORD_EXTRA_NODE),
    None,
    None,
    None,
    Some(&WORD_EXTRE_NODE),
    None,
    None,
    None,
    Some(&WORD_EXTRI_NODE),
    None,
    None,
    None,
    None,
    None,
    Some(&WORD_EXTRO_NODE),
    None,
    None,
    None,
    None,
    None,
    Some(&WORD_EXTRU_NODE),
    None,
    None,
    None,
    None,
    None,
];

static WORD_EXTRU_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_EXTRU_CHILDREN),
    value: None,
};

pub static WORD_EXTRU_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("ciating")],
    values: &[&["excruciating"]],
    range: 7..=7,
};

static WORD_EXTRO_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_EXTRO_CHILDREN),
    value: None,
};

pub static WORD_EXTRO_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ardinarily"),
        dictgen::InsensitiveStr::Ascii("ardinary"),
        dictgen::InsensitiveStr::Ascii("polate"),
        dictgen::InsensitiveStr::Ascii("rdinarily"),
        dictgen::InsensitiveStr::Ascii("rdinary"),
        dictgen::InsensitiveStr::Ascii("tion"),
    ],
    values: &[
        &["extraordinarily"],
        &["extraordinary"],
        &["extrapolate"],
        &["extraordinarily"],
        &["extraordinary"],
        &["extortion"],
    ],
    range: 4..=10,
};

static WORD_EXTRI_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_EXTRI_CHILDREN),
    value: None,
};

pub static WORD_EXTRI_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("mists")],
    values: &[&["extremists"]],
    range: 5..=5,
};

static WORD_EXTRE_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_EXTRE_CHILDREN),
    value: None,
};

pub static WORD_EXTRE_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("em"),
        dictgen::InsensitiveStr::Ascii("emly"),
        dictgen::InsensitiveStr::Ascii("ems"),
        dictgen::InsensitiveStr::Ascii("maste"),
        dictgen::InsensitiveStr::Ascii("meley"),
        dictgen::InsensitiveStr::Ascii("melly"),
        dictgen::InsensitiveStr::Ascii("memly"),
        dictgen::InsensitiveStr::Ascii("meophile"),
        dictgen::InsensitiveStr::Ascii("mers"),
        dictgen::InsensitiveStr::Ascii("mests"),
        dictgen::InsensitiveStr::Ascii("mised"),
        dictgen::InsensitiveStr::Ascii("misim"),
        dictgen::InsensitiveStr::Ascii("misme"),
        dictgen::InsensitiveStr::Ascii("mistas"),
        dictgen::InsensitiveStr::Ascii("miste"),
        dictgen::InsensitiveStr::Ascii("mistes"),
        dictgen::InsensitiveStr::Ascii("mistisk"),
        dictgen::InsensitiveStr::Ascii("mley"),
        dictgen::InsensitiveStr::Ascii("mly"),
        dictgen::InsensitiveStr::Ascii("ms"),
        dictgen::InsensitiveStr::Ascii("nally"),
    ],
    values: &[
        &["extreme"],
        &["extremely"],
        &["extremes"],
        &["extremes"],
        &["extremely"],
        &["extremely"],
        &["extremely"],
        &["extremophile"],
        &["extremes"],
        &["extremists"],
        &["extremes"],
        &["extremism"],
        &["extremes"],
        &["extremists"],
        &["extremes"],
        &["extremists"],
        &["extremists"],
        &["extremely"],
        &["extremely"],
        &["extremes"],
        &["externally"],
    ],
    range: 2..=8,
};

static WORD_EXTRA_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_EXTRA_CHILDREN),
    value: None,
};

pub static WORD_EXTRA_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ccion"),
        dictgen::InsensitiveStr::Ascii("ctin"),
        dictgen::InsensitiveStr::Ascii("ctivo"),
        dictgen::InsensitiveStr::Ascii("ctnow"),
        dictgen::InsensitiveStr::Ascii("cto"),
        dictgen::InsensitiveStr::Ascii("diction"),
        dictgen::InsensitiveStr::Ascii("dtion"),
        dictgen::InsensitiveStr::Ascii("gavant"),
        dictgen::InsensitiveStr::Ascii("odrinarily"),
        dictgen::InsensitiveStr::Ascii("odrinary"),
        dictgen::InsensitiveStr::Ascii("ordianry"),
        dictgen::InsensitiveStr::Ascii("ordiary"),
        dictgen::InsensitiveStr::Ascii("ordinair"),
        dictgen::InsensitiveStr::Ascii("ordinairily"),
        dictgen::InsensitiveStr::Ascii("ordinairly"),
        dictgen::InsensitiveStr::Ascii("ordinairy"),
        dictgen::InsensitiveStr::Ascii("ordinaly"),
        dictgen::InsensitiveStr::Ascii("ordinarely"),
        dictgen::InsensitiveStr::Ascii("ordinarilly"),
        dictgen::InsensitiveStr::Ascii("ordinarly"),
        dictgen::InsensitiveStr::Ascii("ordinaryly"),
        dictgen::InsensitiveStr::Ascii("ordinay"),
        dictgen::InsensitiveStr::Ascii("oridnary"),
        dictgen::InsensitiveStr::Ascii("palate"),
        dictgen::InsensitiveStr::Ascii("ploate"),
        dictgen::InsensitiveStr::Ascii("polant"),
        dictgen::InsensitiveStr::Ascii("polare"),
        dictgen::InsensitiveStr::Ascii("pole"),
        dictgen::InsensitiveStr::Ascii("polerat"),
        dictgen::InsensitiveStr::Ascii("polite"),
        dictgen::InsensitiveStr::Ascii("poloate"),
        dictgen::InsensitiveStr::Ascii("pulate"),
        dictgen::InsensitiveStr::Ascii("terrestial"),
        dictgen::InsensitiveStr::Ascii("terrestials"),
        dictgen::InsensitiveStr::Ascii("vagent"),
        dictgen::InsensitiveStr::Ascii("vagina"),
        dictgen::InsensitiveStr::Ascii("vegant"),
        dictgen::InsensitiveStr::Ascii("vigant"),
        dictgen::InsensitiveStr::Ascii("vogant"),
    ],
    values: &[
        &["extraction"],
        &["extraction"],
        &["extraction"],
        &["extraction"],
        &["extraction"],
        &["extradition"],
        &["extraction"],
        &["extravagant"],
        &["extraordinarily"],
        &["extraordinary"],
        &["extraordinary"],
        &["extraordinary"],
        &["extraordinary"],
        &["extraordinarily"],
        &["extraordinarily"],
        &["extraordinary"],
        &["extraordinary"],
        &["extraordinarily"],
        &["extraordinary"],
        &["extraordinary"],
        &["extraordinarily"],
        &["extraordinary"],
        &["extraordinary"],
        &["extrapolate"],
        &["extrapolate"],
        &["extrapolate"],
        &["extrapolate"],
        &["extrapolate"],
        &["extrapolate"],
        &["extrapolate"],
        &["extrapolate"],
        &["extrapolate"],
        &["extraterrestrial"],
        &["extraterrestrials"],
        &["extravagant"],
        &["extravagant"],
        &["extravagant"],
        &["extravagant"],
        &["extravagant"],
    ],
    range: 3..=11,
};

static WORD_EXTO_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_EXTO_CHILDREN),
    value: None,
};

pub static WORD_EXTO_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ics"),
        dictgen::InsensitiveStr::Ascii("rtin"),
    ],
    values: &[&["exotics"], &["extortion"]],
    range: 3..=4,
};

static WORD_EXTI_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_EXTI_CHILDREN),
    value: None,
};

pub static WORD_EXTI_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("nt")],
    values: &[&["extinct"]],
    range: 2..=2,
};

static WORD_EXTE_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_EXTE_CHILDREN),
    value: None,
};

pub static WORD_EXTE_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("mely"),
        dictgen::InsensitiveStr::Ascii("ndes"),
        dictgen::InsensitiveStr::Ascii("ndos"),
        dictgen::InsensitiveStr::Ascii("nion"),
        dictgen::InsensitiveStr::Ascii("nsie"),
        dictgen::InsensitiveStr::Ascii("nsiones"),
        dictgen::InsensitiveStr::Ascii("nsis"),
        dictgen::InsensitiveStr::Ascii("nsivelly"),
        dictgen::InsensitiveStr::Ascii("nsivley"),
        dictgen::InsensitiveStr::Ascii("nsivly"),
        dictgen::InsensitiveStr::Ascii("ntion"),
        dictgen::InsensitiveStr::Ascii("ntions"),
        dictgen::InsensitiveStr::Ascii("red"),
        dictgen::InsensitiveStr::Ascii("rioara"),
        dictgen::InsensitiveStr::Ascii("rioare"),
        dictgen::InsensitiveStr::Ascii("riour"),
        dictgen::InsensitiveStr::Ascii("rmally"),
        dictgen::InsensitiveStr::Ascii("rme"),
        dictgen::InsensitiveStr::Ascii("rmely"),
        dictgen::InsensitiveStr::Ascii("rmism"),
        dictgen::InsensitiveStr::Ascii("rmist"),
        dictgen::InsensitiveStr::Ascii("rmists"),
        dictgen::InsensitiveStr::Ascii("rnaly"),
    ],
    values: &[
        &["extremely"],
        &["extends"],
        &["extends"],
        &["extension"],
        &["extensive"],
        &["extensions"],
        &["extensions"],
        &["extensively"],
        &["extensively"],
        &["extensively"],
        &["extension"],
        &["extensions"],
        &["exerted"],
        &["exterior"],
        &["exterior"],
        &["exterior"],
        &["externally"],
        &["extreme"],
        &["extremely"],
        &["extremism"],
        &["extremist"],
        &["extremists"],
        &["externally"],
    ],
    range: 3..=8,
};

static WORD_EXTA_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_EXTA_CHILDREN),
    value: None,
};

pub static WORD_EXTA_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("ctly")],
    values: &[&["exactly"]],
    range: 4..=4,
};

static WORD_EXS_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_EXS_CHILDREN),
    value: None,
};

pub static WORD_EXS_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("itance"),
        dictgen::InsensitiveStr::Ascii("ited"),
        dictgen::InsensitiveStr::Ascii("itent"),
        dictgen::InsensitiveStr::Ascii("iting"),
    ],
    values: &[&["existance"], &["existed"], &["existent"], &["existing"]],
    range: 4..=6,
};

static WORD_EXR_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_EXR_CHILDREN),
    value: None,
};

pub static WORD_EXR_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("essed")],
    values: &[&["expressed"]],
    range: 5..=5,
};

static WORD_EXP_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_EXP_CHILDREN),
    value: None,
};

static WORD_EXP_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    Some(&WORD_EXPA_NODE),
    None,
    None,
    None,
    Some(&WORD_EXPE_NODE),
    None,
    None,
    None,
    Some(&WORD_EXPI_NODE),
    None,
    None,
    Some(&WORD_EXPL_NODE),
    None,
    None,
    Some(&WORD_EXPO_NODE),
    None,
    None,
    Some(&WORD_EXPR_NODE),
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
];

static WORD_EXPR_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_EXPR_CHILDREN),
    value: None,
};

pub static WORD_EXPR_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ensive"),
        dictgen::InsensitiveStr::Ascii("esions"),
        dictgen::InsensitiveStr::Ascii("esison"),
        dictgen::InsensitiveStr::Ascii("esscoin"),
        dictgen::InsensitiveStr::Ascii("esse"),
        dictgen::InsensitiveStr::Ascii("essens"),
        dictgen::InsensitiveStr::Ascii("essie"),
        dictgen::InsensitiveStr::Ascii("essief"),
        dictgen::InsensitiveStr::Ascii("essin"),
        dictgen::InsensitiveStr::Ascii("essivos"),
        dictgen::InsensitiveStr::Ascii("essley"),
        dictgen::InsensitiveStr::Ascii("esss"),
        dictgen::InsensitiveStr::Ascii("esssive"),
        dictgen::InsensitiveStr::Ascii("essview"),
        dictgen::InsensitiveStr::Ascii("essy"),
        dictgen::InsensitiveStr::Ascii("iation"),
        dictgen::InsensitiveStr::Ascii("ies"),
        dictgen::InsensitiveStr::Ascii("imental"),
        dictgen::InsensitiveStr::Ascii("opiated"),
        dictgen::InsensitiveStr::Ascii("opiation"),
    ],
    values: &[
        &["expressive"],
        &["expression"],
        &["expressions"],
        &["expression"],
        &["expressive"],
        &["expresses"],
        &["expressive"],
        &["expressive"],
        &["expression"],
        &["expressions"],
        &["expressly"],
        &["expresses"],
        &["expressive"],
        &["expressive"],
        &["expressly"],
        &["expiration"],
        &["expires"],
        &["experimental"],
        &["expropriated"],
        &["expropriation"],
    ],
    range: 3..=8,
};

static WORD_EXPO_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_EXPO_CHILDREN),
    value: None,
};

pub static WORD_EXPO_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ch"),
        dictgen::InsensitiveStr::Ascii("dential"),
        dictgen::InsensitiveStr::Ascii("dentially"),
        dictgen::InsensitiveStr::Ascii("dition"),
        dictgen::InsensitiveStr::Ascii("lde"),
        dictgen::InsensitiveStr::Ascii("ldes"),
        dictgen::InsensitiveStr::Ascii("lding"),
        dictgen::InsensitiveStr::Ascii("lit"),
        dictgen::InsensitiveStr::Ascii("litation"),
        dictgen::InsensitiveStr::Ascii("litative"),
        dictgen::InsensitiveStr::Ascii("lited"),
        dictgen::InsensitiveStr::Ascii("liting"),
        dictgen::InsensitiveStr::Ascii("lits"),
        dictgen::InsensitiveStr::Ascii("lsion"),
        dictgen::InsensitiveStr::Ascii("lsions"),
        dictgen::InsensitiveStr::Ascii("lsive"),
        dictgen::InsensitiveStr::Ascii("lsives"),
        dictgen::InsensitiveStr::Ascii("nantial"),
        dictgen::InsensitiveStr::Ascii("nantially"),
        dictgen::InsensitiveStr::Ascii("nencial"),
        dictgen::InsensitiveStr::Ascii("nencially"),
        dictgen::InsensitiveStr::Ascii("nental"),
        dictgen::InsensitiveStr::Ascii("nentialy"),
        dictgen::InsensitiveStr::Ascii("nentiel"),
        dictgen::InsensitiveStr::Ascii("nentiella"),
        dictgen::InsensitiveStr::Ascii("rtas"),
        dictgen::InsensitiveStr::Ascii("rtes"),
        dictgen::InsensitiveStr::Ascii("rtfs"),
        dictgen::InsensitiveStr::Ascii("sees"),
        dictgen::InsensitiveStr::Ascii("sicion"),
        dictgen::InsensitiveStr::Ascii("sitivo"),
        dictgen::InsensitiveStr::Ascii("sito"),
        dictgen::InsensitiveStr::Ascii("sse"),
        dictgen::InsensitiveStr::Ascii("tition"),
    ],
    values: &[
        &["epoch"],
        &["exponential"],
        &["exponentially"],
        &["exposition"],
        &["explode"],
        &["explodes"],
        &["exploding"],
        &["exploit"],
        &["exploitation"],
        &["exploitative"],
        &["exploited"],
        &["exploiting"],
        &["exploits"],
        &["explosion"],
        &["explosions"],
        &["explosive"],
        &["explosives"],
        &["exponential"],
        &["exponentially"],
        &["exponential"],
        &["exponentially"],
        &["exponential"],
        &["exponentially"],
        &["exponential"],
        &["exponential"],
        &["exports"],
        &["exports"],
        &["exports"],
        &["exposes"],
        &["exposition"],
        &["exposition"],
        &["exposition"],
        &["exposes"],
        &["exposition"],
    ],
    range: 2..=9,
};

static WORD_EXPL_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_EXPL_CHILDREN),
    value: None,
};

static WORD_EXPL_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    Some(&WORD_EXPLA_NODE),
    None,
    None,
    None,
    Some(&WORD_EXPLE_NODE),
    None,
    None,
    None,
    Some(&WORD_EXPLI_NODE),
    None,
    None,
    None,
    None,
    None,
    Some(&WORD_EXPLO_NODE),
    None,
    None,
    None,
    None,
    None,
    Some(&WORD_EXPLU_NODE),
    None,
    None,
    None,
    None,
    None,
];

static WORD_EXPLU_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_EXPLU_CHILDREN),
    value: None,
};

pub static WORD_EXPLU_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("sions")],
    values: &[&["explosions"]],
    range: 5..=5,
};

static WORD_EXPLO_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_EXPLO_CHILDREN),
    value: None,
};

pub static WORD_EXPLO_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("deds"),
        dictgen::InsensitiveStr::Ascii("die"),
        dictgen::InsensitiveStr::Ascii("ds"),
        dictgen::InsensitiveStr::Ascii("iding"),
        dictgen::InsensitiveStr::Ascii("int"),
        dictgen::InsensitiveStr::Ascii("itaion"),
        dictgen::InsensitiveStr::Ascii("itaiton"),
        dictgen::InsensitiveStr::Ascii("itatie"),
        dictgen::InsensitiveStr::Ascii("itating"),
        dictgen::InsensitiveStr::Ascii("ites"),
        dictgen::InsensitiveStr::Ascii("ition"),
        dictgen::InsensitiveStr::Ascii("ititive"),
        dictgen::InsensitiveStr::Ascii("nation"),
        dictgen::InsensitiveStr::Ascii("racion"),
        dictgen::InsensitiveStr::Ascii("rare"),
        dictgen::InsensitiveStr::Ascii("rarea"),
        dictgen::InsensitiveStr::Ascii("rating"),
        dictgen::InsensitiveStr::Ascii("rerers"),
        dictgen::InsensitiveStr::Ascii("reres"),
        dictgen::InsensitiveStr::Ascii("rtation"),
        dictgen::InsensitiveStr::Ascii("se"),
        dictgen::InsensitiveStr::Ascii("sie"),
        dictgen::InsensitiveStr::Ascii("sin"),
        dictgen::InsensitiveStr::Ascii("siones"),
        dictgen::InsensitiveStr::Ascii("sivas"),
        dictgen::InsensitiveStr::Ascii("ssion"),
        dictgen::InsensitiveStr::Ascii("ssive"),
        dictgen::InsensitiveStr::Ascii("svies"),
        dictgen::InsensitiveStr::Ascii("tacion"),
        dictgen::InsensitiveStr::Ascii("ted"),
        dictgen::InsensitiveStr::Ascii("tiation"),
        dictgen::InsensitiveStr::Ascii("tiative"),
        dictgen::InsensitiveStr::Ascii("tied"),
        dictgen::InsensitiveStr::Ascii("tions"),
    ],
    values: &[
        &["explodes"],
        &["explode"],
        &["explodes"],
        &["exploiting"],
        &["exploit"],
        &["exploitation"],
        &["exploitation"],
        &["exploitative"],
        &["exploitation"],
        &["exploits"],
        &["exploiting"],
        &["exploitative"],
        &["exploration"],
        &["exploration"],
        &["explorer"],
        &["explorer"],
        &["exploration"],
        &["explorers"],
        &["explorers"],
        &["exploitation"],
        &["explodes"],
        &["explosive"],
        &["explosions"],
        &["explosions"],
        &["explosives"],
        &["explosions"],
        &["explosives"],
        &["explosives"],
        &["exploration"],
        &["explode"],
        &["exploitation"],
        &["exploitative"],
        &["exploited"],
        &["explosions"],
    ],
    range: 2..=7,
};

static WORD_EXPLI_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_EXPLI_CHILDREN),
    value: None,
};

pub static WORD_EXPLI_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("catia"),
        dictgen::InsensitiveStr::Ascii("catie"),
        dictgen::InsensitiveStr::Ascii("catif"),
        dictgen::InsensitiveStr::Ascii("catii"),
        dictgen::InsensitiveStr::Ascii("cetly"),
        dictgen::InsensitiveStr::Ascii("ciet"),
        dictgen::InsensitiveStr::Ascii("cilty"),
        dictgen::InsensitiveStr::Ascii("citely"),
        dictgen::InsensitiveStr::Ascii("citily"),
        dictgen::InsensitiveStr::Ascii("city"),
        dictgen::InsensitiveStr::Ascii("ct"),
        dictgen::InsensitiveStr::Ascii("ctly"),
        dictgen::InsensitiveStr::Ascii("nation"),
        dictgen::InsensitiveStr::Ascii("natory"),
        dictgen::InsensitiveStr::Ascii("ot"),
        dictgen::InsensitiveStr::Ascii("otation"),
        dictgen::InsensitiveStr::Ascii("oted"),
        dictgen::InsensitiveStr::Ascii("oting"),
        dictgen::InsensitiveStr::Ascii("ots"),
    ],
    values: &[
        &["explicit"],
        &["explicit"],
        &["explicit"],
        &["explicit"],
        &["explicitly"],
        &["explicit"],
        &["explicitly"],
        &["explicitly"],
        &["explicitly"],
        &["explicitly"],
        &["explicit"],
        &["explicitly"],
        &["explanation"],
        &["explanatory"],
        &["exploit"],
        &["exploitation"],
        &["exploited"],
        &["exploiting"],
        &["exploits"],
    ],
    range: 2..=7,
};

static WORD_EXPLE_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_EXPLE_CHILDREN),
    value: None,
};

pub static WORD_EXPLE_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("nation"),
        dictgen::InsensitiveStr::Ascii("nations"),
        dictgen::InsensitiveStr::Ascii("natory"),
    ],
    values: &[&["explanation"], &["explanations"], &["explanatory"]],
    range: 6..=7,
};

static WORD_EXPLA_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_EXPLA_CHILDREN),
    value: None,
};

pub static WORD_EXPLA_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ination"),
        dictgen::InsensitiveStr::Ascii("ind"),
        dictgen::InsensitiveStr::Ascii("ines"),
        dictgen::InsensitiveStr::Ascii("ing"),
        dictgen::InsensitiveStr::Ascii("inging"),
        dictgen::InsensitiveStr::Ascii("inig"),
        dictgen::InsensitiveStr::Ascii("intory"),
        dictgen::InsensitiveStr::Ascii("naiton"),
        dictgen::InsensitiveStr::Ascii("natin"),
        dictgen::InsensitiveStr::Ascii("netary"),
        dictgen::InsensitiveStr::Ascii("netory"),
        dictgen::InsensitiveStr::Ascii("ning"),
        dictgen::InsensitiveStr::Ascii("nitary"),
        dictgen::InsensitiveStr::Ascii("notory"),
    ],
    values: &[
        &["explanation"],
        &["explained"],
        &["explains"],
        &["explaining"],
        &["explaining"],
        &["explaining"],
        &["explanatory"],
        &["explanations"],
        &["explanations"],
        &["explanatory"],
        &["explanatory"],
        &["explaining"],
        &["explanatory"],
        &["explanatory"],
    ],
    range: 3..=7,
};

static WORD_EXPI_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_EXPI_CHILDREN),
    value: None,
};

pub static WORD_EXPI_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("dentures"),
        dictgen::InsensitiveStr::Ascii("detion"),
        dictgen::InsensitiveStr::Ascii("ditions"),
        dictgen::InsensitiveStr::Ascii("erence"),
        dictgen::InsensitiveStr::Ascii("erenced"),
        dictgen::InsensitiveStr::Ascii("erences"),
        dictgen::InsensitiveStr::Ascii("erencing"),
        dictgen::InsensitiveStr::Ascii("ers"),
        dictgen::InsensitiveStr::Ascii("nation"),
        dictgen::InsensitiveStr::Ascii("reds"),
        dictgen::InsensitiveStr::Ascii("rement"),
        dictgen::InsensitiveStr::Ascii("remental"),
        dictgen::InsensitiveStr::Ascii("rementation"),
        dictgen::InsensitiveStr::Ascii("remented"),
        dictgen::InsensitiveStr::Ascii("rementing"),
        dictgen::InsensitiveStr::Ascii("rements"),
    ],
    values: &[
        &["expenditures"],
        &["expedition"],
        &["expeditions"],
        &["experience"],
        &["experienced"],
        &["experiences"],
        &["experiencing"],
        &["expires"],
        &["expiration"],
        &["expires"],
        &["experiment"],
        &["experimental"],
        &["experimentation"],
        &["experimented"],
        &["experimenting"],
        &["experiments"],
    ],
    range: 3..=11,
};

static WORD_EXPE_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_EXPE_CHILDREN),
    value: None,
};

static WORD_EXPE_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    None,
    None,
    Some(&WORD_EXPEC_NODE),
    Some(&WORD_EXPED_NODE),
    None,
    None,
    None,
    None,
    Some(&WORD_EXPEI_NODE),
    None,
    None,
    Some(&WORD_EXPEL_NODE),
    Some(&WORD_EXPEM_NODE),
    Some(&WORD_EXPEN_NODE),
    None,
    None,
    None,
    Some(&WORD_EXPER_NODE),
    None,
    None,
    None,
    None,
    None,
    Some(&WORD_EXPEX_NODE),
    None,
    None,
];

static WORD_EXPEX_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_EXPEX_CHILDREN),
    value: None,
};

pub static WORD_EXPEX_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("tancy")],
    values: &[&["expectancy"]],
    range: 5..=5,
};

static WORD_EXPER_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_EXPER_CHILDREN),
    value: None,
};

pub static WORD_EXPER_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("amental"),
        dictgen::InsensitiveStr::Ascii("eince"),
        dictgen::InsensitiveStr::Ascii("einced"),
        dictgen::InsensitiveStr::Ascii("einces"),
        dictgen::InsensitiveStr::Ascii("eincing"),
        dictgen::InsensitiveStr::Ascii("ement"),
        dictgen::InsensitiveStr::Ascii("emental"),
        dictgen::InsensitiveStr::Ascii("ementation"),
        dictgen::InsensitiveStr::Ascii("ementing"),
        dictgen::InsensitiveStr::Ascii("ements"),
        dictgen::InsensitiveStr::Ascii("iance"),
        dictgen::InsensitiveStr::Ascii("ianced"),
        dictgen::InsensitiveStr::Ascii("iances"),
        dictgen::InsensitiveStr::Ascii("iancing"),
        dictgen::InsensitiveStr::Ascii("ieced"),
        dictgen::InsensitiveStr::Ascii("ieces"),
        dictgen::InsensitiveStr::Ascii("iemnt"),
        dictgen::InsensitiveStr::Ascii("iemntal"),
        dictgen::InsensitiveStr::Ascii("iemnted"),
        dictgen::InsensitiveStr::Ascii("iemnts"),
        dictgen::InsensitiveStr::Ascii("ienceing"),
        dictgen::InsensitiveStr::Ascii("iened"),
        dictgen::InsensitiveStr::Ascii("iening"),
        dictgen::InsensitiveStr::Ascii("iense"),
        dictgen::InsensitiveStr::Ascii("imantal"),
        dictgen::InsensitiveStr::Ascii("imantation"),
        dictgen::InsensitiveStr::Ascii("imentacion"),
        dictgen::InsensitiveStr::Ascii("imentaion"),
        dictgen::InsensitiveStr::Ascii("imentais"),
        dictgen::InsensitiveStr::Ascii("imentan"),
        dictgen::InsensitiveStr::Ascii("imentating"),
        dictgen::InsensitiveStr::Ascii("imentella"),
        dictgen::InsensitiveStr::Ascii("imenterade"),
        dictgen::InsensitiveStr::Ascii("imentes"),
        dictgen::InsensitiveStr::Ascii("imention"),
        dictgen::InsensitiveStr::Ascii("imentle"),
        dictgen::InsensitiveStr::Ascii("imentors"),
        dictgen::InsensitiveStr::Ascii("imentos"),
        dictgen::InsensitiveStr::Ascii("imentul"),
        dictgen::InsensitiveStr::Ascii("imet"),
        dictgen::InsensitiveStr::Ascii("imetal"),
        dictgen::InsensitiveStr::Ascii("imeted"),
        dictgen::InsensitiveStr::Ascii("imintation"),
        dictgen::InsensitiveStr::Ascii("mient"),
        dictgen::InsensitiveStr::Ascii("ssion"),
        dictgen::InsensitiveStr::Ascii("ssions"),
        dictgen::InsensitiveStr::Ascii("tas"),
        dictgen::InsensitiveStr::Ascii("tis"),
        dictgen::InsensitiveStr::Ascii("tos"),
    ],
    values: &[
        &["experimental"],
        &["experience"],
        &["experienced"],
        &["experiences"],
        &["experiencing"],
        &["experiment"],
        &["experimental"],
        &["experimentation"],
        &["experimenting"],
        &["experiments"],
        &["experience"],
        &["experienced"],
        &["experiences"],
        &["experiencing"],
        &["experienced"],
        &["experiences"],
        &["experiment"],
        &["experimental"],
        &["experimented"],
        &["experiments"],
        &["experiencing"],
        &["experienced"],
        &["experiencing"],
        &["experiences"],
        &["experimental"],
        &["experimentation"],
        &["experimentation"],
        &["experimentation"],
        &["experiments"],
        &["experimentation"],
        &["experimentation"],
        &["experimental"],
        &["experimented"],
        &["experiments"],
        &["experimenting"],
        &["experimented"],
        &["experiments"],
        &["experiments"],
        &["experimental"],
        &["experiments"],
        &["experimental"],
        &["experimented"],
        &["experimentation"],
        &["experiments"],
        &["expression"],
        &["expressions"],
        &["experts"],
        &["experts"],
        &["experts"],
    ],
    range: 3..=10,
};

static WORD_EXPEN_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_EXPEN_CHILDREN),
    value: None,
};

pub static WORD_EXPEN_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ces"),
        dictgen::InsensitiveStr::Ascii("dature"),
        dictgen::InsensitiveStr::Ascii("datures"),
        dictgen::InsensitiveStr::Ascii("deble"),
        dictgen::InsensitiveStr::Ascii("deture"),
        dictgen::InsensitiveStr::Ascii("detures"),
        dictgen::InsensitiveStr::Ascii("dible"),
        dictgen::InsensitiveStr::Ascii("sable"),
        dictgen::InsensitiveStr::Ascii("sie"),
        dictgen::InsensitiveStr::Ascii("sve"),
        dictgen::InsensitiveStr::Ascii("tancy"),
        dictgen::InsensitiveStr::Ascii("titure"),
        dictgen::InsensitiveStr::Ascii("titures"),
    ],
    values: &[
        &["expense"],
        &["expenditure"],
        &["expenditures"],
        &["expendable"],
        &["expenditure"],
        &["expenditures"],
        &["expendable"],
        &["expendable"],
        &["expense"],
        &["expense"],
        &["expectancy"],
        &["expenditure"],
        &["expenditures"],
    ],
    range: 3..=7,
};

static WORD_EXPEM_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_EXPEM_CHILDREN),
    value: None,
};

pub static WORD_EXPEM_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("tion"),
        dictgen::InsensitiveStr::Ascii("tions"),
    ],
    values: &[&["exemption"], &["exemptions"]],
    range: 4..=5,
};

static WORD_EXPEL_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_EXPEL_CHILDREN),
    value: None,
};

pub static WORD_EXPEL_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("l"),
        dictgen::InsensitiveStr::Ascii("ls"),
    ],
    values: &[&["expel"], &["expels"]],
    range: 1..=2,
};

static WORD_EXPEI_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_EXPEI_CHILDREN),
    value: None,
};

pub static WORD_EXPEI_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("ments")],
    values: &[&["experiments"]],
    range: 5..=5,
};

static WORD_EXPED_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_EXPED_CHILDREN),
    value: None,
};

pub static WORD_EXPED_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("etion"),
        dictgen::InsensitiveStr::Ascii("icion"),
        dictgen::InsensitiveStr::Ascii("itivo"),
        dictgen::InsensitiveStr::Ascii("ito"),
        dictgen::InsensitiveStr::Ascii("itonary"),
    ],
    values: &[
        &["expedition"],
        &["expedition"],
        &["expedition"],
        &["expedition"],
        &["expeditionary"],
    ],
    range: 3..=7,
};

static WORD_EXPEC_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_EXPEC_CHILDREN),
    value: None,
};

pub static WORD_EXPEC_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ed"),
        dictgen::InsensitiveStr::Ascii("ially"),
        dictgen::InsensitiveStr::Ascii("taion"),
        dictgen::InsensitiveStr::Ascii("tansy"),
        dictgen::InsensitiveStr::Ascii("tantcy"),
        dictgen::InsensitiveStr::Ascii("tany"),
        dictgen::InsensitiveStr::Ascii("tating"),
        dictgen::InsensitiveStr::Ascii("tency"),
        dictgen::InsensitiveStr::Ascii("tes"),
        dictgen::InsensitiveStr::Ascii("tion"),
        dictgen::InsensitiveStr::Ascii("tional"),
        dictgen::InsensitiveStr::Ascii("tionally"),
        dictgen::InsensitiveStr::Ascii("tions"),
        dictgen::InsensitiveStr::Ascii("tus"),
    ],
    values: &[
        &["expected"],
        &["especially"],
        &["expectation"],
        &["expectancy"],
        &["expectancy"],
        &["expectancy"],
        &["expectation"],
        &["expectancy"],
        &["expects"],
        &["exception"],
        &["exceptional"],
        &["exceptionally"],
        &["exceptions"],
        &["expects"],
    ],
    range: 2..=8,
};

static WORD_EXPA_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_EXPA_CHILDREN),
    value: None,
};

pub static WORD_EXPA_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("lin"),
        dictgen::InsensitiveStr::Ascii("lined"),
        dictgen::InsensitiveStr::Ascii("lining"),
        dictgen::InsensitiveStr::Ascii("lins"),
        dictgen::InsensitiveStr::Ascii("ndas"),
        dictgen::InsensitiveStr::Ascii("ndes"),
        dictgen::InsensitiveStr::Ascii("nisons"),
        dictgen::InsensitiveStr::Ascii("nisve"),
        dictgen::InsensitiveStr::Ascii("nsie"),
        dictgen::InsensitiveStr::Ascii("nsiones"),
        dictgen::InsensitiveStr::Ascii("nsivos"),
        dictgen::InsensitiveStr::Ascii("nssion"),
        dictgen::InsensitiveStr::Ascii("ntions"),
        dictgen::InsensitiveStr::Ascii("triot"),
    ],
    values: &[
        &["explain"],
        &["explained"],
        &["explaining"],
        &["explains"],
        &["expands"],
        &["expands"],
        &["expansions"],
        &["expansive"],
        &["expansive"],
        &["expansions"],
        &["expansions"],
        &["expansions"],
        &["expansions"],
        &["expatriate"],
    ],
    range: 3..=7,
};

static WORD_EXO_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_EXO_CHILDREN),
    value: None,
};

pub static WORD_EXO_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("itcs"),
        dictgen::InsensitiveStr::Ascii("norate"),
        dictgen::InsensitiveStr::Ascii("rbatant"),
        dictgen::InsensitiveStr::Ascii("rbatent"),
        dictgen::InsensitiveStr::Ascii("rbidant"),
        dictgen::InsensitiveStr::Ascii("rbirant"),
        dictgen::InsensitiveStr::Ascii("rbitent"),
        dictgen::InsensitiveStr::Ascii("skelaton"),
        dictgen::InsensitiveStr::Ascii("ticas"),
        dictgen::InsensitiveStr::Ascii("ticos"),
    ],
    values: &[
        &["exotics"],
        &["exonerate"],
        &["exorbitant"],
        &["exorbitant"],
        &["exorbitant"],
        &["exorbitant"],
        &["exorbitant"],
        &["exoskeleton"],
        &["exotics"],
        &["exotics"],
    ],
    range: 4..=8,
};

static WORD_EXM_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_EXM_CHILDREN),
    value: None,
};

pub static WORD_EXM_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("aple")],
    values: &[&["example"]],
    range: 4..=4,
};

static WORD_EXL_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_EXL_CHILDREN),
    value: None,
};

pub static WORD_EXL_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ated"),
        dictgen::InsensitiveStr::Ascii("camation"),
        dictgen::InsensitiveStr::Ascii("cude"),
        dictgen::InsensitiveStr::Ascii("cuded"),
        dictgen::InsensitiveStr::Ascii("cudes"),
        dictgen::InsensitiveStr::Ascii("cuding"),
        dictgen::InsensitiveStr::Ascii("cusion"),
        dictgen::InsensitiveStr::Ascii("cusive"),
        dictgen::InsensitiveStr::Ascii("cusively"),
        dictgen::InsensitiveStr::Ascii("cusives"),
        dictgen::InsensitiveStr::Ascii("cusivity"),
        dictgen::InsensitiveStr::Ascii("iled"),
        dictgen::InsensitiveStr::Ascii("poding"),
        dictgen::InsensitiveStr::Ascii("porer"),
        dictgen::InsensitiveStr::Ascii("porers"),
        dictgen::InsensitiveStr::Ascii("posion"),
        dictgen::InsensitiveStr::Ascii("udes"),
    ],
    values: &[
        &["exalted"],
        &["exclamation"],
        &["exclude"],
        &["excluded"],
        &["excludes"],
        &["excluding"],
        &["exclusion"],
        &["exclusive"],
        &["exclusively"],
        &["exclusives"],
        &["exclusivity"],
        &["exiled"],
        &["exploding"],
        &["explorer"],
        &["explorers"],
        &["explosion"],
        &["excludes"],
    ],
    range: 4..=8,
};

static WORD_EXI_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_EXI_CHILDREN),
    value: None,
};

pub static WORD_EXI_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("bition"),
        dictgen::InsensitiveStr::Ascii("bitions"),
        dictgen::InsensitiveStr::Ascii("ctement"),
        dictgen::InsensitiveStr::Ascii("cting"),
        dictgen::InsensitiveStr::Ascii("nct"),
        dictgen::InsensitiveStr::Ascii("pration"),
        dictgen::InsensitiveStr::Ascii("sing"),
        dictgen::InsensitiveStr::Ascii("sitng"),
        dictgen::InsensitiveStr::Ascii("stance"),
        dictgen::InsensitiveStr::Ascii("stane"),
        dictgen::InsensitiveStr::Ascii("stant"),
        dictgen::InsensitiveStr::Ascii("stantes"),
        dictgen::InsensitiveStr::Ascii("stantial"),
        dictgen::InsensitiveStr::Ascii("stencial"),
        dictgen::InsensitiveStr::Ascii("stend"),
        dictgen::InsensitiveStr::Ascii("stenial"),
        dictgen::InsensitiveStr::Ascii("stensial"),
        dictgen::InsensitiveStr::Ascii("stenta"),
        dictgen::InsensitiveStr::Ascii("stental"),
        dictgen::InsensitiveStr::Ascii("stentiel"),
        dictgen::InsensitiveStr::Ascii("stentiella"),
        dictgen::InsensitiveStr::Ascii("stet"),
        dictgen::InsensitiveStr::Ascii("stince"),
        dictgen::InsensitiveStr::Ascii("stnace"),
    ],
    values: &[
        &["exhibition"],
        &["exhibitions"],
        &["excitement"],
        &["exciting"],
        &["extinct"],
        &["expiration"],
        &["existing"],
        &["existing"],
        &["existence"],
        &["existance"],
        &["existent"],
        &["existent"],
        &["existential"],
        &["existential"],
        &["existed"],
        &["existential"],
        &["existential"],
        &["existential"],
        &["existential"],
        &["existential"],
        &["existential"],
        &["existent"],
        &["existence"],
        &["existance"],
    ],
    range: 3..=10,
};

static WORD_EXH_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_EXH_CHILDREN),
    value: None,
};

pub static WORD_EXH_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("alted"),
        dictgen::InsensitiveStr::Ascii("asut"),
        dictgen::InsensitiveStr::Ascii("asuted"),
        dictgen::InsensitiveStr::Ascii("asuting"),
        dictgen::InsensitiveStr::Ascii("asution"),
        dictgen::InsensitiveStr::Ascii("austin"),
        dictgen::InsensitiveStr::Ascii("austivo"),
        dictgen::InsensitiveStr::Ascii("austn"),
        dictgen::InsensitiveStr::Ascii("austo"),
        dictgen::InsensitiveStr::Ascii("ibicion"),
        dictgen::InsensitiveStr::Ascii("ibites"),
        dictgen::InsensitiveStr::Ascii("ibitin"),
        dictgen::InsensitiveStr::Ascii("ibitons"),
        dictgen::InsensitiveStr::Ascii("ibtion"),
        dictgen::InsensitiveStr::Ascii("uast"),
        dictgen::InsensitiveStr::Ascii("uasted"),
        dictgen::InsensitiveStr::Ascii("uasting"),
        dictgen::InsensitiveStr::Ascii("uastion"),
    ],
    values: &[
        &["exalted"],
        &["exhaust"],
        &["exhausted"],
        &["exhausting"],
        &["exhaustion"],
        &["exhaustion"],
        &["exhaustion"],
        &["exhaustion"],
        &["exhaustion"],
        &["exhibition"],
        &["exhibits"],
        &["exhibition"],
        &["exhibits"],
        &["exhibition"],
        &["exhaust"],
        &["exhausted"],
        &["exhausting"],
        &["exhaustion"],
    ],
    range: 4..=7,
};

static WORD_EXE_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_EXE_CHILDREN),
    value: None,
};

static WORD_EXE_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    None,
    None,
    Some(&WORD_EXEC_NODE),
    None,
    Some(&WORD_EXEE_NODE),
    None,
    Some(&WORD_EXEG_NODE),
    None,
    None,
    None,
    None,
    Some(&WORD_EXEL_NODE),
    Some(&WORD_EXEM_NODE),
    None,
    None,
    Some(&WORD_EXEP_NODE),
    None,
    Some(&WORD_EXER_NODE),
    None,
    None,
    Some(&WORD_EXEU_NODE),
    None,
    None,
    None,
    None,
    None,
];

static WORD_EXEU_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_EXEU_CHILDREN),
    value: None,
};

pub static WORD_EXEU_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ctioner"),
        dictgen::InsensitiveStr::Ascii("ctions"),
    ],
    values: &[&["executioner"], &["executions"]],
    range: 6..=7,
};

static WORD_EXER_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_EXER_CHILDREN),
    value: None,
};

pub static WORD_EXER_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("bate"),
        dictgen::InsensitiveStr::Ascii("bated"),
        dictgen::InsensitiveStr::Ascii("cices"),
        dictgen::InsensitiveStr::Ascii("cicing"),
        dictgen::InsensitiveStr::Ascii("cide"),
        dictgen::InsensitiveStr::Ascii("cies"),
        dictgen::InsensitiveStr::Ascii("ciese"),
        dictgen::InsensitiveStr::Ascii("ciseing"),
        dictgen::InsensitiveStr::Ascii("cizes"),
        dictgen::InsensitiveStr::Ascii("cizing"),
        dictgen::InsensitiveStr::Ascii("pt"),
        dictgen::InsensitiveStr::Ascii("pts"),
        dictgen::InsensitiveStr::Ascii("sice"),
        dictgen::InsensitiveStr::Ascii("sices"),
        dictgen::InsensitiveStr::Ascii("sicing"),
        dictgen::InsensitiveStr::Ascii("sising"),
        dictgen::InsensitiveStr::Ascii("size"),
        dictgen::InsensitiveStr::Ascii("sizing"),
        dictgen::InsensitiveStr::Ascii("ternal"),
    ],
    values: &[
        &["exacerbate"],
        &["exacerbated"],
        &["exercise"],
        &["exercising"],
        &["exercised"],
        &["exercise"],
        &["exercises"],
        &["exercising"],
        &["exercise"],
        &["exercising"],
        &["excerpt"],
        &["excerpts"],
        &["exercise"],
        &["exercises"],
        &["exercising"],
        &["exercising"],
        &["exercise"],
        &["exercising"],
        &["external"],
    ],
    range: 2..=7,
};

static WORD_EXEP_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_EXEP_CHILDREN),
    value: None,
};

pub static WORD_EXEP_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("mtion"),
        dictgen::InsensitiveStr::Ascii("mtions"),
        dictgen::InsensitiveStr::Ascii("t"),
        dictgen::InsensitiveStr::Ascii("tional"),
    ],
    values: &[
        &["exemption"],
        &["exemptions"],
        &["except"],
        &["exceptional"],
    ],
    range: 1..=6,
};

static WORD_EXEM_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_EXEM_CHILDREN),
    value: None,
};

pub static WORD_EXEM_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("ple")],
    values: &[&["example"]],
    range: 3..=3,
};

static WORD_EXEL_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_EXEL_CHILDREN),
    value: None,
};

pub static WORD_EXEL_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ent"),
        dictgen::InsensitiveStr::Ascii("lent"),
    ],
    values: &[&["excellent"], &["excellent"]],
    range: 3..=4,
};

static WORD_EXEG_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_EXEG_CHILDREN),
    value: None,
};

pub static WORD_EXEG_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("gerating"),
        dictgen::InsensitiveStr::Ascii("geration"),
    ],
    values: &[&["exaggerating"], &["exaggeration"]],
    range: 8..=8,
};

static WORD_EXEE_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_EXEE_CHILDREN),
    value: None,
};

pub static WORD_EXEE_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("dingly")],
    values: &[&["exceedingly"]],
    range: 6..=6,
};

static WORD_EXEC_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_EXEC_CHILDREN),
    value: None,
};

pub static WORD_EXEC_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ising"),
        dictgen::InsensitiveStr::Ascii("itioner"),
        dictgen::InsensitiveStr::Ascii("ption"),
        dictgen::InsensitiveStr::Ascii("ptional"),
        dictgen::InsensitiveStr::Ascii("ptions"),
        dictgen::InsensitiveStr::Ascii("tion"),
        dictgen::InsensitiveStr::Ascii("tuable"),
        dictgen::InsensitiveStr::Ascii("tuables"),
        dictgen::InsensitiveStr::Ascii("tued"),
        dictgen::InsensitiveStr::Ascii("tuing"),
        dictgen::InsensitiveStr::Ascii("tuion"),
        dictgen::InsensitiveStr::Ascii("tuioner"),
        dictgen::InsensitiveStr::Ascii("tuioners"),
        dictgen::InsensitiveStr::Ascii("tuions"),
        dictgen::InsensitiveStr::Ascii("tuive"),
        dictgen::InsensitiveStr::Ascii("tuives"),
        dictgen::InsensitiveStr::Ascii("usions"),
        dictgen::InsensitiveStr::Ascii("utabe"),
        dictgen::InsensitiveStr::Ascii("utabil"),
        dictgen::InsensitiveStr::Ascii("utible"),
        dictgen::InsensitiveStr::Ascii("utie"),
        dictgen::InsensitiveStr::Ascii("utin"),
        dictgen::InsensitiveStr::Ascii("utiner"),
        dictgen::InsensitiveStr::Ascii("utings"),
        dictgen::InsensitiveStr::Ascii("utionar"),
        dictgen::InsensitiveStr::Ascii("utioneer"),
        dictgen::InsensitiveStr::Ascii("utioneers"),
        dictgen::InsensitiveStr::Ascii("utionees"),
        dictgen::InsensitiveStr::Ascii("utioness"),
        dictgen::InsensitiveStr::Ascii("utionier"),
        dictgen::InsensitiveStr::Ascii("utionner"),
        dictgen::InsensitiveStr::Ascii("utionor"),
        dictgen::InsensitiveStr::Ascii("utivas"),
    ],
    values: &[
        &["exercising"],
        &["executioner"],
        &["exception"],
        &["exceptional"],
        &["exceptions"],
        &["execution"],
        &["executable"],
        &["executable"],
        &["executed"],
        &["executing"],
        &["execution"],
        &["executioner"],
        &["executioner"],
        &["executions"],
        &["executive"],
        &["executives"],
        &["executions"],
        &["executable"],
        &["executable"],
        &["executable"],
        &["executive"],
        &["execution"],
        &["executioner"],
        &["executions"],
        &["executioner"],
        &["executioner"],
        &["executioner"],
        &["executions"],
        &["executions"],
        &["executioner"],
        &["executioner"],
        &["executioner"],
        &["executives"],
    ],
    range: 4..=9,
};

static WORD_EXC_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_EXC_CHILDREN),
    value: None,
};

static WORD_EXC_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    Some(&WORD_EXCA_NODE),
    None,
    None,
    None,
    Some(&WORD_EXCE_NODE),
    None,
    None,
    Some(&WORD_EXCH_NODE),
    Some(&WORD_EXCI_NODE),
    None,
    None,
    Some(&WORD_EXCL_NODE),
    None,
    None,
    Some(&WORD_EXCO_NODE),
    Some(&WORD_EXCP_NODE),
    None,
    Some(&WORD_EXCR_NODE),
    None,
    None,
    Some(&WORD_EXCU_NODE),
    None,
    None,
    None,
    None,
    None,
];

static WORD_EXCU_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_EXCU_CHILDREN),
    value: None,
};

pub static WORD_EXCU_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("lde"),
        dictgen::InsensitiveStr::Ascii("lded"),
        dictgen::InsensitiveStr::Ascii("ldes"),
        dictgen::InsensitiveStr::Ascii("lding"),
        dictgen::InsensitiveStr::Ascii("lsion"),
        dictgen::InsensitiveStr::Ascii("lsive"),
        dictgen::InsensitiveStr::Ascii("lsively"),
        dictgen::InsensitiveStr::Ascii("lsives"),
        dictgen::InsensitiveStr::Ascii("lsivity"),
        dictgen::InsensitiveStr::Ascii("lsivly"),
        dictgen::InsensitiveStr::Ascii("rciating"),
    ],
    values: &[
        &["exclude"],
        &["excluded"],
        &["excludes"],
        &["excluding"],
        &["exclusion"],
        &["exclusive"],
        &["exclusively"],
        &["exclusives"],
        &["exclusivity"],
        &["exclusively"],
        &["excruciating"],
    ],
    range: 3..=8,
};

static WORD_EXCR_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_EXCR_CHILDREN),
    value: None,
};

pub static WORD_EXCR_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ept"),
        dictgen::InsensitiveStr::Ascii("usiating"),
    ],
    values: &[&["excerpt"], &["excruciating"]],
    range: 3..=8,
};

static WORD_EXCP_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_EXCP_CHILDREN),
    value: None,
};

pub static WORD_EXCP_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("etion"),
        dictgen::InsensitiveStr::Ascii("etional"),
        dictgen::InsensitiveStr::Ascii("etionally"),
        dictgen::InsensitiveStr::Ascii("etions"),
    ],
    values: &[
        &["exception"],
        &["exceptional"],
        &["exceptionally"],
        &["exceptions"],
    ],
    range: 5..=9,
};

static WORD_EXCO_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_EXCO_CHILDREN),
    value: None,
};

pub static WORD_EXCO_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("rciating")],
    values: &[&["excruciating"]],
    range: 8..=8,
};

static WORD_EXCL_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_EXCL_CHILDREN),
    value: None,
};

pub static WORD_EXCL_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("amacion"),
        dictgen::InsensitiveStr::Ascii("amating"),
        dictgen::InsensitiveStr::Ascii("amativo"),
        dictgen::InsensitiveStr::Ascii("emation"),
        dictgen::InsensitiveStr::Ascii("imation"),
        dictgen::InsensitiveStr::Ascii("suive"),
        dictgen::InsensitiveStr::Ascii("suives"),
        dictgen::InsensitiveStr::Ascii("ucivity"),
        dictgen::InsensitiveStr::Ascii("udeds"),
        dictgen::InsensitiveStr::Ascii("use"),
        dictgen::InsensitiveStr::Ascii("usie"),
        dictgen::InsensitiveStr::Ascii("usivas"),
        dictgen::InsensitiveStr::Ascii("usiveity"),
        dictgen::InsensitiveStr::Ascii("usivelly"),
        dictgen::InsensitiveStr::Ascii("usivety"),
        dictgen::InsensitiveStr::Ascii("usivily"),
        dictgen::InsensitiveStr::Ascii("usivitiy"),
        dictgen::InsensitiveStr::Ascii("usivley"),
        dictgen::InsensitiveStr::Ascii("usivly"),
        dictgen::InsensitiveStr::Ascii("usivos"),
        dictgen::InsensitiveStr::Ascii("usivs"),
        dictgen::InsensitiveStr::Ascii("usivty"),
        dictgen::InsensitiveStr::Ascii("usivy"),
        dictgen::InsensitiveStr::Ascii("ussive"),
        dictgen::InsensitiveStr::Ascii("usvies"),
    ],
    values: &[
        &["exclamation"],
        &["exclamation"],
        &["exclamation"],
        &["exclamation"],
        &["exclamation"],
        &["exclusive"],
        &["exclusives"],
        &["exclusivity"],
        &["excludes"],
        &["excludes"],
        &["exclusives"],
        &["exclusives"],
        &["exclusivity"],
        &["exclusively"],
        &["exclusivity"],
        &["exclusivity"],
        &["exclusivity"],
        &["exclusively"],
        &["exclusively"],
        &["exclusives"],
        &["exclusives"],
        &["exclusivity"],
        &["exclusivity"],
        &["exclusives"],
        &["exclusives"],
    ],
    range: 3..=8,
};

static WORD_EXCI_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_EXCI_CHILDREN),
    value: None,
};

pub static WORD_EXCI_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("sted"),
        dictgen::InsensitiveStr::Ascii("timent"),
    ],
    values: &[&["existed"], &["excitement"]],
    range: 4..=6,
};

static WORD_EXCH_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_EXCH_CHILDREN),
    value: None,
};

pub static WORD_EXCH_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("anching"),
        dictgen::InsensitiveStr::Ascii("angees"),
        dictgen::InsensitiveStr::Ascii("nages"),
    ],
    values: &[&["exchanging"], &["exchanges"], &["exchanges"]],
    range: 5..=7,
};

static WORD_EXCE_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_EXCE_CHILDREN),
    value: None,
};

pub static WORD_EXCE_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("cute"),
        dictgen::InsensitiveStr::Ascii("cuted"),
        dictgen::InsensitiveStr::Ascii("cutes"),
        dictgen::InsensitiveStr::Ascii("cuting"),
        dictgen::InsensitiveStr::Ascii("cution"),
        dictgen::InsensitiveStr::Ascii("dded"),
        dictgen::InsensitiveStr::Ascii("edigly"),
        dictgen::InsensitiveStr::Ascii("edinly"),
        dictgen::InsensitiveStr::Ascii("lent"),
        dictgen::InsensitiveStr::Ascii("ll"),
        dictgen::InsensitiveStr::Ascii("llance"),
        dictgen::InsensitiveStr::Ascii("llant"),
        dictgen::InsensitiveStr::Ascii("llenet"),
        dictgen::InsensitiveStr::Ascii("llenze"),
        dictgen::InsensitiveStr::Ascii("lls"),
        dictgen::InsensitiveStr::Ascii("pcional"),
        dictgen::InsensitiveStr::Ascii("prt"),
        dictgen::InsensitiveStr::Ascii("ptin"),
        dictgen::InsensitiveStr::Ascii("ptionaly"),
        dictgen::InsensitiveStr::Ascii("ptionel"),
        dictgen::InsensitiveStr::Ascii("ptionnal"),
        dictgen::InsensitiveStr::Ascii("rcise"),
        dictgen::InsensitiveStr::Ascii("rise"),
        dictgen::InsensitiveStr::Ascii("rised"),
        dictgen::InsensitiveStr::Ascii("rises"),
        dictgen::InsensitiveStr::Ascii("rising"),
        dictgen::InsensitiveStr::Ascii("ssivley"),
        dictgen::InsensitiveStr::Ascii("ssivly"),
        dictgen::InsensitiveStr::Ascii("uting"),
        dictgen::InsensitiveStr::Ascii("utioner"),
    ],
    values: &[
        &["execute"],
        &["executed"],
        &["executes"],
        &["executing"],
        &["execution"],
        &["exceeded"],
        &["exceedingly"],
        &["exceedingly"],
        &["excellent"],
        &["excel"],
        &["excellence"],
        &["excellent"],
        &["excellence"],
        &["excellence"],
        &["excels"],
        &["exceptional"],
        &["excerpt"],
        &["exceptions"],
        &["exceptionally"],
        &["exceptional"],
        &["exceptional"],
        &["exercise"],
        &["exercise"],
        &["exercised"],
        &["exercises"],
        &["exercising"],
        &["excessively"],
        &["excessively"],
        &["executing"],
        &["executioner"],
    ],
    range: 2..=8,
};

static WORD_EXCA_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_EXCA_CHILDREN),
    value: None,
};

pub static WORD_EXCA_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ct"),
        dictgen::InsensitiveStr::Ascii("hnges"),
        dictgen::InsensitiveStr::Ascii("lmation"),
        dictgen::InsensitiveStr::Ascii("nge"),
        dictgen::InsensitiveStr::Ascii("tly"),
    ],
    values: &[
        &["exact"],
        &["exchanges"],
        &["exclamation"],
        &["exchange"],
        &["exactly"],
    ],
    range: 2..=7,
};

static WORD_EXA_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_EXA_CHILDREN),
    value: None,
};

pub static WORD_EXA_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("carbated"),
        dictgen::InsensitiveStr::Ascii("cberate"),
        dictgen::InsensitiveStr::Ascii("cberated"),
        dictgen::InsensitiveStr::Ascii("clty"),
        dictgen::InsensitiveStr::Ascii("gerate"),
        dictgen::InsensitiveStr::Ascii("gerated"),
        dictgen::InsensitiveStr::Ascii("gerates"),
        dictgen::InsensitiveStr::Ascii("gerating"),
        dictgen::InsensitiveStr::Ascii("gerrate"),
        dictgen::InsensitiveStr::Ascii("gerrated"),
        dictgen::InsensitiveStr::Ascii("gerrates"),
        dictgen::InsensitiveStr::Ascii("gerrating"),
        dictgen::InsensitiveStr::Ascii("ggarate"),
        dictgen::InsensitiveStr::Ascii("ggarated"),
        dictgen::InsensitiveStr::Ascii("ggarating"),
        dictgen::InsensitiveStr::Ascii("ggaration"),
        dictgen::InsensitiveStr::Ascii("ggareted"),
        dictgen::InsensitiveStr::Ascii("ggeratin"),
        dictgen::InsensitiveStr::Ascii("ggeratted"),
        dictgen::InsensitiveStr::Ascii("ggeratting"),
        dictgen::InsensitiveStr::Ascii("ggerrate"),
        dictgen::InsensitiveStr::Ascii("ggurate"),
        dictgen::InsensitiveStr::Ascii("ggurated"),
        dictgen::InsensitiveStr::Ascii("ggurating"),
        dictgen::InsensitiveStr::Ascii("gguration"),
        dictgen::InsensitiveStr::Ascii("hust"),
        dictgen::InsensitiveStr::Ascii("husted"),
        dictgen::InsensitiveStr::Ascii("husting"),
        dictgen::InsensitiveStr::Ascii("hustion"),
        dictgen::InsensitiveStr::Ascii("minated"),
        dictgen::InsensitiveStr::Ascii("mind"),
        dictgen::InsensitiveStr::Ascii("minerad"),
        dictgen::InsensitiveStr::Ascii("mpt"),
        dictgen::InsensitiveStr::Ascii("pansion"),
        dictgen::InsensitiveStr::Ascii("pnds"),
        dictgen::InsensitiveStr::Ascii("pnsions"),
        dictgen::InsensitiveStr::Ascii("pnsive"),
        dictgen::InsensitiveStr::Ascii("rcebated"),
        dictgen::InsensitiveStr::Ascii("tled"),
        dictgen::InsensitiveStr::Ascii("uhsted"),
        dictgen::InsensitiveStr::Ascii("uhsting"),
        dictgen::InsensitiveStr::Ascii("uhstion"),
    ],
    values: &[
        &["exacerbated"],
        &["exacerbated"],
        &["exacerbated"],
        &["exactly"],
        &["exaggerate"],
        &["exaggerated"],
        &["exaggerates"],
        &["exaggerating"],
        &["exaggerate"],
        &["exaggerated"],
        &["exaggerates"],
        &["exaggerating"],
        &["exaggerate"],
        &["exaggerated"],
        &["exaggerating"],
        &["exaggeration"],
        &["exaggerate"],
        &["exaggeration"],
        &["exaggerated"],
        &["exaggerating"],
        &["exaggerate"],
        &["exaggerate"],
        &["exaggerated"],
        &["exaggerating"],
        &["exaggeration"],
        &["exhaust"],
        &["exhausted"],
        &["exhausting"],
        &["exhaustion"],
        &["examined"],
        &["examined"],
        &["examined"],
        &["exempt"],
        &["expansion"],
        &["expands"],
        &["expansions"],
        &["expansive"],
        &["exacerbated"],
        &["exalted"],
        &["exhausted"],
        &["exhausting"],
        &["exhaustion"],
    ],
    range: 3..=10,
};

static WORD_EV_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_EV_CHILDREN),
    value: None,
};

pub static WORD_EV_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("aluacion"),
        dictgen::InsensitiveStr::Ascii("aluatiing"),
        dictgen::InsensitiveStr::Ascii("aluationg"),
        dictgen::InsensitiveStr::Ascii("alutaion"),
        dictgen::InsensitiveStr::Ascii("angalical"),
        dictgen::InsensitiveStr::Ascii("angelia"),
        dictgen::InsensitiveStr::Ascii("angelikal"),
        dictgen::InsensitiveStr::Ascii("angers"),
        dictgen::InsensitiveStr::Ascii("aulating"),
        dictgen::InsensitiveStr::Ascii("aulation"),
        dictgen::InsensitiveStr::Ascii("elation"),
        dictgen::InsensitiveStr::Ascii("elutionary"),
        dictgen::InsensitiveStr::Ascii("engalical"),
        dictgen::InsensitiveStr::Ascii("enhtually"),
        dictgen::InsensitiveStr::Ascii("enlopes"),
        dictgen::InsensitiveStr::Ascii("entally"),
        dictgen::InsensitiveStr::Ascii("entaully"),
        dictgen::InsensitiveStr::Ascii("entially"),
        dictgen::InsensitiveStr::Ascii("entualy"),
        dictgen::InsensitiveStr::Ascii("erets"),
        dictgen::InsensitiveStr::Ascii("erset"),
        dictgen::InsensitiveStr::Ascii("erthing"),
        dictgen::InsensitiveStr::Ascii("ertyime"),
        dictgen::InsensitiveStr::Ascii("erwhere"),
        dictgen::InsensitiveStr::Ascii("eryoens"),
        dictgen::InsensitiveStr::Ascii("eryonehas"),
        dictgen::InsensitiveStr::Ascii("eryoneis"),
        dictgen::InsensitiveStr::Ascii("eryonelse"),
        dictgen::InsensitiveStr::Ascii("eryons"),
        dictgen::InsensitiveStr::Ascii("eryteim"),
        dictgen::InsensitiveStr::Ascii("erytiem"),
        dictgen::InsensitiveStr::Ascii("eryting"),
        dictgen::InsensitiveStr::Ascii("eyr"),
        dictgen::InsensitiveStr::Ascii("eyrones"),
        dictgen::InsensitiveStr::Ascii("idencd"),
        dictgen::InsensitiveStr::Ascii("idende"),
        dictgen::InsensitiveStr::Ascii("identally"),
        dictgen::InsensitiveStr::Ascii("loved"),
        dictgen::InsensitiveStr::Ascii("loves"),
        dictgen::InsensitiveStr::Ascii("loving"),
        dictgen::InsensitiveStr::Ascii("olutionairy"),
        dictgen::InsensitiveStr::Ascii("olutionarilly"),
        dictgen::InsensitiveStr::Ascii("olutionarly"),
        dictgen::InsensitiveStr::Ascii("olutionnary"),
        dictgen::InsensitiveStr::Ascii("olveds"),
        dictgen::InsensitiveStr::Ascii("olveos"),
        dictgen::InsensitiveStr::Ascii("ovled"),
        dictgen::InsensitiveStr::Ascii("ovles"),
        dictgen::InsensitiveStr::Ascii("ovling"),
        dictgen::InsensitiveStr::Ascii("reyones"),
        dictgen::InsensitiveStr::Ascii("reytime"),
    ],
    values: &[
        &["evaluation"],
        &["evaluating"],
        &["evaluating"],
        &["evaluation"],
        &["evangelical"],
        &["evangelical"],
        &["evangelical"],
        &["avengers"],
        &["evaluating"],
        &["evaluation"],
        &["elevation"],
        &["evolutionary"],
        &["evangelical"],
        &["eventually"],
        &["envelopes"],
        &["eventually"],
        &["eventually"],
        &["eventually"],
        &["eventually"],
        &["everest"],
        &["everest"],
        &["everything"],
        &["everytime"],
        &["everywhere"],
        &["everyones"],
        &["everyones"],
        &["everyones"],
        &["everyones"],
        &["everyones"],
        &["everytime"],
        &["everytime"],
        &["everything"],
        &["every"],
        &["everyones"],
        &["evidenced"],
        &["evidenced"],
        &["evidently"],
        &["evolved"],
        &["evolves"],
        &["evolving"],
        &["evolutionary"],
        &["evolutionary"],
        &["evolutionary"],
        &["evolutionary"],
        &["evolves"],
        &["evolves"],
        &["evolved"],
        &["evolves"],
        &["evolving"],
        &["everyones"],
        &["everytime"],
    ],
    range: 3..=13,
};

static WORD_EU_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_EU_CHILDREN),
    value: None,
};

pub static WORD_EU_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("clidian"),
        dictgen::InsensitiveStr::Ascii("gencis"),
        dictgen::InsensitiveStr::Ascii("gneics"),
        dictgen::InsensitiveStr::Ascii("hporia"),
        dictgen::InsensitiveStr::Ascii("hporic"),
        dictgen::InsensitiveStr::Ascii("orpean"),
        dictgen::InsensitiveStr::Ascii("orpeans"),
        dictgen::InsensitiveStr::Ascii("phoira"),
        dictgen::InsensitiveStr::Ascii("phora"),
        dictgen::InsensitiveStr::Ascii("phoriac"),
        dictgen::InsensitiveStr::Ascii("phorica"),
        dictgen::InsensitiveStr::Ascii("phorical"),
        dictgen::InsensitiveStr::Ascii("phorisch"),
        dictgen::InsensitiveStr::Ascii("phroia"),
        dictgen::InsensitiveStr::Ascii("phroic"),
        dictgen::InsensitiveStr::Ascii("ropeaners"),
        dictgen::InsensitiveStr::Ascii("ropeaness"),
        dictgen::InsensitiveStr::Ascii("ropen"),
        dictgen::InsensitiveStr::Ascii("ropenas"),
        dictgen::InsensitiveStr::Ascii("ropian"),
        dictgen::InsensitiveStr::Ascii("ropians"),
        dictgen::InsensitiveStr::Ascii("rpean"),
        dictgen::InsensitiveStr::Ascii("rpoean"),
        dictgen::InsensitiveStr::Ascii("rpoeans"),
        dictgen::InsensitiveStr::Ascii("thanaisa"),
        dictgen::InsensitiveStr::Ascii("thanazia"),
        dictgen::InsensitiveStr::Ascii("thanesia"),
    ],
    values: &[
        &["euclidean"],
        &["eugenics"],
        &["eugenics"],
        &["euphoria"],
        &["euphoric"],
        &["european"],
        &["europeans"],
        &["euphoria"],
        &["euphoria"],
        &["euphoric"],
        &["euphoria"],
        &["euphoria"],
        &["euphoric"],
        &["euphoria"],
        &["euphoric"],
        &["europeans"],
        &["europeans"],
        &["european"],
        &["europeans"],
        &["european"],
        &["europeans"],
        &["european"],
        &["european"],
        &["europeans"],
        &["euthanasia"],
        &["euthanasia"],
        &["euthanasia"],
    ],
    range: 5..=9,
};

static WORD_ET_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_ET_CHILDREN),
    value: None,
};

pub static WORD_ET_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("hcially"),
        dictgen::InsensitiveStr::Ascii("herael"),
        dictgen::InsensitiveStr::Ascii("herel"),
        dictgen::InsensitiveStr::Ascii("herent"),
        dictgen::InsensitiveStr::Ascii("hicallity"),
        dictgen::InsensitiveStr::Ascii("hicallly"),
        dictgen::InsensitiveStr::Ascii("hicaly"),
        dictgen::InsensitiveStr::Ascii("hincally"),
        dictgen::InsensitiveStr::Ascii("hincities"),
        dictgen::InsensitiveStr::Ascii("hincity"),
        dictgen::InsensitiveStr::Ascii("hnaol"),
        dictgen::InsensitiveStr::Ascii("hnicaly"),
        dictgen::InsensitiveStr::Ascii("hnicites"),
        dictgen::InsensitiveStr::Ascii("hnicitiy"),
        dictgen::InsensitiveStr::Ascii("hniticies"),
        dictgen::InsensitiveStr::Ascii("hniticy"),
        dictgen::InsensitiveStr::Ascii("hnocentricm"),
        dictgen::InsensitiveStr::Ascii("hose"),
        dictgen::InsensitiveStr::Ascii("iquete"),
        dictgen::InsensitiveStr::Ascii("myology"),
        dictgen::InsensitiveStr::Ascii("railer"),
    ],
    values: &[
        &["ethically"],
        &["ethereal"],
        &["ethereal"],
        &["ethernet"],
        &["ethically"],
        &["ethically"],
        &["ethically"],
        &["ethnically"],
        &["ethnicities"],
        &["ethnicity"],
        &["ethanol"],
        &["ethnically"],
        &["ethnicities"],
        &["ethnicity"],
        &["ethnicities"],
        &["ethnicity"],
        &["ethnocentrism"],
        &["those"],
        &["etiquette"],
        &["etymology"],
        &["retailer"],
    ],
    range: 4..=11,
};

static WORD_ES_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_ES_CHILDREN),
    value: None,
};

static WORD_ES_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    None,
    None,
    Some(&WORD_ESC_NODE),
    None,
    Some(&WORD_ESE_NODE),
    None,
    None,
    None,
    Some(&WORD_ESI_NODE),
    None,
    None,
    Some(&WORD_ESL_NODE),
    None,
    None,
    Some(&WORD_ESO_NODE),
    Some(&WORD_ESP_NODE),
    None,
    None,
    Some(&WORD_ESS_NODE),
    Some(&WORD_EST_NODE),
    None,
    None,
    None,
    None,
    None,
    None,
];

static WORD_EST_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_EST_CHILDREN),
    value: None,
};

pub static WORD_EST_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("abilshment"),
        dictgen::InsensitiveStr::Ascii("abishes"),
        dictgen::InsensitiveStr::Ascii("ablishemnt"),
        dictgen::InsensitiveStr::Ascii("ablishmet"),
        dictgen::InsensitiveStr::Ascii("ablishmnet"),
        dictgen::InsensitiveStr::Ascii("ablising"),
        dictgen::InsensitiveStr::Ascii("ablsihment"),
        dictgen::InsensitiveStr::Ascii("balishment"),
        dictgen::InsensitiveStr::Ascii("iamte"),
        dictgen::InsensitiveStr::Ascii("iamted"),
        dictgen::InsensitiveStr::Ascii("iamtes"),
        dictgen::InsensitiveStr::Ascii("imacion"),
        dictgen::InsensitiveStr::Ascii("imatin"),
        dictgen::InsensitiveStr::Ascii("imativo"),
        dictgen::InsensitiveStr::Ascii("ination"),
        dictgen::InsensitiveStr::Ascii("oeric"),
        dictgen::InsensitiveStr::Ascii("onija"),
        dictgen::InsensitiveStr::Ascii("oniya"),
    ],
    values: &[
        &["establishments"],
        &["establishes"],
        &["establishments"],
        &["establishments"],
        &["establishments"],
        &["establishing"],
        &["establishments"],
        &["establishments"],
        &["estimate"],
        &["estimated"],
        &["estimates"],
        &["estimation"],
        &["estimation"],
        &["estimation"],
        &["estimation"],
        &["esoteric"],
        &["estonia"],
        &["estonia"],
    ],
    range: 5..=10,
};

static WORD_ESS_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_ESS_CHILDREN),
    value: None,
};

pub static WORD_ESS_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("encial"),
        dictgen::InsensitiveStr::Ascii("encially"),
        dictgen::InsensitiveStr::Ascii("encials"),
        dictgen::InsensitiveStr::Ascii("ense"),
        dictgen::InsensitiveStr::Ascii("ensials"),
        dictgen::InsensitiveStr::Ascii("entail"),
        dictgen::InsensitiveStr::Ascii("entailly"),
        dictgen::InsensitiveStr::Ascii("entails"),
        dictgen::InsensitiveStr::Ascii("entialls"),
        dictgen::InsensitiveStr::Ascii("entialy"),
        dictgen::InsensitiveStr::Ascii("entias"),
        dictgen::InsensitiveStr::Ascii("entiels"),
        dictgen::InsensitiveStr::Ascii("entual"),
        dictgen::InsensitiveStr::Ascii("entually"),
        dictgen::InsensitiveStr::Ascii("entuals"),
        dictgen::InsensitiveStr::Ascii("esital"),
    ],
    values: &[
        &["essential"],
        &["essentially"],
        &["essentials"],
        &["essence"],
        &["essentials"],
        &["essential"],
        &["essentially"],
        &["essentials"],
        &["essentials"],
        &["essentially"],
        &["essentials"],
        &["essentials"],
        &["essential"],
        &["essentially"],
        &["essentials"],
        &["essential"],
    ],
    range: 4..=8,
};

static WORD_ESP_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_ESP_CHILDREN),
    value: None,
};

pub static WORD_ESP_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ecailly"),
        dictgen::InsensitiveStr::Ascii("ecialy"),
        dictgen::InsensitiveStr::Ascii("eically"),
        dictgen::InsensitiveStr::Ascii("erate"),
        dictgen::InsensitiveStr::Ascii("ianoge"),
        dictgen::InsensitiveStr::Ascii("inoage"),
        dictgen::InsensitiveStr::Ascii("oinage"),
        dictgen::InsensitiveStr::Ascii("oniage"),
        dictgen::InsensitiveStr::Ascii("orst"),
        dictgen::InsensitiveStr::Ascii("ortes"),
        dictgen::InsensitiveStr::Ascii("reso"),
        dictgen::InsensitiveStr::Ascii("ressino"),
        dictgen::InsensitiveStr::Ascii("ression"),
        dictgen::InsensitiveStr::Ascii("ressso"),
        dictgen::InsensitiveStr::Ascii("rots"),
    ],
    values: &[
        &["especially"],
        &["especially"],
        &["especially"],
        &["seperate"],
        &["espionage"],
        &["espionage"],
        &["espionage"],
        &["espionage"],
        &["esports"],
        &["esports"],
        &["espresso"],
        &["espresso"],
        &["espresso"],
        &["espresso"],
        &["esports"],
    ],
    range: 4..=7,
};

static WORD_ESO_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_ESO_CHILDREN),
    value: None,
};

pub static WORD_ESO_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("terisch")],
    values: &[&["esoteric"]],
    range: 7..=7,
};

static WORD_ESL_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_ESL_CHILDREN),
    value: None,
};

pub static WORD_ESL_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("e"),
        dictgen::InsensitiveStr::Ascii("ewhere"),
    ],
    values: &[&["else"], &["elsewhere"]],
    range: 1..=6,
};

static WORD_ESI_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_ESI_CHILDREN),
    value: None,
};

pub static WORD_ESI_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("tmate"),
        dictgen::InsensitiveStr::Ascii("tmated"),
        dictgen::InsensitiveStr::Ascii("tmates"),
        dictgen::InsensitiveStr::Ascii("tmation"),
    ],
    values: &[
        &["estimate"],
        &["estimated"],
        &["estimates"],
        &["estimation"],
    ],
    range: 5..=7,
};

static WORD_ESE_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_ESE_CHILDREN),
    value: None,
};

pub static WORD_ESE_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("ntial")],
    values: &[&["essential"]],
    range: 5..=5,
};

static WORD_ESC_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_ESC_CHILDREN),
    value: None,
};

pub static WORD_ESC_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("alatie"),
        dictgen::InsensitiveStr::Ascii("alatin"),
        dictgen::InsensitiveStr::Ascii("alative"),
        dictgen::InsensitiveStr::Ascii("alato"),
        dictgen::InsensitiveStr::Ascii("apse"),
        dictgen::InsensitiveStr::Ascii("avation"),
        dictgen::InsensitiveStr::Ascii("paes"),
        dictgen::InsensitiveStr::Ascii("tasy"),
        dictgen::InsensitiveStr::Ascii("tatic"),
    ],
    values: &[
        &["escalate"],
        &["escalation"],
        &["escalate"],
        &["escalation"],
        &["escapes"],
        &["escalation"],
        &["escapes"],
        &["ecstasy"],
        &["ecstatic"],
    ],
    range: 4..=7,
};

static WORD_ER_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_ER_CHILDREN),
    value: None,
};

pub static WORD_ER_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ally"),
        dictgen::InsensitiveStr::Ascii("atic"),
        dictgen::InsensitiveStr::Ascii("atically"),
        dictgen::InsensitiveStr::Ascii("aticly"),
        dictgen::InsensitiveStr::Ascii("ested"),
        dictgen::InsensitiveStr::Ascii("mington"),
        dictgen::InsensitiveStr::Ascii("roenous"),
        dictgen::InsensitiveStr::Ascii("roneos"),
        dictgen::InsensitiveStr::Ascii("rupted"),
    ],
    values: &[
        &["orally"],
        &["erratic"],
        &["erratically"],
        &["erratically"],
        &["arrested"],
        &["remington"],
        &["erroneous"],
        &["erroneous"],
        &["erupted"],
    ],
    range: 4..=8,
};

static WORD_EQ_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_EQ_CHILDREN),
    value: None,
};

pub static WORD_EQ_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("aulity"),
        dictgen::InsensitiveStr::Ascii("aution"),
        dictgen::InsensitiveStr::Ascii("autions"),
        dictgen::InsensitiveStr::Ascii("uailty"),
        dictgen::InsensitiveStr::Ascii("uialent"),
        dictgen::InsensitiveStr::Ascii("uiavlent"),
        dictgen::InsensitiveStr::Ascii("uilavent"),
        dictgen::InsensitiveStr::Ascii("uilavents"),
        dictgen::InsensitiveStr::Ascii("uilbirium"),
        dictgen::InsensitiveStr::Ascii("uilevants"),
        dictgen::InsensitiveStr::Ascii("uilibirum"),
        dictgen::InsensitiveStr::Ascii("uilibium"),
        dictgen::InsensitiveStr::Ascii("uilibriam"),
        dictgen::InsensitiveStr::Ascii("uilibrim"),
        dictgen::InsensitiveStr::Ascii("uilibruim"),
        dictgen::InsensitiveStr::Ascii("uilibrum"),
        dictgen::InsensitiveStr::Ascii("uiped"),
        dictgen::InsensitiveStr::Ascii("uippment"),
        dictgen::InsensitiveStr::Ascii("uitorial"),
        dictgen::InsensitiveStr::Ascii("uivalance"),
        dictgen::InsensitiveStr::Ascii("uivalant"),
        dictgen::InsensitiveStr::Ascii("uivalants"),
        dictgen::InsensitiveStr::Ascii("uivalenet"),
        dictgen::InsensitiveStr::Ascii("uivalet"),
        dictgen::InsensitiveStr::Ascii("uivallent"),
        dictgen::InsensitiveStr::Ascii("uivalnce"),
        dictgen::InsensitiveStr::Ascii("uivalnet"),
        dictgen::InsensitiveStr::Ascii("uivelance"),
        dictgen::InsensitiveStr::Ascii("uivelant"),
        dictgen::InsensitiveStr::Ascii("uivelants"),
        dictgen::InsensitiveStr::Ascii("uivelent"),
        dictgen::InsensitiveStr::Ascii("uivelents"),
        dictgen::InsensitiveStr::Ascii("uivilant"),
        dictgen::InsensitiveStr::Ascii("uivilants"),
        dictgen::InsensitiveStr::Ascii("uivilence"),
        dictgen::InsensitiveStr::Ascii("uivilent"),
        dictgen::InsensitiveStr::Ascii("uivilents"),
        dictgen::InsensitiveStr::Ascii("uivlaent"),
        dictgen::InsensitiveStr::Ascii("uivlalent"),
        dictgen::InsensitiveStr::Ascii("uivlanets"),
        dictgen::InsensitiveStr::Ascii("uivolence"),
        dictgen::InsensitiveStr::Ascii("uivolent"),
        dictgen::InsensitiveStr::Ascii("uivolents"),
    ],
    values: &[
        &["equality"],
        &["equation"],
        &["equations"],
        &["equality"],
        &["equivalent"],
        &["equivalents"],
        &["equivalent"],
        &["equivalents"],
        &["equilibrium"],
        &["equivalents"],
        &["equilibrium"],
        &["equilibrium"],
        &["equilibrium"],
        &["equilibrium"],
        &["equilibrium"],
        &["equilibrium"],
        &["equipped"],
        &["equipment"],
        &["equatorial"],
        &["equivalence"],
        &["equivalent"],
        &["equivalents"],
        &["equivalents"],
        &["equivalents"],
        &["equivalent"],
        &["equivalence"],
        &["equivalents"],
        &["equivalence"],
        &["equivalent"],
        &["equivalents"],
        &["equivalent"],
        &["equivalents"],
        &["equivalent"],
        &["equivalents"],
        &["equivalence"],
        &["equivalent"],
        &["equivalents"],
        &["equivalents"],
        &["equivalent"],
        &["equivalents"],
        &["equivalence"],
        &["equivalent"],
        &["equivalents"],
    ],
    range: 5..=9,
};

static WORD_EP_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_EP_CHILDREN),
    value: None,
};

pub static WORD_EP_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("hipany"),
        dictgen::InsensitiveStr::Ascii("idsodes"),
        dictgen::InsensitiveStr::Ascii("ihpany"),
        dictgen::InsensitiveStr::Ascii("ilepsey"),
        dictgen::InsensitiveStr::Ascii("ilespy"),
        dictgen::InsensitiveStr::Ascii("ilgoue"),
        dictgen::InsensitiveStr::Ascii("iloge"),
        dictgen::InsensitiveStr::Ascii("iphanny"),
        dictgen::InsensitiveStr::Ascii("isdoe"),
        dictgen::InsensitiveStr::Ascii("isdoes"),
        dictgen::InsensitiveStr::Ascii("isonage"),
        dictgen::InsensitiveStr::Ascii("itomie"),
        dictgen::InsensitiveStr::Ascii("liepsy"),
        dictgen::InsensitiveStr::Ascii("liogue"),
        dictgen::InsensitiveStr::Ascii("scially"),
        dictgen::InsensitiveStr::Ascii("siode"),
        dictgen::InsensitiveStr::Ascii("siodes"),
        dictgen::InsensitiveStr::Ascii("sionage"),
        dictgen::InsensitiveStr::Ascii("sorts"),
        dictgen::InsensitiveStr::Ascii("sresso"),
        dictgen::InsensitiveStr::Ascii("tiome"),
    ],
    values: &[
        &["epiphany"],
        &["episodes"],
        &["epiphany"],
        &["epilepsy"],
        &["epilepsy"],
        &["epilogue"],
        &["epilogue"],
        &["epiphany"],
        &["episode"],
        &["episodes"],
        &["espionage"],
        &["epitome"],
        &["epilepsy"],
        &["epilogue"],
        &["specially"],
        &["episode"],
        &["episodes"],
        &["espionage"],
        &["esports"],
        &["espresso"],
        &["epitome"],
    ],
    range: 5..=7,
};

static WORD_EN_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_EN_CHILDREN),
    value: None,
};

static WORD_EN_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    Some(&WORD_ENA_NODE),
    None,
    Some(&WORD_ENC_NODE),
    Some(&WORD_END_NODE),
    Some(&WORD_ENE_NODE),
    Some(&WORD_ENF_NODE),
    Some(&WORD_ENG_NODE),
    Some(&WORD_ENH_NODE),
    Some(&WORD_ENI_NODE),
    None,
    None,
    Some(&WORD_ENL_NODE),
    None,
    None,
    Some(&WORD_ENO_NODE),
    None,
    None,
    Some(&WORD_ENR_NODE),
    Some(&WORD_ENS_NODE),
    Some(&WORD_ENT_NODE),
    None,
    Some(&WORD_ENV_NODE),
    None,
    Some(&WORD_ENX_NODE),
    None,
    None,
];

static WORD_ENX_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_ENX_CHILDREN),
    value: None,
};

pub static WORD_ENX_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("t")],
    values: &[&["next"]],
    range: 1..=1,
};

static WORD_ENV_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_ENV_CHILDREN),
    value: None,
};

pub static WORD_ENV_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("eloppe"),
        dictgen::InsensitiveStr::Ascii("elopped"),
        dictgen::InsensitiveStr::Ascii("eloppen"),
        dictgen::InsensitiveStr::Ascii("eloppes"),
        dictgen::InsensitiveStr::Ascii("inroment"),
        dictgen::InsensitiveStr::Ascii("iorment"),
        dictgen::InsensitiveStr::Ascii("iormental"),
        dictgen::InsensitiveStr::Ascii("iormentally"),
        dictgen::InsensitiveStr::Ascii("iorments"),
        dictgen::InsensitiveStr::Ascii("iornment"),
        dictgen::InsensitiveStr::Ascii("iornmental"),
        dictgen::InsensitiveStr::Ascii("iornmentalist"),
        dictgen::InsensitiveStr::Ascii("iornmentally"),
        dictgen::InsensitiveStr::Ascii("iornments"),
        dictgen::InsensitiveStr::Ascii("irnoment"),
        dictgen::InsensitiveStr::Ascii("iroment"),
        dictgen::InsensitiveStr::Ascii("iromental"),
        dictgen::InsensitiveStr::Ascii("iromentalist"),
        dictgen::InsensitiveStr::Ascii("iromentally"),
        dictgen::InsensitiveStr::Ascii("iroments"),
        dictgen::InsensitiveStr::Ascii("iromnent"),
        dictgen::InsensitiveStr::Ascii("ironemnt"),
        dictgen::InsensitiveStr::Ascii("ironemntal"),
        dictgen::InsensitiveStr::Ascii("ironemntally"),
        dictgen::InsensitiveStr::Ascii("ironemnts"),
        dictgen::InsensitiveStr::Ascii("ironmentality"),
        dictgen::InsensitiveStr::Ascii("ironmentals"),
        dictgen::InsensitiveStr::Ascii("ironmentaly"),
        dictgen::InsensitiveStr::Ascii("ironmentl"),
        dictgen::InsensitiveStr::Ascii("ironmently"),
        dictgen::InsensitiveStr::Ascii("ironmet"),
        dictgen::InsensitiveStr::Ascii("ironmetal"),
        dictgen::InsensitiveStr::Ascii("ironmnet"),
        dictgen::InsensitiveStr::Ascii("olutionary"),
        dictgen::InsensitiveStr::Ascii("rionment"),
        dictgen::InsensitiveStr::Ascii("rionmental"),
        dictgen::InsensitiveStr::Ascii("rionmentally"),
        dictgen::InsensitiveStr::Ascii("rionments"),
    ],
    values: &[
        &["envelope"],
        &["envelope"],
        &["envelope"],
        &["envelope"],
        &["environments"],
        &["environment"],
        &["environmental"],
        &["environmentally"],
        &["environments"],
        &["environment"],
        &["environmental"],
        &["environmentalist"],
        &["environmentally"],
        &["environments"],
        &["environment"],
        &["environment"],
        &["environmental"],
        &["environmentalist"],
        &["environmentally"],
        &["environments"],
        &["environments"],
        &["environment"],
        &["environmental"],
        &["environmentally"],
        &["environments"],
        &["environmentally"],
        &["environments"],
        &["environmentally"],
        &["environmentally"],
        &["environmental"],
        &["environments"],
        &["environmental"],
        &["environments"],
        &["evolutionary"],
        &["environment"],
        &["environmental"],
        &["environmentally"],
        &["environments"],
    ],
    range: 6..=13,
};

static WORD_ENT_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_ENT_CHILDREN),
    value: None,
};

static WORD_ENT_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    Some(&WORD_ENTA_NODE),
    Some(&WORD_ENTB_NODE),
    None,
    None,
    Some(&WORD_ENTE_NODE),
    None,
    None,
    Some(&WORD_ENTH_NODE),
    Some(&WORD_ENTI_NODE),
    None,
    None,
    None,
    None,
    None,
    Some(&WORD_ENTO_NODE),
    None,
    None,
    Some(&WORD_ENTR_NODE),
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
];

static WORD_ENTR_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_ENTR_CHILDREN),
    value: None,
};

pub static WORD_ENTR_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("epeneur"),
        dictgen::InsensitiveStr::Ascii("epeneurs"),
        dictgen::InsensitiveStr::Ascii("eperneur"),
        dictgen::InsensitiveStr::Ascii("eperure"),
        dictgen::InsensitiveStr::Ascii("epeuner"),
        dictgen::InsensitiveStr::Ascii("epraneurs"),
        dictgen::InsensitiveStr::Ascii("eprenaur"),
        dictgen::InsensitiveStr::Ascii("eprenaurs"),
        dictgen::InsensitiveStr::Ascii("eprener"),
        dictgen::InsensitiveStr::Ascii("epreners"),
        dictgen::InsensitiveStr::Ascii("epreneuer"),
        dictgen::InsensitiveStr::Ascii("epreneuers"),
        dictgen::InsensitiveStr::Ascii("epreneurers"),
        dictgen::InsensitiveStr::Ascii("epreneures"),
        dictgen::InsensitiveStr::Ascii("epreneus"),
        dictgen::InsensitiveStr::Ascii("eprenour"),
        dictgen::InsensitiveStr::Ascii("eprenours"),
        dictgen::InsensitiveStr::Ascii("eprenuers"),
        dictgen::InsensitiveStr::Ascii("eprenur"),
        dictgen::InsensitiveStr::Ascii("eprenure"),
        dictgen::InsensitiveStr::Ascii("eprenures"),
        dictgen::InsensitiveStr::Ascii("eprenurs"),
        dictgen::InsensitiveStr::Ascii("epreuner"),
        dictgen::InsensitiveStr::Ascii("epreuners"),
        dictgen::InsensitiveStr::Ascii("etained"),
        dictgen::InsensitiveStr::Ascii("etaining"),
        dictgen::InsensitiveStr::Ascii("etainment"),
        dictgen::InsensitiveStr::Ascii("opay"),
        dictgen::InsensitiveStr::Ascii("ophy"),
    ],
    values: &[
        &["entrepreneur"],
        &["entrepreneurs"],
        &["entrepreneurs"],
        &["entrepreneur"],
        &["entrepreneur"],
        &["entrepreneurs"],
        &["entrepreneur"],
        &["entrepreneurs"],
        &["entrepreneurs"],
        &["entrepreneurs"],
        &["entrepreneurs"],
        &["entrepreneurs"],
        &["entrepreneurs"],
        &["entrepreneurs"],
        &["entrepreneurs"],
        &["entrepreneur"],
        &["entrepreneurs"],
        &["entrepreneurs"],
        &["entrepreneur"],
        &["entrepreneurs"],
        &["entrepreneurs"],
        &["entrepreneurs"],
        &["entrepreneurs"],
        &["entrepreneurs"],
        &["entertained"],
        &["entertaining"],
        &["entertainment"],
        &["entropy"],
        &["entropy"],
    ],
    range: 4..=11,
};

static WORD_ENTO_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_ENTO_CHILDREN),
    value: None,
};

pub static WORD_ENTO_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("rpy"),
        dictgen::InsensitiveStr::Ascii("xication"),
    ],
    values: &[&["entropy"], &["intoxication"]],
    range: 3..=8,
};

static WORD_ENTI_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_ENTI_CHILDREN),
    value: None,
};

pub static WORD_ENTI_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("erly"),
        dictgen::InsensitiveStr::Ascii("erty"),
        dictgen::InsensitiveStr::Ascii("lted"),
        dictgen::InsensitiveStr::Ascii("relly"),
        dictgen::InsensitiveStr::Ascii("rey"),
        dictgen::InsensitiveStr::Ascii("rley"),
        dictgen::InsensitiveStr::Ascii("teld"),
        dictgen::InsensitiveStr::Ascii("tity"),
        dictgen::InsensitiveStr::Ascii("tlied"),
    ],
    values: &[
        &["entirely"],
        &["entirety"],
        &["entitled"],
        &["entirely"],
        &["entirety"],
        &["entirely"],
        &["entitled"],
        &["entity"],
        &["entitled"],
    ],
    range: 3..=5,
};

static WORD_ENTH_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_ENTH_CHILDREN),
    value: None,
};

pub static WORD_ENTH_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ically"),
        dictgen::InsensitiveStr::Ascii("icities"),
        dictgen::InsensitiveStr::Ascii("icity"),
        dictgen::InsensitiveStr::Ascii("isiast"),
        dictgen::InsensitiveStr::Ascii("isiasts"),
        dictgen::InsensitiveStr::Ascii("uasists"),
        dictgen::InsensitiveStr::Ascii("uiasts"),
        dictgen::InsensitiveStr::Ascii("uisast"),
        dictgen::InsensitiveStr::Ascii("uisasts"),
        dictgen::InsensitiveStr::Ascii("usaists"),
        dictgen::InsensitiveStr::Ascii("usiaists"),
        dictgen::InsensitiveStr::Ascii("usiam"),
        dictgen::InsensitiveStr::Ascii("usiams"),
        dictgen::InsensitiveStr::Ascii("usiant"),
        dictgen::InsensitiveStr::Ascii("usiants"),
        dictgen::InsensitiveStr::Ascii("usiasic"),
        dictgen::InsensitiveStr::Ascii("usiasim"),
        dictgen::InsensitiveStr::Ascii("usiasists"),
        dictgen::InsensitiveStr::Ascii("usiastics"),
        dictgen::InsensitiveStr::Ascii("usiastisch"),
        dictgen::InsensitiveStr::Ascii("usiasum"),
        dictgen::InsensitiveStr::Ascii("usiat"),
        dictgen::InsensitiveStr::Ascii("usiatic"),
        dictgen::InsensitiveStr::Ascii("usiats"),
        dictgen::InsensitiveStr::Ascii("usiest"),
        dictgen::InsensitiveStr::Ascii("usiests"),
        dictgen::InsensitiveStr::Ascii("usigasm"),
        dictgen::InsensitiveStr::Ascii("usisast"),
        dictgen::InsensitiveStr::Ascii("usists"),
        dictgen::InsensitiveStr::Ascii("usuastic"),
    ],
    values: &[
        &["ethnically"],
        &["ethnicities"],
        &["ethnicity"],
        &["enthusiast"],
        &["enthusiasts"],
        &["enthusiasts"],
        &["enthusiast"],
        &["enthusiasts"],
        &["enthusiasts"],
        &["enthusiasts"],
        &["enthusiasts"],
        &["enthusiasm"],
        &["enthusiasm"],
        &["enthusiast"],
        &["enthusiast"],
        &["enthusiastic"],
        &["enthusiasm"],
        &["enthusiasts"],
        &["enthusiasts"],
        &["enthusiastic"],
        &["enthusiasm"],
        &["enthusiast"],
        &["enthusiastic"],
        &["enthusiast"],
        &["enthusiast"],
        &["enthusiasts"],
        &["enthusiasm"],
        &["enthusiasts"],
        &["enthusiasts"],
        &["enthusiastic"],
    ],
    range: 5..=10,
};

static WORD_ENTE_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_ENTE_CHILDREN),
    value: None,
};

pub static WORD_ENTE_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ratinment"),
        dictgen::InsensitiveStr::Ascii("rity"),
        dictgen::InsensitiveStr::Ascii("rpirse"),
        dictgen::InsensitiveStr::Ascii("rpirses"),
        dictgen::InsensitiveStr::Ascii("rpreneur"),
        dictgen::InsensitiveStr::Ascii("rpreneurs"),
        dictgen::InsensitiveStr::Ascii("rprenuer"),
        dictgen::InsensitiveStr::Ascii("rprenuers"),
        dictgen::InsensitiveStr::Ascii("rpreuners"),
        dictgen::InsensitiveStr::Ascii("rprice"),
        dictgen::InsensitiveStr::Ascii("rprices"),
        dictgen::InsensitiveStr::Ascii("rpries"),
        dictgen::InsensitiveStr::Ascii("rprishe"),
        dictgen::InsensitiveStr::Ascii("rprize"),
        dictgen::InsensitiveStr::Ascii("rprsie"),
        dictgen::InsensitiveStr::Ascii("rrpise"),
        dictgen::InsensitiveStr::Ascii("rtaing"),
        dictgen::InsensitiveStr::Ascii("rtainig"),
        dictgen::InsensitiveStr::Ascii("rtainted"),
        dictgen::InsensitiveStr::Ascii("rtianment"),
        dictgen::InsensitiveStr::Ascii("rtwined"),
    ],
    values: &[
        &["entertainment"],
        &["entirety"],
        &["enterprise"],
        &["enterprises"],
        &["entrepreneurs"],
        &["entrepreneurs"],
        &["entrepreneur"],
        &["entrepreneurs"],
        &["entrepreneurs"],
        &["enterprise"],
        &["enterprises"],
        &["enterprises"],
        &["enterprises"],
        &["enterprise"],
        &["enterprises"],
        &["enterprises"],
        &["entertaining"],
        &["entertaining"],
        &["entertained"],
        &["entertainment"],
        &["entertained"],
    ],
    range: 4..=9,
};

static WORD_ENTB_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_ENTB_CHILDREN),
    value: None,
};

pub static WORD_ENTB_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("ook")],
    values: &[&["netbook"]],
    range: 3..=3,
};

static WORD_ENTA_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_ENTA_CHILDREN),
    value: None,
};

pub static WORD_ENTA_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("glements"),
        dictgen::InsensitiveStr::Ascii("rtaining"),
    ],
    values: &[&["entanglements"], &["entertaining"]],
    range: 8..=8,
};

static WORD_ENS_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_ENS_CHILDREN),
    value: None,
};

pub static WORD_ENS_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("alve"),
        dictgen::InsensitiveStr::Ascii("alved"),
        dictgen::InsensitiveStr::Ascii("consed"),
    ],
    values: &[&["enslave"], &["enslaved"], &["ensconced"]],
    range: 4..=6,
};

static WORD_ENR_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_ENR_CHILDREN),
    value: None,
};

pub static WORD_ENR_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("olement"),
        dictgen::InsensitiveStr::Ascii("ollemnt"),
    ],
    values: &[&["enrollment"], &["enrollment"]],
    range: 7..=7,
};

static WORD_ENO_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_ENO_CHILDREN),
    value: None,
};

pub static WORD_ENO_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("urmous"),
        dictgen::InsensitiveStr::Ascii("urmously"),
    ],
    values: &[&["enormous"], &["enormously"]],
    range: 6..=8,
};

static WORD_ENL_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_ENL_CHILDREN),
    value: None,
};

pub static WORD_ENL_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("argment"),
        dictgen::InsensitiveStr::Ascii("argments"),
        dictgen::InsensitiveStr::Ascii("cave"),
        dictgen::InsensitiveStr::Ascii("cosed"),
        dictgen::InsensitiveStr::Ascii("gish"),
        dictgen::InsensitiveStr::Ascii("ighment"),
        dictgen::InsensitiveStr::Ascii("ightend"),
        dictgen::InsensitiveStr::Ascii("ightended"),
        dictgen::InsensitiveStr::Ascii("ightenend"),
        dictgen::InsensitiveStr::Ascii("ightented"),
        dictgen::InsensitiveStr::Ascii("ightenting"),
        dictgen::InsensitiveStr::Ascii("ightining"),
        dictgen::InsensitiveStr::Ascii("ightned"),
        dictgen::InsensitiveStr::Ascii("ightnement"),
        dictgen::InsensitiveStr::Ascii("igthen"),
        dictgen::InsensitiveStr::Ascii("igthened"),
        dictgen::InsensitiveStr::Ascii("igthening"),
        dictgen::InsensitiveStr::Ascii("igthenment"),
        dictgen::InsensitiveStr::Ascii("ish"),
        dictgen::InsensitiveStr::Ascii("save"),
        dictgen::InsensitiveStr::Ascii("saved"),
    ],
    values: &[
        &["enlargement"],
        &["enlargements"],
        &["enclave"],
        &["enclosed"],
        &["english"],
        &["enlighten"],
        &["enlightened"],
        &["enlightened"],
        &["enlightened"],
        &["enlightened"],
        &["enlightening"],
        &["enlightening"],
        &["enlightened"],
        &["enlightenment"],
        &["enlighten"],
        &["enlightened"],
        &["enlightening"],
        &["enlightenment"],
        &["english"],
        &["enslave"],
        &["enslaved"],
    ],
    range: 3..=10,
};

static WORD_ENI_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_ENI_CHILDREN),
    value: None,
};

pub static WORD_ENI_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("gneer"),
        dictgen::InsensitiveStr::Ascii("trely"),
        dictgen::InsensitiveStr::Ascii("vitable"),
        dictgen::InsensitiveStr::Ascii("vronmentally"),
    ],
    values: &[
        &["engineer"],
        &["entirely"],
        &["inevitable"],
        &["environmentally"],
    ],
    range: 5..=12,
};

static WORD_ENH_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_ENH_CHILDREN),
    value: None,
};

pub static WORD_ENH_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("acning"),
        dictgen::InsensitiveStr::Ascii("anceds"),
        dictgen::InsensitiveStr::Ascii("anse"),
    ],
    values: &[&["enhancing"], &["enhances"], &["enhances"]],
    range: 4..=6,
};

static WORD_ENG_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_ENG_CHILDREN),
    value: None,
};

pub static WORD_ENG_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("agaments"),
        dictgen::InsensitiveStr::Ascii("agemet"),
        dictgen::InsensitiveStr::Ascii("agemnet"),
        dictgen::InsensitiveStr::Ascii("agemnts"),
        dictgen::InsensitiveStr::Ascii("agment"),
        dictgen::InsensitiveStr::Ascii("eneer"),
        dictgen::InsensitiveStr::Ascii("eneering"),
        dictgen::InsensitiveStr::Ascii("eries"),
        dictgen::InsensitiveStr::Ascii("ieneer"),
        dictgen::InsensitiveStr::Ascii("ieneers"),
        dictgen::InsensitiveStr::Ascii("ineed"),
        dictgen::InsensitiveStr::Ascii("ineeer"),
        dictgen::InsensitiveStr::Ascii("ineerd"),
        dictgen::InsensitiveStr::Ascii("iner"),
        dictgen::InsensitiveStr::Ascii("inereed"),
        dictgen::InsensitiveStr::Ascii("inerring"),
        dictgen::InsensitiveStr::Ascii("innering"),
        dictgen::InsensitiveStr::Ascii("lsih"),
        dictgen::InsensitiveStr::Ascii("rames"),
        dictgen::InsensitiveStr::Ascii("ramms"),
    ],
    values: &[
        &["engagements"],
        &["engagements"],
        &["engagements"],
        &["engagements"],
        &["engagement"],
        &["engineer"],
        &["engineering"],
        &["energies"],
        &["engineer"],
        &["engineers"],
        &["engineered"],
        &["engineer"],
        &["engineered"],
        &["engineer"],
        &["engineered"],
        &["engineering"],
        &["engineering"],
        &["english"],
        &["engrams"],
        &["engrams"],
    ],
    range: 4..=8,
};

static WORD_ENF_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_ENF_CHILDREN),
    value: None,
};

pub static WORD_ENF_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("orcees"),
        dictgen::InsensitiveStr::Ascii("orceing"),
        dictgen::InsensitiveStr::Ascii("orse"),
        dictgen::InsensitiveStr::Ascii("ringement"),
    ],
    values: &[
        &["enforces"],
        &["enforcing"],
        &["enforces"],
        &["infringement"],
    ],
    range: 4..=9,
};

static WORD_ENE_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_ENE_CHILDREN),
    value: None,
};

pub static WORD_ENE_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("d"),
        dictgen::InsensitiveStr::Ascii("mployment"),
        dictgen::InsensitiveStr::Ascii("rgis"),
        dictgen::InsensitiveStr::Ascii("vlopes"),
    ],
    values: &[&["need"], &["unemployment"], &["energies"], &["envelopes"]],
    range: 1..=9,
};

static WORD_END_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_END_CHILDREN),
    value: None,
};

pub static WORD_END_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("agnering"),
        dictgen::InsensitiveStr::Ascii("andering"),
        dictgen::InsensitiveStr::Ascii("anged"),
        dictgen::InsensitiveStr::Ascii("angerd"),
        dictgen::InsensitiveStr::Ascii("evors"),
        dictgen::InsensitiveStr::Ascii("evour"),
        dictgen::InsensitiveStr::Ascii("ig"),
        dictgen::InsensitiveStr::Ascii("lessley"),
        dictgen::InsensitiveStr::Ascii("lessy"),
        dictgen::InsensitiveStr::Ascii("octrinated"),
        dictgen::InsensitiveStr::Ascii("octrination"),
        dictgen::InsensitiveStr::Ascii("olithes"),
        dictgen::InsensitiveStr::Ascii("orcement"),
        dictgen::InsensitiveStr::Ascii("orces"),
        dictgen::InsensitiveStr::Ascii("ores"),
        dictgen::InsensitiveStr::Ascii("oresment"),
        dictgen::InsensitiveStr::Ascii("oresments"),
        dictgen::InsensitiveStr::Ascii("rose"),
        dictgen::InsensitiveStr::Ascii("uce"),
    ],
    values: &[
        &["endangering"],
        &["endangering"],
        &["endangered"],
        &["endangered"],
        &["endeavors"],
        &["endeavour"],
        &["ending"],
        &["endlessly"],
        &["endlessly"],
        &["indoctrinated"],
        &["indoctrination"],
        &["endoliths"],
        &["endorsement"],
        &["endorse"],
        &["endorse"],
        &["endorsement"],
        &["endorsement"],
        &["endorse"],
        &["induce"],
    ],
    range: 2..=11,
};

static WORD_ENC_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_ENC_CHILDREN),
    value: None,
};

static WORD_ENC_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    Some(&WORD_ENCA_NODE),
    None,
    None,
    None,
    Some(&WORD_ENCE_NODE),
    None,
    None,
    Some(&WORD_ENCH_NODE),
    Some(&WORD_ENCI_NODE),
    None,
    None,
    Some(&WORD_ENCL_NODE),
    None,
    None,
    Some(&WORD_ENCO_NODE),
    None,
    None,
    Some(&WORD_ENCR_NODE),
    None,
    None,
    None,
    None,
    None,
    None,
    Some(&WORD_ENCY_NODE),
    None,
];

static WORD_ENCY_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_ENCY_CHILDREN),
    value: None,
};

pub static WORD_ENCY_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("clapedia"),
        dictgen::InsensitiveStr::Ascii("clepedia"),
        dictgen::InsensitiveStr::Ascii("clopadia"),
        dictgen::InsensitiveStr::Ascii("clopdia"),
        dictgen::InsensitiveStr::Ascii("clopeadia"),
        dictgen::InsensitiveStr::Ascii("clopeadic"),
        dictgen::InsensitiveStr::Ascii("clopeedia"),
        dictgen::InsensitiveStr::Ascii("clopeida"),
        dictgen::InsensitiveStr::Ascii("clopidia"),
        dictgen::InsensitiveStr::Ascii("colpedia"),
        dictgen::InsensitiveStr::Ascii("colpedias"),
        dictgen::InsensitiveStr::Ascii("klopedia"),
        dictgen::InsensitiveStr::Ascii("lcopedia"),
        dictgen::InsensitiveStr::Ascii("lopedia"),
        dictgen::InsensitiveStr::Ascii("plopedia"),
        dictgen::InsensitiveStr::Ascii("rpt"),
        dictgen::InsensitiveStr::Ascii("rpted"),
        dictgen::InsensitiveStr::Ascii("rption"),
    ],
    values: &[
        &["encyclopedia"],
        &["encyclopedia"],
        &["encyclopedia"],
        &["encyclopedia"],
        &["encyclopedia"],
        &["encyclopedia"],
        &["encyclopedia"],
        &["encyclopedia"],
        &["encyclopedia"],
        &["encyclopedia"],
        &["encyclopedia"],
        &["encyclopedia"],
        &["encyclopedia"],
        &["encyclopedia"],
        &["encyclopedia"],
        &["encrypt"],
        &["encrypted"],
        &["encryption"],
    ],
    range: 3..=9,
};

static WORD_ENCR_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_ENCR_CHILDREN),
    value: None,
};

pub static WORD_ENCR_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("iption"),
        dictgen::InsensitiveStr::Ascii("pyt"),
        dictgen::InsensitiveStr::Ascii("pyted"),
        dictgen::InsensitiveStr::Ascii("pytion"),
        dictgen::InsensitiveStr::Ascii("yptiion"),
        dictgen::InsensitiveStr::Ascii("ytped"),
    ],
    values: &[
        &["encryption"],
        &["encrypt"],
        &["encrypted"],
        &["encryption"],
        &["encryption"],
        &["encrypted"],
    ],
    range: 3..=7,
};

static WORD_ENCO_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_ENCO_CHILDREN),
    value: None,
};

pub static WORD_ENCO_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("lsed"),
        dictgen::InsensitiveStr::Ascii("lsure"),
        dictgen::InsensitiveStr::Ascii("mapsses"),
        dictgen::InsensitiveStr::Ascii("mpase"),
        dictgen::InsensitiveStr::Ascii("mpases"),
        dictgen::InsensitiveStr::Ascii("mpasess"),
        dictgen::InsensitiveStr::Ascii("mpesses"),
        dictgen::InsensitiveStr::Ascii("rporated"),
        dictgen::InsensitiveStr::Ascii("rporating"),
        dictgen::InsensitiveStr::Ascii("unted"),
        dictgen::InsensitiveStr::Ascii("unterd"),
        dictgen::InsensitiveStr::Ascii("unteres"),
        dictgen::InsensitiveStr::Ascii("untred"),
        dictgen::InsensitiveStr::Ascii("urageing"),
        dictgen::InsensitiveStr::Ascii("uraing"),
        dictgen::InsensitiveStr::Ascii("utnered"),
        dictgen::InsensitiveStr::Ascii("utners"),
    ],
    values: &[
        &["enclosed"],
        &["enclosure"],
        &["encompasses"],
        &["encompass"],
        &["encompasses"],
        &["encompasses"],
        &["encompasses"],
        &["incorporated"],
        &["incorporating"],
        &["encountered"],
        &["encountered"],
        &["encounters"],
        &["encountered"],
        &["encouraging"],
        &["encouraging"],
        &["encountered"],
        &["encounters"],
    ],
    range: 4..=9,
};

static WORD_ENCL_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_ENCL_CHILDREN),
    value: None,
};

pub static WORD_ENCL_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ousre"),
        dictgen::InsensitiveStr::Ascii("soure"),
        dictgen::InsensitiveStr::Ascii("ycopedia"),
    ],
    values: &[&["enclosure"], &["enclosure"], &["encyclopedia"]],
    range: 5..=8,
};

static WORD_ENCI_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_ENCI_CHILDREN),
    value: None,
};

pub static WORD_ENCI_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("clopedia")],
    values: &[&["encyclopedia"]],
    range: 8..=8,
};

static WORD_ENCH_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_ENCH_CHILDREN),
    value: None,
};

pub static WORD_ENCH_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("amtment"),
        dictgen::InsensitiveStr::Ascii("ancement"),
        dictgen::InsensitiveStr::Ascii("ancing"),
        dictgen::InsensitiveStr::Ascii("ancment"),
        dictgen::InsensitiveStr::Ascii("ancments"),
        dictgen::InsensitiveStr::Ascii("anct"),
        dictgen::InsensitiveStr::Ascii("anement"),
        dictgen::InsensitiveStr::Ascii("anging"),
        dictgen::InsensitiveStr::Ascii("antent"),
        dictgen::InsensitiveStr::Ascii("anthing"),
        dictgen::InsensitiveStr::Ascii("antig"),
        dictgen::InsensitiveStr::Ascii("antmant"),
        dictgen::InsensitiveStr::Ascii("antmants"),
        dictgen::InsensitiveStr::Ascii("antmens"),
        dictgen::InsensitiveStr::Ascii("antmet"),
        dictgen::InsensitiveStr::Ascii("antmets"),
        dictgen::InsensitiveStr::Ascii("entments"),
    ],
    values: &[
        &["enchantment"],
        &["enhancement"],
        &["enchanting"],
        &["enchantment"],
        &["enchantments"],
        &["enchant"],
        &["enchantment"],
        &["enchanting"],
        &["enchantment"],
        &["enchanting"],
        &["enchanting"],
        &["enchantment"],
        &["enchantments"],
        &["enchantments"],
        &["enchantments"],
        &["enchantments"],
        &["enchantments"],
    ],
    range: 4..=8,
};

static WORD_ENCE_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_ENCE_CHILDREN),
    value: None,
};

pub static WORD_ENCE_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("clopedia")],
    values: &[&["encyclopedia"]],
    range: 8..=8,
};

static WORD_ENCA_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_ENCA_CHILDREN),
    value: None,
};

pub static WORD_ENCA_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("hnt"),
        dictgen::InsensitiveStr::Ascii("hnting"),
        dictgen::InsensitiveStr::Ascii("lve"),
        dictgen::InsensitiveStr::Ascii("rcerated"),
        dictgen::InsensitiveStr::Ascii("rceration"),
    ],
    values: &[
        &["enchant"],
        &["enchanting"],
        &["enclave"],
        &["incarcerated"],
        &["incarceration"],
    ],
    range: 3..=9,
};

static WORD_ENA_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_ENA_CHILDREN),
    value: None,
};

pub static WORD_ENA_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("hnces"),
        dictgen::InsensitiveStr::Ascii("hncing"),
        dictgen::InsensitiveStr::Ascii("meld"),
    ],
    values: &[&["enhances"], &["enhancing"], &["enameled"]],
    range: 4..=6,
};

static WORD_EM_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_EM_CHILDREN),
    value: None,
};

static WORD_EM_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    Some(&WORD_EMA_NODE),
    Some(&WORD_EMB_NODE),
    None,
    None,
    Some(&WORD_EME_NODE),
    None,
    None,
    None,
    Some(&WORD_EMI_NODE),
    None,
    None,
    None,
    Some(&WORD_EMM_NODE),
    Some(&WORD_EMN_NODE),
    Some(&WORD_EMO_NODE),
    Some(&WORD_EMP_NODE),
    None,
    None,
    None,
    Some(&WORD_EMT_NODE),
    Some(&WORD_EMU_NODE),
    None,
    None,
    None,
    None,
    None,
];

static WORD_EMU_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_EMU_CHILDREN),
    value: None,
};

pub static WORD_EMU_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("altion"),
        dictgen::InsensitiveStr::Ascii("latin"),
    ],
    values: &[&["emulation"], &["emulation"]],
    range: 5..=6,
};

static WORD_EMT_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_EMT_CHILDREN),
    value: None,
};

pub static WORD_EMT_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("pied"),
        dictgen::InsensitiveStr::Ascii("piness"),
        dictgen::InsensitiveStr::Ascii("py"),
    ],
    values: &[&["emptied"], &["emptiness"], &["empty"]],
    range: 2..=6,
};

static WORD_EMP_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_EMP_CHILDREN),
    value: None,
};

pub static WORD_EMP_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ahsize"),
        dictgen::InsensitiveStr::Ascii("ahsized"),
        dictgen::InsensitiveStr::Ascii("ahsizes"),
        dictgen::InsensitiveStr::Ascii("ahsizing"),
        dictgen::InsensitiveStr::Ascii("ahty"),
        dictgen::InsensitiveStr::Ascii("athatic"),
        dictgen::InsensitiveStr::Ascii("athethic"),
        dictgen::InsensitiveStr::Ascii("athie"),
        dictgen::InsensitiveStr::Ascii("erical"),
        dictgen::InsensitiveStr::Ascii("hacized"),
        dictgen::InsensitiveStr::Ascii("hacizing"),
        dictgen::InsensitiveStr::Ascii("haised"),
        dictgen::InsensitiveStr::Ascii("hatetic"),
        dictgen::InsensitiveStr::Ascii("hatised"),
        dictgen::InsensitiveStr::Ascii("hatising"),
        dictgen::InsensitiveStr::Ascii("hatize"),
        dictgen::InsensitiveStr::Ascii("hatized"),
        dictgen::InsensitiveStr::Ascii("hatizes"),
        dictgen::InsensitiveStr::Ascii("hatizing"),
        dictgen::InsensitiveStr::Ascii("hazise"),
        dictgen::InsensitiveStr::Ascii("hazised"),
        dictgen::InsensitiveStr::Ascii("hazises"),
        dictgen::InsensitiveStr::Ascii("hazising"),
        dictgen::InsensitiveStr::Ascii("hesized"),
        dictgen::InsensitiveStr::Ascii("hesizes"),
        dictgen::InsensitiveStr::Ascii("hesizing"),
        dictgen::InsensitiveStr::Ascii("hetamines"),
        dictgen::InsensitiveStr::Ascii("hisized"),
        dictgen::InsensitiveStr::Ascii("hisizes"),
        dictgen::InsensitiveStr::Ascii("hsis"),
        dictgen::InsensitiveStr::Ascii("hysyma"),
        dictgen::InsensitiveStr::Ascii("iers"),
        dictgen::InsensitiveStr::Ascii("iracally"),
        dictgen::InsensitiveStr::Ascii("irial"),
        dictgen::InsensitiveStr::Ascii("irialism"),
        dictgen::InsensitiveStr::Ascii("irialist"),
        dictgen::InsensitiveStr::Ascii("iricaly"),
        dictgen::InsensitiveStr::Ascii("ited"),
        dictgen::InsensitiveStr::Ascii("itness"),
        dictgen::InsensitiveStr::Ascii("lore"),
        dictgen::InsensitiveStr::Ascii("loyeer"),
        dictgen::InsensitiveStr::Ascii("loyeers"),
        dictgen::InsensitiveStr::Ascii("loyeur"),
        dictgen::InsensitiveStr::Ascii("loyeurs"),
        dictgen::InsensitiveStr::Ascii("olyees"),
        dictgen::InsensitiveStr::Ascii("orer"),
        dictgen::InsensitiveStr::Ascii("ries"),
        dictgen::InsensitiveStr::Ascii("risoned"),
        dictgen::InsensitiveStr::Ascii("risonment"),
    ],
    values: &[
        &["emphasize"],
        &["emphasized"],
        &["emphasizes"],
        &["emphasizing"],
        &["empathy"],
        &["empathetic"],
        &["empathetic"],
        &["empathize"],
        &["empirical"],
        &["emphasized"],
        &["emphasizing"],
        &["emphasised"],
        &["empathetic"],
        &["emphasised"],
        &["emphasising"],
        &["empathize"],
        &["emphasized"],
        &["emphasizes"],
        &["emphasizing"],
        &["emphasise"],
        &["emphasised"],
        &["emphasises"],
        &["emphasising"],
        &["emphasized"],
        &["emphasizes"],
        &["emphasizing"],
        &["amphetamines"],
        &["emphasized"],
        &["emphasizes"],
        &["emphasis"],
        &["emphysema"],
        &["empires"],
        &["empirically"],
        &["empirical"],
        &["imperialism"],
        &["imperialist"],
        &["empirically"],
        &["emptied"],
        &["emptiness"],
        &["employer"],
        &["employer"],
        &["employees"],
        &["employer"],
        &["employer"],
        &["employees"],
        &["emperor"],
        &["empires"],
        &["imprisoned"],
        &["imprisonment"],
    ],
    range: 4..=9,
};

static WORD_EMO_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_EMO_CHILDREN),
    value: None,
};

pub static WORD_EMO_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("bdiment"),
        dictgen::InsensitiveStr::Ascii("tionaly"),
        dictgen::InsensitiveStr::Ascii("tionella"),
    ],
    values: &[&["embodiment"], &["emotionally"], &["emotionally"]],
    range: 7..=8,
};

static WORD_EMN_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_EMN_CHILDREN),
    value: None,
};

pub static WORD_EMN_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("ity")],
    values: &[&["enmity"]],
    range: 3..=3,
};

static WORD_EMM_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_EMM_CHILDREN),
    value: None,
};

pub static WORD_EMM_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ediately"),
        dictgen::InsensitiveStr::Ascii("igrated"),
        dictgen::InsensitiveStr::Ascii("inent"),
        dictgen::InsensitiveStr::Ascii("inently"),
        dictgen::InsensitiveStr::Ascii("isaries"),
        dictgen::InsensitiveStr::Ascii("isarries"),
        dictgen::InsensitiveStr::Ascii("isarry"),
        dictgen::InsensitiveStr::Ascii("isary"),
        dictgen::InsensitiveStr::Ascii("ision"),
        dictgen::InsensitiveStr::Ascii("isions"),
        dictgen::InsensitiveStr::Ascii("ited"),
        dictgen::InsensitiveStr::Ascii("iting"),
        dictgen::InsensitiveStr::Ascii("itted"),
        dictgen::InsensitiveStr::Ascii("itting"),
    ],
    values: &[
        &["immediately"],
        &["emigrated"],
        &["eminent"],
        &["eminently"],
        &["emissaries"],
        &["emissaries"],
        &["emissary"],
        &["emissary"],
        &["emission"],
        &["emissions"],
        &["emitted"],
        &["emitting"],
        &["emitted"],
        &["emitting"],
    ],
    range: 4..=8,
};

static WORD_EMI_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_EMI_CHILDREN),
    value: None,
};

pub static WORD_EMI_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("nate"),
        dictgen::InsensitiveStr::Ascii("nated"),
        dictgen::InsensitiveStr::Ascii("pres"),
        dictgen::InsensitiveStr::Ascii("sion"),
        dictgen::InsensitiveStr::Ascii("ted"),
        dictgen::InsensitiveStr::Ascii("ting"),
        dictgen::InsensitiveStr::Ascii("tion"),
    ],
    values: &[
        &["emanate"],
        &["emanated"],
        &["empires"],
        &["emission"],
        &["emitted"],
        &["emitting"],
        &["emission"],
    ],
    range: 3..=5,
};

static WORD_EME_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_EME_CHILDREN),
    value: None,
};

pub static WORD_EME_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("rgancies"),
        dictgen::InsensitiveStr::Ascii("rgencias"),
        dictgen::InsensitiveStr::Ascii("rgend"),
        dictgen::InsensitiveStr::Ascii("rgenices"),
        dictgen::InsensitiveStr::Ascii("rgenies"),
        dictgen::InsensitiveStr::Ascii("rgerd"),
    ],
    values: &[
        &["emergencies"],
        &["emergencies"],
        &["emerged"],
        &["emergencies"],
        &["emergencies"],
        &["emerged"],
    ],
    range: 5..=8,
};

static WORD_EMB_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_EMB_CHILDREN),
    value: None,
};

pub static WORD_EMB_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("araasing"),
        dictgen::InsensitiveStr::Ascii("arasaing"),
        dictgen::InsensitiveStr::Ascii("arass"),
        dictgen::InsensitiveStr::Ascii("arassed"),
        dictgen::InsensitiveStr::Ascii("arassig"),
        dictgen::InsensitiveStr::Ascii("arassign"),
        dictgen::InsensitiveStr::Ascii("arassimg"),
        dictgen::InsensitiveStr::Ascii("arassing"),
        dictgen::InsensitiveStr::Ascii("arassment"),
        dictgen::InsensitiveStr::Ascii("arasssing"),
        dictgen::InsensitiveStr::Ascii("argos"),
        dictgen::InsensitiveStr::Ascii("arissing"),
        dictgen::InsensitiveStr::Ascii("arras"),
        dictgen::InsensitiveStr::Ascii("arrased"),
        dictgen::InsensitiveStr::Ascii("arrasement"),
        dictgen::InsensitiveStr::Ascii("arrases"),
        dictgen::InsensitiveStr::Ascii("arrasing"),
        dictgen::InsensitiveStr::Ascii("arrasment"),
        dictgen::InsensitiveStr::Ascii("arrasments"),
        dictgen::InsensitiveStr::Ascii("arress"),
        dictgen::InsensitiveStr::Ascii("arressed"),
        dictgen::InsensitiveStr::Ascii("arressing"),
        dictgen::InsensitiveStr::Ascii("arressment"),
        dictgen::InsensitiveStr::Ascii("arrissing"),
        dictgen::InsensitiveStr::Ascii("arrssing"),
        dictgen::InsensitiveStr::Ascii("assay"),
        dictgen::InsensitiveStr::Ascii("assey"),
        dictgen::InsensitiveStr::Ascii("asssy"),
        dictgen::InsensitiveStr::Ascii("eded"),
        dictgen::InsensitiveStr::Ascii("errassing"),
        dictgen::InsensitiveStr::Ascii("errassment"),
        dictgen::InsensitiveStr::Ascii("ezelled"),
        dictgen::InsensitiveStr::Ascii("lamatic"),
        dictgen::InsensitiveStr::Ascii("odyment"),
        dictgen::InsensitiveStr::Ascii("rago"),
    ],
    values: &[
        &["embarassing"],
        &["embarassing"],
        &["embarrass"],
        &["embarrassed"],
        &["embarassing"],
        &["embarassing"],
        &["embarassing"],
        &["embarrassing"],
        &["embarrassment"],
        &["embarassing"],
        &["embargoes"],
        &["embarassing"],
        &["embarrass"],
        &["embarrassed"],
        &["embarrassment"],
        &["embarrassed"],
        &["embarrassing"],
        &["embarrassment"],
        &["embarrassment"],
        &["embarrassed"],
        &["embarrassed"],
        &["embarrassing"],
        &["embarrassment"],
        &["embarrassing"],
        &["embarassing"],
        &["embassy"],
        &["embassy"],
        &["embassy"],
        &["embedded"],
        &["embarrassing"],
        &["embarrassment"],
        &["embezzled"],
        &["emblematic"],
        &["embodiment"],
        &["embargo"],
    ],
    range: 4..=10,
};

static WORD_EMA_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_EMA_CHILDREN),
    value: None,
};

pub static WORD_EMA_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("brassing"),
        dictgen::InsensitiveStr::Ascii("brgo"),
        dictgen::InsensitiveStr::Ascii("bssy"),
        dictgen::InsensitiveStr::Ascii("pthetic"),
        dictgen::InsensitiveStr::Ascii("pthize"),
        dictgen::InsensitiveStr::Ascii("pthy"),
    ],
    values: &[
        &["embarassing"],
        &["embargo"],
        &["embassy"],
        &["empathetic"],
        &["empathize"],
        &["empathy"],
    ],
    range: 4..=8,
};

static WORD_EL_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_EL_CHILDREN),
    value: None,
};

static WORD_EL_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    Some(&WORD_ELA_NODE),
    None,
    Some(&WORD_ELC_NODE),
    Some(&WORD_ELD_NODE),
    Some(&WORD_ELE_NODE),
    None,
    None,
    None,
    Some(&WORD_ELI_NODE),
    None,
    None,
    Some(&WORD_ELL_NODE),
    None,
    None,
    Some(&WORD_ELO_NODE),
    Some(&WORD_ELP_NODE),
    None,
    None,
    Some(&WORD_ELS_NODE),
    None,
    None,
    None,
    None,
    None,
    None,
    None,
];

static WORD_ELS_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_ELS_CHILDREN),
    value: None,
};

pub static WORD_ELS_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("ehwere")],
    values: &[&["elsewhere"]],
    range: 6..=6,
};

static WORD_ELP_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_ELP_CHILDREN),
    value: None,
};

pub static WORD_ELP_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("hant")],
    values: &[&["elephant"]],
    range: 4..=4,
};

static WORD_ELO_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_ELO_CHILDREN),
    value: None,
};

pub static WORD_ELO_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ctrolytes"),
        dictgen::InsensitiveStr::Ascii("quantly"),
        dictgen::InsensitiveStr::Ascii("quentely"),
        dictgen::InsensitiveStr::Ascii("quenty"),
        dictgen::InsensitiveStr::Ascii("quintly"),
    ],
    values: &[
        &["electrolytes"],
        &["eloquently"],
        &["eloquently"],
        &["eloquently"],
        &["eloquently"],
    ],
    range: 6..=9,
};

static WORD_ELL_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_ELL_CHILDREN),
    value: None,
};

pub static WORD_ELL_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ected"),
        dictgen::InsensitiveStr::Ascii("ignton"),
        dictgen::InsensitiveStr::Ascii("ingotn"),
        dictgen::InsensitiveStr::Ascii("ipitcal"),
        dictgen::InsensitiveStr::Ascii("ipitcals"),
        dictgen::InsensitiveStr::Ascii("ipsical"),
        dictgen::InsensitiveStr::Ascii("ipticle"),
        dictgen::InsensitiveStr::Ascii("itot"),
        dictgen::InsensitiveStr::Ascii("itpical"),
        dictgen::InsensitiveStr::Ascii("oitt"),
        dictgen::InsensitiveStr::Ascii("pitical"),
    ],
    values: &[
        &["elected"],
        &["ellington"],
        &["ellington"],
        &["elliptical"],
        &["elliptical"],
        &["elliptical"],
        &["elliptical"],
        &["elliott"],
        &["elliptical"],
        &["elliott"],
        &["elliptical"],
    ],
    range: 4..=8,
};

static WORD_ELI_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_ELI_CHILDREN),
    value: None,
};

pub static WORD_ELI_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("cided"),
        dictgen::InsensitiveStr::Ascii("gable"),
        dictgen::InsensitiveStr::Ascii("manates"),
        dictgen::InsensitiveStr::Ascii("manation"),
        dictgen::InsensitiveStr::Ascii("menates"),
        dictgen::InsensitiveStr::Ascii("mentary"),
        dictgen::InsensitiveStr::Ascii("miate"),
        dictgen::InsensitiveStr::Ascii("mimates"),
        dictgen::InsensitiveStr::Ascii("minacion"),
        dictgen::InsensitiveStr::Ascii("minas"),
        dictgen::InsensitiveStr::Ascii("minase"),
        dictgen::InsensitiveStr::Ascii("minaste"),
        dictgen::InsensitiveStr::Ascii("minatin"),
        dictgen::InsensitiveStr::Ascii("minato"),
        dictgen::InsensitiveStr::Ascii("minaton"),
        dictgen::InsensitiveStr::Ascii("minster"),
        dictgen::InsensitiveStr::Ascii("mintates"),
        dictgen::InsensitiveStr::Ascii("tisim"),
        dictgen::InsensitiveStr::Ascii("tistm"),
    ],
    values: &[
        &["elicited"],
        &["eligible"],
        &["eliminates"],
        &["elimination"],
        &["eliminates"],
        &["elementary"],
        &["eliminate"],
        &["eliminates"],
        &["elimination"],
        &["eliminates"],
        &["eliminates"],
        &["eliminates"],
        &["elimination"],
        &["elimination"],
        &["elimination"],
        &["eliminates"],
        &["eliminates"],
        &["elitism"],
        &["elitism"],
    ],
    range: 5..=8,
};

static WORD_ELE_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_ELE_CHILDREN),
    value: None,
};

static WORD_ELE_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    None,
    None,
    Some(&WORD_ELEC_NODE),
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    Some(&WORD_ELEK_NODE),
    None,
    Some(&WORD_ELEM_NODE),
    None,
    None,
    Some(&WORD_ELEP_NODE),
    None,
    None,
    Some(&WORD_ELES_NODE),
    Some(&WORD_ELET_NODE),
    None,
    Some(&WORD_ELEV_NODE),
    None,
    None,
    None,
    None,
];

static WORD_ELEV_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_ELEV_CHILDREN),
    value: None,
};

pub static WORD_ELEV_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("atin")],
    values: &[&["elevation"]],
    range: 4..=4,
};

static WORD_ELET_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_ELET_CHILDREN),
    value: None,
};

pub static WORD_ELET_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("ricity")],
    values: &[&["electricity"]],
    range: 6..=6,
};

static WORD_ELES_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_ELES_CHILDREN),
    value: Some(&["eels"]),
};

pub static WORD_ELES_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[],
    values: &[],
    range: 0..=0,
};

static WORD_ELEP_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_ELEP_CHILDREN),
    value: None,
};

pub static WORD_ELEP_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ahnts"),
        dictgen::InsensitiveStr::Ascii("hans"),
        dictgen::InsensitiveStr::Ascii("hantes"),
        dictgen::InsensitiveStr::Ascii("hantis"),
        dictgen::InsensitiveStr::Ascii("hantos"),
        dictgen::InsensitiveStr::Ascii("hantus"),
    ],
    values: &[
        &["elephants"],
        &["elephants"],
        &["elephants"],
        &["elephants"],
        &["elephants"],
        &["elephants"],
    ],
    range: 4..=6,
};

static WORD_ELEM_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_ELEM_CHILDREN),
    value: None,
};

pub static WORD_ELEM_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("antary"),
        dictgen::InsensitiveStr::Ascii("entay"),
        dictgen::InsensitiveStr::Ascii("entery"),
        dictgen::InsensitiveStr::Ascii("entrary"),
        dictgen::InsensitiveStr::Ascii("entray"),
        dictgen::InsensitiveStr::Ascii("enty"),
        dictgen::InsensitiveStr::Ascii("inated"),
        dictgen::InsensitiveStr::Ascii("inating"),
    ],
    values: &[
        &["elementary"],
        &["elementary"],
        &["elementary"],
        &["elementary"],
        &["elementary"],
        &["elementary"],
        &["eliminated"],
        &["eliminating"],
    ],
    range: 4..=7,
};

static WORD_ELEK_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_ELEK_CHILDREN),
    value: None,
};

pub static WORD_ELEK_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("trolytes")],
    values: &[&["electrolytes"]],
    range: 8..=8,
};

static WORD_ELEC_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_ELEC_CHILDREN),
    value: None,
};

static WORD_ELEC_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    Some(&WORD_ELECR_NODE),
    None,
    Some(&WORD_ELECT_NODE),
    None,
    None,
    None,
    None,
    None,
    None,
];

static WORD_ELECT_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_ELECT_CHILDREN),
    value: None,
};

pub static WORD_ELECT_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("hor"),
        dictgen::InsensitiveStr::Ascii("ic"),
        dictgen::InsensitiveStr::Ascii("ircal"),
        dictgen::InsensitiveStr::Ascii("ivite"),
        dictgen::InsensitiveStr::Ascii("ivre"),
        dictgen::InsensitiveStr::Ascii("on"),
        dictgen::InsensitiveStr::Ascii("oraat"),
        dictgen::InsensitiveStr::Ascii("orale"),
        dictgen::InsensitiveStr::Ascii("oratul"),
        dictgen::InsensitiveStr::Ascii("orite"),
        dictgen::InsensitiveStr::Ascii("orlytes"),
        dictgen::InsensitiveStr::Ascii("ormagnetic"),
        dictgen::InsensitiveStr::Ascii("orn"),
        dictgen::InsensitiveStr::Ascii("ornic"),
        dictgen::InsensitiveStr::Ascii("ornics"),
        dictgen::InsensitiveStr::Ascii("orns"),
        dictgen::InsensitiveStr::Ascii("rial"),
        dictgen::InsensitiveStr::Ascii("ricain"),
        dictgen::InsensitiveStr::Ascii("rican"),
        dictgen::InsensitiveStr::Ascii("ricial"),
        dictgen::InsensitiveStr::Ascii("ricien"),
        dictgen::InsensitiveStr::Ascii("ricion"),
        dictgen::InsensitiveStr::Ascii("riciy"),
        dictgen::InsensitiveStr::Ascii("ricman"),
        dictgen::InsensitiveStr::Ascii("ricrain"),
        dictgen::InsensitiveStr::Ascii("rictian"),
        dictgen::InsensitiveStr::Ascii("ricty"),
        dictgen::InsensitiveStr::Ascii("ricy"),
        dictgen::InsensitiveStr::Ascii("rinic"),
        dictgen::InsensitiveStr::Ascii("risity"),
        dictgen::InsensitiveStr::Ascii("ritian"),
        dictgen::InsensitiveStr::Ascii("roal"),
        dictgen::InsensitiveStr::Ascii("roate"),
        dictgen::InsensitiveStr::Ascii("robytes"),
        dictgen::InsensitiveStr::Ascii("rocity"),
        dictgen::InsensitiveStr::Ascii("rocytes"),
        dictgen::InsensitiveStr::Ascii("rodan"),
        dictgen::InsensitiveStr::Ascii("roinc"),
        dictgen::InsensitiveStr::Ascii("rolites"),
        dictgen::InsensitiveStr::Ascii("roltyes"),
        dictgen::InsensitiveStr::Ascii("rolye"),
        dictgen::InsensitiveStr::Ascii("rolyes"),
        dictgen::InsensitiveStr::Ascii("rolyts"),
        dictgen::InsensitiveStr::Ascii("romagentic"),
        dictgen::InsensitiveStr::Ascii("romagnatic"),
        dictgen::InsensitiveStr::Ascii("romagnectic"),
        dictgen::InsensitiveStr::Ascii("romagnetc"),
        dictgen::InsensitiveStr::Ascii("romagntic"),
        dictgen::InsensitiveStr::Ascii("roman"),
        dictgen::InsensitiveStr::Ascii("romangetic"),
        dictgen::InsensitiveStr::Ascii("romegnetic"),
        dictgen::InsensitiveStr::Ascii("ronagnetic"),
        dictgen::InsensitiveStr::Ascii("roncis"),
        dictgen::InsensitiveStr::Ascii("roncs"),
        dictgen::InsensitiveStr::Ascii("rones"),
        dictgen::InsensitiveStr::Ascii("ronicas"),
        dictgen::InsensitiveStr::Ascii("ronicos"),
        dictgen::InsensitiveStr::Ascii("ronik"),
        dictgen::InsensitiveStr::Ascii("ronis"),
        dictgen::InsensitiveStr::Ascii("ronix"),
        dictgen::InsensitiveStr::Ascii("roylte"),
        dictgen::InsensitiveStr::Ascii("royltes"),
    ],
    values: &[
        &["electro"],
        &["electric"],
        &["electrical"],
        &["elective"],
        &["elective"],
        &["election"],
        &["electorate"],
        &["electorate"],
        &["electoral"],
        &["electorate"],
        &["electrolytes"],
        &["electromagnetic"],
        &["electron"],
        &["electronic"],
        &["electronics"],
        &["electrons"],
        &["electrical"],
        &["electrician"],
        &["electrician"],
        &["electrical"],
        &["electrician"],
        &["electrician"],
        &["electricity"],
        &["electrician"],
        &["electrician"],
        &["electrician"],
        &["electricity"],
        &["electricity"],
        &["electrician"],
        &["electricity"],
        &["electrician"],
        &["electoral"],
        &["electorate"],
        &["electrolytes"],
        &["electricity"],
        &["electrolytes"],
        &["electron"],
        &["electron"],
        &["electrolytes"],
        &["electrolytes"],
        &["electrolytes"],
        &["electrolytes"],
        &["electrolytes"],
        &["electromagnetic"],
        &["electromagnetic"],
        &["electromagnetic"],
        &["electromagnetic"],
        &["electromagnetic"],
        &["electron"],
        &["electromagnetic"],
        &["electromagnetic"],
        &["electromagnetic"],
        &["electrons"],
        &["electrons"],
        &["electrons"],
        &["electronics"],
        &["electronics"],
        &["election"],
        &["electronics"],
        &["election"],
        &["electrolytes"],
        &["electrolytes"],
    ],
    range: 2..=11,
};

static WORD_ELECR_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_ELECR_CHILDREN),
    value: None,
};

pub static WORD_ELECR_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("to"),
        dictgen::InsensitiveStr::Ascii("tomagnetic"),
    ],
    values: &[&["electro"], &["electromagnetic"]],
    range: 2..=10,
};

static WORD_ELD_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_ELD_CHILDREN),
    value: None,
};

pub static WORD_ELD_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("istribution")],
    values: &[&["redistribution"]],
    range: 11..=11,
};

static WORD_ELC_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_ELC_CHILDREN),
    value: None,
};

pub static WORD_ELC_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ipse"),
        dictgen::InsensitiveStr::Ascii("tion"),
    ],
    values: &[&["eclipse"], &["election"]],
    range: 4..=4,
};

static WORD_ELA_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_ELA_CHILDREN),
    value: None,
};

pub static WORD_ELA_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("sped")],
    values: &[&["elapsed"]],
    range: 4..=4,
};

static WORD_EJ_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_EJ_CHILDREN),
    value: None,
};

pub static WORD_EJ_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("acluation"),
        dictgen::InsensitiveStr::Ascii("acualte"),
        dictgen::InsensitiveStr::Ascii("acualtion"),
        dictgen::InsensitiveStr::Ascii("acualtions"),
        dictgen::InsensitiveStr::Ascii("aculaion"),
        dictgen::InsensitiveStr::Ascii("aculatie"),
        dictgen::InsensitiveStr::Ascii("aculatin"),
        dictgen::InsensitiveStr::Ascii("aculaton"),
        dictgen::InsensitiveStr::Ascii("aculatte"),
    ],
    values: &[
        &["ejaculation"],
        &["ejaculate"],
        &["ejaculation"],
        &["ejaculation"],
        &["ejaculation"],
        &["ejaculate"],
        &["ejaculation"],
        &["ejaculation"],
        &["ejaculate"],
    ],
    range: 7..=10,
};

static WORD_EI_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_EI_CHILDREN),
    value: None,
};

pub static WORD_EI_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("fnach"),
        dictgen::InsensitiveStr::Ascii("ghteeen"),
        dictgen::InsensitiveStr::Ascii("ghten"),
        dictgen::InsensitiveStr::Ascii("gth"),
        dictgen::InsensitiveStr::Ascii("gtheen"),
        dictgen::InsensitiveStr::Ascii("nfahc"),
        dictgen::InsensitiveStr::Ascii("ter"),
        dictgen::InsensitiveStr::Ascii("tquette"),
    ],
    values: &[
        &["einfach"],
        &["eighteen"],
        &["eighteen"],
        &["eighth"],
        &["eighteen"],
        &["einfach"],
        &["either"],
        &["etiquette"],
    ],
    range: 3..=7,
};

static WORD_EH_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_EH_CHILDREN),
    value: None,
};

pub static WORD_EH_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("tanol"),
        dictgen::InsensitiveStr::Ascii("tereal"),
        dictgen::InsensitiveStr::Ascii("ternet"),
        dictgen::InsensitiveStr::Ascii("tically"),
        dictgen::InsensitiveStr::Ascii("tnically"),
        dictgen::InsensitiveStr::Ascii("tnicities"),
        dictgen::InsensitiveStr::Ascii("tnicity"),
    ],
    values: &[
        &["ethanol"],
        &["ethereal"],
        &["ethernet"],
        &["ethically"],
        &["ethnically"],
        &["ethnicities"],
        &["ethnicity"],
    ],
    range: 5..=9,
};

static WORD_EG_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_EG_CHILDREN),
    value: None,
};

pub static WORD_EG_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("aletarian"),
        dictgen::InsensitiveStr::Ascii("alitara"),
        dictgen::InsensitiveStr::Ascii("alitatian"),
        dictgen::InsensitiveStr::Ascii("aliterian"),
        dictgen::InsensitiveStr::Ascii("ostitical"),
        dictgen::InsensitiveStr::Ascii("otastical"),
        dictgen::InsensitiveStr::Ascii("otestical"),
        dictgen::InsensitiveStr::Ascii("otisitcal"),
        dictgen::InsensitiveStr::Ascii("otistcal"),
        dictgen::InsensitiveStr::Ascii("otisticle"),
        dictgen::InsensitiveStr::Ascii("otystical"),
        dictgen::InsensitiveStr::Ascii("pytian"),
        dictgen::InsensitiveStr::Ascii("pytians"),
        dictgen::InsensitiveStr::Ascii("yptain"),
        dictgen::InsensitiveStr::Ascii("yptains"),
        dictgen::InsensitiveStr::Ascii("ytpian"),
        dictgen::InsensitiveStr::Ascii("ytpians"),
    ],
    values: &[
        &["egalitarian"],
        &["egalitarian"],
        &["egalitarian"],
        &["egalitarian"],
        &["egotistical"],
        &["egotistical"],
        &["egotistical"],
        &["egotistical"],
        &["egotistical"],
        &["egotistical"],
        &["egotistical"],
        &["egyptian"],
        &["egyptians"],
        &["egyptian"],
        &["egyptians"],
        &["egyptian"],
        &["egyptians"],
    ],
    range: 6..=9,
};

static WORD_EF_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_EF_CHILDREN),
    value: None,
};

pub static WORD_EF_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("el"),
        dictgen::InsensitiveStr::Ascii("feciency"),
        dictgen::InsensitiveStr::Ascii("fecient"),
        dictgen::InsensitiveStr::Ascii("feciently"),
        dictgen::InsensitiveStr::Ascii("fecitvely"),
        dictgen::InsensitiveStr::Ascii("fectionate"),
        dictgen::InsensitiveStr::Ascii("fectivelly"),
        dictgen::InsensitiveStr::Ascii("fectivenss"),
        dictgen::InsensitiveStr::Ascii("fectiviness"),
        dictgen::InsensitiveStr::Ascii("fectivley"),
        dictgen::InsensitiveStr::Ascii("fectivly"),
        dictgen::InsensitiveStr::Ascii("ficeincy"),
        dictgen::InsensitiveStr::Ascii("ficeint"),
        dictgen::InsensitiveStr::Ascii("ficeintly"),
        dictgen::InsensitiveStr::Ascii("ficency"),
        dictgen::InsensitiveStr::Ascii("ficent"),
        dictgen::InsensitiveStr::Ascii("ficently"),
        dictgen::InsensitiveStr::Ascii("ficiancy"),
        dictgen::InsensitiveStr::Ascii("ficiantly"),
        dictgen::InsensitiveStr::Ascii("ficienct"),
        dictgen::InsensitiveStr::Ascii("ficienctly"),
        dictgen::InsensitiveStr::Ascii("ficientcy"),
        dictgen::InsensitiveStr::Ascii("ficienty"),
        dictgen::InsensitiveStr::Ascii("ficieny"),
        dictgen::InsensitiveStr::Ascii("fictiveness"),
        dictgen::InsensitiveStr::Ascii("ford"),
        dictgen::InsensitiveStr::Ascii("fordlessly"),
        dictgen::InsensitiveStr::Ascii("fords"),
        dictgen::InsensitiveStr::Ascii("fortlesly"),
        dictgen::InsensitiveStr::Ascii("fortlessely"),
        dictgen::InsensitiveStr::Ascii("fortlessley"),
        dictgen::InsensitiveStr::Ascii("fortlessy"),
        dictgen::InsensitiveStr::Ascii("fulence"),
    ],
    values: &[
        &["evil"],
        &["efficiency"],
        &["efficient"],
        &["efficiently"],
        &["effectively"],
        &["affectionate"],
        &["effectively"],
        &["effectiveness"],
        &["effectiveness"],
        &["effectively"],
        &["effectively"],
        &["efficiency"],
        &["efficient"],
        &["efficiently"],
        &["efficiency"],
        &["efficient"],
        &["efficiently"],
        &["efficiency"],
        &["efficiently"],
        &["efficient"],
        &["efficiency"],
        &["efficiently"],
        &["efficiently"],
        &["efficiency"],
        &["effectiveness"],
        &["effort"],
        &["effortlessly"],
        &["efforts"],
        &["effortlessly"],
        &["effortlessly"],
        &["effortlessly"],
        &["effortlessly"],
        &["effluence"],
    ],
    range: 2..=11,
};

static WORD_EE_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_EE_CHILDREN),
    value: None,
};

pub static WORD_EE_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("arly")],
    values: &[&["early"]],
    range: 4..=4,
};

static WORD_ED_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_ED_CHILDREN),
    value: None,
};

pub static WORD_ED_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("biles"),
        dictgen::InsensitiveStr::Ascii("ficient"),
        dictgen::InsensitiveStr::Ascii("ibels"),
        dictgen::InsensitiveStr::Ascii("itoras"),
        dictgen::InsensitiveStr::Ascii("itores"),
        dictgen::InsensitiveStr::Ascii("oema"),
        dictgen::InsensitiveStr::Ascii("ucacional"),
        dictgen::InsensitiveStr::Ascii("ucationnal"),
    ],
    values: &[
        &["edibles"],
        &["deficient"],
        &["edibles"],
        &["editors"],
        &["editors"],
        &["edema"],
        &["educational"],
        &["educational"],
    ],
    range: 4..=10,
};

static WORD_EC_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_EC_CHILDREN),
    value: None,
};

pub static WORD_EC_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("clectic"),
        dictgen::InsensitiveStr::Ascii("eonomy"),
        dictgen::InsensitiveStr::Ascii("idious"),
        dictgen::InsensitiveStr::Ascii("ilpse"),
        dictgen::InsensitiveStr::Ascii("lipes"),
        dictgen::InsensitiveStr::Ascii("lispe"),
        dictgen::InsensitiveStr::Ascii("lpise"),
        dictgen::InsensitiveStr::Ascii("oligical"),
        dictgen::InsensitiveStr::Ascii("ologia"),
        dictgen::InsensitiveStr::Ascii("omonic"),
        dictgen::InsensitiveStr::Ascii("omonical"),
        dictgen::InsensitiveStr::Ascii("omonics"),
        dictgen::InsensitiveStr::Ascii("onimical"),
        dictgen::InsensitiveStr::Ascii("onimically"),
        dictgen::InsensitiveStr::Ascii("onimists"),
        dictgen::InsensitiveStr::Ascii("onomicaly"),
        dictgen::InsensitiveStr::Ascii("onomicas"),
        dictgen::InsensitiveStr::Ascii("onomiclly"),
        dictgen::InsensitiveStr::Ascii("onomicos"),
        dictgen::InsensitiveStr::Ascii("onomicus"),
        dictgen::InsensitiveStr::Ascii("onomisch"),
        dictgen::InsensitiveStr::Ascii("onomisesti"),
        dictgen::InsensitiveStr::Ascii("onomisit"),
        dictgen::InsensitiveStr::Ascii("onomisiti"),
        dictgen::InsensitiveStr::Ascii("onomistes"),
        dictgen::InsensitiveStr::Ascii("stacys"),
        dictgen::InsensitiveStr::Ascii("stascy"),
        dictgen::InsensitiveStr::Ascii("stasty"),
        dictgen::InsensitiveStr::Ascii("t"),
        dictgen::InsensitiveStr::Ascii("tastic"),
        dictgen::InsensitiveStr::Ascii("tsasy"),
    ],
    values: &[
        &["eclectic"],
        &["economy"],
        &["deciduous"],
        &["eclipse"],
        &["eclipse"],
        &["eclipse"],
        &["eclipse"],
        &["ecological"],
        &["ecological"],
        &["economic"],
        &["economical"],
        &["economics"],
        &["economical"],
        &["economically"],
        &["economists"],
        &["economically"],
        &["economics"],
        &["economically"],
        &["economics"],
        &["economics"],
        &["economic"],
        &["economists"],
        &["economists"],
        &["economist"],
        &["economists"],
        &["ecstasy"],
        &["ecstasy"],
        &["ecstasy"],
        &["etc"],
        &["ecstatic"],
        &["ecstasy"],
    ],
    range: 1..=10,
};

static WORD_EB_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_EB_CHILDREN),
    value: None,
};

pub static WORD_EB_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("cuase")],
    values: &[&["becuase"]],
    range: 5..=5,
};

static WORD_EA_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_EA_CHILDREN),
    value: None,
};

pub static WORD_EA_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("chohter"),
        dictgen::InsensitiveStr::Ascii("chotehr"),
        dictgen::InsensitiveStr::Ascii("chtoher"),
        dictgen::InsensitiveStr::Ascii("hc"),
        dictgen::InsensitiveStr::Ascii("lier"),
        dictgen::InsensitiveStr::Ascii("rhtbound"),
        dictgen::InsensitiveStr::Ascii("rhtquakes"),
        dictgen::InsensitiveStr::Ascii("rilest"),
        dictgen::InsensitiveStr::Ascii("rlies"),
        dictgen::InsensitiveStr::Ascii("rliet"),
        dictgen::InsensitiveStr::Ascii("rnt"),
        dictgen::InsensitiveStr::Ascii("rpluggs"),
        dictgen::InsensitiveStr::Ascii("rplus"),
        dictgen::InsensitiveStr::Ascii("rthboud"),
        dictgen::InsensitiveStr::Ascii("rthqauke"),
        dictgen::InsensitiveStr::Ascii("rthqaukes"),
        dictgen::InsensitiveStr::Ascii("rthquack"),
        dictgen::InsensitiveStr::Ascii("rthquackes"),
        dictgen::InsensitiveStr::Ascii("rthquacks"),
        dictgen::InsensitiveStr::Ascii("rthquakers"),
        dictgen::InsensitiveStr::Ascii("rthquaks"),
        dictgen::InsensitiveStr::Ascii("rthquate"),
        dictgen::InsensitiveStr::Ascii("rthqukes"),
        dictgen::InsensitiveStr::Ascii("sthetically"),
        dictgen::InsensitiveStr::Ascii("sthetics"),
        dictgen::InsensitiveStr::Ascii("stwod"),
        dictgen::InsensitiveStr::Ascii("stwoood"),
        dictgen::InsensitiveStr::Ascii("stwoord"),
        dictgen::InsensitiveStr::Ascii("tswood"),
    ],
    values: &[
        &["eachother"],
        &["eachother"],
        &["eachother"],
        &["each"],
        &["earlier"],
        &["earthbound"],
        &["earthquakes"],
        &["earliest"],
        &["earliest"],
        &["earliest"],
        &["earned"],
        &["earplugs"],
        &["earplugs"],
        &["earthbound"],
        &["earthquake"],
        &["earthquakes"],
        &["earthquake"],
        &["earthquakes"],
        &["earthquakes"],
        &["earthquakes"],
        &["earthquakes"],
        &["earthquake"],
        &["earthquakes"],
        &["esthetically"],
        &["esthetics"],
        &["eastwood"],
        &["eastwood"],
        &["eastwood"],
        &["eastwood"],
    ],
    range: 2..=11,
};

static WORD_D_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_D_CHILDREN),
    value: None,
};

static WORD_D_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    Some(&WORD_DA_NODE),
    None,
    None,
    Some(&WORD_DD_NODE),
    Some(&WORD_DE_NODE),
    None,
    None,
    None,
    Some(&WORD_DI_NODE),
    None,
    None,
    None,
    None,
    None,
    Some(&WORD_DO_NODE),
    None,
    None,
    Some(&WORD_DR_NODE),
    Some(&WORD_DS_NODE),
    None,
    Some(&WORD_DU_NODE),
    None,
    Some(&WORD_DW_NODE),
    None,
    Some(&WORD_DY_NODE),
    None,
];

static WORD_DY_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_DY_CHILDREN),
    value: None,
};

pub static WORD_DY_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("amically"),
        dictgen::InsensitiveStr::Ascii("anmically"),
        dictgen::InsensitiveStr::Ascii("anmics"),
        dictgen::InsensitiveStr::Ascii("anmite"),
        dictgen::InsensitiveStr::Ascii("ansty"),
        dictgen::InsensitiveStr::Ascii("as"),
        dictgen::InsensitiveStr::Ascii("manically"),
        dictgen::InsensitiveStr::Ascii("manics"),
        dictgen::InsensitiveStr::Ascii("manite"),
        dictgen::InsensitiveStr::Ascii("namicallly"),
        dictgen::InsensitiveStr::Ascii("namicaly"),
        dictgen::InsensitiveStr::Ascii("namicdns"),
        dictgen::InsensitiveStr::Ascii("namiclly"),
        dictgen::InsensitiveStr::Ascii("namicpsf"),
        dictgen::InsensitiveStr::Ascii("namicus"),
        dictgen::InsensitiveStr::Ascii("namis"),
        dictgen::InsensitiveStr::Ascii("namitage"),
        dictgen::InsensitiveStr::Ascii("nastry"),
        dictgen::InsensitiveStr::Ascii("nsaty"),
        dictgen::InsensitiveStr::Ascii("pshoria"),
        dictgen::InsensitiveStr::Ascii("regulation"),
        dictgen::InsensitiveStr::Ascii("sentry"),
        dictgen::InsensitiveStr::Ascii("sfonction"),
        dictgen::InsensitiveStr::Ascii("sfonctional"),
        dictgen::InsensitiveStr::Ascii("sfucntion"),
        dictgen::InsensitiveStr::Ascii("sfucntional"),
        dictgen::InsensitiveStr::Ascii("sfuncion"),
        dictgen::InsensitiveStr::Ascii("sfunciton"),
        dictgen::InsensitiveStr::Ascii("sfuncitonal"),
        dictgen::InsensitiveStr::Ascii("sfunctionnal"),
        dictgen::InsensitiveStr::Ascii("sfunktion"),
        dictgen::InsensitiveStr::Ascii("sfunktional"),
        dictgen::InsensitiveStr::Ascii("shporia"),
        dictgen::InsensitiveStr::Ascii("soptian"),
        dictgen::InsensitiveStr::Ascii("sphoira"),
        dictgen::InsensitiveStr::Ascii("sphora"),
        dictgen::InsensitiveStr::Ascii("sphroia"),
        dictgen::InsensitiveStr::Ascii("spohria"),
        dictgen::InsensitiveStr::Ascii("spotian"),
        dictgen::InsensitiveStr::Ascii("stopain"),
        dictgen::InsensitiveStr::Ascii("stpoian"),
    ],
    values: &[
        &["dynamically"],
        &["dynamically"],
        &["dynamics"],
        &["dynamite"],
        &["dynasty"],
        &["dryas"],
        &["dynamically"],
        &["dynamics"],
        &["dynamite"],
        &["dynamically"],
        &["dynamically"],
        &["dynamics"],
        &["dynamically"],
        &["dynamics"],
        &["dynamics"],
        &["dynamics"],
        &["dynamite"],
        &["dynasty"],
        &["dynasty"],
        &["dysphoria"],
        &["deregulation"],
        &["dysentery"],
        &["dysfunction"],
        &["dysfunctional"],
        &["dysfunction"],
        &["dysfunctional"],
        &["dysfunction"],
        &["dysfunction"],
        &["dysfunctional"],
        &["dysfunctional"],
        &["dysfunction"],
        &["dysfunctional"],
        &["dysphoria"],
        &["dystopian"],
        &["dysphoria"],
        &["dysphoria"],
        &["dysphoria"],
        &["dysphoria"],
        &["dystopian"],
        &["dystopian"],
        &["dystopian"],
    ],
    range: 2..=12,
};

static WORD_DW_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_DW_CHILDREN),
    value: None,
};

pub static WORD_DW_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("arvens")],
    values: &[&["dwarves"]],
    range: 6..=6,
};

static WORD_DU_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_DU_CHILDREN),
    value: None,
};

pub static WORD_DU_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("aghter"),
        dictgen::InsensitiveStr::Ascii("aghters"),
        dictgen::InsensitiveStr::Ascii("ailty"),
        dictgen::InsensitiveStr::Ascii("altiy"),
        dictgen::InsensitiveStr::Ascii("blications"),
        dictgen::InsensitiveStr::Ascii("bsetp"),
        dictgen::InsensitiveStr::Ascii("etschland"),
        dictgen::InsensitiveStr::Ascii("laity"),
        dictgen::InsensitiveStr::Ascii("leing"),
        dictgen::InsensitiveStr::Ascii("mbbellls"),
        dictgen::InsensitiveStr::Ascii("mbbels"),
        dictgen::InsensitiveStr::Ascii("mbfouded"),
        dictgen::InsensitiveStr::Ascii("mbfoundeads"),
        dictgen::InsensitiveStr::Ascii("mbfouned"),
        dictgen::InsensitiveStr::Ascii("mptser"),
        dictgen::InsensitiveStr::Ascii("mspter"),
        dictgen::InsensitiveStr::Ascii("negon"),
        dictgen::InsensitiveStr::Ascii("negons"),
        dictgen::InsensitiveStr::Ascii("ngeoness"),
        dictgen::InsensitiveStr::Ascii("ngeos"),
        dictgen::InsensitiveStr::Ascii("ngeoun"),
        dictgen::InsensitiveStr::Ascii("ngoen"),
        dictgen::InsensitiveStr::Ascii("ngoens"),
        dictgen::InsensitiveStr::Ascii("picate"),
        dictgen::InsensitiveStr::Ascii("pilcates"),
        dictgen::InsensitiveStr::Ascii("plicants"),
        dictgen::InsensitiveStr::Ascii("plicas"),
        dictgen::InsensitiveStr::Ascii("plicatas"),
        dictgen::InsensitiveStr::Ascii("plicats"),
        dictgen::InsensitiveStr::Ascii("plicitas"),
        dictgen::InsensitiveStr::Ascii("plifaces"),
        dictgen::InsensitiveStr::Ascii("rabiliy"),
        dictgen::InsensitiveStr::Ascii("rabillity"),
        dictgen::InsensitiveStr::Ascii("rabiltiy"),
        dictgen::InsensitiveStr::Ascii("rig"),
        dictgen::InsensitiveStr::Ascii("rring"),
        dictgen::InsensitiveStr::Ascii("sbtep"),
        dictgen::InsensitiveStr::Ascii("sfunctional"),
        dictgen::InsensitiveStr::Ascii("sgustingly"),
        dictgen::InsensitiveStr::Ascii("stification"),
        dictgen::InsensitiveStr::Ascii("ting"),
    ],
    values: &[
        &["daughter"],
        &["daughters"],
        &["duality"],
        &["duality"],
        &["publications"],
        &["dubstep"],
        &["deutschland"],
        &["duality"],
        &["dueling"],
        &["dumbbells"],
        &["dumbbells"],
        &["dumbfounded"],
        &["dumbfounded"],
        &["dumbfounded"],
        &["dumpster"],
        &["dumpster"],
        &["dungeon"],
        &["dungeons"],
        &["dungeons"],
        &["dungeons"],
        &["dungeon"],
        &["dungeon"],
        &["dungeons"],
        &["duplicate"],
        &["duplicates"],
        &["duplicates"],
        &["duplicates"],
        &["duplicates"],
        &["duplicates"],
        &["duplicates"],
        &["duplicates"],
        &["durability"],
        &["durability"],
        &["durability"],
        &["during"],
        &["during"],
        &["dubstep"],
        &["dysfunctional"],
        &["disgustingly"],
        &["justification"],
        &["during"],
    ],
    range: 3..=11,
};

static WORD_DS_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_DS_CHILDREN),
    value: None,
};

pub static WORD_DS_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("yfunction"),
        dictgen::InsensitiveStr::Ascii("yfunctional"),
        dictgen::InsensitiveStr::Ascii("yphoria"),
        dictgen::InsensitiveStr::Ascii("ytopian"),
    ],
    values: &[
        &["dysfunction"],
        &["dysfunctional"],
        &["dysphoria"],
        &["dystopian"],
    ],
    range: 7..=11,
};

static WORD_DR_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_DR_CHILDREN),
    value: None,
};

pub static WORD_DR_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("aclua"),
        dictgen::InsensitiveStr::Ascii("acual"),
        dictgen::InsensitiveStr::Ascii("aculea"),
        dictgen::InsensitiveStr::Ascii("aculla"),
        dictgen::InsensitiveStr::Ascii("agones"),
        dictgen::InsensitiveStr::Ascii("agonus"),
        dictgen::InsensitiveStr::Ascii("akest"),
        dictgen::InsensitiveStr::Ascii("amaticaly"),
        dictgen::InsensitiveStr::Ascii("amaticlly"),
        dictgen::InsensitiveStr::Ascii("ammatically"),
        dictgen::InsensitiveStr::Ascii("amtic"),
        dictgen::InsensitiveStr::Ascii("ankenstein"),
        dictgen::InsensitiveStr::Ascii("asitcally"),
        dictgen::InsensitiveStr::Ascii("asticaly"),
        dictgen::InsensitiveStr::Ascii("asticlly"),
        dictgen::InsensitiveStr::Ascii("aughtman"),
        dictgen::InsensitiveStr::Ascii("avadian"),
        dictgen::InsensitiveStr::Ascii("easm"),
        dictgen::InsensitiveStr::Ascii("fiting"),
        dictgen::InsensitiveStr::Ascii("ibbel"),
        dictgen::InsensitiveStr::Ascii("iectly"),
        dictgen::InsensitiveStr::Ascii("iectx"),
        dictgen::InsensitiveStr::Ascii("ifitng"),
        dictgen::InsensitiveStr::Ascii("iftig"),
        dictgen::InsensitiveStr::Ascii("inkes"),
        dictgen::InsensitiveStr::Ascii("iveris"),
        dictgen::InsensitiveStr::Ascii("nik"),
        dictgen::InsensitiveStr::Ascii("otmund"),
        dictgen::InsensitiveStr::Ascii("uming"),
        dictgen::InsensitiveStr::Ascii("ummless"),
    ],
    values: &[
        &["dracula"],
        &["dracula"],
        &["dracula"],
        &["dracula"],
        &["dragons"],
        &["dragons"],
        &["darkest"],
        &["dramatically"],
        &["dramatically"],
        &["grammatically"],
        &["dramatic"],
        &["frankenstein"],
        &["drastically"],
        &["drastically"],
        &["drastically"],
        &["draughtsman"],
        &["dravidian"],
        &["dreams"],
        &["drifting"],
        &["dribble"],
        &["directly"],
        &["directx"],
        &["drifting"],
        &["drifting"],
        &["drinkers"],
        &["drivers"],
        &["drink"],
        &["dortmund"],
        &["drumming"],
        &["drumless"],
    ],
    range: 3..=11,
};

static WORD_DO_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_DO_CHILDREN),
    value: None,
};

static WORD_DO_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    Some(&WORD_DOA_NODE),
    Some(&WORD_DOB_NODE),
    Some(&WORD_DOC_NODE),
    None,
    Some(&WORD_DOE_NODE),
    None,
    Some(&WORD_DOG_NODE),
    None,
    Some(&WORD_DOI_NODE),
    None,
    None,
    Some(&WORD_DOL_NODE),
    Some(&WORD_DOM_NODE),
    Some(&WORD_DON_NODE),
    Some(&WORD_DOO_NODE),
    Some(&WORD_DOP_NODE),
    None,
    Some(&WORD_DOR_NODE),
    Some(&WORD_DOS_NODE),
    Some(&WORD_DOT_NODE),
    Some(&WORD_DOU_NODE),
    None,
    Some(&WORD_DOW_NODE),
    None,
    None,
    None,
];

static WORD_DOW_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_DOW_CHILDREN),
    value: None,
};

pub static WORD_DOW_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("loads"),
        dictgen::InsensitiveStr::Ascii("ngarde"),
        dictgen::InsensitiveStr::Ascii("ngarded"),
        dictgen::InsensitiveStr::Ascii("ngrated"),
        dictgen::InsensitiveStr::Ascii("nlaod"),
        dictgen::InsensitiveStr::Ascii("nlaodable"),
        dictgen::InsensitiveStr::Ascii("nlaoded"),
        dictgen::InsensitiveStr::Ascii("nlaoding"),
        dictgen::InsensitiveStr::Ascii("nlaods"),
        dictgen::InsensitiveStr::Ascii("nloaad"),
        dictgen::InsensitiveStr::Ascii("nloadas"),
        dictgen::InsensitiveStr::Ascii("nloadbale"),
        dictgen::InsensitiveStr::Ascii("nloadbel"),
        dictgen::InsensitiveStr::Ascii("nloadbig"),
        dictgen::InsensitiveStr::Ascii("nloadble"),
        dictgen::InsensitiveStr::Ascii("nloadeble"),
        dictgen::InsensitiveStr::Ascii("nloades"),
        dictgen::InsensitiveStr::Ascii("nloas"),
        dictgen::InsensitiveStr::Ascii("novted"),
        dictgen::InsensitiveStr::Ascii("novting"),
        dictgen::InsensitiveStr::Ascii("nroaded"),
        dictgen::InsensitiveStr::Ascii("nsiders"),
        dictgen::InsensitiveStr::Ascii("nstar"),
        dictgen::InsensitiveStr::Ascii("nstaris"),
        dictgen::InsensitiveStr::Ascii("nstiars"),
        dictgen::InsensitiveStr::Ascii("ntokers"),
        dictgen::InsensitiveStr::Ascii("ntoking"),
        dictgen::InsensitiveStr::Ascii("ntraded"),
        dictgen::InsensitiveStr::Ascii("nviting"),
        dictgen::InsensitiveStr::Ascii("nvore"),
        dictgen::InsensitiveStr::Ascii("nvotear"),
        dictgen::InsensitiveStr::Ascii("nvoteas"),
        dictgen::InsensitiveStr::Ascii("nvoteds"),
        dictgen::InsensitiveStr::Ascii("nvoteers"),
        dictgen::InsensitiveStr::Ascii("nvotees"),
        dictgen::InsensitiveStr::Ascii("nvoteing"),
        dictgen::InsensitiveStr::Ascii("nvoteres"),
        dictgen::InsensitiveStr::Ascii("nvoteros"),
        dictgen::InsensitiveStr::Ascii("nvotesd"),
        dictgen::InsensitiveStr::Ascii("nvotess"),
        dictgen::InsensitiveStr::Ascii("nvotest"),
        dictgen::InsensitiveStr::Ascii("nvoteur"),
        dictgen::InsensitiveStr::Ascii("nvoteurs"),
        dictgen::InsensitiveStr::Ascii("nvoties"),
        dictgen::InsensitiveStr::Ascii("nvotr"),
        dictgen::InsensitiveStr::Ascii("nvotres"),
        dictgen::InsensitiveStr::Ascii("nvots"),
        dictgen::InsensitiveStr::Ascii("nvotted"),
        dictgen::InsensitiveStr::Ascii("nvotters"),
        dictgen::InsensitiveStr::Ascii("nvottes"),
        dictgen::InsensitiveStr::Ascii("nvotting"),
        dictgen::InsensitiveStr::Ascii("nwoters"),
        dictgen::InsensitiveStr::Ascii("nwoting"),
    ],
    values: &[
        &["downloads"],
        &["downgrade"],
        &["downgraded"],
        &["downgrade"],
        &["download"],
        &["downloadable"],
        &["downloaded"],
        &["downloading"],
        &["downloads"],
        &["download"],
        &["downloads"],
        &["downloadable"],
        &["downloadable"],
        &["downloading"],
        &["downloadable"],
        &["downloadable"],
        &["downloads"],
        &["downloads"],
        &["downvoted"],
        &["downvoting"],
        &["downgraded"],
        &["downsides"],
        &["downstairs"],
        &["downstairs"],
        &["downstairs"],
        &["downvoters"],
        &["downvoting"],
        &["downgraded"],
        &["downvoting"],
        &["downvoters"],
        &["downvoters"],
        &["downvoters"],
        &["downvoters"],
        &["downvoters"],
        &["downvoters"],
        &["downvoting"],
        &["downvoters"],
        &["downvoters"],
        &["downvoters"],
        &["downvoters"],
        &["downvoters"],
        &["downvoters"],
        &["downvoters"],
        &["downvoters"],
        &["downvoters"],
        &["downvoters"],
        &["downvotes"],
        &["downvote"],
        &["downvoters"],
        &["downvoters"],
        &["downvoting"],
        &["downvoters"],
        &["downvoting"],
    ],
    range: 5..=9,
};

static WORD_DOU_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_DOU_CHILDREN),
    value: None,
};

pub static WORD_DOU_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("b"),
        dictgen::InsensitiveStr::Ascii("bellift"),
        dictgen::InsensitiveStr::Ascii("bleiift"),
        dictgen::InsensitiveStr::Ascii("bleleft"),
        dictgen::InsensitiveStr::Ascii("blelfit"),
        dictgen::InsensitiveStr::Ascii("blelit"),
        dictgen::InsensitiveStr::Ascii("blellift"),
        dictgen::InsensitiveStr::Ascii("blerift"),
        dictgen::InsensitiveStr::Ascii("cehbag"),
        dictgen::InsensitiveStr::Ascii("chely"),
        dictgen::InsensitiveStr::Ascii("cheus"),
        dictgen::InsensitiveStr::Ascii("lbe"),
        dictgen::InsensitiveStr::Ascii("lbelift"),
    ],
    values: &[
        &["doubt"],
        &["doublelift"],
        &["doublelift"],
        &["doublelift"],
        &["doublelift"],
        &["doublelift"],
        &["doublelift"],
        &["doublelift"],
        &["douchebag"],
        &["douchey"],
        &["douches"],
        &["double"],
        &["doublelift"],
    ],
    range: 1..=8,
};

static WORD_DOT_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_DOT_CHILDREN),
    value: None,
};

pub static WORD_DOT_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("rmund")],
    values: &[&["dortmund"]],
    range: 5..=5,
};

static WORD_DOS_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_DOS_CHILDREN),
    value: None,
};

pub static WORD_DOS_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("sapointed")],
    values: &[&["dissapointed"]],
    range: 9..=9,
};

static WORD_DOR_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_DOR_CHILDREN),
    value: None,
};

pub static WORD_DOR_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("mtund"),
        dictgen::InsensitiveStr::Ascii("tmud"),
        dictgen::InsensitiveStr::Ascii("tumnd"),
    ],
    values: &[&["dortmund"], &["dortmund"], &["dortmund"]],
    range: 4..=5,
};

static WORD_DOP_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_DOP_CHILDREN),
    value: None,
};

pub static WORD_DOP_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("lhin"),
        dictgen::InsensitiveStr::Ascii("lhins"),
        dictgen::InsensitiveStr::Ascii("maine"),
    ],
    values: &[&["dolphin"], &["dolphins"], &["dopamine"]],
    range: 4..=5,
};

static WORD_DOO_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_DOO_CHILDREN),
    value: None,
};

pub static WORD_DOO_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("mdsay"),
        dictgen::InsensitiveStr::Ascii("msdaily"),
        dictgen::InsensitiveStr::Ascii("smday"),
    ],
    values: &[&["doomsday"], &["doomsday"], &["doomsday"]],
    range: 5..=7,
};

static WORD_DON_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_DON_CHILDREN),
    value: None,
};

pub static WORD_DON_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("esticated"),
        dictgen::InsensitiveStr::Ascii("ig"),
        dictgen::InsensitiveStr::Ascii("wgrade"),
        dictgen::InsensitiveStr::Ascii("wgraded"),
        dictgen::InsensitiveStr::Ascii("wload"),
        dictgen::InsensitiveStr::Ascii("wloadable"),
        dictgen::InsensitiveStr::Ascii("wloaded"),
        dictgen::InsensitiveStr::Ascii("wloading"),
        dictgen::InsensitiveStr::Ascii("wloads"),
        dictgen::InsensitiveStr::Ascii("wsides"),
        dictgen::InsensitiveStr::Ascii("wvote"),
        dictgen::InsensitiveStr::Ascii("wvoted"),
        dictgen::InsensitiveStr::Ascii("wvoters"),
        dictgen::InsensitiveStr::Ascii("wvotes"),
        dictgen::InsensitiveStr::Ascii("wvoting"),
    ],
    values: &[
        &["domesticated"],
        &["doing"],
        &["downgrade"],
        &["downgraded"],
        &["download"],
        &["downloadable"],
        &["downloaded"],
        &["downloading"],
        &["downloads"],
        &["downsides"],
        &["downvote"],
        &["downvoted"],
        &["downvoters"],
        &["downvotes"],
        &["downvoting"],
    ],
    range: 2..=9,
};

static WORD_DOM_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_DOM_CHILDREN),
    value: None,
};

pub static WORD_DOM_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("apine"),
        dictgen::InsensitiveStr::Ascii("ecracy"),
        dictgen::InsensitiveStr::Ascii("ecrat"),
        dictgen::InsensitiveStr::Ascii("ecrats"),
        dictgen::InsensitiveStr::Ascii("esitcated"),
        dictgen::InsensitiveStr::Ascii("esticted"),
        dictgen::InsensitiveStr::Ascii("iante"),
        dictgen::InsensitiveStr::Ascii("iantes"),
        dictgen::InsensitiveStr::Ascii("ianting"),
        dictgen::InsensitiveStr::Ascii("imation"),
        dictgen::InsensitiveStr::Ascii("inacion"),
        dictgen::InsensitiveStr::Ascii("inaters"),
        dictgen::InsensitiveStr::Ascii("inateurs"),
        dictgen::InsensitiveStr::Ascii("inatin"),
        dictgen::InsensitiveStr::Ascii("inationg"),
        dictgen::InsensitiveStr::Ascii("inato"),
        dictgen::InsensitiveStr::Ascii("inaton"),
        dictgen::InsensitiveStr::Ascii("inats"),
        dictgen::InsensitiveStr::Ascii("inent"),
        dictgen::InsensitiveStr::Ascii("iniant"),
        dictgen::InsensitiveStr::Ascii("inno"),
        dictgen::InsensitiveStr::Ascii("inoin"),
        dictgen::InsensitiveStr::Ascii("isticated"),
    ],
    values: &[
        &["dopamine"],
        &["democracy"],
        &["democrat"],
        &["democrats"],
        &["domesticated"],
        &["domesticated"],
        &["dominate"],
        &["dominates"],
        &["dominating"],
        &["domination"],
        &["domination"],
        &["dominates"],
        &["dominates"],
        &["domination"],
        &["dominating"],
        &["domination"],
        &["domination"],
        &["dominates"],
        &["dominant"],
        &["dominant"],
        &["dominion"],
        &["dominion"],
        &["domesticated"],
    ],
    range: 4..=9,
};

static WORD_DOL_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_DOL_CHILDREN),
    value: None,
};

pub static WORD_DOL_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("hpin"),
        dictgen::InsensitiveStr::Ascii("hpins"),
        dictgen::InsensitiveStr::Ascii("phines"),
        dictgen::InsensitiveStr::Ascii("phinese"),
        dictgen::InsensitiveStr::Ascii("phis"),
    ],
    values: &[
        &["dolphin"],
        &["dolphins"],
        &["dolphins"],
        &["dolphins"],
        &["dolphins"],
    ],
    range: 4..=7,
};

static WORD_DOI_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_DOI_CHILDREN),
    value: None,
};

pub static WORD_DOI_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("gn")],
    values: &[&["doing"]],
    range: 2..=2,
};

static WORD_DOG_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_DOG_CHILDREN),
    value: None,
};

pub static WORD_DOG_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("amtic"),
        dictgen::InsensitiveStr::Ascii("dammit"),
        dictgen::InsensitiveStr::Ascii("ders"),
        dictgen::InsensitiveStr::Ascii("ding"),
        dictgen::InsensitiveStr::Ascii("father"),
        dictgen::InsensitiveStr::Ascii("matisch"),
    ],
    values: &[
        &["dogmatic"],
        &["goddammit"],
        &["dodgers"],
        &["dodging"],
        &["godfather"],
        &["dogmatic"],
    ],
    range: 4..=7,
};

static WORD_DOE_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_DOE_CHILDREN),
    value: None,
};

pub static WORD_DOE_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("ns")],
    values: &[&["does"]],
    range: 2..=2,
};

static WORD_DOC_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_DOC_CHILDREN),
    value: None,
};

pub static WORD_DOC_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("cument"),
        dictgen::InsensitiveStr::Ascii("cumented"),
        dictgen::InsensitiveStr::Ascii("cuments"),
        dictgen::InsensitiveStr::Ascii("rines"),
        dictgen::InsensitiveStr::Ascii("rtine"),
        dictgen::InsensitiveStr::Ascii("rtines"),
        dictgen::InsensitiveStr::Ascii("tines"),
        dictgen::InsensitiveStr::Ascii("tirne"),
        dictgen::InsensitiveStr::Ascii("trins"),
        dictgen::InsensitiveStr::Ascii("uhebag"),
        dictgen::InsensitiveStr::Ascii("uhes"),
        dictgen::InsensitiveStr::Ascii("uhey"),
        dictgen::InsensitiveStr::Ascii("umantaries"),
        dictgen::InsensitiveStr::Ascii("umantary"),
        dictgen::InsensitiveStr::Ascii("umenation"),
        dictgen::InsensitiveStr::Ascii("umenatries"),
        dictgen::InsensitiveStr::Ascii("umenatry"),
        dictgen::InsensitiveStr::Ascii("umentacion"),
        dictgen::InsensitiveStr::Ascii("umentaion"),
        dictgen::InsensitiveStr::Ascii("umentaire"),
        dictgen::InsensitiveStr::Ascii("umentaires"),
        dictgen::InsensitiveStr::Ascii("umentaiton"),
        dictgen::InsensitiveStr::Ascii("umentare"),
        dictgen::InsensitiveStr::Ascii("umentarios"),
        dictgen::InsensitiveStr::Ascii("umentarse"),
        dictgen::InsensitiveStr::Ascii("umentarsi"),
        dictgen::InsensitiveStr::Ascii("umentaties"),
        dictgen::InsensitiveStr::Ascii("umentating"),
        dictgen::InsensitiveStr::Ascii("umentato"),
        dictgen::InsensitiveStr::Ascii("umenteries"),
        dictgen::InsensitiveStr::Ascii("umentery"),
        dictgen::InsensitiveStr::Ascii("umentories"),
        dictgen::InsensitiveStr::Ascii("umentory"),
        dictgen::InsensitiveStr::Ascii("umentry"),
    ],
    values: &[
        &["document"],
        &["documented"],
        &["documents"],
        &["doctrines"],
        &["doctrine"],
        &["doctrines"],
        &["doctrines"],
        &["doctrine"],
        &["doctrines"],
        &["douchebag"],
        &["douches"],
        &["douchey"],
        &["documentaries"],
        &["documentary"],
        &["documentation"],
        &["documentaries"],
        &["documentary"],
        &["documentation"],
        &["documentation"],
        &["documentaries"],
        &["documentaries"],
        &["documentation"],
        &["documentaries"],
        &["documentaries"],
        &["documentaries"],
        &["documentaries"],
        &["documentaries"],
        &["documentation"],
        &["documentation"],
        &["documentaries"],
        &["documentary"],
        &["documentaries"],
        &["documentary"],
        &["documentary"],
    ],
    range: 4..=10,
};

static WORD_DOB_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_DOB_CHILDREN),
    value: None,
};

pub static WORD_DOB_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("ulelift")],
    values: &[&["doublelift"]],
    range: 7..=7,
};

static WORD_DOA_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_DOA_CHILDREN),
    value: None,
};

pub static WORD_DOA_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("pmine")],
    values: &[&["dopamine"]],
    range: 5..=5,
};

static WORD_DI_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_DI_CHILDREN),
    value: None,
};

static WORD_DI_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    Some(&WORD_DIA_NODE),
    None,
    Some(&WORD_DIC_NODE),
    Some(&WORD_DID_NODE),
    Some(&WORD_DIE_NODE),
    Some(&WORD_DIF_NODE),
    Some(&WORD_DIG_NODE),
    None,
    None,
    None,
    None,
    Some(&WORD_DIL_NODE),
    Some(&WORD_DIM_NODE),
    Some(&WORD_DIN_NODE),
    Some(&WORD_DIO_NODE),
    Some(&WORD_DIP_NODE),
    None,
    Some(&WORD_DIR_NODE),
    Some(&WORD_DIS_NODE),
    Some(&WORD_DIT_NODE),
    None,
    Some(&WORD_DIV_NODE),
    None,
    None,
    None,
    None,
];

static WORD_DIV_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_DIV_CHILDREN),
    value: None,
};

pub static WORD_DIV_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("erisfy"),
        dictgen::InsensitiveStr::Ascii("eristy"),
        dictgen::InsensitiveStr::Ascii("ersed"),
        dictgen::InsensitiveStr::Ascii("ersifiy"),
        dictgen::InsensitiveStr::Ascii("ersiy"),
        dictgen::InsensitiveStr::Ascii("erstiy"),
        dictgen::InsensitiveStr::Ascii("ice"),
        dictgen::InsensitiveStr::Ascii("idendes"),
        dictgen::InsensitiveStr::Ascii("idendos"),
        dictgen::InsensitiveStr::Ascii("idened"),
        dictgen::InsensitiveStr::Ascii("ideneds"),
        dictgen::InsensitiveStr::Ascii("idens"),
        dictgen::InsensitiveStr::Ascii("inition"),
        dictgen::InsensitiveStr::Ascii("initiy"),
        dictgen::InsensitiveStr::Ascii("initory"),
        dictgen::InsensitiveStr::Ascii("intiy"),
        dictgen::InsensitiveStr::Ascii("isionals"),
        dictgen::InsensitiveStr::Ascii("isiones"),
        dictgen::InsensitiveStr::Ascii("ison"),
        dictgen::InsensitiveStr::Ascii("isons"),
    ],
    values: &[
        &["diversify"],
        &["diversity"],
        &["diverse"],
        &["diversify"],
        &["diversify"],
        &["diversity"],
        &["device"],
        &["dividends"],
        &["dividends"],
        &["dividend"],
        &["dividend"],
        &["dividends"],
        &["divination"],
        &["divinity"],
        &["divinity"],
        &["divinity"],
        &["divisions"],
        &["divisions"],
        &["division"],
        &["divisions"],
    ],
    range: 3..=8,
};

static WORD_DIT_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_DIT_CHILDREN),
    value: None,
};

pub static WORD_DIT_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("actorship"),
        dictgen::InsensitiveStr::Ascii("ributed"),
    ],
    values: &[&["dictatorship"], &["distributed"]],
    range: 7..=9,
};

static WORD_DIS_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_DIS_CHILDREN),
    value: None,
};

static WORD_DIS_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    Some(&WORD_DISA_NODE),
    Some(&WORD_DISB_NODE),
    Some(&WORD_DISC_NODE),
    None,
    Some(&WORD_DISE_NODE),
    None,
    Some(&WORD_DISG_NODE),
    Some(&WORD_DISH_NODE),
    Some(&WORD_DISI_NODE),
    None,
    Some(&WORD_DISK_NODE),
    Some(&WORD_DISL_NODE),
    Some(&WORD_DISM_NODE),
    Some(&WORD_DISN_NODE),
    Some(&WORD_DISO_NODE),
    Some(&WORD_DISP_NODE),
    Some(&WORD_DISQ_NODE),
    Some(&WORD_DISR_NODE),
    Some(&WORD_DISS_NODE),
    Some(&WORD_DIST_NODE),
    Some(&WORD_DISU_NODE),
    None,
    None,
    None,
    None,
    None,
];

static WORD_DISU_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_DISU_CHILDREN),
    value: None,
};

pub static WORD_DISU_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("cssing"),
        dictgen::InsensitiveStr::Ascii("cssion"),
        dictgen::InsensitiveStr::Ascii("cssions"),
        dictgen::InsensitiveStr::Ascii("pted"),
        dictgen::InsensitiveStr::Ascii("ptes"),
        dictgen::InsensitiveStr::Ascii("rption"),
    ],
    values: &[
        &["discussing"],
        &["discussion"],
        &["discussions"],
        &["disputed"],
        &["disputes"],
        &["disruption"],
    ],
    range: 4..=7,
};

static WORD_DIST_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_DIST_CHILDREN),
    value: None,
};

static WORD_DIST_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    Some(&WORD_DISTA_NODE),
    None,
    None,
    None,
    Some(&WORD_DISTE_NODE),
    None,
    None,
    None,
    Some(&WORD_DISTI_NODE),
    None,
    None,
    None,
    None,
    None,
    Some(&WORD_DISTO_NODE),
    None,
    None,
    Some(&WORD_DISTR_NODE),
    None,
    None,
    Some(&WORD_DISTU_NODE),
    None,
    None,
    None,
    None,
    None,
];

static WORD_DISTU_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_DISTU_CHILDREN),
    value: None,
};

pub static WORD_DISTU_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("bring"),
        dictgen::InsensitiveStr::Ascii("ingish"),
        dictgen::InsensitiveStr::Ascii("ingished"),
        dictgen::InsensitiveStr::Ascii("ingishing"),
        dictgen::InsensitiveStr::Ascii("nguish"),
        dictgen::InsensitiveStr::Ascii("rbace"),
        dictgen::InsensitiveStr::Ascii("rbante"),
        dictgen::InsensitiveStr::Ascii("rbd"),
        dictgen::InsensitiveStr::Ascii("rben"),
        dictgen::InsensitiveStr::Ascii("rbence"),
        dictgen::InsensitiveStr::Ascii("rping"),
        dictgen::InsensitiveStr::Ascii("stingly"),
    ],
    values: &[
        &["disturbing"],
        &["distinguish"],
        &["distinguished"],
        &["distinguishing"],
        &["distinguish"],
        &["disturbance"],
        &["disturbance"],
        &["disturbed"],
        &["disturbance"],
        &["disturbance"],
        &["disrupting"],
        &["disgustingly"],
    ],
    range: 3..=9,
};

static WORD_DISTR_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_DISTR_CHILDREN),
    value: None,
};

static WORD_DISTR_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    Some(&WORD_DISTRA_NODE),
    None,
    Some(&WORD_DISTRC_NODE),
    None,
    None,
    None,
    None,
    None,
    Some(&WORD_DISTRI_NODE),
    None,
    None,
    None,
    None,
    None,
    Some(&WORD_DISTRO_NODE),
    None,
    None,
    None,
    None,
    None,
    Some(&WORD_DISTRU_NODE),
    None,
    None,
    None,
    None,
    None,
];

static WORD_DISTRU_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_DISTRU_CHILDREN),
    value: None,
};

pub static WORD_DISTRU_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("bance"),
        dictgen::InsensitiveStr::Ascii("bances"),
        dictgen::InsensitiveStr::Ascii("bed"),
        dictgen::InsensitiveStr::Ascii("bing"),
        dictgen::InsensitiveStr::Ascii("bited"),
        dictgen::InsensitiveStr::Ascii("biting"),
        dictgen::InsensitiveStr::Ascii("bition"),
        dictgen::InsensitiveStr::Ascii("bitions"),
        dictgen::InsensitiveStr::Ascii("bitor"),
        dictgen::InsensitiveStr::Ascii("bitors"),
        dictgen::InsensitiveStr::Ascii("btes"),
        dictgen::InsensitiveStr::Ascii("bute"),
        dictgen::InsensitiveStr::Ascii("buted"),
        dictgen::InsensitiveStr::Ascii("bution"),
        dictgen::InsensitiveStr::Ascii("butor"),
        dictgen::InsensitiveStr::Ascii("butors"),
        dictgen::InsensitiveStr::Ascii("ctions"),
        dictgen::InsensitiveStr::Ascii("ctive"),
        dictgen::InsensitiveStr::Ascii("pts"),
    ],
    values: &[
        &["disturbance"],
        &["disturbance"],
        &["disturbed"],
        &["disturbing"],
        &["distributed"],
        &["distributing"],
        &["distribution"],
        &["distributions"],
        &["distributor"],
        &["distributors"],
        &["distrust"],
        &["distribute"],
        &["distributed"],
        &["distribution"],
        &["distributor"],
        &["distributors"],
        &["distractions"],
        &["destructive"],
        &["distrust"],
    ],
    range: 3..=7,
};

static WORD_DISTRO_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_DISTRO_CHILDREN),
    value: None,
};

pub static WORD_DISTRO_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("buted"),
        dictgen::InsensitiveStr::Ascii("bution"),
        dictgen::InsensitiveStr::Ascii("butions"),
        dictgen::InsensitiveStr::Ascii("tion"),
    ],
    values: &[
        &["distributed"],
        &["distribution"],
        &["distributions"],
        &["distortion"],
    ],
    range: 4..=7,
};

static WORD_DISTRI_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_DISTRI_CHILDREN),
    value: None,
};

pub static WORD_DISTRI_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("bitor"),
        dictgen::InsensitiveStr::Ascii("bitors"),
        dictgen::InsensitiveStr::Ascii("btuion"),
        dictgen::InsensitiveStr::Ascii("bucion"),
        dictgen::InsensitiveStr::Ascii("bue"),
        dictgen::InsensitiveStr::Ascii("buem"),
        dictgen::InsensitiveStr::Ascii("buent"),
        dictgen::InsensitiveStr::Ascii("buer"),
        dictgen::InsensitiveStr::Ascii("buie"),
        dictgen::InsensitiveStr::Ascii("buit"),
        dictgen::InsensitiveStr::Ascii("buite"),
        dictgen::InsensitiveStr::Ascii("buited"),
        dictgen::InsensitiveStr::Ascii("buito"),
        dictgen::InsensitiveStr::Ascii("buiton"),
        dictgen::InsensitiveStr::Ascii("buitor"),
        dictgen::InsensitiveStr::Ascii("busion"),
        dictgen::InsensitiveStr::Ascii("bustion"),
        dictgen::InsensitiveStr::Ascii("butie"),
        dictgen::InsensitiveStr::Ascii("butin"),
        dictgen::InsensitiveStr::Ascii("butino"),
        dictgen::InsensitiveStr::Ascii("butio"),
        dictgen::InsensitiveStr::Ascii("butior"),
        dictgen::InsensitiveStr::Ascii("butiors"),
        dictgen::InsensitiveStr::Ascii("butivos"),
        dictgen::InsensitiveStr::Ascii("butons"),
        dictgen::InsensitiveStr::Ascii("butore"),
        dictgen::InsensitiveStr::Ascii("buts"),
        dictgen::InsensitiveStr::Ascii("buye"),
        dictgen::InsensitiveStr::Ascii("cs"),
        dictgen::InsensitiveStr::Ascii("ubtion"),
    ],
    values: &[
        &["distributor"],
        &["distributors"],
        &["distributions"],
        &["distribution"],
        &["distributed"],
        &["distribute"],
        &["distribute"],
        &["distribute"],
        &["distribute"],
        &["distribute"],
        &["distribute"],
        &["distributed"],
        &["distribution"],
        &["distributions"],
        &["distributor"],
        &["distributions"],
        &["distributions"],
        &["distributed"],
        &["distribution"],
        &["distributions"],
        &["distributor"],
        &["distributor"],
        &["distributors"],
        &["distributions"],
        &["distributors"],
        &["distribute"],
        &["distributors"],
        &["distribute"],
        &["districts"],
        &["distributions"],
    ],
    range: 2..=7,
};

static WORD_DISTRC_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_DISTRC_CHILDREN),
    value: None,
};

pub static WORD_DISTRC_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("it"),
        dictgen::InsensitiveStr::Ascii("its"),
    ],
    values: &[&["district"], &["districts"]],
    range: 2..=3,
};

static WORD_DISTRA_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_DISTRA_CHILDREN),
    value: None,
};

pub static WORD_DISTRA_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("bution"),
        dictgen::InsensitiveStr::Ascii("ccion"),
        dictgen::InsensitiveStr::Ascii("ctes"),
        dictgen::InsensitiveStr::Ascii("ctia"),
        dictgen::InsensitiveStr::Ascii("ctin"),
        dictgen::InsensitiveStr::Ascii("ctiv"),
        dictgen::InsensitiveStr::Ascii("ctons"),
        dictgen::InsensitiveStr::Ascii("ktion"),
        dictgen::InsensitiveStr::Ascii("tion"),
    ],
    values: &[
        &["distribution"],
        &["distraction"],
        &["distracts"],
        &["district"],
        &["district"],
        &["district"],
        &["distracts"],
        &["distraction"],
        &["distortion"],
    ],
    range: 4..=6,
};

static WORD_DISTO_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_DISTO_CHILDREN),
    value: None,
};

pub static WORD_DISTO_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("riton"),
        dictgen::InsensitiveStr::Ascii("rsion"),
        dictgen::InsensitiveStr::Ascii("rtian"),
        dictgen::InsensitiveStr::Ascii("rto"),
        dictgen::InsensitiveStr::Ascii("rtron"),
    ],
    values: &[
        &["distortion"],
        &["distortion"],
        &["distortion"],
        &["distortion"],
        &["distortion"],
    ],
    range: 3..=5,
};

static WORD_DISTI_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_DISTI_CHILDREN),
    value: None,
};

pub static WORD_DISTI_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("cnt"),
        dictgen::InsensitiveStr::Ascii("cntion"),
        dictgen::InsensitiveStr::Ascii("cntly"),
        dictgen::InsensitiveStr::Ascii("ction"),
        dictgen::InsensitiveStr::Ascii("nations"),
        dictgen::InsensitiveStr::Ascii("ncion"),
        dictgen::InsensitiveStr::Ascii("nciton"),
        dictgen::InsensitiveStr::Ascii("ncitons"),
        dictgen::InsensitiveStr::Ascii("ncitve"),
        dictgen::InsensitiveStr::Ascii("ncive"),
        dictgen::InsensitiveStr::Ascii("nclty"),
        dictgen::InsensitiveStr::Ascii("ncte"),
        dictgen::InsensitiveStr::Ascii("nctie"),
        dictgen::InsensitiveStr::Ascii("nctily"),
        dictgen::InsensitiveStr::Ascii("nctin"),
        dictgen::InsensitiveStr::Ascii("ngish"),
        dictgen::InsensitiveStr::Ascii("ngished"),
        dictgen::InsensitiveStr::Ascii("ngishes"),
        dictgen::InsensitiveStr::Ascii("ngishing"),
        dictgen::InsensitiveStr::Ascii("ngiush"),
        dictgen::InsensitiveStr::Ascii("ngiushing"),
        dictgen::InsensitiveStr::Ascii("ngquished"),
        dictgen::InsensitiveStr::Ascii("nguise"),
        dictgen::InsensitiveStr::Ascii("nguised"),
        dictgen::InsensitiveStr::Ascii("nguising"),
        dictgen::InsensitiveStr::Ascii("ngush"),
        dictgen::InsensitiveStr::Ascii("ngusihing"),
        dictgen::InsensitiveStr::Ascii("nktion"),
        dictgen::InsensitiveStr::Ascii("nquish"),
        dictgen::InsensitiveStr::Ascii("nquished"),
        dictgen::InsensitiveStr::Ascii("nquishing"),
        dictgen::InsensitiveStr::Ascii("nt"),
        dictgen::InsensitiveStr::Ascii("ntcly"),
        dictgen::InsensitiveStr::Ascii("rbance"),
        dictgen::InsensitiveStr::Ascii("rbuted"),
        dictgen::InsensitiveStr::Ascii("rbuting"),
        dictgen::InsensitiveStr::Ascii("rbution"),
        dictgen::InsensitiveStr::Ascii("rbutions"),
        dictgen::InsensitiveStr::Ascii("rbutor"),
        dictgen::InsensitiveStr::Ascii("ungished"),
    ],
    values: &[
        &["distinct"],
        &["distinctions"],
        &["distinctly"],
        &["distinction"],
        &["distinctions"],
        &["distinction"],
        &["distinction"],
        &["distinctions"],
        &["distinctive"],
        &["distinctive"],
        &["distinctly"],
        &["distinctive"],
        &["distinctive"],
        &["distinctly"],
        &["distinctions"],
        &["distinguish"],
        &["distinguished"],
        &["distinguishes"],
        &["distinguishing"],
        &["distinguish"],
        &["distinguishing"],
        &["distinguished"],
        &["distinguished"],
        &["distinguished"],
        &["distinguishing"],
        &["distinguish"],
        &["distinguishing"],
        &["distinction"],
        &["distinguish"],
        &["distinguished"],
        &["distinguishing"],
        &["distinct"],
        &["distinctly"],
        &["disturbance"],
        &["distribute"],
        &["distributing"],
        &["distribution"],
        &["distributions"],
        &["distributor"],
        &["distinguished"],
    ],
    range: 2..=9,
};

static WORD_DISTE_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_DISTE_CHILDREN),
    value: None,
};

pub static WORD_DISTE_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("rbance")],
    values: &[&["disturbance"]],
    range: 6..=6,
};

static WORD_DISTA_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_DISTA_CHILDREN),
    value: None,
};

pub static WORD_DISTA_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("se"),
        dictgen::InsensitiveStr::Ascii("stful"),
        dictgen::InsensitiveStr::Ascii("tes"),
        dictgen::InsensitiveStr::Ascii("tesful"),
        dictgen::InsensitiveStr::Ascii("tse"),
        dictgen::InsensitiveStr::Ascii("tseful"),
    ],
    values: &[
        &["distaste"],
        &["distasteful"],
        &["distaste"],
        &["distasteful"],
        &["distaste"],
        &["distasteful"],
    ],
    range: 2..=6,
};

static WORD_DISS_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_DISS_CHILDREN),
    value: None,
};

pub static WORD_DISS_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("agreement"),
        dictgen::InsensitiveStr::Ascii("apear"),
        dictgen::InsensitiveStr::Ascii("apearance"),
        dictgen::InsensitiveStr::Ascii("apeared"),
        dictgen::InsensitiveStr::Ascii("apearing"),
        dictgen::InsensitiveStr::Ascii("apears"),
        dictgen::InsensitiveStr::Ascii("apionted"),
        dictgen::InsensitiveStr::Ascii("apoimted"),
        dictgen::InsensitiveStr::Ascii("apoined"),
        dictgen::InsensitiveStr::Ascii("apointd"),
        dictgen::InsensitiveStr::Ascii("apointted"),
        dictgen::InsensitiveStr::Ascii("apoited"),
        dictgen::InsensitiveStr::Ascii("apoitned"),
        dictgen::InsensitiveStr::Ascii("aponited"),
        dictgen::InsensitiveStr::Ascii("apoonted"),
        dictgen::InsensitiveStr::Ascii("apounted"),
        dictgen::InsensitiveStr::Ascii("appear"),
        dictgen::InsensitiveStr::Ascii("appears"),
        dictgen::InsensitiveStr::Ascii("appinted"),
        dictgen::InsensitiveStr::Ascii("appointed"),
        dictgen::InsensitiveStr::Ascii("apponted"),
        dictgen::InsensitiveStr::Ascii("array"),
        dictgen::InsensitiveStr::Ascii("astified"),
        dictgen::InsensitiveStr::Ascii("atisfed"),
        dictgen::InsensitiveStr::Ascii("atisifed"),
        dictgen::InsensitiveStr::Ascii("atsified"),
        dictgen::InsensitiveStr::Ascii("cusion"),
        dictgen::InsensitiveStr::Ascii("cusions"),
        dictgen::InsensitiveStr::Ascii("epointed"),
        dictgen::InsensitiveStr::Ascii("ertaion"),
        dictgen::InsensitiveStr::Ascii("ipatore"),
        dictgen::InsensitiveStr::Ascii("ipointed"),
        dictgen::InsensitiveStr::Ascii("misal"),
        dictgen::InsensitiveStr::Ascii("misive"),
        dictgen::InsensitiveStr::Ascii("obediance"),
        dictgen::InsensitiveStr::Ascii("obediant"),
        dictgen::InsensitiveStr::Ascii("obedience"),
        dictgen::InsensitiveStr::Ascii("obedient"),
        dictgen::InsensitiveStr::Ascii("odance"),
        dictgen::InsensitiveStr::Ascii("ole"),
        dictgen::InsensitiveStr::Ascii("onante"),
        dictgen::InsensitiveStr::Ascii("onence"),
        dictgen::InsensitiveStr::Ascii("opointed"),
        dictgen::InsensitiveStr::Ascii("ovle"),
        dictgen::InsensitiveStr::Ascii("paointed"),
        dictgen::InsensitiveStr::Ascii("piate"),
        dictgen::InsensitiveStr::Ascii("ppointed"),
        dictgen::InsensitiveStr::Ascii("spointed"),
    ],
    values: &[
        &["disagreement"],
        &["disappear"],
        &["disappearance"],
        &["disappeared"],
        &["disappearing"],
        &["disappears"],
        &["dissapointed"],
        &["dissapointed"],
        &["dissapointed"],
        &["dissapointed"],
        &["dissapointed"],
        &["dissapointed"],
        &["dissapointed"],
        &["dissapointed"],
        &["dissapointed"],
        &["dissapointed"],
        &["disappear"],
        &["disappears"],
        &["dissapointed"],
        &["disappointed"],
        &["dissapointed"],
        &["disarray"],
        &["dissatisfied"],
        &["dissatisfied"],
        &["dissatisfied"],
        &["dissatisfied"],
        &["discussion"],
        &["discussions"],
        &["dissapointed"],
        &["dissertation"],
        &["dissipate"],
        &["dissapointed"],
        &["dismissal"],
        &["dismissive"],
        &["disobedience"],
        &["disobedient"],
        &["disobedience"],
        &["disobedient"],
        &["dissonance"],
        &["dissolve"],
        &["dissonance"],
        &["dissonance"],
        &["dissapointed"],
        &["dissolve"],
        &["dissapointed"],
        &["dissipate"],
        &["dissapointed"],
        &["dissapointed"],
    ],
    range: 3..=9,
};

static WORD_DISR_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_DISR_CHILDREN),
    value: None,
};

pub static WORD_DISR_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ecpect"),
        dictgen::InsensitiveStr::Ascii("ecpected"),
        dictgen::InsensitiveStr::Ascii("ecpectful"),
        dictgen::InsensitiveStr::Ascii("ecpecting"),
        dictgen::InsensitiveStr::Ascii("ection"),
        dictgen::InsensitiveStr::Ascii("egaring"),
        dictgen::InsensitiveStr::Ascii("epresentation"),
        dictgen::InsensitiveStr::Ascii("epsect"),
        dictgen::InsensitiveStr::Ascii("epsected"),
        dictgen::InsensitiveStr::Ascii("epsectful"),
        dictgen::InsensitiveStr::Ascii("epsecting"),
        dictgen::InsensitiveStr::Ascii("esepct"),
        dictgen::InsensitiveStr::Ascii("esepcted"),
        dictgen::InsensitiveStr::Ascii("esepctful"),
        dictgen::InsensitiveStr::Ascii("esepcting"),
        dictgen::InsensitiveStr::Ascii("especful"),
        dictgen::InsensitiveStr::Ascii("especing"),
        dictgen::InsensitiveStr::Ascii("espection"),
        dictgen::InsensitiveStr::Ascii("espectul"),
        dictgen::InsensitiveStr::Ascii("espekt"),
        dictgen::InsensitiveStr::Ascii("espekted"),
        dictgen::InsensitiveStr::Ascii("espekting"),
        dictgen::InsensitiveStr::Ascii("icts"),
        dictgen::InsensitiveStr::Ascii("iption"),
        dictgen::InsensitiveStr::Ascii("ispect"),
        dictgen::InsensitiveStr::Ascii("ispectful"),
        dictgen::InsensitiveStr::Ascii("ispecting"),
        dictgen::InsensitiveStr::Ascii("puting"),
        dictgen::InsensitiveStr::Ascii("tibution"),
        dictgen::InsensitiveStr::Ascii("uptin"),
        dictgen::InsensitiveStr::Ascii("uptivo"),
        dictgen::InsensitiveStr::Ascii("uptron"),
    ],
    values: &[
        &["disrespect"],
        &["disrespected"],
        &["disrespectful"],
        &["disrespecting"],
        &["discretion"],
        &["disregarding"],
        &["misrepresentation"],
        &["disrespect"],
        &["disrespected"],
        &["disrespectful"],
        &["disrespecting"],
        &["disrespect"],
        &["disrespected"],
        &["disrespectful"],
        &["disrespecting"],
        &["disrespectful"],
        &["disrespecting"],
        &["disrespecting"],
        &["disrespectful"],
        &["disrespect"],
        &["disrespected"],
        &["disrespecting"],
        &["districts"],
        &["disruption"],
        &["disrespect"],
        &["disrespectful"],
        &["disrespecting"],
        &["disrupting"],
        &["distributions"],
        &["disruption"],
        &["disruption"],
        &["disruption"],
    ],
    range: 4..=13,
};

static WORD_DISQ_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_DISQ_CHILDREN),
    value: None,
};

pub static WORD_DISQ_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("aulified"),
        dictgen::InsensitiveStr::Ascii("ualifed"),
        dictgen::InsensitiveStr::Ascii("ualifyed"),
        dictgen::InsensitiveStr::Ascii("ustingly"),
    ],
    values: &[
        &["disqualified"],
        &["disqualified"],
        &["disqualified"],
        &["disgustingly"],
    ],
    range: 7..=8,
};

static WORD_DISP_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_DISP_CHILDREN),
    value: None,
};

static WORD_DISP_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    Some(&WORD_DISPA_NODE),
    None,
    None,
    None,
    Some(&WORD_DISPE_NODE),
    None,
    None,
    None,
    Some(&WORD_DISPI_NODE),
    None,
    None,
    Some(&WORD_DISPL_NODE),
    None,
    None,
    Some(&WORD_DISPO_NODE),
    None,
    None,
    Some(&WORD_DISPR_NODE),
    None,
    Some(&WORD_DISPT_NODE),
    Some(&WORD_DISPU_NODE),
    None,
    None,
    None,
    None,
    None,
];

static WORD_DISPU_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_DISPU_CHILDREN),
    value: None,
};

pub static WORD_DISPU_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("se"),
        dictgen::InsensitiveStr::Ascii("tandem"),
        dictgen::InsensitiveStr::Ascii("terad"),
        dictgen::InsensitiveStr::Ascii("ts"),
    ],
    values: &[
        &["disputes"],
        &["disputandum"],
        &["disputed"],
        &["disputes"],
    ],
    range: 2..=6,
};

static WORD_DISPT_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_DISPT_CHILDREN),
    value: None,
};

pub static WORD_DISPT_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("ach")],
    values: &[&["dispatch"]],
    range: 3..=3,
};

static WORD_DISPR_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_DISPR_CHILDREN),
    value: None,
};

pub static WORD_DISPR_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("aportionate"),
        dictgen::InsensitiveStr::Ascii("aportionately"),
        dictgen::InsensitiveStr::Ascii("oportianate"),
        dictgen::InsensitiveStr::Ascii("oportianately"),
        dictgen::InsensitiveStr::Ascii("oportiante"),
        dictgen::InsensitiveStr::Ascii("oportiantely"),
        dictgen::InsensitiveStr::Ascii("oportiate"),
        dictgen::InsensitiveStr::Ascii("oportinate"),
        dictgen::InsensitiveStr::Ascii("oportionaltely"),
        dictgen::InsensitiveStr::Ascii("oportionaly"),
        dictgen::InsensitiveStr::Ascii("oportionatley"),
        dictgen::InsensitiveStr::Ascii("oportionatly"),
        dictgen::InsensitiveStr::Ascii("oportionnate"),
        dictgen::InsensitiveStr::Ascii("oprotionate"),
        dictgen::InsensitiveStr::Ascii("oprotionately"),
    ],
    values: &[
        &["disproportionate"],
        &["disproportionately"],
        &["disproportionate"],
        &["disproportionately"],
        &["disproportionate"],
        &["disproportionately"],
        &["disproportionate"],
        &["disproportionate"],
        &["disproportionately"],
        &["disproportionately"],
        &["disproportionately"],
        &["disproportionately"],
        &["disproportionate"],
        &["disproportionate"],
        &["disproportionately"],
    ],
    range: 9..=14,
};

static WORD_DISPO_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_DISPO_CHILDREN),
    value: None,
};

pub static WORD_DISPO_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("rportionate"),
        dictgen::InsensitiveStr::Ascii("rportionately"),
        dictgen::InsensitiveStr::Ascii("rportionatly"),
        dictgen::InsensitiveStr::Ascii("sicion"),
        dictgen::InsensitiveStr::Ascii("siton"),
        dictgen::InsensitiveStr::Ascii("sle"),
        dictgen::InsensitiveStr::Ascii("ste"),
        dictgen::InsensitiveStr::Ascii("stion"),
        dictgen::InsensitiveStr::Ascii("ves"),
    ],
    values: &[
        &["disproportionate"],
        &["disproportionately"],
        &["disproportionately"],
        &["disposition"],
        &["disposition"],
        &["dispose"],
        &["dispose"],
        &["disposition"],
        &["dispose"],
    ],
    range: 3..=13,
};

static WORD_DISPL_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_DISPL_CHILDREN),
    value: None,
};

pub static WORD_DISPL_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("acemnt"),
        dictgen::InsensitiveStr::Ascii("ayd"),
        dictgen::InsensitiveStr::Ascii("ayes"),
        dictgen::InsensitiveStr::Ascii("ayfps"),
    ],
    values: &[
        &["displacement"],
        &["displayed"],
        &["displays"],
        &["displays"],
    ],
    range: 3..=6,
};

static WORD_DISPI_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_DISPI_CHILDREN),
    value: None,
};

pub static WORD_DISPI_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("cable"),
        dictgen::InsensitiveStr::Ascii("te"),
    ],
    values: &[&["despicable"], &["despite"]],
    range: 2..=5,
};

static WORD_DISPE_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_DISPE_CHILDREN),
    value: None,
};

pub static WORD_DISPE_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("cable"),
        dictgen::InsensitiveStr::Ascii("ncaries"),
        dictgen::InsensitiveStr::Ascii("ncary"),
        dictgen::InsensitiveStr::Ascii("nce"),
        dictgen::InsensitiveStr::Ascii("nced"),
        dictgen::InsensitiveStr::Ascii("ncers"),
        dictgen::InsensitiveStr::Ascii("ncing"),
        dictgen::InsensitiveStr::Ascii("ners"),
        dictgen::InsensitiveStr::Ascii("nsaire"),
        dictgen::InsensitiveStr::Ascii("nsaires"),
        dictgen::InsensitiveStr::Ascii("nsare"),
        dictgen::InsensitiveStr::Ascii("nsarie"),
        dictgen::InsensitiveStr::Ascii("nsarios"),
        dictgen::InsensitiveStr::Ascii("nsiary"),
        dictgen::InsensitiveStr::Ascii("nsiries"),
        dictgen::InsensitiveStr::Ascii("nsories"),
        dictgen::InsensitiveStr::Ascii("nsory"),
        dictgen::InsensitiveStr::Ascii("rportionate"),
        dictgen::InsensitiveStr::Ascii("rsa"),
        dictgen::InsensitiveStr::Ascii("snary"),
    ],
    values: &[
        &["despicable"],
        &["dispensaries"],
        &["dispensary"],
        &["dispense"],
        &["dispensed"],
        &["dispenser"],
        &["dispensing"],
        &["dispenser"],
        &["dispensaries"],
        &["dispensaries"],
        &["dispenser"],
        &["dispenser"],
        &["dispensaries"],
        &["dispensary"],
        &["dispensaries"],
        &["dispensaries"],
        &["dispensary"],
        &["disproportionate"],
        &["dispensary"],
        &["dispensary"],
    ],
    range: 3..=11,
};

static WORD_DISPA_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_DISPA_CHILDREN),
    value: None,
};

pub static WORD_DISPA_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("cth"),
        dictgen::InsensitiveStr::Ascii("ir"),
        dictgen::InsensitiveStr::Ascii("irty"),
        dictgen::InsensitiveStr::Ascii("lcement"),
        dictgen::InsensitiveStr::Ascii("lyed"),
        dictgen::InsensitiveStr::Ascii("lys"),
        dictgen::InsensitiveStr::Ascii("pointed"),
        dictgen::InsensitiveStr::Ascii("ringly"),
        dictgen::InsensitiveStr::Ascii("rtiy"),
        dictgen::InsensitiveStr::Ascii("th"),
    ],
    values: &[
        &["dispatch"],
        &["despair"],
        &["disparity"],
        &["displacement"],
        &["displayed"],
        &["displays"],
        &["dissapointed"],
        &["disparagingly"],
        &["disparity"],
        &["dispatch"],
    ],
    range: 2..=7,
};

static WORD_DISO_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_DISO_CHILDREN),
    value: None,
};

pub static WORD_DISO_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("bediance"),
        dictgen::InsensitiveStr::Ascii("bediant"),
        dictgen::InsensitiveStr::Ascii("beidence"),
        dictgen::InsensitiveStr::Ascii("cgraphy"),
        dictgen::InsensitiveStr::Ascii("llusioned"),
        dictgen::InsensitiveStr::Ascii("lved"),
        dictgen::InsensitiveStr::Ascii("ver"),
    ],
    values: &[
        &["disobedience"],
        &["disobedient"],
        &["disobedience"],
        &["discography"],
        &["disillusioned"],
        &["dissolved"],
        &["discover"],
    ],
    range: 3..=9,
};

static WORD_DISN_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_DISN_CHILDREN),
    value: None,
};

pub static WORD_DISN_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("egage")],
    values: &[&["disengage"]],
    range: 5..=5,
};

static WORD_DISM_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_DISM_CHILDREN),
    value: None,
};

pub static WORD_DISM_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("anlting"),
        dictgen::InsensitiveStr::Ascii("antaled"),
        dictgen::InsensitiveStr::Ascii("ante"),
        dictgen::InsensitiveStr::Ascii("antel"),
        dictgen::InsensitiveStr::Ascii("anteld"),
        dictgen::InsensitiveStr::Ascii("anteled"),
        dictgen::InsensitiveStr::Ascii("anting"),
        dictgen::InsensitiveStr::Ascii("antleing"),
        dictgen::InsensitiveStr::Ascii("entled"),
        dictgen::InsensitiveStr::Ascii("isals"),
        dictgen::InsensitiveStr::Ascii("isse"),
    ],
    values: &[
        &["dismantling"],
        &["dismantled"],
        &["dismantle"],
        &["dismantle"],
        &["dismantled"],
        &["dismantled"],
        &["dismantling"],
        &["dismantling"],
        &["dismantled"],
        &["dismissal"],
        &["dismissive"],
    ],
    range: 4..=8,
};

static WORD_DISL_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_DISL_CHILDREN),
    value: None,
};

pub static WORD_DISL_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("caimer"),
        dictgen::InsensitiveStr::Ascii("iks"),
        dictgen::InsensitiveStr::Ascii("ikse"),
    ],
    values: &[&["disclaimer"], &["dislikes"], &["dislikes"]],
    range: 3..=6,
};

static WORD_DISK_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_DISK_CHILDREN),
    value: None,
};

pub static WORD_DISK_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("rimination")],
    values: &[&["discrimination"]],
    range: 10..=10,
};

static WORD_DISI_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_DISI_CHILDREN),
    value: None,
};

pub static WORD_DISI_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("cples"),
        dictgen::InsensitiveStr::Ascii("cpline"),
        dictgen::InsensitiveStr::Ascii("cplined"),
        dictgen::InsensitiveStr::Ascii("cplines"),
        dictgen::InsensitiveStr::Ascii("llisioned"),
        dictgen::InsensitiveStr::Ascii("llusionned"),
        dictgen::InsensitiveStr::Ascii("llutioned"),
        dictgen::InsensitiveStr::Ascii("ngeneous"),
        dictgen::InsensitiveStr::Ascii("ngenious"),
        dictgen::InsensitiveStr::Ascii("ngenuious"),
        dictgen::InsensitiveStr::Ascii("ngenuos"),
        dictgen::InsensitiveStr::Ascii("nteresed"),
        dictgen::InsensitiveStr::Ascii("ntereted"),
        dictgen::InsensitiveStr::Ascii("plined"),
    ],
    values: &[
        &["disciples"],
        &["discipline"],
        &["disciplined"],
        &["disciplines"],
        &["disillusioned"],
        &["disillusioned"],
        &["disillusioned"],
        &["disingenuous"],
        &["disingenuous"],
        &["disingenuous"],
        &["disingenuous"],
        &["disinterested"],
        &["disinterested"],
        &["disciplined"],
    ],
    range: 5..=10,
};

static WORD_DISH_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_DISH_CHILDREN),
    value: None,
};

pub static WORD_DISH_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("carged"),
        dictgen::InsensitiveStr::Ascii("inored"),
        dictgen::InsensitiveStr::Ascii("oner"),
        dictgen::InsensitiveStr::Ascii("onesy"),
        dictgen::InsensitiveStr::Ascii("onet"),
        dictgen::InsensitiveStr::Ascii("onord"),
    ],
    values: &[
        &["discharged"],
        &["dishonored"],
        &["dishonored"],
        &["dishonesty"],
        &["dishonesty"],
        &["dishonored"],
    ],
    range: 4..=6,
};

static WORD_DISG_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_DISG_CHILDREN),
    value: None,
};

pub static WORD_DISG_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("areement"),
        dictgen::InsensitiveStr::Ascii("arees"),
        dictgen::InsensitiveStr::Ascii("iuse"),
        dictgen::InsensitiveStr::Ascii("iused"),
        dictgen::InsensitiveStr::Ascii("racful"),
        dictgen::InsensitiveStr::Ascii("raseful"),
        dictgen::InsensitiveStr::Ascii("rateful"),
        dictgen::InsensitiveStr::Ascii("runtaled"),
        dictgen::InsensitiveStr::Ascii("runted"),
        dictgen::InsensitiveStr::Ascii("runteld"),
        dictgen::InsensitiveStr::Ascii("runteled"),
        dictgen::InsensitiveStr::Ascii("runtld"),
        dictgen::InsensitiveStr::Ascii("uisted"),
        dictgen::InsensitiveStr::Ascii("untingly"),
        dictgen::InsensitiveStr::Ascii("usied"),
        dictgen::InsensitiveStr::Ascii("uss"),
        dictgen::InsensitiveStr::Ascii("ustes"),
        dictgen::InsensitiveStr::Ascii("ustigly"),
        dictgen::InsensitiveStr::Ascii("ustingy"),
        dictgen::InsensitiveStr::Ascii("ustinly"),
        dictgen::InsensitiveStr::Ascii("ustiny"),
        dictgen::InsensitiveStr::Ascii("ustos"),
        dictgen::InsensitiveStr::Ascii("ustosa"),
        dictgen::InsensitiveStr::Ascii("ustose"),
        dictgen::InsensitiveStr::Ascii("ustosi"),
        dictgen::InsensitiveStr::Ascii("ustoso"),
        dictgen::InsensitiveStr::Ascii("ustus"),
    ],
    values: &[
        &["disagreements"],
        &["disagrees"],
        &["disguise"],
        &["disguised"],
        &["disgraceful"],
        &["disgraceful"],
        &["disgraceful"],
        &["disgruntled"],
        &["disgruntled"],
        &["disgruntled"],
        &["disgruntled"],
        &["disgruntled"],
        &["disguise"],
        &["disgustingly"],
        &["disguised"],
        &["disgusts"],
        &["disgusts"],
        &["disgustingly"],
        &["disgustingly"],
        &["disgustingly"],
        &["disgustingly"],
        &["disgusts"],
        &["disgusts"],
        &["disgusts"],
        &["disgusts"],
        &["disgusts"],
        &["disgusts"],
    ],
    range: 3..=8,
};

static WORD_DISE_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_DISE_CHILDREN),
    value: None,
};

pub static WORD_DISE_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("mination"),
        dictgen::InsensitiveStr::Ascii("nchanged"),
        dictgen::InsensitiveStr::Ascii("ngenuous"),
        dictgen::InsensitiveStr::Ascii("nginuous"),
        dictgen::InsensitiveStr::Ascii("nsitized"),
        dictgen::InsensitiveStr::Ascii("ntry"),
        dictgen::InsensitiveStr::Ascii("rable"),
    ],
    values: &[
        &["dissemination"],
        &["disenchanted"],
        &["disingenuous"],
        &["disingenuous"],
        &["desensitized"],
        &["dysentery"],
        &["desirable"],
    ],
    range: 4..=8,
};

static WORD_DISC_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_DISC_CHILDREN),
    value: None,
};

static WORD_DISC_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    Some(&WORD_DISCA_NODE),
    None,
    None,
    None,
    Some(&WORD_DISCE_NODE),
    None,
    None,
    Some(&WORD_DISCH_NODE),
    Some(&WORD_DISCI_NODE),
    None,
    None,
    Some(&WORD_DISCL_NODE),
    None,
    None,
    Some(&WORD_DISCO_NODE),
    None,
    None,
    Some(&WORD_DISCR_NODE),
    None,
    Some(&WORD_DISCT_NODE),
    Some(&WORD_DISCU_NODE),
    None,
    None,
    None,
    None,
    None,
];

static WORD_DISCU_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_DISCU_CHILDREN),
    value: None,
};

pub static WORD_DISCU_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("alified"),
        dictgen::InsensitiveStr::Ascii("sison"),
        dictgen::InsensitiveStr::Ascii("ssin"),
        dictgen::InsensitiveStr::Ascii("ssiong"),
        dictgen::InsensitiveStr::Ascii("sssion"),
        dictgen::InsensitiveStr::Ascii("sting"),
        dictgen::InsensitiveStr::Ascii("stingly"),
    ],
    values: &[
        &["disqualified"],
        &["discussions"],
        &["discussion"],
        &["discussing"],
        &["discussions"],
        &["discussing"],
        &["disgustingly"],
    ],
    range: 4..=7,
};

static WORD_DISCT_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_DISCT_CHILDREN),
    value: None,
};

pub static WORD_DISCT_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("inction"),
        dictgen::InsensitiveStr::Ascii("inctive"),
        dictgen::InsensitiveStr::Ascii("intions"),
    ],
    values: &[&["distinction"], &["distinctive"], &["distinctions"]],
    range: 7..=7,
};

static WORD_DISCR_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_DISCR_CHILDREN),
    value: None,
};

pub static WORD_DISCR_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("apency"),
        dictgen::InsensitiveStr::Ascii("ecion"),
        dictgen::InsensitiveStr::Ascii("eddit"),
        dictgen::InsensitiveStr::Ascii("edid"),
        dictgen::InsensitiveStr::Ascii("editied"),
        dictgen::InsensitiveStr::Ascii("editted"),
        dictgen::InsensitiveStr::Ascii("epany"),
        dictgen::InsensitiveStr::Ascii("esion"),
        dictgen::InsensitiveStr::Ascii("eting"),
        dictgen::InsensitiveStr::Ascii("etited"),
        dictgen::InsensitiveStr::Ascii("eto"),
        dictgen::InsensitiveStr::Ascii("ibe"),
        dictgen::InsensitiveStr::Ascii("ibed"),
        dictgen::InsensitiveStr::Ascii("ibes"),
        dictgen::InsensitiveStr::Ascii("ibing"),
        dictgen::InsensitiveStr::Ascii("imanatory"),
        dictgen::InsensitiveStr::Ascii("imante"),
        dictgen::InsensitiveStr::Ascii("imianted"),
        dictgen::InsensitiveStr::Ascii("imiate"),
        dictgen::InsensitiveStr::Ascii("iminacion"),
        dictgen::InsensitiveStr::Ascii("iminante"),
        dictgen::InsensitiveStr::Ascii("iminare"),
        dictgen::InsensitiveStr::Ascii("iminatie"),
        dictgen::InsensitiveStr::Ascii("iminatin"),
        dictgen::InsensitiveStr::Ascii("iminatoire"),
        dictgen::InsensitiveStr::Ascii("iminatorie"),
        dictgen::InsensitiveStr::Ascii("imine"),
        dictgen::InsensitiveStr::Ascii("iminitory"),
        dictgen::InsensitiveStr::Ascii("iminted"),
        dictgen::InsensitiveStr::Ascii("ouage"),
        dictgen::InsensitiveStr::Ascii("ption"),
    ],
    values: &[
        &["discrepancy"],
        &["discretion"],
        &["discredited"],
        &["discredited"],
        &["discredited"],
        &["discredited"],
        &["discrepancy"],
        &["discretion"],
        &["discretion"],
        &["discredited"],
        &["discretion"],
        &["describe"],
        &["described"],
        &["describes"],
        &["describing"],
        &["discriminatory"],
        &["discriminate"],
        &["discriminated"],
        &["discriminate"],
        &["discrimination"],
        &["discriminate"],
        &["discriminate"],
        &["discriminate"],
        &["discrimination"],
        &["discriminate"],
        &["discriminate"],
        &["discriminate"],
        &["discriminatory"],
        &["discriminated"],
        &["discourages"],
        &["discretion"],
    ],
    range: 3..=10,
};

static WORD_DISCO_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_DISCO_CHILDREN),
    value: None,
};

pub static WORD_DISCO_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("grahy"),
        dictgen::InsensitiveStr::Ascii("grapy"),
        dictgen::InsensitiveStr::Ascii("grophy"),
        dictgen::InsensitiveStr::Ascii("grpahy"),
        dictgen::InsensitiveStr::Ascii("lsure"),
        dictgen::InsensitiveStr::Ascii("nenct"),
        dictgen::InsensitiveStr::Ascii("nencted"),
        dictgen::InsensitiveStr::Ascii("nencts"),
        dictgen::InsensitiveStr::Ascii("nncet"),
        dictgen::InsensitiveStr::Ascii("nnecters"),
        dictgen::InsensitiveStr::Ascii("nnectes"),
        dictgen::InsensitiveStr::Ascii("nnectme"),
        dictgen::InsensitiveStr::Ascii("nnectus"),
        dictgen::InsensitiveStr::Ascii("nnet"),
        dictgen::InsensitiveStr::Ascii("nneted"),
        dictgen::InsensitiveStr::Ascii("nnets"),
        dictgen::InsensitiveStr::Ascii("nnnect"),
        dictgen::InsensitiveStr::Ascii("ntined"),
        dictgen::InsensitiveStr::Ascii("ntinuted"),
        dictgen::InsensitiveStr::Ascii("ntiued"),
        dictgen::InsensitiveStr::Ascii("ntiuned"),
        dictgen::InsensitiveStr::Ascii("ntued"),
        dictgen::InsensitiveStr::Ascii("ruage"),
        dictgen::InsensitiveStr::Ascii("sure"),
        dictgen::InsensitiveStr::Ascii("und"),
        dictgen::InsensitiveStr::Ascii("untined"),
        dictgen::InsensitiveStr::Ascii("urces"),
        dictgen::InsensitiveStr::Ascii("ure"),
        dictgen::InsensitiveStr::Ascii("urgae"),
        dictgen::InsensitiveStr::Ascii("urges"),
        dictgen::InsensitiveStr::Ascii("ved"),
        dictgen::InsensitiveStr::Ascii("verd"),
        dictgen::InsensitiveStr::Ascii("vere"),
        dictgen::InsensitiveStr::Ascii("veres"),
        dictgen::InsensitiveStr::Ascii("veryd"),
        dictgen::InsensitiveStr::Ascii("verys"),
    ],
    values: &[
        &["discography"],
        &["discography"],
        &["discography"],
        &["discography"],
        &["disclosure"],
        &["disconnect"],
        &["disconnected"],
        &["disconnects"],
        &["disconnects"],
        &["disconnects"],
        &["disconnects"],
        &["disconnected"],
        &["disconnects"],
        &["disconnect"],
        &["disconnected"],
        &["disconnects"],
        &["disconnect"],
        &["discontinued"],
        &["discontinued"],
        &["discontinued"],
        &["discontinued"],
        &["discounted"],
        &["discourages"],
        &["discourse"],
        &["discounted"],
        &["discontinued"],
        &["discourse"],
        &["discourse"],
        &["discourages"],
        &["discourages"],
        &["discovered"],
        &["discovered"],
        &["discoveries"],
        &["discovers"],
        &["discovered"],
        &["discovers"],
    ],
    range: 3..=8,
};

static WORD_DISCL_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_DISCL_CHILDREN),
    value: None,
};

pub static WORD_DISCL_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("amer"),
        dictgen::InsensitiveStr::Ascii("amier"),
        dictgen::InsensitiveStr::Ascii("iamer"),
        dictgen::InsensitiveStr::Ascii("ipinary"),
        dictgen::InsensitiveStr::Ascii("ipine"),
        dictgen::InsensitiveStr::Ascii("ipined"),
        dictgen::InsensitiveStr::Ascii("ipines"),
        dictgen::InsensitiveStr::Ascii("osue"),
        dictgen::InsensitiveStr::Ascii("ousre"),
        dictgen::InsensitiveStr::Ascii("soure"),
    ],
    values: &[
        &["disclaimer"],
        &["disclaimer"],
        &["disclaimer"],
        &["disciplinary"],
        &["discipline"],
        &["disciplined"],
        &["disciplines"],
        &["disclosure"],
        &["disclosure"],
        &["disclosure"],
    ],
    range: 4..=7,
};

static WORD_DISCI_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_DISCI_CHILDREN),
    value: None,
};

pub static WORD_DISCI_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("niplary"),
        dictgen::InsensitiveStr::Ascii("planary"),
        dictgen::InsensitiveStr::Ascii("plen"),
        dictgen::InsensitiveStr::Ascii("plenary"),
        dictgen::InsensitiveStr::Ascii("plened"),
        dictgen::InsensitiveStr::Ascii("plers"),
        dictgen::InsensitiveStr::Ascii("plies"),
        dictgen::InsensitiveStr::Ascii("plinairy"),
        dictgen::InsensitiveStr::Ascii("plinare"),
        dictgen::InsensitiveStr::Ascii("plinas"),
        dictgen::InsensitiveStr::Ascii("plince"),
        dictgen::InsensitiveStr::Ascii("plinera"),
        dictgen::InsensitiveStr::Ascii("plinerad"),
        dictgen::InsensitiveStr::Ascii("plinery"),
        dictgen::InsensitiveStr::Ascii("pliniary"),
        dictgen::InsensitiveStr::Ascii("plins"),
        dictgen::InsensitiveStr::Ascii("prine"),
    ],
    values: &[
        &["disciplinary"],
        &["disciplinary"],
        &["disciplines"],
        &["disciplinary"],
        &["disciplined"],
        &["disciples"],
        &["disciplines"],
        &["disciplinary"],
        &["discipline"],
        &["disciplines"],
        &["disciplines"],
        &["disciplinary"],
        &["disciplined"],
        &["disciplinary"],
        &["disciplinary"],
        &["disciplines"],
        &["discipline"],
    ],
    range: 4..=8,
};

static WORD_DISCH_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_DISCH_CHILDREN),
    value: None,
};

pub static WORD_DISCH_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ard"),
        dictgen::InsensitiveStr::Ascii("arded"),
        dictgen::InsensitiveStr::Ascii("are"),
    ],
    values: &[&["discharged"], &["discharged"], &["discharged"]],
    range: 3..=5,
};

static WORD_DISCE_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_DISCE_CHILDREN),
    value: None,
};

pub static WORD_DISCE_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("pline"),
        dictgen::InsensitiveStr::Ascii("ption"),
        dictgen::InsensitiveStr::Ascii("rtation"),
    ],
    values: &[&["discipline"], &["discretion"], &["dissertation"]],
    range: 5..=7,
};

static WORD_DISCA_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_DISCA_CHILDREN),
    value: None,
};

pub static WORD_DISCA_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("limer"),
        dictgen::InsensitiveStr::Ascii("pline"),
    ],
    values: &[&["disclaimer"], &["discipline"]],
    range: 5..=5,
};

static WORD_DISB_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_DISB_CHILDREN),
    value: None,
};

pub static WORD_DISB_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ale"),
        dictgen::InsensitiveStr::Ascii("aled"),
        dictgen::InsensitiveStr::Ascii("ales"),
        dictgen::InsensitiveStr::Ascii("aling"),
        dictgen::InsensitiveStr::Ascii("eleif"),
        dictgen::InsensitiveStr::Ascii("elif"),
        dictgen::InsensitiveStr::Ascii("elife"),
    ],
    values: &[
        &["disable"],
        &["disabled"],
        &["disables"],
        &["disabling"],
        &["disbelief"],
        &["disbelief"],
        &["disbelief"],
    ],
    range: 3..=5,
};

static WORD_DISA_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_DISA_CHILDREN),
    value: None,
};

pub static WORD_DISA_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("apoint"),
        dictgen::InsensitiveStr::Ascii("apointed"),
        dictgen::InsensitiveStr::Ascii("beld"),
        dictgen::InsensitiveStr::Ascii("bels"),
        dictgen::InsensitiveStr::Ascii("dvandage"),
        dictgen::InsensitiveStr::Ascii("dvandages"),
        dictgen::InsensitiveStr::Ascii("dvantadge"),
        dictgen::InsensitiveStr::Ascii("dvanteged"),
        dictgen::InsensitiveStr::Ascii("dvanteges"),
        dictgen::InsensitiveStr::Ascii("dvantge"),
        dictgen::InsensitiveStr::Ascii("dvantged"),
        dictgen::InsensitiveStr::Ascii("dvantges"),
        dictgen::InsensitiveStr::Ascii("dvatange"),
        dictgen::InsensitiveStr::Ascii("dvatanges"),
        dictgen::InsensitiveStr::Ascii("dventage"),
        dictgen::InsensitiveStr::Ascii("dventaged"),
        dictgen::InsensitiveStr::Ascii("dventages"),
        dictgen::InsensitiveStr::Ascii("gred"),
        dictgen::InsensitiveStr::Ascii("greeed"),
        dictgen::InsensitiveStr::Ascii("greemet"),
        dictgen::InsensitiveStr::Ascii("greemtn"),
        dictgen::InsensitiveStr::Ascii("gremeent"),
        dictgen::InsensitiveStr::Ascii("gres"),
        dictgen::InsensitiveStr::Ascii("llusioned"),
        dictgen::InsensitiveStr::Ascii("peared"),
        dictgen::InsensitiveStr::Ascii("pointing"),
        dictgen::InsensitiveStr::Ascii("ppeard"),
        dictgen::InsensitiveStr::Ascii("ppearence"),
        dictgen::InsensitiveStr::Ascii("ppearnace"),
        dictgen::InsensitiveStr::Ascii("ppearnce"),
        dictgen::InsensitiveStr::Ascii("ppearred"),
        dictgen::InsensitiveStr::Ascii("ppearring"),
        dictgen::InsensitiveStr::Ascii("pperaing"),
        dictgen::InsensitiveStr::Ascii("pperead"),
        dictgen::InsensitiveStr::Ascii("ppered"),
        dictgen::InsensitiveStr::Ascii("ppiont"),
        dictgen::InsensitiveStr::Ascii("pporval"),
        dictgen::InsensitiveStr::Ascii("pprovel"),
        dictgen::InsensitiveStr::Ascii("prity"),
        dictgen::InsensitiveStr::Ascii("proval"),
        dictgen::InsensitiveStr::Ascii("spointed"),
        dictgen::InsensitiveStr::Ascii("sterous"),
        dictgen::InsensitiveStr::Ascii("stisfied"),
        dictgen::InsensitiveStr::Ascii("storus"),
        dictgen::InsensitiveStr::Ascii("streous"),
        dictgen::InsensitiveStr::Ascii("strious"),
        dictgen::InsensitiveStr::Ascii("stros"),
        dictgen::InsensitiveStr::Ascii("strosa"),
        dictgen::InsensitiveStr::Ascii("strose"),
        dictgen::InsensitiveStr::Ascii("strosi"),
        dictgen::InsensitiveStr::Ascii("stroso"),
        dictgen::InsensitiveStr::Ascii("struous"),
        dictgen::InsensitiveStr::Ascii("terous"),
        dictgen::InsensitiveStr::Ascii("tisfaction"),
        dictgen::InsensitiveStr::Ascii("tisfied"),
        dictgen::InsensitiveStr::Ascii("tissfied"),
        dictgen::InsensitiveStr::Ascii("trous"),
        dictgen::InsensitiveStr::Ascii("tvantage"),
        dictgen::InsensitiveStr::Ascii("tvantaged"),
        dictgen::InsensitiveStr::Ascii("tvantages"),
    ],
    values: &[
        &["disappoint"],
        &["dissapointed"],
        &["disabled"],
        &["disables"],
        &["disadvantaged"],
        &["disadvantaged"],
        &["disadvantaged"],
        &["disadvantaged"],
        &["disadvantages"],
        &["disadvantage"],
        &["disadvantaged"],
        &["disadvantages"],
        &["disadvantage"],
        &["disadvantages"],
        &["disadvantage"],
        &["disadvantaged"],
        &["disadvantages"],
        &["disagreed"],
        &["disagreed"],
        &["disagreements"],
        &["disagreements"],
        &["disagreements"],
        &["disagrees"],
        &["disillusioned"],
        &["disappeared"],
        &["disappointing"],
        &["disappeared"],
        &["disappearance"],
        &["disappearance"],
        &["disappearance"],
        &["disappeared"],
        &["disappearing"],
        &["disappearing"],
        &["disappeared"],
        &["disappeared"],
        &["disappoint"],
        &["disapproval"],
        &["disapproval"],
        &["disparity"],
        &["disapproval"],
        &["dissapointed"],
        &["disastrous"],
        &["dissatisfied"],
        &["disastrous"],
        &["disastrous"],
        &["disastrous"],
        &["disastrous"],
        &["disastrous"],
        &["disastrous"],
        &["disastrous"],
        &["disastrous"],
        &["disastrous"],
        &["disastrous"],
        &["dissatisfaction"],
        &["dissatisfied"],
        &["dissatisfied"],
        &["disastrous"],
        &["disadvantage"],
        &["disadvantaged"],
        &["disadvantages"],
    ],
    range: 4..=10,
};

static WORD_DIR_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_DIR_CHILDREN),
    value: None,
};

pub static WORD_DIR_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("bble"),
        dictgen::InsensitiveStr::Ascii("eccional"),
        dictgen::InsensitiveStr::Ascii("ecitonal"),
        dictgen::InsensitiveStr::Ascii("eclty"),
        dictgen::InsensitiveStr::Ascii("ecotry"),
        dictgen::InsensitiveStr::Ascii("ectin"),
        dictgen::InsensitiveStr::Ascii("ectinla"),
        dictgen::InsensitiveStr::Ascii("ectionl"),
        dictgen::InsensitiveStr::Ascii("ectionnal"),
        dictgen::InsensitiveStr::Ascii("ectivos"),
        dictgen::InsensitiveStr::Ascii("ectix"),
        dictgen::InsensitiveStr::Ascii("ectores"),
        dictgen::InsensitiveStr::Ascii("ectorguy"),
        dictgen::InsensitiveStr::Ascii("ectorios"),
        dictgen::InsensitiveStr::Ascii("ectorys"),
        dictgen::InsensitiveStr::Ascii("ectos"),
        dictgen::InsensitiveStr::Ascii("ectoty"),
        dictgen::InsensitiveStr::Ascii("ectoy"),
        dictgen::InsensitiveStr::Ascii("ectroy"),
        dictgen::InsensitiveStr::Ascii("ectrx"),
        dictgen::InsensitiveStr::Ascii("ectsong"),
        dictgen::InsensitiveStr::Ascii("ecty"),
        dictgen::InsensitiveStr::Ascii("ektional"),
        dictgen::InsensitiveStr::Ascii("etcx"),
        dictgen::InsensitiveStr::Ascii("fting"),
        dictgen::InsensitiveStr::Ascii("ived"),
        dictgen::InsensitiveStr::Ascii("vers"),
    ],
    values: &[
        &["dribble"],
        &["directional"],
        &["directional"],
        &["directly"],
        &["directory"],
        &["directions"],
        &["directional"],
        &["directional"],
        &["directional"],
        &["directions"],
        &["directx"],
        &["directors"],
        &["directory"],
        &["directors"],
        &["directors"],
        &["directors"],
        &["directory"],
        &["directory"],
        &["directory"],
        &["directx"],
        &["directions"],
        &["directly"],
        &["directional"],
        &["directx"],
        &["drifting"],
        &["derived"],
        &["drivers"],
    ],
    range: 4..=9,
};

static WORD_DIP_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_DIP_CHILDREN),
    value: None,
};

pub static WORD_DIP_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ections"),
        dictgen::InsensitiveStr::Ascii("htong"),
        dictgen::InsensitiveStr::Ascii("htongs"),
        dictgen::InsensitiveStr::Ascii("limatic"),
        dictgen::InsensitiveStr::Ascii("lomacia"),
        dictgen::InsensitiveStr::Ascii("lomancy"),
        dictgen::InsensitiveStr::Ascii("lomatisch"),
        dictgen::InsensitiveStr::Ascii("lomma"),
        dictgen::InsensitiveStr::Ascii("olma"),
        dictgen::InsensitiveStr::Ascii("olmatic"),
        dictgen::InsensitiveStr::Ascii("thong"),
        dictgen::InsensitiveStr::Ascii("thongs"),
    ],
    values: &[
        &["depictions"],
        &["diphthong"],
        &["diphthongs"],
        &["diplomatic"],
        &["diplomatic"],
        &["diplomacy"],
        &["diplomatic"],
        &["diploma"],
        &["diploma"],
        &["diplomatic"],
        &["diphthong"],
        &["diphthongs"],
    ],
    range: 4..=9,
};

static WORD_DIO_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_DIO_CHILDREN),
    value: None,
};

pub static WORD_DIO_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("nsaur"),
        dictgen::InsensitiveStr::Ascii("nsaurs"),
        dictgen::InsensitiveStr::Ascii("sese"),
    ],
    values: &[&["dinosaur"], &["dinosaurs"], &["diocese"]],
    range: 4..=6,
};

static WORD_DIN_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_DIN_CHILDREN),
    value: None,
};

pub static WORD_DIN_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("asour"),
        dictgen::InsensitiveStr::Ascii("asours"),
        dictgen::InsensitiveStr::Ascii("gity"),
        dictgen::InsensitiveStr::Ascii("osar"),
        dictgen::InsensitiveStr::Ascii("osaures"),
        dictgen::InsensitiveStr::Ascii("osaurios"),
        dictgen::InsensitiveStr::Ascii("osaurus"),
        dictgen::InsensitiveStr::Ascii("osaus"),
        dictgen::InsensitiveStr::Ascii("osuar"),
        dictgen::InsensitiveStr::Ascii("osuars"),
        dictgen::InsensitiveStr::Ascii("soaur"),
        dictgen::InsensitiveStr::Ascii("soaurs"),
    ],
    values: &[
        &["dinosaur"],
        &["dinosaurs"],
        &["dignity"],
        &["dinosaur"],
        &["dinosaurs"],
        &["dinosaurs"],
        &["dinosaurs"],
        &["dinosaurs"],
        &["dinosaur"],
        &["dinosaurs"],
        &["dinosaur"],
        &["dinosaurs"],
    ],
    range: 4..=8,
};

static WORD_DIM_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_DIM_CHILDREN),
    value: None,
};

pub static WORD_DIM_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("aond"),
        dictgen::InsensitiveStr::Ascii("aonds"),
        dictgen::InsensitiveStr::Ascii("enions"),
        dictgen::InsensitiveStr::Ascii("ensinal"),
        dictgen::InsensitiveStr::Ascii("ensionals"),
        dictgen::InsensitiveStr::Ascii("ensiones"),
        dictgen::InsensitiveStr::Ascii("ensionnal"),
        dictgen::InsensitiveStr::Ascii("ensionsal"),
        dictgen::InsensitiveStr::Ascii("ention"),
        dictgen::InsensitiveStr::Ascii("entional"),
        dictgen::InsensitiveStr::Ascii("entions"),
        dictgen::InsensitiveStr::Ascii("esnion"),
        dictgen::InsensitiveStr::Ascii("esnional"),
        dictgen::InsensitiveStr::Ascii("esnions"),
        dictgen::InsensitiveStr::Ascii("ineshes"),
        dictgen::InsensitiveStr::Ascii("inisheds"),
        dictgen::InsensitiveStr::Ascii("inishs"),
        dictgen::InsensitiveStr::Ascii("inising"),
        dictgen::InsensitiveStr::Ascii("insihing"),
        dictgen::InsensitiveStr::Ascii("inuitive"),
        dictgen::InsensitiveStr::Ascii("inushing"),
        dictgen::InsensitiveStr::Ascii("unitive"),
    ],
    values: &[
        &["diamond"],
        &["diamonds"],
        &["dimensions"],
        &["dimensional"],
        &["dimensions"],
        &["dimensions"],
        &["dimensional"],
        &["dimensional"],
        &["dimension"],
        &["dimensional"],
        &["dimensions"],
        &["dimension"],
        &["dimensional"],
        &["dimensions"],
        &["diminishes"],
        &["diminishes"],
        &["diminishes"],
        &["diminishing"],
        &["diminishing"],
        &["diminutive"],
        &["diminishing"],
        &["diminutive"],
    ],
    range: 4..=9,
};

static WORD_DIL_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_DIL_CHILDREN),
    value: None,
};

pub static WORD_DIL_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("poma")],
    values: &[&["diploma"]],
    range: 4..=4,
};

static WORD_DIG_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_DIG_CHILDREN),
    value: None,
};

pub static WORD_DIG_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("anose"),
        dictgen::InsensitiveStr::Ascii("anosed"),
        dictgen::InsensitiveStr::Ascii("anosis"),
        dictgen::InsensitiveStr::Ascii("anostic"),
        dictgen::InsensitiveStr::Ascii("nitiy"),
    ],
    values: &[
        &["diagnose"],
        &["diagnosed"],
        &["diagnosis"],
        &["diagnostic"],
        &["dignity"],
    ],
    range: 5..=7,
};

static WORD_DIF_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_DIF_CHILDREN),
    value: None,
};

pub static WORD_DIF_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("enitly"),
        dictgen::InsensitiveStr::Ascii("erent"),
        dictgen::InsensitiveStr::Ascii("errent"),
        dictgen::InsensitiveStr::Ascii("ferance"),
        dictgen::InsensitiveStr::Ascii("ferances"),
        dictgen::InsensitiveStr::Ascii("ferantiate"),
        dictgen::InsensitiveStr::Ascii("ferantiation"),
        dictgen::InsensitiveStr::Ascii("ferantly"),
        dictgen::InsensitiveStr::Ascii("ferencial"),
        dictgen::InsensitiveStr::Ascii("ferenciate"),
        dictgen::InsensitiveStr::Ascii("ferenciation"),
        dictgen::InsensitiveStr::Ascii("ferenciations"),
        dictgen::InsensitiveStr::Ascii("ferencies"),
        dictgen::InsensitiveStr::Ascii("ferene"),
        dictgen::InsensitiveStr::Ascii("ferenly"),
        dictgen::InsensitiveStr::Ascii("ferens"),
        dictgen::InsensitiveStr::Ascii("ferense"),
        dictgen::InsensitiveStr::Ascii("ferental"),
        dictgen::InsensitiveStr::Ascii("ferentate"),
        dictgen::InsensitiveStr::Ascii("ferente"),
        dictgen::InsensitiveStr::Ascii("ferentes"),
        dictgen::InsensitiveStr::Ascii("ferentiantion"),
        dictgen::InsensitiveStr::Ascii("ferentiatiations"),
        dictgen::InsensitiveStr::Ascii("ferentiatiors"),
        dictgen::InsensitiveStr::Ascii("ferentiaton"),
        dictgen::InsensitiveStr::Ascii("ferentitation"),
        dictgen::InsensitiveStr::Ascii("ferentl"),
        dictgen::InsensitiveStr::Ascii("ferenty"),
        dictgen::InsensitiveStr::Ascii("fereny"),
        dictgen::InsensitiveStr::Ascii("ferientation"),
        dictgen::InsensitiveStr::Ascii("ferintiate"),
        dictgen::InsensitiveStr::Ascii("fernece"),
        dictgen::InsensitiveStr::Ascii("ferneces"),
        dictgen::InsensitiveStr::Ascii("fernetial"),
        dictgen::InsensitiveStr::Ascii("fernetly"),
        dictgen::InsensitiveStr::Ascii("fernt"),
        dictgen::InsensitiveStr::Ascii("ficulites"),
        dictgen::InsensitiveStr::Ascii("ficulity"),
        dictgen::InsensitiveStr::Ascii("ficulte"),
        dictgen::InsensitiveStr::Ascii("ficultes"),
        dictgen::InsensitiveStr::Ascii("ficults"),
        dictgen::InsensitiveStr::Ascii("ficuly"),
        dictgen::InsensitiveStr::Ascii("ficut"),
        dictgen::InsensitiveStr::Ascii("ficutlies"),
        dictgen::InsensitiveStr::Ascii("ficutly"),
        dictgen::InsensitiveStr::Ascii("firentiate"),
        dictgen::InsensitiveStr::Ascii("frent"),
        dictgen::InsensitiveStr::Ascii("fucult"),
        dictgen::InsensitiveStr::Ascii("fuculties"),
        dictgen::InsensitiveStr::Ascii("fuculty"),
        dictgen::InsensitiveStr::Ascii("iculties"),
        dictgen::InsensitiveStr::Ascii("iculty"),
    ],
    values: &[
        &["definitly"],
        &["different"],
        &["different"],
        &["difference"],
        &["differences"],
        &["differentiate"],
        &["differentiation"],
        &["differently"],
        &["differential"],
        &["differentiate"],
        &["differentiation"],
        &["differentiation"],
        &["differences"],
        &["differences"],
        &["differently"],
        &["differences"],
        &["differences"],
        &["differential"],
        &["differentiate"],
        &["difference"],
        &["differences"],
        &["differentiation"],
        &["differentiations"],
        &["differentiation"],
        &["differentiation"],
        &["differentiation"],
        &["differential"],
        &["differently"],
        &["differently"],
        &["differentiation"],
        &["differentiate"],
        &["difference"],
        &["differences"],
        &["differential"],
        &["differently"],
        &["different"],
        &["difficulties"],
        &["difficulty"],
        &["difficulties"],
        &["difficulties"],
        &["difficulties"],
        &["difficulty"],
        &["difficulty"],
        &["difficulties"],
        &["difficulty"],
        &["differentiate"],
        &["different"],
        &["difficult"],
        &["difficulties"],
        &["difficulty"],
        &["difficulties"],
        &["difficulty"],
    ],
    range: 5..=16,
};

static WORD_DIE_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_DIE_CHILDREN),
    value: None,
};

pub static WORD_DIE_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("a"),
        dictgen::InsensitiveStr::Ascii("ing"),
        dictgen::InsensitiveStr::Ascii("ties"),
        dictgen::InsensitiveStr::Ascii("ty"),
    ],
    values: &[&["idea"], &["dying"], &["deities"], &["deity"]],
    range: 1..=4,
};

static WORD_DID_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_DID_CHILDREN),
    value: None,
};

pub static WORD_DID_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("sapointed")],
    values: &[&["dissapointed"]],
    range: 9..=9,
};

static WORD_DIC_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_DIC_CHILDREN),
    value: None,
};

pub static WORD_DIC_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("homoty"),
        dictgen::InsensitiveStr::Ascii("hotomoy"),
        dictgen::InsensitiveStr::Ascii("htomy"),
        dictgen::InsensitiveStr::Ascii("itonaries"),
        dictgen::InsensitiveStr::Ascii("itonary"),
        dictgen::InsensitiveStr::Ascii("kisch"),
        dictgen::InsensitiveStr::Ascii("ksih"),
        dictgen::InsensitiveStr::Ascii("onnects"),
        dictgen::InsensitiveStr::Ascii("over"),
        dictgen::InsensitiveStr::Ascii("overed"),
        dictgen::InsensitiveStr::Ascii("overing"),
        dictgen::InsensitiveStr::Ascii("overs"),
        dictgen::InsensitiveStr::Ascii("overy"),
        dictgen::InsensitiveStr::Ascii("tadorship"),
        dictgen::InsensitiveStr::Ascii("tarorship"),
        dictgen::InsensitiveStr::Ascii("taters"),
        dictgen::InsensitiveStr::Ascii("tateurs"),
        dictgen::InsensitiveStr::Ascii("tatorhip"),
        dictgen::InsensitiveStr::Ascii("tatorshop"),
        dictgen::InsensitiveStr::Ascii("tats"),
        dictgen::InsensitiveStr::Ascii("tionaire"),
        dictgen::InsensitiveStr::Ascii("tionaires"),
        dictgen::InsensitiveStr::Ascii("tionairy"),
        dictgen::InsensitiveStr::Ascii("tionare"),
        dictgen::InsensitiveStr::Ascii("tionarys"),
        dictgen::InsensitiveStr::Ascii("tionay"),
        dictgen::InsensitiveStr::Ascii("tionnary"),
        dictgen::InsensitiveStr::Ascii("ussed"),
    ],
    values: &[
        &["dichotomy"],
        &["dichotomy"],
        &["dichotomy"],
        &["dictionaries"],
        &["dictionary"],
        &["dickish"],
        &["dickish"],
        &["disconnects"],
        &["discover"],
        &["discovered"],
        &["discovering"],
        &["discovers"],
        &["discovery"],
        &["dictatorship"],
        &["dictatorship"],
        &["dictates"],
        &["dictates"],
        &["dictatorship"],
        &["dictatorship"],
        &["dictates"],
        &["dictionaries"],
        &["dictionaries"],
        &["dictionary"],
        &["dictionaries"],
        &["dictionaries"],
        &["dictionary"],
        &["dictionary"],
        &["discussed"],
    ],
    range: 4..=9,
};

static WORD_DIA_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_DIA_CHILDREN),
    value: None,
};

pub static WORD_DIA_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("betees"),
        dictgen::InsensitiveStr::Ascii("bets"),
        dictgen::InsensitiveStr::Ascii("blical"),
        dictgen::InsensitiveStr::Ascii("ganol"),
        dictgen::InsensitiveStr::Ascii("gnoal"),
        dictgen::InsensitiveStr::Ascii("gnoes"),
        dictgen::InsensitiveStr::Ascii("gnosi"),
        dictgen::InsensitiveStr::Ascii("gnosied"),
        dictgen::InsensitiveStr::Ascii("gnosies"),
        dictgen::InsensitiveStr::Ascii("gnositc"),
        dictgen::InsensitiveStr::Ascii("gnositcs"),
        dictgen::InsensitiveStr::Ascii("gnositic"),
        dictgen::InsensitiveStr::Ascii("gnossed"),
        dictgen::InsensitiveStr::Ascii("gnosted"),
        dictgen::InsensitiveStr::Ascii("gnotics"),
        dictgen::InsensitiveStr::Ascii("gonaal"),
        dictgen::InsensitiveStr::Ascii("gonse"),
        dictgen::InsensitiveStr::Ascii("gonsed"),
        dictgen::InsensitiveStr::Ascii("gonsis"),
        dictgen::InsensitiveStr::Ascii("gonstic"),
        dictgen::InsensitiveStr::Ascii("gonstics"),
        dictgen::InsensitiveStr::Ascii("gramas"),
        dictgen::InsensitiveStr::Ascii("gramms"),
        dictgen::InsensitiveStr::Ascii("hrrea"),
        dictgen::InsensitiveStr::Ascii("lecs"),
        dictgen::InsensitiveStr::Ascii("lectes"),
        dictgen::InsensitiveStr::Ascii("lectos"),
        dictgen::InsensitiveStr::Ascii("letcs"),
        dictgen::InsensitiveStr::Ascii("lgoue"),
        dictgen::InsensitiveStr::Ascii("loge"),
        dictgen::InsensitiveStr::Ascii("louge"),
        dictgen::InsensitiveStr::Ascii("mons"),
        dictgen::InsensitiveStr::Ascii("rreah"),
        dictgen::InsensitiveStr::Ascii("rreha"),
        dictgen::InsensitiveStr::Ascii("rrheoa"),
        dictgen::InsensitiveStr::Ascii("sble"),
        dictgen::InsensitiveStr::Ascii("sbling"),
        dictgen::InsensitiveStr::Ascii("sspointed"),
    ],
    values: &[
        &["diabetes"],
        &["diabetes"],
        &["diabolical"],
        &["diagonal"],
        &["diagonal"],
        &["diagnose"],
        &["diagnostic"],
        &["diagnose"],
        &["diagnosis"],
        &["diagnostic"],
        &["diagnostic"],
        &["diagnostic"],
        &["diagnose"],
        &["diagnose"],
        &["diagnostic"],
        &["diagonal"],
        &["diagnose"],
        &["diagnosed"],
        &["diagnosis"],
        &["diagnostic"],
        &["diagnostic"],
        &["diagrams"],
        &["diagrams"],
        &["diarrhea"],
        &["dialects"],
        &["dialects"],
        &["dialects"],
        &["dialects"],
        &["dialogue"],
        &["dialogue"],
        &["dialogue"],
        &["diamonds"],
        &["diarrhea"],
        &["diarrhea"],
        &["diarrhea"],
        &["disable"],
        &["disabling"],
        &["dissapointed"],
    ],
    range: 4..=9,
};

static WORD_DE_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_DE_CHILDREN),
    value: None,
};

static WORD_DE_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    Some(&WORD_DEA_NODE),
    Some(&WORD_DEB_NODE),
    Some(&WORD_DEC_NODE),
    Some(&WORD_DED_NODE),
    None,
    Some(&WORD_DEF_NODE),
    Some(&WORD_DEG_NODE),
    Some(&WORD_DEH_NODE),
    Some(&WORD_DEI_NODE),
    None,
    Some(&WORD_DEK_NODE),
    Some(&WORD_DEL_NODE),
    Some(&WORD_DEM_NODE),
    Some(&WORD_DEN_NODE),
    Some(&WORD_DEO_NODE),
    Some(&WORD_DEP_NODE),
    None,
    Some(&WORD_DER_NODE),
    Some(&WORD_DES_NODE),
    Some(&WORD_DET_NODE),
    Some(&WORD_DEU_NODE),
    Some(&WORD_DEV_NODE),
    None,
    None,
    Some(&WORD_DEY_NODE),
    Some(&WORD_DEZ_NODE),
];

static WORD_DEZ_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_DEZ_CHILDREN),
    value: None,
};

pub static WORD_DEZ_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("entralized")],
    values: &[&["decentralized"]],
    range: 10..=10,
};

static WORD_DEY_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_DEY_CHILDREN),
    value: None,
};

pub static WORD_DEY_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("hdrated"),
        dictgen::InsensitiveStr::Ascii("hdration"),
    ],
    values: &[&["dehydrated"], &["dehydration"]],
    range: 7..=8,
};

static WORD_DEV_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_DEV_CHILDREN),
    value: None,
};

pub static WORD_DEV_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("aint"),
        dictgen::InsensitiveStr::Ascii("aite"),
        dictgen::InsensitiveStr::Ascii("astaded"),
        dictgen::InsensitiveStr::Ascii("astaing"),
        dictgen::InsensitiveStr::Ascii("astanti"),
        dictgen::InsensitiveStr::Ascii("asted"),
        dictgen::InsensitiveStr::Ascii("asteted"),
        dictgen::InsensitiveStr::Ascii("elepmont"),
        dictgen::InsensitiveStr::Ascii("elepors"),
        dictgen::InsensitiveStr::Ascii("eloeprs"),
        dictgen::InsensitiveStr::Ascii("elompent"),
        dictgen::InsensitiveStr::Ascii("elope"),
        dictgen::InsensitiveStr::Ascii("elopement"),
        dictgen::InsensitiveStr::Ascii("elopemnt"),
        dictgen::InsensitiveStr::Ascii("elopmant"),
        dictgen::InsensitiveStr::Ascii("elopmenet"),
        dictgen::InsensitiveStr::Ascii("elopmently"),
        dictgen::InsensitiveStr::Ascii("elopmentwise"),
        dictgen::InsensitiveStr::Ascii("elopmet"),
        dictgen::InsensitiveStr::Ascii("elopmetn"),
        dictgen::InsensitiveStr::Ascii("elopmnet"),
        dictgen::InsensitiveStr::Ascii("elopors"),
        dictgen::InsensitiveStr::Ascii("elopped"),
        dictgen::InsensitiveStr::Ascii("eloppers"),
        dictgen::InsensitiveStr::Ascii("elopres"),
        dictgen::InsensitiveStr::Ascii("eloprs"),
        dictgen::InsensitiveStr::Ascii("elpment"),
        dictgen::InsensitiveStr::Ascii("elpoment"),
        dictgen::InsensitiveStr::Ascii("elpoments"),
        dictgen::InsensitiveStr::Ascii("els"),
        dictgen::InsensitiveStr::Ascii("eolpment"),
        dictgen::InsensitiveStr::Ascii("eploment"),
        dictgen::InsensitiveStr::Ascii("estated"),
        dictgen::InsensitiveStr::Ascii("estating"),
        dictgen::InsensitiveStr::Ascii("ialet"),
        dictgen::InsensitiveStr::Ascii("iatie"),
        dictgen::InsensitiveStr::Ascii("ide"),
        dictgen::InsensitiveStr::Ascii("ided"),
        dictgen::InsensitiveStr::Ascii("ilers"),
        dictgen::InsensitiveStr::Ascii("istating"),
        dictgen::InsensitiveStr::Ascii("love"),
        dictgen::InsensitiveStr::Ascii("loved"),
        dictgen::InsensitiveStr::Ascii("olopement"),
        dictgen::InsensitiveStr::Ascii("olopments"),
        dictgen::InsensitiveStr::Ascii("olvendo"),
        dictgen::InsensitiveStr::Ascii("otin"),
        dictgen::InsensitiveStr::Ascii("ovle"),
        dictgen::InsensitiveStr::Ascii("ovled"),
    ],
    values: &[
        &["deviant"],
        &["deviate"],
        &["devastated"],
        &["devastating"],
        &["devastating"],
        &["devastated"],
        &["devastated"],
        &["developments"],
        &["developers"],
        &["developers"],
        &["developments"],
        &["develop"],
        &["development"],
        &["developments"],
        &["developmental"],
        &["developments"],
        &["developmental"],
        &["developments"],
        &["developments"],
        &["developments"],
        &["developments"],
        &["develops"],
        &["developed"],
        &["developers"],
        &["develops"],
        &["develops"],
        &["development"],
        &["developments"],
        &["developments"],
        &["delves"],
        &["developments"],
        &["developments"],
        &["devastated"],
        &["devastating"],
        &["deviate"],
        &["deviate"],
        &["divide"],
        &["divided"],
        &["delivers"],
        &["devastating"],
        &["devolve"],
        &["devolved"],
        &["development"],
        &["developments"],
        &["devolved"],
        &["devotion"],
        &["devolve"],
        &["devolved"],
    ],
    range: 3..=12,
};

static WORD_DEU_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_DEU_CHILDREN),
    value: None,
};

pub static WORD_DEU_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ling"),
        dictgen::InsensitiveStr::Ascii("stchland"),
        dictgen::InsensitiveStr::Ascii("tchsland"),
        dictgen::InsensitiveStr::Ascii("tcshland"),
        dictgen::InsensitiveStr::Ascii("tschalnd"),
        dictgen::InsensitiveStr::Ascii("tschand"),
        dictgen::InsensitiveStr::Ascii("tshcland"),
    ],
    values: &[
        &["dueling"],
        &["deutschland"],
        &["deutschland"],
        &["deutschland"],
        &["deutschland"],
        &["deutschland"],
        &["deutschland"],
    ],
    range: 4..=8,
};

static WORD_DET_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_DET_CHILDREN),
    value: None,
};

pub static WORD_DET_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("aild"),
        dictgen::InsensitiveStr::Ascii("ailled"),
        dictgen::InsensitiveStr::Ascii("alied"),
        dictgen::InsensitiveStr::Ascii("atched"),
        dictgen::InsensitiveStr::Ascii("ectarlo"),
        dictgen::InsensitiveStr::Ascii("ectaron"),
        dictgen::InsensitiveStr::Ascii("ectas"),
        dictgen::InsensitiveStr::Ascii("ectes"),
        dictgen::InsensitiveStr::Ascii("ectie"),
        dictgen::InsensitiveStr::Ascii("ectivs"),
        dictgen::InsensitiveStr::Ascii("ectoare"),
        dictgen::InsensitiveStr::Ascii("eoriated"),
        dictgen::InsensitiveStr::Ascii("eriate"),
        dictgen::InsensitiveStr::Ascii("erioriating"),
        dictgen::InsensitiveStr::Ascii("ermanism"),
        dictgen::InsensitiveStr::Ascii("ermen"),
        dictgen::InsensitiveStr::Ascii("ermenation"),
        dictgen::InsensitiveStr::Ascii("ermening"),
        dictgen::InsensitiveStr::Ascii("ermenism"),
        dictgen::InsensitiveStr::Ascii("erminacion"),
        dictgen::InsensitiveStr::Ascii("erminanti"),
        dictgen::InsensitiveStr::Ascii("erminare"),
        dictgen::InsensitiveStr::Ascii("erminas"),
        dictgen::InsensitiveStr::Ascii("erminato"),
        dictgen::InsensitiveStr::Ascii("erminaton"),
        dictgen::InsensitiveStr::Ascii("erminded"),
        dictgen::InsensitiveStr::Ascii("erming"),
        dictgen::InsensitiveStr::Ascii("erminging"),
        dictgen::InsensitiveStr::Ascii("erminig"),
        dictgen::InsensitiveStr::Ascii("erminining"),
        dictgen::InsensitiveStr::Ascii("erminisic"),
        dictgen::InsensitiveStr::Ascii("erminisim"),
        dictgen::InsensitiveStr::Ascii("erminisitc"),
        dictgen::InsensitiveStr::Ascii("erminisitic"),
        dictgen::InsensitiveStr::Ascii("erministc"),
        dictgen::InsensitiveStr::Ascii("erministisch"),
        dictgen::InsensitiveStr::Ascii("erministische"),
        dictgen::InsensitiveStr::Ascii("erminitic"),
        dictgen::InsensitiveStr::Ascii("ermins"),
        dictgen::InsensitiveStr::Ascii("erminsim"),
        dictgen::InsensitiveStr::Ascii("erminsitic"),
        dictgen::InsensitiveStr::Ascii("erminsm"),
        dictgen::InsensitiveStr::Ascii("ials"),
        dictgen::InsensitiveStr::Ascii("matologist"),
        dictgen::InsensitiveStr::Ascii("orit"),
        dictgen::InsensitiveStr::Ascii("ramental"),
        dictgen::InsensitiveStr::Ascii("remental"),
        dictgen::InsensitiveStr::Ascii("rimential"),
        dictgen::InsensitiveStr::Ascii("rimentul"),
        dictgen::InsensitiveStr::Ascii("riot"),
        dictgen::InsensitiveStr::Ascii("uschland"),
    ],
    values: &[
        &["detailed"],
        &["detailed"],
        &["detailed"],
        &["detached"],
        &["detector"],
        &["detector"],
        &["detects"],
        &["detects"],
        &["detectives"],
        &["detectives"],
        &["detector"],
        &["deteriorated"],
        &["deteriorate"],
        &["deteriorating"],
        &["determinism"],
        &["determines"],
        &["determination"],
        &["determining"],
        &["determinism"],
        &["determination"],
        &["determination"],
        &["determine"],
        &["determines"],
        &["determination"],
        &["determination"],
        &["determine"],
        &["determining"],
        &["determining"],
        &["determining"],
        &["determining"],
        &["deterministic"],
        &["determinism"],
        &["deterministic"],
        &["deterministic"],
        &["deterministic"],
        &["deterministic"],
        &["deterministic"],
        &["deterministic"],
        &["determines"],
        &["determinism"],
        &["deterministic"],
        &["determinism"],
        &["details"],
        &["dermatologist"],
        &["detroit"],
        &["detrimental"],
        &["detrimental"],
        &["detrimental"],
        &["detrimental"],
        &["detroit"],
        &["deutschland"],
    ],
    range: 4..=13,
};

static WORD_DES_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_DES_CHILDREN),
    value: None,
};

static WORD_DES_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    None,
    None,
    Some(&WORD_DESC_NODE),
    None,
    Some(&WORD_DESE_NODE),
    None,
    Some(&WORD_DESG_NODE),
    None,
    Some(&WORD_DESI_NODE),
    None,
    Some(&WORD_DESK_NODE),
    None,
    None,
    Some(&WORD_DESN_NODE),
    Some(&WORD_DESO_NODE),
    Some(&WORD_DESP_NODE),
    Some(&WORD_DESQ_NODE),
    Some(&WORD_DESR_NODE),
    Some(&WORD_DESS_NODE),
    Some(&WORD_DEST_NODE),
    Some(&WORD_DESU_NODE),
    None,
    None,
    None,
    None,
    None,
];

static WORD_DESU_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_DESU_CHILDREN),
    value: None,
};

pub static WORD_DESU_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("ction")],
    values: &[&["seduction"]],
    range: 5..=5,
};

static WORD_DEST_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_DEST_CHILDREN),
    value: None,
};

pub static WORD_DEST_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ablized"),
        dictgen::InsensitiveStr::Ascii("iantion"),
        dictgen::InsensitiveStr::Ascii("iantions"),
        dictgen::InsensitiveStr::Ascii("inaiton"),
        dictgen::InsensitiveStr::Ascii("inatin"),
        dictgen::InsensitiveStr::Ascii("inationhash"),
        dictgen::InsensitiveStr::Ascii("inato"),
        dictgen::InsensitiveStr::Ascii("inaton"),
        dictgen::InsensitiveStr::Ascii("inatons"),
        dictgen::InsensitiveStr::Ascii("inction"),
        dictgen::InsensitiveStr::Ascii("inctions"),
        dictgen::InsensitiveStr::Ascii("iney"),
        dictgen::InsensitiveStr::Ascii("inty"),
        dictgen::InsensitiveStr::Ascii("kop"),
        dictgen::InsensitiveStr::Ascii("kops"),
        dictgen::InsensitiveStr::Ascii("ory"),
        dictgen::InsensitiveStr::Ascii("oryed"),
        dictgen::InsensitiveStr::Ascii("oryer"),
        dictgen::InsensitiveStr::Ascii("oryers"),
        dictgen::InsensitiveStr::Ascii("orying"),
        dictgen::InsensitiveStr::Ascii("orys"),
        dictgen::InsensitiveStr::Ascii("raction"),
        dictgen::InsensitiveStr::Ascii("ractions"),
        dictgen::InsensitiveStr::Ascii("ributors"),
        dictgen::InsensitiveStr::Ascii("ros"),
        dictgen::InsensitiveStr::Ascii("rose"),
        dictgen::InsensitiveStr::Ascii("royd"),
        dictgen::InsensitiveStr::Ascii("royeds"),
        dictgen::InsensitiveStr::Ascii("royeer"),
        dictgen::InsensitiveStr::Ascii("royes"),
        dictgen::InsensitiveStr::Ascii("royr"),
        dictgen::InsensitiveStr::Ascii("ruccion"),
        dictgen::InsensitiveStr::Ascii("rucion"),
        dictgen::InsensitiveStr::Ascii("ruciton"),
        dictgen::InsensitiveStr::Ascii("rucive"),
        dictgen::InsensitiveStr::Ascii("ructivo"),
        dictgen::InsensitiveStr::Ascii("ructo"),
        dictgen::InsensitiveStr::Ascii("ruktion"),
        dictgen::InsensitiveStr::Ascii("ruktive"),
        dictgen::InsensitiveStr::Ascii("ryoed"),
        dictgen::InsensitiveStr::Ascii("ryoer"),
        dictgen::InsensitiveStr::Ascii("ryoing"),
    ],
    values: &[
        &["destabilized"],
        &["destinations"],
        &["destinations"],
        &["destinations"],
        &["destinations"],
        &["destinations"],
        &["destination"],
        &["destination"],
        &["destinations"],
        &["destination"],
        &["destinations"],
        &["destiny"],
        &["destiny"],
        &["desktop"],
        &["desktops"],
        &["destroy"],
        &["destroyed"],
        &["destroyer"],
        &["destroyers"],
        &["destroying"],
        &["destroys"],
        &["destruction"],
        &["distractions"],
        &["distributors"],
        &["destroys"],
        &["destroyers"],
        &["destroyed"],
        &["destroyers"],
        &["destroyers"],
        &["destroys"],
        &["destroyers"],
        &["destruction"],
        &["destruction"],
        &["destruction"],
        &["destructive"],
        &["destruction"],
        &["destruction"],
        &["destruction"],
        &["destructive"],
        &["destroyed"],
        &["destroyer"],
        &["destroying"],
    ],
    range: 3..=11,
};

static WORD_DESS_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_DESS_CHILDREN),
    value: None,
};

pub static WORD_DESS_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ertation"),
        dictgen::InsensitiveStr::Ascii("icated"),
        dictgen::InsensitiveStr::Ascii("igned"),
    ],
    values: &[&["dissertation"], &["desiccated"], &["designed"]],
    range: 5..=8,
};

static WORD_DESR_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_DESR_CHILDREN),
    value: None,
};

pub static WORD_DESR_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("egarding"),
        dictgen::InsensitiveStr::Ascii("iable"),
    ],
    values: &[&["disregarding"], &["desirable"]],
    range: 5..=8,
};

static WORD_DESQ_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_DESQ_CHILDREN),
    value: None,
};

pub static WORD_DESQ_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("ualified")],
    values: &[&["disqualified"]],
    range: 8..=8,
};

static WORD_DESP_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_DESP_CHILDREN),
    value: None,
};

pub static WORD_DESP_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("arate"),
        dictgen::InsensitiveStr::Ascii("arately"),
        dictgen::InsensitiveStr::Ascii("aration"),
        dictgen::InsensitiveStr::Ascii("ciable"),
        dictgen::InsensitiveStr::Ascii("ectively"),
        dictgen::InsensitiveStr::Ascii("ensaries"),
        dictgen::InsensitiveStr::Ascii("eratedly"),
        dictgen::InsensitiveStr::Ascii("eratelly"),
        dictgen::InsensitiveStr::Ascii("erating"),
        dictgen::InsensitiveStr::Ascii("eratley"),
        dictgen::InsensitiveStr::Ascii("eratly"),
        dictgen::InsensitiveStr::Ascii("erato"),
        dictgen::InsensitiveStr::Ascii("eretly"),
        dictgen::InsensitiveStr::Ascii("icaple"),
        dictgen::InsensitiveStr::Ascii("icible"),
        dictgen::InsensitiveStr::Ascii("ict"),
        dictgen::InsensitiveStr::Ascii("ide"),
        dictgen::InsensitiveStr::Ascii("ides"),
        dictgen::InsensitiveStr::Ascii("ies"),
        dictgen::InsensitiveStr::Ascii("irately"),
        dictgen::InsensitiveStr::Ascii("iration"),
        dictgen::InsensitiveStr::Ascii("iste"),
        dictgen::InsensitiveStr::Ascii("oited"),
    ],
    values: &[
        &["desperate"],
        &["desperately"],
        &["desperation"],
        &["despicable"],
        &["respectively"],
        &["dispensaries"],
        &["desperately"],
        &["desperately"],
        &["desperation"],
        &["desperately"],
        &["desperately"],
        &["desperation"],
        &["desperately"],
        &["despicable"],
        &["despicable"],
        &["depict"],
        &["despised"],
        &["despised"],
        &["despise"],
        &["desperately"],
        &["desperation"],
        &["despise"],
        &["deposited"],
    ],
    range: 3..=8,
};

static WORD_DESO_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_DESO_CHILDREN),
    value: None,
};

pub static WORD_DESO_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("mnd"),
        dictgen::InsensitiveStr::Ascii("rder"),
        dictgen::InsensitiveStr::Ascii("riented"),
    ],
    values: &[&["desmond"], &["disorder"], &["disoriented"]],
    range: 3..=7,
};

static WORD_DESN_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_DESN_CHILDREN),
    value: None,
};

pub static WORD_DESN_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ely"),
        dictgen::InsensitiveStr::Ascii("ity"),
    ],
    values: &[&["densely"], &["density"]],
    range: 3..=3,
};

static WORD_DESK_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_DESK_CHILDREN),
    value: None,
};

pub static WORD_DESK_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("tiop"),
        dictgen::InsensitiveStr::Ascii("topbsd"),
        dictgen::InsensitiveStr::Ascii("topos"),
    ],
    values: &[&["desktop"], &["desktops"], &["desktops"]],
    range: 4..=6,
};

static WORD_DESI_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_DESI_CHILDREN),
    value: None,
};

pub static WORD_DESI_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("cions"),
        dictgen::InsensitiveStr::Ascii("cive"),
        dictgen::InsensitiveStr::Ascii("de"),
        dictgen::InsensitiveStr::Ascii("gining"),
        dictgen::InsensitiveStr::Ascii("gnacion"),
        dictgen::InsensitiveStr::Ascii("gnad"),
        dictgen::InsensitiveStr::Ascii("gnade"),
        dictgen::InsensitiveStr::Ascii("gnato"),
        dictgen::InsensitiveStr::Ascii("gnes"),
        dictgen::InsensitiveStr::Ascii("gnet"),
        dictgen::InsensitiveStr::Ascii("gnstion"),
        dictgen::InsensitiveStr::Ascii("llusioned"),
        dictgen::InsensitiveStr::Ascii("nations"),
        dictgen::InsensitiveStr::Ascii("ngage"),
        dictgen::InsensitiveStr::Ascii("ngation"),
        dictgen::InsensitiveStr::Ascii("nged"),
        dictgen::InsensitiveStr::Ascii("nger"),
        dictgen::InsensitiveStr::Ascii("ngers"),
        dictgen::InsensitiveStr::Ascii("nging"),
        dictgen::InsensitiveStr::Ascii("ngs"),
        dictgen::InsensitiveStr::Ascii("ntegrated"),
        dictgen::InsensitiveStr::Ascii("ntegration"),
        dictgen::InsensitiveStr::Ascii("nterested"),
        dictgen::InsensitiveStr::Ascii("reable"),
        dictgen::InsensitiveStr::Ascii("tnation"),
        dictgen::InsensitiveStr::Ascii("tnations"),
        dictgen::InsensitiveStr::Ascii("tned"),
        dictgen::InsensitiveStr::Ascii("tny"),
    ],
    values: &[
        &["decisions"],
        &["decisive"],
        &["decide"],
        &["designing"],
        &["designation"],
        &["designated"],
        &["designated"],
        &["designation"],
        &["designs"],
        &["designated"],
        &["designation"],
        &["disillusioned"],
        &["destinations"],
        &["disengage"],
        &["designation"],
        &["designed"],
        &["designer"],
        &["designers"],
        &["designing"],
        &["designs"],
        &["disintegrated"],
        &["disintegration"],
        &["disinterested"],
        &["desirable"],
        &["destination"],
        &["destinations"],
        &["destined"],
        &["destiny"],
    ],
    range: 2..=10,
};

static WORD_DESG_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_DESG_CHILDREN),
    value: None,
};

pub static WORD_DESG_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("inated"),
        dictgen::InsensitiveStr::Ascii("ination"),
        dictgen::InsensitiveStr::Ascii("inations"),
        dictgen::InsensitiveStr::Ascii("ined"),
        dictgen::InsensitiveStr::Ascii("iner"),
        dictgen::InsensitiveStr::Ascii("iners"),
        dictgen::InsensitiveStr::Ascii("ining"),
        dictgen::InsensitiveStr::Ascii("ins"),
        dictgen::InsensitiveStr::Ascii("ustingly"),
    ],
    values: &[
        &["designated"],
        &["designation"],
        &["destinations"],
        &["designed"],
        &["designer"],
        &["designers"],
        &["designing"],
        &["designs"],
        &["disgustingly"],
    ],
    range: 3..=8,
};

static WORD_DESE_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_DESE_CHILDREN),
    value: None,
};

pub static WORD_DESE_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ncitized"),
        dictgen::InsensitiveStr::Ascii("nsatized"),
        dictgen::InsensitiveStr::Ascii("nsitied"),
        dictgen::InsensitiveStr::Ascii("nsitived"),
        dictgen::InsensitiveStr::Ascii("nsitzed"),
        dictgen::InsensitiveStr::Ascii("ntisize"),
        dictgen::InsensitiveStr::Ascii("ntisized"),
        dictgen::InsensitiveStr::Ascii("ntitized"),
        dictgen::InsensitiveStr::Ascii("ntizised"),
        dictgen::InsensitiveStr::Ascii("ntralized"),
    ],
    values: &[
        &["desensitized"],
        &["desensitized"],
        &["desensitized"],
        &["desensitized"],
        &["desensitized"],
        &["desensitized"],
        &["desensitized"],
        &["desensitized"],
        &["desensitised"],
        &["decentralized"],
    ],
    range: 7..=9,
};

static WORD_DESC_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_DESC_CHILDREN),
    value: None,
};

pub static WORD_DESC_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("andants"),
        dictgen::InsensitiveStr::Ascii("endands"),
        dictgen::InsensitiveStr::Ascii("endats"),
        dictgen::InsensitiveStr::Ascii("endend"),
        dictgen::InsensitiveStr::Ascii("endends"),
        dictgen::InsensitiveStr::Ascii("endenta"),
        dictgen::InsensitiveStr::Ascii("ened"),
        dictgen::InsensitiveStr::Ascii("entants"),
        dictgen::InsensitiveStr::Ascii("enting"),
        dictgen::InsensitiveStr::Ascii("erning"),
        dictgen::InsensitiveStr::Ascii("ibed"),
        dictgen::InsensitiveStr::Ascii("ipable"),
        dictgen::InsensitiveStr::Ascii("irbe"),
        dictgen::InsensitiveStr::Ascii("irbes"),
        dictgen::InsensitiveStr::Ascii("irption"),
        dictgen::InsensitiveStr::Ascii("ision"),
        dictgen::InsensitiveStr::Ascii("isions"),
        dictgen::InsensitiveStr::Ascii("prition"),
        dictgen::InsensitiveStr::Ascii("ribiste"),
        dictgen::InsensitiveStr::Ascii("ribtion"),
        dictgen::InsensitiveStr::Ascii("ribtions"),
        dictgen::InsensitiveStr::Ascii("rie"),
        dictgen::InsensitiveStr::Ascii("riibes"),
        dictgen::InsensitiveStr::Ascii("riminant"),
        dictgen::InsensitiveStr::Ascii("ripcion"),
        dictgen::InsensitiveStr::Ascii("ripiton"),
        dictgen::InsensitiveStr::Ascii("ripters"),
        dictgen::InsensitiveStr::Ascii("riptivos"),
        dictgen::InsensitiveStr::Ascii("riptoin"),
        dictgen::InsensitiveStr::Ascii("ripton"),
        dictgen::InsensitiveStr::Ascii("riptons"),
        dictgen::InsensitiveStr::Ascii("rise"),
        dictgen::InsensitiveStr::Ascii("ritpion"),
        dictgen::InsensitiveStr::Ascii("rpition"),
        dictgen::InsensitiveStr::Ascii("tiptions"),
        dictgen::InsensitiveStr::Ascii("truction"),
        dictgen::InsensitiveStr::Ascii("uss"),
    ],
    values: &[
        &["descendants"],
        &["descendants"],
        &["descendants"],
        &["descended"],
        &["descended"],
        &["descendents"],
        &["descend"],
        &["descendants"],
        &["descending"],
        &["descending"],
        &["described"],
        &["despicable"],
        &["describe"],
        &["describes"],
        &["descriptions"],
        &["decision"],
        &["decisions"],
        &["descriptions"],
        &["describes"],
        &["description"],
        &["descriptions"],
        &["describe"],
        &["describes"],
        &["discriminant"],
        &["description"],
        &["descriptions"],
        &["descriptors"],
        &["descriptions"],
        &["descriptions"],
        &["description"],
        &["descriptions"],
        &["describes"],
        &["descriptions"],
        &["descriptions"],
        &["descriptions"],
        &["destruction"],
        &["discuss"],
    ],
    range: 3..=8,
};

static WORD_DER_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_DER_CHILDREN),
    value: None,
};

pub static WORD_DER_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("agotory"),
        dictgen::InsensitiveStr::Ascii("am"),
        dictgen::InsensitiveStr::Ascii("egualtion"),
        dictgen::InsensitiveStr::Ascii("egulaiton"),
        dictgen::InsensitiveStr::Ascii("egulatin"),
        dictgen::InsensitiveStr::Ascii("ivate"),
        dictgen::InsensitiveStr::Ascii("ivaties"),
        dictgen::InsensitiveStr::Ascii("ivativos"),
        dictgen::InsensitiveStr::Ascii("iviated"),
        dictgen::InsensitiveStr::Ascii("ivitave"),
        dictgen::InsensitiveStr::Ascii("ivitaves"),
        dictgen::InsensitiveStr::Ascii("ivitive"),
        dictgen::InsensitiveStr::Ascii("ivitives"),
        dictgen::InsensitiveStr::Ascii("matalogist"),
        dictgen::InsensitiveStr::Ascii("matolagist"),
        dictgen::InsensitiveStr::Ascii("matoligist"),
        dictgen::InsensitiveStr::Ascii("matologyst"),
        dictgen::InsensitiveStr::Ascii("metologist"),
        dictgen::InsensitiveStr::Ascii("mitologist"),
        dictgen::InsensitiveStr::Ascii("ogatary"),
        dictgen::InsensitiveStr::Ascii("ogatery"),
        dictgen::InsensitiveStr::Ascii("ogetory"),
        dictgen::InsensitiveStr::Ascii("ogitory"),
        dictgen::InsensitiveStr::Ascii("ogotary"),
        dictgen::InsensitiveStr::Ascii("ogotory"),
        dictgen::InsensitiveStr::Ascii("patologist"),
        dictgen::InsensitiveStr::Ascii("pivation"),
        dictgen::InsensitiveStr::Ascii("ugulation"),
        dictgen::InsensitiveStr::Ascii("viative"),
        dictgen::InsensitiveStr::Ascii("viatives"),
    ],
    values: &[
        &["derogatory"],
        &["dram"],
        &["deregulation"],
        &["deregulation"],
        &["deregulation"],
        &["derivative"],
        &["derivatives"],
        &["derivatives"],
        &["derived"],
        &["derivative"],
        &["derivatives"],
        &["derivative"],
        &["derivatives"],
        &["dermatologist"],
        &["dermatologist"],
        &["dermatologist"],
        &["dermatologist"],
        &["dermatologist"],
        &["dermatologist"],
        &["derogatory"],
        &["derogatory"],
        &["derogatory"],
        &["derogatory"],
        &["derogatory"],
        &["derogatory"],
        &["dermatologist"],
        &["deprivation"],
        &["deregulation"],
        &["derivative"],
        &["derivatives"],
    ],
    range: 2..=10,
};

static WORD_DEP_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_DEP_CHILDREN),
    value: None,
};

static WORD_DEP_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    Some(&WORD_DEPA_NODE),
    None,
    Some(&WORD_DEPC_NODE),
    Some(&WORD_DEPD_NODE),
    Some(&WORD_DEPE_NODE),
    None,
    None,
    None,
    Some(&WORD_DEPI_NODE),
    None,
    None,
    Some(&WORD_DEPL_NODE),
    None,
    None,
    Some(&WORD_DEPO_NODE),
    None,
    None,
    Some(&WORD_DEPR_NODE),
    Some(&WORD_DEPS_NODE),
    None,
    None,
    None,
    None,
    None,
    None,
    None,
];

static WORD_DEPS_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_DEPS_CHILDREN),
    value: None,
};

pub static WORD_DEPS_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("erate"),
        dictgen::InsensitiveStr::Ascii("erately"),
        dictgen::InsensitiveStr::Ascii("eration"),
        dictgen::InsensitiveStr::Ascii("ise"),
        dictgen::InsensitiveStr::Ascii("oited"),
    ],
    values: &[
        &["desperate"],
        &["desperately"],
        &["desperation"],
        &["despise"],
        &["deposited"],
    ],
    range: 3..=7,
};

static WORD_DEPR_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_DEPR_CHILDREN),
    value: None,
};

pub static WORD_DEPR_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("esse"),
        dictgen::InsensitiveStr::Ascii("essie"),
        dictgen::InsensitiveStr::Ascii("essief"),
        dictgen::InsensitiveStr::Ascii("essies"),
        dictgen::InsensitiveStr::Ascii("essieve"),
        dictgen::InsensitiveStr::Ascii("essin"),
        dictgen::InsensitiveStr::Ascii("esso"),
        dictgen::InsensitiveStr::Ascii("esssion"),
        dictgen::InsensitiveStr::Ascii("evation"),
        dictgen::InsensitiveStr::Ascii("ication"),
        dictgen::InsensitiveStr::Ascii("ivating"),
        dictgen::InsensitiveStr::Ascii("ivaton"),
        dictgen::InsensitiveStr::Ascii("ivition"),
        dictgen::InsensitiveStr::Ascii("ovation"),
    ],
    values: &[
        &["depressive"],
        &["depressive"],
        &["depressive"],
        &["depressive"],
        &["depressive"],
        &["depression"],
        &["depression"],
        &["depression"],
        &["deprivation"],
        &["deprivation"],
        &["deprivation"],
        &["deprivation"],
        &["deprivation"],
        &["deprivation"],
    ],
    range: 4..=7,
};

static WORD_DEPO_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_DEPO_CHILDREN),
    value: None,
};

pub static WORD_DEPO_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("isted"),
        dictgen::InsensitiveStr::Ascii("lyed"),
        dictgen::InsensitiveStr::Ascii("lying"),
        dictgen::InsensitiveStr::Ascii("lyment"),
        dictgen::InsensitiveStr::Ascii("sitas"),
        dictgen::InsensitiveStr::Ascii("sitd"),
        dictgen::InsensitiveStr::Ascii("siters"),
        dictgen::InsensitiveStr::Ascii("sites"),
        dictgen::InsensitiveStr::Ascii("sitis"),
        dictgen::InsensitiveStr::Ascii("sitos"),
        dictgen::InsensitiveStr::Ascii("stied"),
        dictgen::InsensitiveStr::Ascii("stis"),
    ],
    values: &[
        &["deposited"],
        &["deployed"],
        &["deploying"],
        &["deployment"],
        &["deposits"],
        &["deposited"],
        &["deposits"],
        &["deposits"],
        &["deposits"],
        &["deposits"],
        &["deposited"],
        &["deposits"],
    ],
    range: 4..=6,
};

static WORD_DEPL_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_DEPL_CHILDREN),
    value: None,
};

pub static WORD_DEPL_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("acements"),
        dictgen::InsensitiveStr::Ascii("orabel"),
        dictgen::InsensitiveStr::Ascii("orabil"),
        dictgen::InsensitiveStr::Ascii("orabile"),
        dictgen::InsensitiveStr::Ascii("orible"),
        dictgen::InsensitiveStr::Ascii("oyd"),
        dictgen::InsensitiveStr::Ascii("yoing"),
        dictgen::InsensitiveStr::Ascii("yoment"),
    ],
    values: &[
        &["replacements"],
        &["deplorable"],
        &["deplorable"],
        &["deplorable"],
        &["deplorable"],
        &["deployed"],
        &["deploying"],
        &["deployment"],
    ],
    range: 3..=8,
};

static WORD_DEPI_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_DEPI_CHILDREN),
    value: None,
};

pub static WORD_DEPI_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("citng"),
        dictgen::InsensitiveStr::Ascii("citon"),
        dictgen::InsensitiveStr::Ascii("citons"),
        dictgen::InsensitiveStr::Ascii("ctes"),
        dictgen::InsensitiveStr::Ascii("ctin"),
        dictgen::InsensitiveStr::Ascii("tcs"),
    ],
    values: &[
        &["depicting"],
        &["depiction"],
        &["depictions"],
        &["depicts"],
        &["depictions"],
        &["depicts"],
    ],
    range: 3..=6,
};

static WORD_DEPE_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_DEPE_CHILDREN),
    value: None,
};

pub static WORD_DEPE_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ction"),
        dictgen::InsensitiveStr::Ascii("dencies"),
        dictgen::InsensitiveStr::Ascii("dency"),
        dictgen::InsensitiveStr::Ascii("lted"),
        dictgen::InsensitiveStr::Ascii("ncencies"),
        dictgen::InsensitiveStr::Ascii("ncency"),
        dictgen::InsensitiveStr::Ascii("ndancey"),
        dictgen::InsensitiveStr::Ascii("ndancies"),
        dictgen::InsensitiveStr::Ascii("ndancy"),
        dictgen::InsensitiveStr::Ascii("ndandt"),
        dictgen::InsensitiveStr::Ascii("ndat"),
        dictgen::InsensitiveStr::Ascii("ndd"),
        dictgen::InsensitiveStr::Ascii("ndencey"),
        dictgen::InsensitiveStr::Ascii("ndencias"),
        dictgen::InsensitiveStr::Ascii("ndencie"),
        dictgen::InsensitiveStr::Ascii("ndends"),
        dictgen::InsensitiveStr::Ascii("ndened"),
        dictgen::InsensitiveStr::Ascii("ndenices"),
        dictgen::InsensitiveStr::Ascii("ndenies"),
        dictgen::InsensitiveStr::Ascii("ndensies"),
        dictgen::InsensitiveStr::Ascii("ndenta"),
        dictgen::InsensitiveStr::Ascii("ndente"),
        dictgen::InsensitiveStr::Ascii("recation"),
    ],
    values: &[
        &["deception"],
        &["dependencies"],
        &["dependency"],
        &["depleted"],
        &["dependencies"],
        &["dependency"],
        &["dependency"],
        &["dependencies"],
        &["dependency"],
        &["dependant"],
        &["dependant"],
        &["depended"],
        &["dependency"],
        &["dependencies"],
        &["dependence"],
        &["depended"],
        &["depended"],
        &["dependencies"],
        &["dependencies"],
        &["dependencies"],
        &["dependent"],
        &["dependence"],
        &["deprecation"],
    ],
    range: 3..=8,
};

static WORD_DEPD_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_DEPD_CHILDREN),
    value: None,
};

pub static WORD_DEPD_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("ending")],
    values: &[&["depending"]],
    range: 6..=6,
};

static WORD_DEPC_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_DEPC_CHILDREN),
    value: None,
};

pub static WORD_DEPC_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ited"),
        dictgen::InsensitiveStr::Ascii("iting"),
        dictgen::InsensitiveStr::Ascii("ition"),
        dictgen::InsensitiveStr::Ascii("itions"),
        dictgen::InsensitiveStr::Ascii("its"),
    ],
    values: &[
        &["depicted"],
        &["depicting"],
        &["depiction"],
        &["depictions"],
        &["depicts"],
    ],
    range: 3..=6,
};

static WORD_DEPA_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_DEPA_CHILDREN),
    value: None,
};

pub static WORD_DEPA_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("rment"),
        dictgen::InsensitiveStr::Ascii("rmental"),
        dictgen::InsensitiveStr::Ascii("rments"),
        dictgen::InsensitiveStr::Ascii("rter"),
        dictgen::InsensitiveStr::Ascii("rtmens"),
        dictgen::InsensitiveStr::Ascii("rtmet"),
        dictgen::InsensitiveStr::Ascii("rtmnet"),
        dictgen::InsensitiveStr::Ascii("rtue"),
    ],
    values: &[
        &["department"],
        &["departmental"],
        &["departments"],
        &["departure"],
        &["departments"],
        &["departments"],
        &["departments"],
        &["departure"],
    ],
    range: 4..=7,
};

static WORD_DEO_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_DEO_CHILDREN),
    value: None,
};

pub static WORD_DEO_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("crations"),
        dictgen::InsensitiveStr::Ascii("crative"),
        dictgen::InsensitiveStr::Ascii("mcracies"),
        dictgen::InsensitiveStr::Ascii("mcrat"),
        dictgen::InsensitiveStr::Ascii("mcratic"),
        dictgen::InsensitiveStr::Ascii("mcrats"),
        dictgen::InsensitiveStr::Ascii("mgraphics"),
        dictgen::InsensitiveStr::Ascii("mnstration"),
        dictgen::InsensitiveStr::Ascii("psited"),
        dictgen::InsensitiveStr::Ascii("vtion"),
    ],
    values: &[
        &["decorations"],
        &["decorative"],
        &["democracies"],
        &["democrat"],
        &["democratic"],
        &["democrats"],
        &["demographics"],
        &["demonstrations"],
        &["deposited"],
        &["devotion"],
    ],
    range: 5..=10,
};

static WORD_DEN_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_DEN_CHILDREN),
    value: None,
};

pub static WORD_DEN_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("egerate"),
        dictgen::InsensitiveStr::Ascii("egrating"),
        dictgen::InsensitiveStr::Ascii("eirs"),
        dictgen::InsensitiveStr::Ascii("isty"),
        dictgen::InsensitiveStr::Ascii("omenation"),
        dictgen::InsensitiveStr::Ascii("omenations"),
        dictgen::InsensitiveStr::Ascii("omenator"),
        dictgen::InsensitiveStr::Ascii("ominacion"),
        dictgen::InsensitiveStr::Ascii("ominador"),
        dictgen::InsensitiveStr::Ascii("ominar"),
        dictgen::InsensitiveStr::Ascii("ominaron"),
        dictgen::InsensitiveStr::Ascii("ominater"),
        dictgen::InsensitiveStr::Ascii("ominationals"),
        dictgen::InsensitiveStr::Ascii("ominatior"),
        dictgen::InsensitiveStr::Ascii("ominato"),
        dictgen::InsensitiveStr::Ascii("ominaton"),
        dictgen::InsensitiveStr::Ascii("ominatons"),
        dictgen::InsensitiveStr::Ascii("omintor"),
        dictgen::InsensitiveStr::Ascii("omitator"),
        dictgen::InsensitiveStr::Ascii("omonation"),
        dictgen::InsensitiveStr::Ascii("omonations"),
        dictgen::InsensitiveStr::Ascii("omonator"),
        dictgen::InsensitiveStr::Ascii("onimator"),
        dictgen::InsensitiveStr::Ascii("seley"),
        dictgen::InsensitiveStr::Ascii("sitiy"),
        dictgen::InsensitiveStr::Ascii("sley"),
        dictgen::InsensitiveStr::Ascii("sly"),
        dictgen::InsensitiveStr::Ascii("tistas"),
        dictgen::InsensitiveStr::Ascii("tistes"),
    ],
    values: &[
        &["degenerate"],
        &["denigrating"],
        &["deniers"],
        &["density"],
        &["denomination"],
        &["denominations"],
        &["denominator"],
        &["denomination"],
        &["denominator"],
        &["denominator"],
        &["denominator"],
        &["denominator"],
        &["denominations"],
        &["denominator"],
        &["denomination"],
        &["denomination"],
        &["denominations"],
        &["denominator"],
        &["denominator"],
        &["denomination"],
        &["denominations"],
        &["denominator"],
        &["denominator"],
        &["densely"],
        &["density"],
        &["densely"],
        &["densely"],
        &["dentists"],
        &["dentists"],
    ],
    range: 3..=12,
};

static WORD_DEM_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_DEM_CHILDREN),
    value: None,
};

static WORD_DEM_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    Some(&WORD_DEMA_NODE),
    None,
    Some(&WORD_DEMC_NODE),
    None,
    Some(&WORD_DEME_NODE),
    None,
    None,
    None,
    Some(&WORD_DEMI_NODE),
    None,
    None,
    None,
    None,
    None,
    Some(&WORD_DEMO_NODE),
    None,
    None,
    None,
    Some(&WORD_DEMS_NODE),
    None,
    None,
    None,
    None,
    None,
    None,
    None,
];

static WORD_DEMS_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_DEMS_CHILDREN),
    value: None,
};

pub static WORD_DEMS_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("ond")],
    values: &[&["desmond"]],
    range: 3..=3,
};

static WORD_DEMO_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_DEMO_CHILDREN),
    value: None,
};

static WORD_DEMO_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    None,
    None,
    Some(&WORD_DEMOC_NODE),
    None,
    None,
    None,
    Some(&WORD_DEMOG_NODE),
    None,
    None,
    None,
    None,
    Some(&WORD_DEMOL_NODE),
    None,
    Some(&WORD_DEMON_NODE),
    None,
    None,
    None,
    Some(&WORD_DEMOR_NODE),
    Some(&WORD_DEMOS_NODE),
    None,
    None,
    None,
    None,
    None,
    None,
    None,
];

static WORD_DEMOS_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_DEMOS_CHILDREN),
    value: None,
};

pub static WORD_DEMOS_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ntrably"),
        dictgen::InsensitiveStr::Ascii("ntrate"),
        dictgen::InsensitiveStr::Ascii("ntrated"),
        dictgen::InsensitiveStr::Ascii("ntrates"),
        dictgen::InsensitiveStr::Ascii("ntrating"),
        dictgen::InsensitiveStr::Ascii("ntration"),
        dictgen::InsensitiveStr::Ascii("ntrations"),
        dictgen::InsensitiveStr::Ascii("tration"),
    ],
    values: &[
        &["demonstrably"],
        &["demonstrate"],
        &["demonstrated"],
        &["demonstrates"],
        &["demonstrating"],
        &["demonstrations"],
        &["demonstrations"],
        &["demonstration"],
    ],
    range: 6..=9,
};

static WORD_DEMOR_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_DEMOR_CHILDREN),
    value: None,
};

pub static WORD_DEMOR_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("cracy")],
    values: &[&["democracy"]],
    range: 5..=5,
};

static WORD_DEMON_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_DEMON_CHILDREN),
    value: None,
};

pub static WORD_DEMON_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ination"),
        dictgen::InsensitiveStr::Ascii("inations"),
        dictgen::InsensitiveStr::Ascii("inator"),
        dictgen::InsensitiveStr::Ascii("ished"),
        dictgen::InsensitiveStr::Ascii("starte"),
        dictgen::InsensitiveStr::Ascii("started"),
        dictgen::InsensitiveStr::Ascii("startes"),
        dictgen::InsensitiveStr::Ascii("starting"),
        dictgen::InsensitiveStr::Ascii("startion"),
        dictgen::InsensitiveStr::Ascii("startions"),
        dictgen::InsensitiveStr::Ascii("state"),
        dictgen::InsensitiveStr::Ascii("states"),
        dictgen::InsensitiveStr::Ascii("strabil"),
        dictgen::InsensitiveStr::Ascii("straby"),
        dictgen::InsensitiveStr::Ascii("straion"),
        dictgen::InsensitiveStr::Ascii("straiton"),
        dictgen::InsensitiveStr::Ascii("straits"),
        dictgen::InsensitiveStr::Ascii("strant"),
        dictgen::InsensitiveStr::Ascii("strants"),
        dictgen::InsensitiveStr::Ascii("stras"),
        dictgen::InsensitiveStr::Ascii("stratbly"),
        dictgen::InsensitiveStr::Ascii("stratie"),
        dictgen::InsensitiveStr::Ascii("straties"),
        dictgen::InsensitiveStr::Ascii("stratin"),
        dictgen::InsensitiveStr::Ascii("strationens"),
        dictgen::InsensitiveStr::Ascii("strativno"),
        dictgen::InsensitiveStr::Ascii("strativo"),
        dictgen::InsensitiveStr::Ascii("strativos"),
        dictgen::InsensitiveStr::Ascii("strats"),
        dictgen::InsensitiveStr::Ascii("stre"),
        dictgen::InsensitiveStr::Ascii("strerat"),
    ],
    values: &[
        &["denominations"],
        &["denominations"],
        &["denominator"],
        &["demolished"],
        &["demonstrate"],
        &["demonstrated"],
        &["demonstrates"],
        &["demonstrating"],
        &["demonstration"],
        &["demonstrations"],
        &["demonstrate"],
        &["demonstrates"],
        &["demonstrably"],
        &["demonstrably"],
        &["demonstration"],
        &["demonstrations"],
        &["demonstrates"],
        &["demonstrate"],
        &["demonstrates"],
        &["demonstrates"],
        &["demonstrably"],
        &["demonstrate"],
        &["demonstrate"],
        &["demonstration"],
        &["demonstrations"],
        &["demonstrations"],
        &["demonstration"],
        &["demonstrations"],
        &["demonstrates"],
        &["demonstrate"],
        &["demonstrate"],
    ],
    range: 4..=11,
};

static WORD_DEMOL_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_DEMOL_CHILDREN),
    value: None,
};

pub static WORD_DEMOL_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ation"),
        dictgen::InsensitiveStr::Ascii("icion"),
        dictgen::InsensitiveStr::Ascii("ision"),
        dictgen::InsensitiveStr::Ascii("itian"),
        dictgen::InsensitiveStr::Ascii("iting"),
        dictgen::InsensitiveStr::Ascii("ito"),
        dictgen::InsensitiveStr::Ascii("oshed"),
        dictgen::InsensitiveStr::Ascii("ution"),
    ],
    values: &[
        &["demolition"],
        &["demolition"],
        &["demolition"],
        &["demolition"],
        &["demolition"],
        &["demolition"],
        &["demolished"],
        &["demolition"],
    ],
    range: 3..=5,
};

static WORD_DEMOG_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_DEMOG_CHILDREN),
    value: None,
};

pub static WORD_DEMOG_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("rahic"),
        dictgen::InsensitiveStr::Ascii("rahpic"),
        dictgen::InsensitiveStr::Ascii("rahpics"),
        dictgen::InsensitiveStr::Ascii("raphis"),
        dictgen::InsensitiveStr::Ascii("raphs"),
        dictgen::InsensitiveStr::Ascii("rapic"),
        dictgen::InsensitiveStr::Ascii("rapics"),
        dictgen::InsensitiveStr::Ascii("rpahic"),
        dictgen::InsensitiveStr::Ascii("rpahics"),
    ],
    values: &[
        &["demographic"],
        &["demographic"],
        &["demographics"],
        &["demographics"],
        &["demographics"],
        &["demographic"],
        &["demographics"],
        &["demographic"],
        &["demographics"],
    ],
    range: 5..=7,
};

static WORD_DEMOC_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_DEMOC_CHILDREN),
    value: None,
};

pub static WORD_DEMOC_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("arcies"),
        dictgen::InsensitiveStr::Ascii("arcy"),
        dictgen::InsensitiveStr::Ascii("racis"),
        dictgen::InsensitiveStr::Ascii("racize"),
        dictgen::InsensitiveStr::Ascii("racries"),
        dictgen::InsensitiveStr::Ascii("ract"),
        dictgen::InsensitiveStr::Ascii("ractic"),
        dictgen::InsensitiveStr::Ascii("racts"),
        dictgen::InsensitiveStr::Ascii("raphic"),
        dictgen::InsensitiveStr::Ascii("raphics"),
        dictgen::InsensitiveStr::Ascii("rasies"),
        dictgen::InsensitiveStr::Ascii("ratas"),
        dictgen::InsensitiveStr::Ascii("rates"),
        dictgen::InsensitiveStr::Ascii("raticaly"),
        dictgen::InsensitiveStr::Ascii("raticlly"),
        dictgen::InsensitiveStr::Ascii("ratisch"),
        dictgen::InsensitiveStr::Ascii("ray"),
        dictgen::InsensitiveStr::Ascii("razies"),
        dictgen::InsensitiveStr::Ascii("rocies"),
    ],
    values: &[
        &["democracies"],
        &["democracy"],
        &["democracies"],
        &["democracies"],
        &["democracies"],
        &["democrat"],
        &["democratic"],
        &["democrat"],
        &["demographic"],
        &["demographics"],
        &["democracies"],
        &["democrats"],
        &["democrats"],
        &["democratically"],
        &["democratically"],
        &["democratic"],
        &["democracy"],
        &["democracies"],
        &["democracies"],
    ],
    range: 3..=8,
};

static WORD_DEMI_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_DEMI_CHILDREN),
    value: None,
};

pub static WORD_DEMI_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("nsion"),
        dictgen::InsensitiveStr::Ascii("nsional"),
        dictgen::InsensitiveStr::Ascii("nsions"),
        dictgen::InsensitiveStr::Ascii("nstrations"),
    ],
    values: &[
        &["dimension"],
        &["dimensional"],
        &["dimensions"],
        &["demonstrations"],
    ],
    range: 5..=10,
};

static WORD_DEME_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_DEME_CHILDREN),
    value: None,
};

pub static WORD_DEME_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("naor"),
        dictgen::InsensitiveStr::Ascii("nor"),
        dictgen::InsensitiveStr::Ascii("nstration"),
        dictgen::InsensitiveStr::Ascii("nstrations"),
        dictgen::InsensitiveStr::Ascii("nta"),
        dictgen::InsensitiveStr::Ascii("ntieva"),
        dictgen::InsensitiveStr::Ascii("sticated"),
    ],
    values: &[
        &["demeanor"],
        &["demeanor"],
        &["demonstration"],
        &["demonstrations"],
        &["dementia"],
        &["dementia"],
        &["domesticated"],
    ],
    range: 3..=10,
};

static WORD_DEMC_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_DEMC_CHILDREN),
    value: None,
};

pub static WORD_DEMC_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("orats")],
    values: &[&["democrats"]],
    range: 5..=5,
};

static WORD_DEMA_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_DEMA_CHILDREN),
    value: None,
};

pub static WORD_DEMA_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ndas"),
        dictgen::InsensitiveStr::Ascii("ndes"),
    ],
    values: &[&["demands"], &["demands"]],
    range: 4..=4,
};

static WORD_DEL_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_DEL_CHILDREN),
    value: None,
};

pub static WORD_DEL_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("aership"),
        dictgen::InsensitiveStr::Ascii("aerships"),
        dictgen::InsensitiveStr::Ascii("agates"),
        dictgen::InsensitiveStr::Ascii("apidated"),
        dictgen::InsensitiveStr::Ascii("caration"),
        dictgen::InsensitiveStr::Ascii("care"),
        dictgen::InsensitiveStr::Ascii("cared"),
        dictgen::InsensitiveStr::Ascii("cares"),
        dictgen::InsensitiveStr::Ascii("caring"),
        dictgen::InsensitiveStr::Ascii("cining"),
        dictgen::InsensitiveStr::Ascii("earship"),
        dictgen::InsensitiveStr::Ascii("earships"),
        dictgen::InsensitiveStr::Ascii("egatie"),
        dictgen::InsensitiveStr::Ascii("egaties"),
        dictgen::InsensitiveStr::Ascii("egative"),
        dictgen::InsensitiveStr::Ascii("epted"),
        dictgen::InsensitiveStr::Ascii("erious"),
        dictgen::InsensitiveStr::Ascii("evopment"),
        dictgen::InsensitiveStr::Ascii("fation"),
        dictgen::InsensitiveStr::Ascii("fect"),
        dictgen::InsensitiveStr::Ascii("fection"),
        dictgen::InsensitiveStr::Ascii("ibarate"),
        dictgen::InsensitiveStr::Ascii("ibaretely"),
        dictgen::InsensitiveStr::Ascii("iberant"),
        dictgen::InsensitiveStr::Ascii("iberante"),
        dictgen::InsensitiveStr::Ascii("iberatley"),
        dictgen::InsensitiveStr::Ascii("iberatly"),
        dictgen::InsensitiveStr::Ascii("iberetly"),
        dictgen::InsensitiveStr::Ascii("ibirate"),
        dictgen::InsensitiveStr::Ascii("ibirately"),
        dictgen::InsensitiveStr::Ascii("ibitating"),
        dictgen::InsensitiveStr::Ascii("ightlful"),
        dictgen::InsensitiveStr::Ascii("igthful"),
        dictgen::InsensitiveStr::Ascii("iverate"),
        dictgen::InsensitiveStr::Ascii("iverately"),
        dictgen::InsensitiveStr::Ascii("ivere"),
        dictgen::InsensitiveStr::Ascii("iverees"),
        dictgen::InsensitiveStr::Ascii("iveres"),
        dictgen::InsensitiveStr::Ascii("iverying"),
        dictgen::InsensitiveStr::Ascii("iverys"),
        dictgen::InsensitiveStr::Ascii("iviered"),
        dictgen::InsensitiveStr::Ascii("iviring"),
        dictgen::InsensitiveStr::Ascii("peted"),
        dictgen::InsensitiveStr::Ascii("porable"),
        dictgen::InsensitiveStr::Ascii("poyed"),
        dictgen::InsensitiveStr::Ascii("poying"),
        dictgen::InsensitiveStr::Ascii("poyment"),
        dictgen::InsensitiveStr::Ascii("usionally"),
        dictgen::InsensitiveStr::Ascii("usionnal"),
        dictgen::InsensitiveStr::Ascii("utional"),
        dictgen::InsensitiveStr::Ascii("yaing"),
    ],
    values: &[
        &["dealership"],
        &["dealerships"],
        &["delegates"],
        &["dilapidated"],
        &["declaration"],
        &["declare"],
        &["declared"],
        &["declares"],
        &["declaring"],
        &["declining"],
        &["dealership"],
        &["dealerships"],
        &["delegate"],
        &["delegate"],
        &["delegate"],
        &["depleted"],
        &["delirious"],
        &["development"],
        &["deflation"],
        &["deflect"],
        &["deflection"],
        &["deliberate"],
        &["deliberately"],
        &["deliberate"],
        &["deliberate"],
        &["deliberately"],
        &["deliberately"],
        &["deliberately"],
        &["deliberate"],
        &["deliberately"],
        &["debilitating"],
        &["delightful"],
        &["delightful"],
        &["deliberate"],
        &["deliberately"],
        &["deliveries"],
        &["deliveries"],
        &["delivers"],
        &["delivering"],
        &["delivers"],
        &["delivered"],
        &["delivering"],
        &["depleted"],
        &["deplorable"],
        &["deployed"],
        &["deploying"],
        &["deployment"],
        &["delusively"],
        &["delusional"],
        &["delusional"],
        &["delaying"],
    ],
    range: 4..=9,
};

static WORD_DEK_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_DEK_CHILDREN),
    value: None,
};

pub static WORD_DEK_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("stop"),
        dictgen::InsensitiveStr::Ascii("stops"),
    ],
    values: &[&["desktop"], &["desktops"]],
    range: 4..=5,
};

static WORD_DEI_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_DEI_CHILDREN),
    value: None,
};

pub static WORD_DEI_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("fnately"),
        dictgen::InsensitiveStr::Ascii("fnetly"),
        dictgen::InsensitiveStr::Ascii("fnitly"),
        dictgen::InsensitiveStr::Ascii("ners"),
        dictgen::InsensitiveStr::Ascii("nitalization"),
        dictgen::InsensitiveStr::Ascii("nitalize"),
        dictgen::InsensitiveStr::Ascii("nitalized"),
        dictgen::InsensitiveStr::Ascii("nitalizes"),
        dictgen::InsensitiveStr::Ascii("nitalizing"),
        dictgen::InsensitiveStr::Ascii("sgnated"),
        dictgen::InsensitiveStr::Ascii("sgned"),
        dictgen::InsensitiveStr::Ascii("sgner"),
        dictgen::InsensitiveStr::Ascii("sgners"),
        dictgen::InsensitiveStr::Ascii("sgns"),
        dictgen::InsensitiveStr::Ascii("vant"),
    ],
    values: &[
        &["definately"],
        &["definetly"],
        &["definitly"],
        &["deniers"],
        &["deinitialization"],
        &["deinitialize"],
        &["deinitialized"],
        &["deinitializes"],
        &["deinitializing"],
        &["designated"],
        &["designed"],
        &["designer"],
        &["designers"],
        &["designs"],
        &["deviant"],
    ],
    range: 4..=12,
};

static WORD_DEH_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_DEH_CHILDREN),
    value: None,
};

pub static WORD_DEH_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ydraded"),
        dictgen::InsensitiveStr::Ascii("yrdated"),
        dictgen::InsensitiveStr::Ascii("yrdation"),
    ],
    values: &[&["dehydrated"], &["dehydrated"], &["dehydration"]],
    range: 7..=8,
};

static WORD_DEG_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_DEG_CHILDREN),
    value: None,
};

pub static WORD_DEG_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("arde"),
        dictgen::InsensitiveStr::Ascii("arded"),
        dictgen::InsensitiveStr::Ascii("enarate"),
        dictgen::InsensitiveStr::Ascii("enerare"),
        dictgen::InsensitiveStr::Ascii("enere"),
        dictgen::InsensitiveStr::Ascii("enererat"),
        dictgen::InsensitiveStr::Ascii("eneret"),
        dictgen::InsensitiveStr::Ascii("enerite"),
        dictgen::InsensitiveStr::Ascii("oratory"),
        dictgen::InsensitiveStr::Ascii("radacion"),
        dictgen::InsensitiveStr::Ascii("radating"),
        dictgen::InsensitiveStr::Ascii("radato"),
        dictgen::InsensitiveStr::Ascii("radead"),
        dictgen::InsensitiveStr::Ascii("raderad"),
        dictgen::InsensitiveStr::Ascii("ragation"),
        dictgen::InsensitiveStr::Ascii("raged"),
        dictgen::InsensitiveStr::Ascii("rase"),
        dictgen::InsensitiveStr::Ascii("rassie"),
        dictgen::InsensitiveStr::Ascii("rassse"),
        dictgen::InsensitiveStr::Ascii("rate"),
        dictgen::InsensitiveStr::Ascii("rated"),
        dictgen::InsensitiveStr::Ascii("ridation"),
    ],
    values: &[
        &["degrade"],
        &["degraded"],
        &["degenerate"],
        &["degenerate"],
        &["degenerate"],
        &["degenerate"],
        &["degenerate"],
        &["degenerate"],
        &["derogatory"],
        &["degradation"],
        &["degradation"],
        &["degradation"],
        &["degraded"],
        &["degraded"],
        &["degradation"],
        &["degrade"],
        &["degrasse"],
        &["degrasse"],
        &["degrasse"],
        &["degrade"],
        &["degrade"],
        &["degradation"],
    ],
    range: 4..=8,
};

static WORD_DEF_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_DEF_CHILDREN),
    value: None,
};

static WORD_DEF_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    Some(&WORD_DEFA_NODE),
    None,
    None,
    None,
    Some(&WORD_DEFE_NODE),
    Some(&WORD_DEFF_NODE),
    None,
    None,
    Some(&WORD_DEFI_NODE),
    None,
    None,
    Some(&WORD_DEFL_NODE),
    None,
    Some(&WORD_DEFN_NODE),
    None,
    None,
    None,
    None,
    None,
    None,
    Some(&WORD_DEFU_NODE),
    None,
    None,
    None,
    None,
    None,
];

static WORD_DEFU_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_DEFU_CHILDREN),
    value: None,
};

pub static WORD_DEFU_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("alt"),
        dictgen::InsensitiveStr::Ascii("alts"),
    ],
    values: &[&["default"], &["defaults"]],
    range: 3..=4,
};

static WORD_DEFN_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_DEFN_CHILDREN),
    value: None,
};

pub static WORD_DEFN_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("iately"),
        dictgen::InsensitiveStr::Ascii("ietly"),
    ],
    values: &[&["definately"], &["definetly"]],
    range: 5..=6,
};

static WORD_DEFL_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_DEFL_CHILDREN),
    value: None,
};

pub static WORD_DEFL_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("action"),
        dictgen::InsensitiveStr::Ascii("atin"),
        dictgen::InsensitiveStr::Ascii("eciton"),
        dictgen::InsensitiveStr::Ascii("ecticon"),
        dictgen::InsensitiveStr::Ascii("ectin"),
        dictgen::InsensitiveStr::Ascii("ecto"),
        dictgen::InsensitiveStr::Ascii("ektion"),
    ],
    values: &[
        &["deflection"],
        &["deflation"],
        &["deflection"],
        &["deflection"],
        &["deflection"],
        &["deflection"],
        &["deflection"],
    ],
    range: 4..=7,
};

static WORD_DEFI_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_DEFI_CHILDREN),
    value: None,
};

static WORD_DEFI_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    Some(&WORD_DEFIA_NODE),
    Some(&WORD_DEFIB_NODE),
    Some(&WORD_DEFIC_NODE),
    None,
    None,
    None,
    None,
    None,
    Some(&WORD_DEFII_NODE),
    None,
    None,
    None,
    None,
    Some(&WORD_DEFIN_NODE),
    None,
    None,
    None,
    None,
    None,
    Some(&WORD_DEFIT_NODE),
    None,
    None,
    None,
    None,
    None,
    None,
];

static WORD_DEFIT_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_DEFIT_CHILDREN),
    value: None,
};

pub static WORD_DEFIT_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("enly"),
        dictgen::InsensitiveStr::Ascii("inly"),
        dictgen::InsensitiveStr::Ascii("naly"),
        dictgen::InsensitiveStr::Ascii("nely"),
    ],
    values: &[
        &["definetly"],
        &["definitly"],
        &["defiantly"],
        &["definetly"],
    ],
    range: 4..=4,
};

static WORD_DEFIN_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_DEFIN_CHILDREN),
    value: None,
};

static WORD_DEFIN_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    Some(&WORD_DEFINA_NODE),
    None,
    None,
    None,
    Some(&WORD_DEFINE_NODE),
    None,
    None,
    None,
    Some(&WORD_DEFINI_NODE),
    Some(&WORD_DEFINJ_NODE),
    None,
    Some(&WORD_DEFINL_NODE),
    None,
    None,
    Some(&WORD_DEFINO_NODE),
    None,
    None,
    None,
    Some(&WORD_DEFINS_NODE),
    Some(&WORD_DEFINT_NODE),
    Some(&WORD_DEFINU_NODE),
    None,
    None,
    None,
    None,
    None,
];

static WORD_DEFINU_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_DEFINU_CHILDREN),
    value: None,
};

pub static WORD_DEFINU_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("tely")],
    values: &[&["definately"]],
    range: 4..=4,
};

static WORD_DEFINT_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_DEFINT_CHILDREN),
    value: None,
};

pub static WORD_DEFINT_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("aley"),
        dictgen::InsensitiveStr::Ascii("aly"),
        dictgen::InsensitiveStr::Ascii("iely"),
        dictgen::InsensitiveStr::Ascii("iion"),
        dictgen::InsensitiveStr::Ascii("ily"),
        dictgen::InsensitiveStr::Ascii("ion"),
        dictgen::InsensitiveStr::Ascii("ley"),
    ],
    values: &[
        &["definately"],
        &["defiantly"],
        &["definitely"],
        &["definitions"],
        &["definitly"],
        &["definition"],
        &["definetly"],
    ],
    range: 3..=4,
};

static WORD_DEFINS_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_DEFINS_CHILDREN),
    value: None,
};

pub static WORD_DEFINS_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("tely")],
    values: &[&["definately"]],
    range: 4..=4,
};

static WORD_DEFINO_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_DEFINO_CHILDREN),
    value: None,
};

pub static WORD_DEFINO_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("tely")],
    values: &[&["definately"]],
    range: 4..=4,
};

static WORD_DEFINL_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_DEFINL_CHILDREN),
    value: None,
};

pub static WORD_DEFINL_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("tely"),
        dictgen::InsensitiveStr::Ascii("tey"),
    ],
    values: &[&["definately"], &["definetly"]],
    range: 3..=4,
};

static WORD_DEFINJ_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_DEFINJ_CHILDREN),
    value: None,
};

pub static WORD_DEFINJ_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("tely")],
    values: &[&["definately"]],
    range: 4..=4,
};

static WORD_DEFINI_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_DEFINI_CHILDREN),
    value: None,
};

pub static WORD_DEFINI_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("cion"),
        dictgen::InsensitiveStr::Ascii("e"),
        dictgen::InsensitiveStr::Ascii("etly"),
        dictgen::InsensitiveStr::Ascii("g"),
        dictgen::InsensitiveStr::Ascii("lty"),
        dictgen::InsensitiveStr::Ascii("ning"),
        dictgen::InsensitiveStr::Ascii("nitely"),
        dictgen::InsensitiveStr::Ascii("t"),
        dictgen::InsensitiveStr::Ascii("taley"),
        dictgen::InsensitiveStr::Ascii("taly"),
        dictgen::InsensitiveStr::Ascii("tavely"),
        dictgen::InsensitiveStr::Ascii("telly"),
        dictgen::InsensitiveStr::Ascii("tevely"),
        dictgen::InsensitiveStr::Ascii("tevly"),
        dictgen::InsensitiveStr::Ascii("teyl"),
        dictgen::InsensitiveStr::Ascii("tie"),
        dictgen::InsensitiveStr::Ascii("tiely"),
        dictgen::InsensitiveStr::Ascii("tieve"),
        dictgen::InsensitiveStr::Ascii("tifely"),
        dictgen::InsensitiveStr::Ascii("tiley"),
        dictgen::InsensitiveStr::Ascii("tin"),
        dictgen::InsensitiveStr::Ascii("tinely"),
        dictgen::InsensitiveStr::Ascii("titely"),
        dictgen::InsensitiveStr::Ascii("tivelly"),
        dictgen::InsensitiveStr::Ascii("tivley"),
        dictgen::InsensitiveStr::Ascii("tivly"),
        dictgen::InsensitiveStr::Ascii("tivno"),
        dictgen::InsensitiveStr::Ascii("tivo"),
        dictgen::InsensitiveStr::Ascii("tivos"),
        dictgen::InsensitiveStr::Ascii("tlely"),
        dictgen::InsensitiveStr::Ascii("tlety"),
        dictgen::InsensitiveStr::Ascii("tley"),
        dictgen::InsensitiveStr::Ascii("tlly"),
        dictgen::InsensitiveStr::Ascii("tlry"),
        dictgen::InsensitiveStr::Ascii("tlty"),
        dictgen::InsensitiveStr::Ascii("tly"),
        dictgen::InsensitiveStr::Ascii("to"),
        dictgen::InsensitiveStr::Ascii("ton"),
        dictgen::InsensitiveStr::Ascii("tv"),
        dictgen::InsensitiveStr::Ascii("tve"),
        dictgen::InsensitiveStr::Ascii("tyl"),
    ],
    values: &[
        &["definition"],
        &["definite"],
        &["definitely"],
        &["defining"],
        &["definitly"],
        &["defining"],
        &["definitively"],
        &["definite"],
        &["definately"],
        &["definately"],
        &["definitively"],
        &["definitely"],
        &["definitively"],
        &["definitively"],
        &["definitly"],
        &["definitive"],
        &["definitively"],
        &["definitive"],
        &["definitively"],
        &["definitively"],
        &["definitions"],
        &["definitively"],
        &["definitively"],
        &["definitively"],
        &["definitively"],
        &["definitively"],
        &["definition"],
        &["definition"],
        &["definitions"],
        &["definitly"],
        &["definitly"],
        &["definitely"],
        &["definitly"],
        &["definitly"],
        &["definitly"],
        &["definitely"],
        &["definition"],
        &["definition"],
        &["definitive"],
        &["definite"],
        &["definitly"],
    ],
    range: 1..=7,
};

static WORD_DEFINE_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_DEFINE_CHILDREN),
    value: None,
};

pub static WORD_DEFINE_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("atly"),
        dictgen::InsensitiveStr::Ascii("t"),
        dictgen::InsensitiveStr::Ascii("tally"),
        dictgen::InsensitiveStr::Ascii("taly"),
        dictgen::InsensitiveStr::Ascii("tely"),
        dictgen::InsensitiveStr::Ascii("tily"),
        dictgen::InsensitiveStr::Ascii("tlely"),
        dictgen::InsensitiveStr::Ascii("tlly"),
        dictgen::InsensitiveStr::Ascii("tly"),
        dictgen::InsensitiveStr::Ascii("ttly"),
        dictgen::InsensitiveStr::Ascii("ty"),
        dictgen::InsensitiveStr::Ascii("tyl"),
    ],
    values: &[
        &["definately"],
        &["definite"],
        &["definately"],
        &["definately"],
        &["definitely"],
        &["definately"],
        &["definetly"],
        &["definetly"],
        &["definitely"],
        &["definately"],
        &["definetly"],
        &["definetly"],
    ],
    range: 1..=5,
};

static WORD_DEFINA_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_DEFINA_CHILDREN),
    value: None,
};

pub static WORD_DEFINA_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("etly"),
        dictgen::InsensitiveStr::Ascii("itly"),
        dictgen::InsensitiveStr::Ascii("ltey"),
        dictgen::InsensitiveStr::Ascii("nce"),
        dictgen::InsensitiveStr::Ascii("ntley"),
        dictgen::InsensitiveStr::Ascii("t"),
        dictgen::InsensitiveStr::Ascii("taly"),
        dictgen::InsensitiveStr::Ascii("te"),
        dictgen::InsensitiveStr::Ascii("tedly"),
        dictgen::InsensitiveStr::Ascii("teky"),
        dictgen::InsensitiveStr::Ascii("teley"),
        dictgen::InsensitiveStr::Ascii("telly"),
        dictgen::InsensitiveStr::Ascii("telty"),
        dictgen::InsensitiveStr::Ascii("tely"),
        dictgen::InsensitiveStr::Ascii("tetly"),
        dictgen::InsensitiveStr::Ascii("tey"),
        dictgen::InsensitiveStr::Ascii("tily"),
        dictgen::InsensitiveStr::Ascii("tion"),
        dictgen::InsensitiveStr::Ascii("tions"),
        dictgen::InsensitiveStr::Ascii("tive"),
        dictgen::InsensitiveStr::Ascii("tively"),
        dictgen::InsensitiveStr::Ascii("tlely"),
        dictgen::InsensitiveStr::Ascii("tlly"),
        dictgen::InsensitiveStr::Ascii("tly"),
        dictgen::InsensitiveStr::Ascii("trly"),
        dictgen::InsensitiveStr::Ascii("ty"),
        dictgen::InsensitiveStr::Ascii("yely"),
    ],
    values: &[
        &["definately"],
        &["definately"],
        &["definately"],
        &["defiance"],
        &["definately"],
        &["defiant"],
        &["definately"],
        &["definite"],
        &["definately"],
        &["definately"],
        &["definately"],
        &["definately"],
        &["definately"],
        &["definitely"],
        &["definately"],
        &["definately"],
        &["definately"],
        &["definition"],
        &["definitions"],
        &["definitive"],
        &["definitively"],
        &["definately"],
        &["definately"],
        &["definitely"],
        &["definately"],
        &["definately"],
        &["definately"],
    ],
    range: 1..=6,
};

static WORD_DEFII_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_DEFII_CHILDREN),
    value: None,
};

pub static WORD_DEFII_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("ntely")],
    values: &[&["definately"]],
    range: 5..=5,
};

static WORD_DEFIC_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_DEFIC_CHILDREN),
    value: None,
};

pub static WORD_DEFIC_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ately"),
        dictgen::InsensitiveStr::Ascii("eint"),
        dictgen::InsensitiveStr::Ascii("iancies"),
        dictgen::InsensitiveStr::Ascii("iancy"),
        dictgen::InsensitiveStr::Ascii("ience"),
        dictgen::InsensitiveStr::Ascii("iencey"),
        dictgen::InsensitiveStr::Ascii("iencias"),
        dictgen::InsensitiveStr::Ascii("ienct"),
        dictgen::InsensitiveStr::Ascii("ienies"),
        dictgen::InsensitiveStr::Ascii("iensies"),
        dictgen::InsensitiveStr::Ascii("ientcy"),
        dictgen::InsensitiveStr::Ascii("ienty"),
        dictgen::InsensitiveStr::Ascii("ieny"),
        dictgen::InsensitiveStr::Ascii("iet"),
        dictgen::InsensitiveStr::Ascii("ites"),
    ],
    values: &[
        &["definately"],
        &["deficient"],
        &["deficiencies"],
        &["deficiency"],
        &["deficiencies"],
        &["deficiency"],
        &["deficiencies"],
        &["deficient"],
        &["deficiencies"],
        &["deficiencies"],
        &["deficiency"],
        &["deficiency"],
        &["deficiency"],
        &["deficient"],
        &["deficits"],
    ],
    range: 3..=7,
};

static WORD_DEFIB_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_DEFIB_CHILDREN),
    value: None,
};

pub static WORD_DEFIB_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("ately")],
    values: &[&["definately"]],
    range: 5..=5,
};

static WORD_DEFIA_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_DEFIA_CHILDREN),
    value: None,
};

pub static WORD_DEFIA_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("netly"),
        dictgen::InsensitiveStr::Ascii("nlty"),
        dictgen::InsensitiveStr::Ascii("ntely"),
        dictgen::InsensitiveStr::Ascii("ntley"),
    ],
    values: &[
        &["definately"],
        &["defiantly"],
        &["definately"],
        &["definately"],
    ],
    range: 4..=5,
};

static WORD_DEFF_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_DEFF_CHILDREN),
    value: None,
};

pub static WORD_DEFF_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ensively"),
        dictgen::InsensitiveStr::Ascii("ine"),
        dictgen::InsensitiveStr::Ascii("ined"),
    ],
    values: &[&["defensively"], &["define"], &["defined"]],
    range: 3..=8,
};

static WORD_DEFE_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_DEFE_CHILDREN),
    value: None,
};

pub static WORD_DEFE_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ctos"),
        dictgen::InsensitiveStr::Ascii("ctus"),
        dictgen::InsensitiveStr::Ascii("intly"),
        dictgen::InsensitiveStr::Ascii("lct"),
        dictgen::InsensitiveStr::Ascii("lction"),
        dictgen::InsensitiveStr::Ascii("ndas"),
        dictgen::InsensitiveStr::Ascii("ndeers"),
        dictgen::InsensitiveStr::Ascii("ndent"),
        dictgen::InsensitiveStr::Ascii("ndents"),
        dictgen::InsensitiveStr::Ascii("nderes"),
        dictgen::InsensitiveStr::Ascii("nderlas"),
        dictgen::InsensitiveStr::Ascii("nderlos"),
        dictgen::InsensitiveStr::Ascii("ndernos"),
        dictgen::InsensitiveStr::Ascii("ndes"),
        dictgen::InsensitiveStr::Ascii("ndis"),
        dictgen::InsensitiveStr::Ascii("ndre"),
        dictgen::InsensitiveStr::Ascii("ndrs"),
        dictgen::InsensitiveStr::Ascii("nesless"),
        dictgen::InsensitiveStr::Ascii("nesman"),
        dictgen::InsensitiveStr::Ascii("nisvely"),
        dictgen::InsensitiveStr::Ascii("nsd"),
        dictgen::InsensitiveStr::Ascii("nsea"),
        dictgen::InsensitiveStr::Ascii("nselss"),
        dictgen::InsensitiveStr::Ascii("nsen"),
        dictgen::InsensitiveStr::Ascii("nsese"),
        dictgen::InsensitiveStr::Ascii("nsie"),
        dictgen::InsensitiveStr::Ascii("nsivley"),
        dictgen::InsensitiveStr::Ascii("nsivly"),
        dictgen::InsensitiveStr::Ascii("tead"),
    ],
    values: &[
        &["defects"],
        &["defects"],
        &["definetly"],
        &["deflect"],
        &["deflection"],
        &["defends"],
        &["defender"],
        &["defendant"],
        &["defendants"],
        &["defenders"],
        &["defenders"],
        &["defenders"],
        &["defenders"],
        &["defenders"],
        &["defends"],
        &["defender"],
        &["defends"],
        &["defenseless"],
        &["defenseman"],
        &["defensively"],
        &["defends"],
        &["defenseman"],
        &["defenseless"],
        &["defenseman"],
        &["defenseless"],
        &["defensive"],
        &["defensively"],
        &["defensively"],
        &["defeated"],
    ],
    range: 3..=7,
};

static WORD_DEFA_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_DEFA_CHILDREN),
    value: None,
};

pub static WORD_DEFA_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("cation"),
        dictgen::InsensitiveStr::Ascii("int"),
        dictgen::InsensitiveStr::Ascii("intly"),
        dictgen::InsensitiveStr::Ascii("ltion"),
        dictgen::InsensitiveStr::Ascii("mating"),
        dictgen::InsensitiveStr::Ascii("nitely"),
        dictgen::InsensitiveStr::Ascii("nitly"),
        dictgen::InsensitiveStr::Ascii("uls"),
        dictgen::InsensitiveStr::Ascii("utls"),
    ],
    values: &[
        &["defamation"],
        &["defiant"],
        &["defiantly"],
        &["deflation"],
        &["defamation"],
        &["definately"],
        &["defiantly"],
        &["defaults"],
        &["defaults"],
    ],
    range: 3..=6,
};

static WORD_DED_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_DED_CHILDREN),
    value: None,
};

pub static WORD_DED_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("icacion"),
        dictgen::InsensitiveStr::Ascii("icato"),
        dictgen::InsensitiveStr::Ascii("ikation"),
        dictgen::InsensitiveStr::Ascii("ucatble"),
        dictgen::InsensitiveStr::Ascii("ucitble"),
        dictgen::InsensitiveStr::Ascii("uctiable"),
        dictgen::InsensitiveStr::Ascii("uctibe"),
        dictgen::InsensitiveStr::Ascii("uctie"),
    ],
    values: &[
        &["dedication"],
        &["dedication"],
        &["dedication"],
        &["deductible"],
        &["deductible"],
        &["deductible"],
        &["deductible"],
        &["deductible"],
    ],
    range: 5..=8,
};

static WORD_DEC_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_DEC_CHILDREN),
    value: None,
};

static WORD_DEC_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    Some(&WORD_DECA_NODE),
    None,
    None,
    None,
    Some(&WORD_DECE_NODE),
    None,
    None,
    None,
    Some(&WORD_DECI_NODE),
    None,
    None,
    Some(&WORD_DECL_NODE),
    Some(&WORD_DECM_NODE),
    None,
    Some(&WORD_DECO_NODE),
    Some(&WORD_DECP_NODE),
    None,
    Some(&WORD_DECR_NODE),
    Some(&WORD_DECS_NODE),
    Some(&WORD_DECT_NODE),
    None,
    None,
    None,
    None,
    None,
    None,
];

static WORD_DECT_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_DECT_CHILDREN),
    value: None,
};

pub static WORD_DECT_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("ect")],
    values: &[&["detect"]],
    range: 3..=3,
};

static WORD_DECS_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_DECS_CHILDREN),
    value: None,
};

pub static WORD_DECS_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("cription"),
        dictgen::InsensitiveStr::Ascii("end"),
        dictgen::InsensitiveStr::Ascii("endants"),
        dictgen::InsensitiveStr::Ascii("ended"),
        dictgen::InsensitiveStr::Ascii("ending"),
    ],
    values: &[
        &["description"],
        &["descend"],
        &["descendants"],
        &["descended"],
        &["descending"],
    ],
    range: 3..=8,
};

static WORD_DECR_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_DECR_CHILDREN),
    value: None,
};

pub static WORD_DECR_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ess"),
        dictgen::InsensitiveStr::Ascii("ibe"),
        dictgen::InsensitiveStr::Ascii("ibed"),
        dictgen::InsensitiveStr::Ascii("ibes"),
        dictgen::InsensitiveStr::Ascii("ibing"),
        dictgen::InsensitiveStr::Ascii("oative"),
    ],
    values: &[
        &["decrees"],
        &["describe"],
        &["described"],
        &["describes"],
        &["describing"],
        &["decorative"],
    ],
    range: 3..=6,
};

static WORD_DECP_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_DECP_CHILDREN),
    value: None,
};

pub static WORD_DECP_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("etion"),
        dictgen::InsensitiveStr::Ascii("etive"),
    ],
    values: &[&["deception"], &["deceptive"]],
    range: 5..=5,
};

static WORD_DECO_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_DECO_CHILDREN),
    value: None,
};

pub static WORD_DECO_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("artions"),
        dictgen::InsensitiveStr::Ascii("missioned"),
        dictgen::InsensitiveStr::Ascii("mposeion"),
        dictgen::InsensitiveStr::Ascii("mposit"),
        dictgen::InsensitiveStr::Ascii("mposited"),
        dictgen::InsensitiveStr::Ascii("mpositing"),
        dictgen::InsensitiveStr::Ascii("mposits"),
        dictgen::InsensitiveStr::Ascii("racion"),
        dictgen::InsensitiveStr::Ascii("ratie"),
        dictgen::InsensitiveStr::Ascii("ratieve"),
        dictgen::InsensitiveStr::Ascii("ratin"),
        dictgen::InsensitiveStr::Ascii("rativo"),
        dictgen::InsensitiveStr::Ascii("rativos"),
        dictgen::InsensitiveStr::Ascii("ritive"),
        dictgen::InsensitiveStr::Ascii("tations"),
    ],
    values: &[
        &["decoration"],
        &["decommissioned"],
        &["decomposition"],
        &["decompose"],
        &["decomposed"],
        &["decomposing"],
        &["decomposes"],
        &["decoration"],
        &["decorative"],
        &["decorative"],
        &["decorations"],
        &["decoration"],
        &["decorations"],
        &["decorative"],
        &["decorations"],
    ],
    range: 5..=9,
};

static WORD_DECM_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_DECM_CHILDREN),
    value: None,
};

pub static WORD_DECM_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("eber")],
    values: &[&["december"]],
    range: 4..=4,
};

static WORD_DECL_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_DECL_CHILDREN),
    value: None,
};

pub static WORD_DECL_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("aracion"),
        dictgen::InsensitiveStr::Ascii("arase"),
        dictgen::InsensitiveStr::Ascii("arasen"),
        dictgen::InsensitiveStr::Ascii("araste"),
        dictgen::InsensitiveStr::Ascii("areation"),
        dictgen::InsensitiveStr::Ascii("arees"),
        dictgen::InsensitiveStr::Ascii("aremos"),
        dictgen::InsensitiveStr::Ascii("ars"),
        dictgen::InsensitiveStr::Ascii("ase"),
        dictgen::InsensitiveStr::Ascii("ears"),
        dictgen::InsensitiveStr::Ascii("eration"),
        dictgen::InsensitiveStr::Ascii("inig"),
        dictgen::InsensitiveStr::Ascii("inining"),
        dictgen::InsensitiveStr::Ascii("oration"),
    ],
    values: &[
        &["declaration"],
        &["declares"],
        &["declares"],
        &["declares"],
        &["declaration"],
        &["declares"],
        &["declares"],
        &["declares"],
        &["declares"],
        &["declares"],
        &["declaration"],
        &["declining"],
        &["declining"],
        &["declaration"],
    ],
    range: 3..=8,
};

static WORD_DECI_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_DECI_CHILDREN),
    value: None,
};

pub static WORD_DECI_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("deable"),
        dictgen::InsensitiveStr::Ascii("dely"),
        dictgen::InsensitiveStr::Ascii("eved"),
        dictgen::InsensitiveStr::Ascii("fits"),
        dictgen::InsensitiveStr::Ascii("pted"),
        dictgen::InsensitiveStr::Ascii("pting"),
        dictgen::InsensitiveStr::Ascii("ption"),
        dictgen::InsensitiveStr::Ascii("ptions"),
        dictgen::InsensitiveStr::Ascii("siones"),
        dictgen::InsensitiveStr::Ascii("sivie"),
        dictgen::InsensitiveStr::Ascii("son"),
    ],
    values: &[
        &["decidable"],
        &["decidedly"],
        &["deceived"],
        &["deficits"],
        &["depicted"],
        &["depicting"],
        &["depiction"],
        &["depictions"],
        &["decisions"],
        &["decisive"],
        &["decision"],
    ],
    range: 3..=6,
};

static WORD_DECE_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_DECE_CHILDREN),
    value: None,
};

pub static WORD_DECE_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("mbeard"),
        dictgen::InsensitiveStr::Ascii("mbre"),
        dictgen::InsensitiveStr::Ascii("ndant"),
        dictgen::InsensitiveStr::Ascii("ndants"),
        dictgen::InsensitiveStr::Ascii("ndent"),
        dictgen::InsensitiveStr::Ascii("ndents"),
        dictgen::InsensitiveStr::Ascii("nsitized"),
        dictgen::InsensitiveStr::Ascii("ntraliced"),
        dictgen::InsensitiveStr::Ascii("ntrilized"),
        dictgen::InsensitiveStr::Ascii("ptionist"),
        dictgen::InsensitiveStr::Ascii("ptivley"),
    ],
    values: &[
        &["december"],
        &["december"],
        &["descendant"],
        &["descendants"],
        &["descendent"],
        &["descendents"],
        &["desensitized"],
        &["decentralized"],
        &["decentralized"],
        &["receptionist"],
        &["deceptive"],
    ],
    range: 4..=9,
};

static WORD_DECA_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_DECA_CHILDREN),
    value: None,
};

pub static WORD_DECA_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("lre"),
        dictgen::InsensitiveStr::Ascii("lred"),
        dictgen::InsensitiveStr::Ascii("lres"),
        dictgen::InsensitiveStr::Ascii("lring"),
    ],
    values: &[&["declare"], &["declared"], &["declares"], &["declaring"]],
    range: 3..=5,
};

static WORD_DEB_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_DEB_CHILDREN),
    value: None,
};

pub static WORD_DEB_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ateable"),
        dictgen::InsensitiveStr::Ascii("uffes"),
        dictgen::InsensitiveStr::Ascii("ufffs"),
    ],
    values: &[&["debatable"], &["debuffs"], &["debuffs"]],
    range: 5..=7,
};

static WORD_DEA_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_DEA_CHILDREN),
    value: None,
};

pub static WORD_DEA_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("dlfit"),
        dictgen::InsensitiveStr::Ascii("dlfits"),
        dictgen::InsensitiveStr::Ascii("dlifs"),
        dictgen::InsensitiveStr::Ascii("dlifters"),
        dictgen::InsensitiveStr::Ascii("dlit"),
        dictgen::InsensitiveStr::Ascii("dpol"),
        dictgen::InsensitiveStr::Ascii("dpoool"),
        dictgen::InsensitiveStr::Ascii("feted"),
        dictgen::InsensitiveStr::Ascii("fult"),
        dictgen::InsensitiveStr::Ascii("fults"),
        dictgen::InsensitiveStr::Ascii("htly"),
        dictgen::InsensitiveStr::Ascii("lerhsip"),
        dictgen::InsensitiveStr::Ascii("lershits"),
        dictgen::InsensitiveStr::Ascii("lershp"),
        dictgen::InsensitiveStr::Ascii("lying"),
        dictgen::InsensitiveStr::Ascii("menor"),
        dictgen::InsensitiveStr::Ascii("thamtch"),
        dictgen::InsensitiveStr::Ascii("thcat"),
        dictgen::InsensitiveStr::Ascii("thmacth"),
        dictgen::InsensitiveStr::Ascii("thmath"),
        dictgen::InsensitiveStr::Ascii("tils"),
        dictgen::InsensitiveStr::Ascii("tlhy"),
    ],
    values: &[
        &["deadlift"],
        &["deadlifts"],
        &["deadlifts"],
        &["deadlifts"],
        &["deadlift"],
        &["deadpool"],
        &["deadpool"],
        &["defeated"],
        &["default"],
        &["defaults"],
        &["deathly"],
        &["dealerships"],
        &["dealerships"],
        &["dealerships"],
        &["delaying"],
        &["demeanor"],
        &["deathmatch"],
        &["deathmatch"],
        &["deathmatch"],
        &["deathmatch"],
        &["details"],
        &["deathly"],
    ],
    range: 4..=8,
};

static WORD_DD_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_DD_CHILDREN),
    value: None,
};

pub static WORD_DD_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ogers"),
        dictgen::InsensitiveStr::Ascii("oging"),
    ],
    values: &[&["dodgers"], &["dodging"]],
    range: 5..=5,
};

static WORD_DA_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_DA_CHILDREN),
    value: None,
};

pub static WORD_DA_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("bilitating"),
        dictgen::InsensitiveStr::Ascii("cquiri"),
        dictgen::InsensitiveStr::Ascii("ed"),
        dictgen::InsensitiveStr::Ascii("el"),
        dictgen::InsensitiveStr::Ascii("gners"),
        dictgen::InsensitiveStr::Ascii("hsboard"),
        dictgen::InsensitiveStr::Ascii("imond"),
        dictgen::InsensitiveStr::Ascii("imonds"),
        dictgen::InsensitiveStr::Ascii("lmation"),
        dictgen::InsensitiveStr::Ascii("menor"),
        dictgen::InsensitiveStr::Ascii("mmage"),
        dictgen::InsensitiveStr::Ascii("ngeros"),
        dictgen::InsensitiveStr::Ascii("ngeroulsy"),
        dictgen::InsensitiveStr::Ascii("ngerouly"),
        dictgen::InsensitiveStr::Ascii("ngerousely"),
        dictgen::InsensitiveStr::Ascii("ngeroys"),
        dictgen::InsensitiveStr::Ascii("ngerus"),
        dictgen::InsensitiveStr::Ascii("rcula"),
        dictgen::InsensitiveStr::Ascii("rdenelles"),
        dictgen::InsensitiveStr::Ascii("rgons"),
        dictgen::InsensitiveStr::Ascii("rkenss"),
        dictgen::InsensitiveStr::Ascii("rkets"),
        dictgen::InsensitiveStr::Ascii("rnkess"),
        dictgen::InsensitiveStr::Ascii("shbaord"),
        dictgen::InsensitiveStr::Ascii("shboad"),
        dictgen::InsensitiveStr::Ascii("tbase"),
        dictgen::InsensitiveStr::Ascii("ugther"),
        dictgen::InsensitiveStr::Ascii("ugthers"),
        dictgen::InsensitiveStr::Ascii("ulity"),
        dictgen::InsensitiveStr::Ascii("vantage"),
        dictgen::InsensitiveStr::Ascii("wrves"),
    ],
    values: &[
        &["debilitating"],
        &["daiquiri"],
        &["dead"],
        &["deal"],
        &["dangers"],
        &["dashboard"],
        &["diamond"],
        &["diamonds"],
        &["dalmatian"],
        &["demeanor"],
        &["damage"],
        &["dangers"],
        &["dangerously"],
        &["dangerously"],
        &["dangerously"],
        &["dangerously"],
        &["dangers"],
        &["dracula"],
        &["dardanelles"],
        &["dragons"],
        &["darkness"],
        &["darkest"],
        &["darkness"],
        &["dashboard"],
        &["dashboard"],
        &["database"],
        &["daughter"],
        &["daughters"],
        &["duality"],
        &["advantage"],
        &["dwarves"],
    ],
    range: 2..=10,
};

static WORD_C_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_C_CHILDREN),
    value: None,
};

static WORD_C_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    Some(&WORD_CA_NODE),
    None,
    None,
    None,
    Some(&WORD_CE_NODE),
    None,
    None,
    Some(&WORD_CH_NODE),
    Some(&WORD_CI_NODE),
    None,
    None,
    Some(&WORD_CL_NODE),
    Some(&WORD_CM_NODE),
    None,
    Some(&WORD_CO_NODE),
    Some(&WORD_CP_NODE),
    None,
    Some(&WORD_CR_NODE),
    None,
    Some(&WORD_CT_NODE),
    Some(&WORD_CU_NODE),
    None,
    None,
    Some(&WORD_CX_NODE),
    Some(&WORD_CY_NODE),
    None,
];

static WORD_CY_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_CY_CHILDREN),
    value: None,
};

pub static WORD_CY_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("andie"),
        dictgen::InsensitiveStr::Ascii("clinder"),
        dictgen::InsensitiveStr::Ascii("clistes"),
        dictgen::InsensitiveStr::Ascii("clits"),
        dictgen::InsensitiveStr::Ascii("cloen"),
        dictgen::InsensitiveStr::Ascii("colps"),
        dictgen::InsensitiveStr::Ascii("lcist"),
        dictgen::InsensitiveStr::Ascii("lcists"),
        dictgen::InsensitiveStr::Ascii("lcone"),
        dictgen::InsensitiveStr::Ascii("lcops"),
        dictgen::InsensitiveStr::Ascii("lidner"),
        dictgen::InsensitiveStr::Ascii("lindre"),
        dictgen::InsensitiveStr::Ascii("lindres"),
        dictgen::InsensitiveStr::Ascii("naide"),
        dictgen::InsensitiveStr::Ascii("nicisim"),
        dictgen::InsensitiveStr::Ascii("nisicm"),
        dictgen::InsensitiveStr::Ascii("rptic"),
        dictgen::InsensitiveStr::Ascii("rstal"),
        dictgen::InsensitiveStr::Ascii("rstals"),
    ],
    values: &[
        &["cyanide"],
        &["cylinder"],
        &["cyclists"],
        &["cyclist"],
        &["cyclone"],
        &["cyclops"],
        &["cyclist"],
        &["cyclists"],
        &["cyclone"],
        &["cyclops"],
        &["cylinder"],
        &["cylinder"],
        &["cylinders"],
        &["cyanide"],
        &["cynicism"],
        &["cynicism"],
        &["cryptic"],
        &["crystal"],
        &["crystals"],
    ],
    range: 5..=7,
};

static WORD_CX_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_CX_CHILDREN),
    value: None,
};

pub static WORD_CX_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("an")],
    values: &[&["cyan"]],
    range: 2..=2,
};

static WORD_CU_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_CU_CHILDREN),
    value: None,
};

static WORD_CU_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    Some(&WORD_CUA_NODE),
    Some(&WORD_CUB_NODE),
    None,
    Some(&WORD_CUD_NODE),
    Some(&WORD_CUE_NODE),
    None,
    None,
    None,
    None,
    None,
    None,
    Some(&WORD_CUL_NODE),
    Some(&WORD_CUM_NODE),
    Some(&WORD_CUN_NODE),
    None,
    Some(&WORD_CUP_NODE),
    None,
    Some(&WORD_CUR_NODE),
    Some(&WORD_CUS_NODE),
    Some(&WORD_CUT_NODE),
    None,
    None,
    None,
    None,
    None,
    Some(&WORD_CUZ_NODE),
];

static WORD_CUZ_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_CUZ_CHILDREN),
    value: None,
};

pub static WORD_CUZ_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("tomizable"),
        dictgen::InsensitiveStr::Ascii("tomization"),
    ],
    values: &[&["customizable"], &["customization"]],
    range: 9..=10,
};

static WORD_CUT_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_CUT_CHILDREN),
    value: None,
};

pub static WORD_CUT_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("sceen"),
        dictgen::InsensitiveStr::Ascii("sceens"),
        dictgen::InsensitiveStr::Ascii("scence"),
        dictgen::InsensitiveStr::Ascii("scences"),
        dictgen::InsensitiveStr::Ascii("scens"),
        dictgen::InsensitiveStr::Ascii("scenses"),
        dictgen::InsensitiveStr::Ascii("sence"),
        dictgen::InsensitiveStr::Ascii("sences"),
    ],
    values: &[
        &["cutscene"],
        &["cutscenes"],
        &["cutscene"],
        &["cutscene"],
        &["cutscenes"],
        &["cutscene"],
        &["cutscene"],
        &["cutscenes"],
    ],
    range: 5..=7,
};

static WORD_CUS_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_CUS_CHILDREN),
    value: None,
};

pub static WORD_CUS_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("tamizable"),
        dictgen::InsensitiveStr::Ascii("tcene"),
        dictgen::InsensitiveStr::Ascii("tcenes"),
        dictgen::InsensitiveStr::Ascii("timizable"),
        dictgen::InsensitiveStr::Ascii("timized"),
        dictgen::InsensitiveStr::Ascii("tomizabe"),
        dictgen::InsensitiveStr::Ascii("tomizaton"),
        dictgen::InsensitiveStr::Ascii("tomizble"),
        dictgen::InsensitiveStr::Ascii("tomizeble"),
        dictgen::InsensitiveStr::Ascii("tomizible"),
        dictgen::InsensitiveStr::Ascii("tomzied"),
        dictgen::InsensitiveStr::Ascii("tumizable"),
        dictgen::InsensitiveStr::Ascii("tumization"),
        dictgen::InsensitiveStr::Ascii("tumized"),
    ],
    values: &[
        &["customizable"],
        &["cutscene"],
        &["cutscenes"],
        &["customizable"],
        &["customized"],
        &["customizable"],
        &["customization"],
        &["customizable"],
        &["customizable"],
        &["customizable"],
        &["customized"],
        &["customizable"],
        &["customization"],
        &["customized"],
    ],
    range: 5..=10,
};

static WORD_CUR_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_CUR_CHILDREN),
    value: None,
};

pub static WORD_CUR_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("atin"),
        dictgen::InsensitiveStr::Ascii("cial"),
        dictgen::InsensitiveStr::Ascii("cible"),
        dictgen::InsensitiveStr::Ascii("cuit"),
        dictgen::InsensitiveStr::Ascii("cumcision"),
        dictgen::InsensitiveStr::Ascii("cumference"),
        dictgen::InsensitiveStr::Ascii("cumstance"),
        dictgen::InsensitiveStr::Ascii("cumstances"),
        dictgen::InsensitiveStr::Ascii("cumstantial"),
        dictgen::InsensitiveStr::Ascii("elty"),
        dictgen::InsensitiveStr::Ascii("iostiy"),
        dictgen::InsensitiveStr::Ascii("iser"),
        dictgen::InsensitiveStr::Ascii("isers"),
        dictgen::InsensitiveStr::Ascii("ising"),
        dictgen::InsensitiveStr::Ascii("isoity"),
        dictgen::InsensitiveStr::Ascii("isve"),
        dictgen::InsensitiveStr::Ascii("rancies"),
        dictgen::InsensitiveStr::Ascii("rate"),
        dictgen::InsensitiveStr::Ascii("recny"),
        dictgen::InsensitiveStr::Ascii("rence"),
        dictgen::InsensitiveStr::Ascii("renctly"),
        dictgen::InsensitiveStr::Ascii("renices"),
        dictgen::InsensitiveStr::Ascii("renlty"),
        dictgen::InsensitiveStr::Ascii("renly"),
        dictgen::InsensitiveStr::Ascii("rens"),
        dictgen::InsensitiveStr::Ascii("rentfps"),
        dictgen::InsensitiveStr::Ascii("rentlys"),
        dictgen::InsensitiveStr::Ascii("rentpos"),
        dictgen::InsensitiveStr::Ascii("rentusa"),
        dictgen::InsensitiveStr::Ascii("renty"),
        dictgen::InsensitiveStr::Ascii("reny"),
        dictgen::InsensitiveStr::Ascii("rest"),
        dictgen::InsensitiveStr::Ascii("riculem"),
        dictgen::InsensitiveStr::Ascii("riculim"),
        dictgen::InsensitiveStr::Ascii("ricullum"),
        dictgen::InsensitiveStr::Ascii("riculm"),
        dictgen::InsensitiveStr::Ascii("riences"),
        dictgen::InsensitiveStr::Ascii("roption"),
        dictgen::InsensitiveStr::Ascii("sade"),
        dictgen::InsensitiveStr::Ascii("sader"),
        dictgen::InsensitiveStr::Ascii("saders"),
        dictgen::InsensitiveStr::Ascii("tian"),
    ],
    values: &[
        &["curtain"],
        &["crucial"],
        &["crucible"],
        &["circuit"],
        &["circumcision"],
        &["circumference"],
        &["circumstance"],
        &["circumstances"],
        &["circumstantial"],
        &["cruelty"],
        &["curiosity"],
        &["cruiser"],
        &["cruisers"],
        &["cruising"],
        &["curiosity"],
        &["cursive"],
        &["currencies"],
        &["curate"],
        &["currency"],
        &["currencies"],
        &["currency"],
        &["currencies"],
        &["currently"],
        &["currently"],
        &["currents"],
        &["currents"],
        &["currents"],
        &["currents"],
        &["currents"],
        &["currently"],
        &["currency"],
        &["currents"],
        &["curriculum"],
        &["curriculum"],
        &["curriculum"],
        &["curriculum"],
        &["currencies"],
        &["corruption"],
        &["crusade"],
        &["crusader"],
        &["crusaders"],
        &["curtain"],
    ],
    range: 4..=11,
};

static WORD_CUP_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_CUP_CHILDREN),
    value: None,
};

pub static WORD_CUP_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("baord"),
        dictgen::InsensitiveStr::Ascii("boad"),
        dictgen::InsensitiveStr::Ascii("borad"),
        dictgen::InsensitiveStr::Ascii("lrit"),
    ],
    values: &[&["cupboard"], &["cupboard"], &["cupboard"], &["culprit"]],
    range: 4..=5,
};

static WORD_CUN_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_CUN_CHILDREN),
    value: None,
};

pub static WORD_CUN_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("taminated")],
    values: &[&["contaminated"]],
    range: 9..=9,
};

static WORD_CUM_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_CUM_CHILDREN),
    value: None,
};

pub static WORD_CUM_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("bersone"),
        dictgen::InsensitiveStr::Ascii("bursome"),
        dictgen::InsensitiveStr::Ascii("polsory"),
        dictgen::InsensitiveStr::Ascii("ulatative"),
        dictgen::InsensitiveStr::Ascii("ulitive"),
    ],
    values: &[
        &["cumbersome"],
        &["cumbersome"],
        &["compulsory"],
        &["cumulative"],
        &["cumulative"],
    ],
    range: 7..=9,
};

static WORD_CUL_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_CUL_CHILDREN),
    value: None,
};

pub static WORD_CUL_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("iminating"),
        dictgen::InsensitiveStr::Ascii("itvate"),
        dictgen::InsensitiveStr::Ascii("print"),
        dictgen::InsensitiveStr::Ascii("rpit"),
        dictgen::InsensitiveStr::Ascii("terally"),
        dictgen::InsensitiveStr::Ascii("tivative"),
        dictgen::InsensitiveStr::Ascii("trual"),
        dictgen::InsensitiveStr::Ascii("trually"),
        dictgen::InsensitiveStr::Ascii("turaly"),
        dictgen::InsensitiveStr::Ascii("turels"),
        dictgen::InsensitiveStr::Ascii("turs"),
        dictgen::InsensitiveStr::Ascii("umative"),
        dictgen::InsensitiveStr::Ascii("utral"),
        dictgen::InsensitiveStr::Ascii("utrally"),
    ],
    values: &[
        &["culminating"],
        &["cultivate"],
        &["culprit"],
        &["culprit"],
        &["culturally"],
        &["cultivate"],
        &["cultural"],
        &["culturally"],
        &["culturally"],
        &["cultures"],
        &["cultures"],
        &["cumulative"],
        &["cultural"],
        &["culturally"],
    ],
    range: 4..=9,
};

static WORD_CUE_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_CUE_CHILDREN),
    value: None,
};

pub static WORD_CUE_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("stionable")],
    values: &[&["questionable"]],
    range: 9..=9,
};

static WORD_CUD_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_CUD_CHILDREN),
    value: None,
};

pub static WORD_CUD_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("dels"),
        dictgen::InsensitiveStr::Ascii("dleys"),
    ],
    values: &[&["cuddles"], &["cuddles"]],
    range: 4..=5,
};

static WORD_CUB_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_CUB_CHILDREN),
    value: None,
};

pub static WORD_CUB_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("cile"),
        dictgen::InsensitiveStr::Ascii("ilce"),
        dictgen::InsensitiveStr::Ascii("poard"),
    ],
    values: &[&["cubicle"], &["cubicle"], &["cupboard"]],
    range: 4..=5,
};

static WORD_CUA_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_CUA_CHILDREN),
    value: None,
};

pub static WORD_CUA_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("casian"),
        dictgen::InsensitiveStr::Ascii("sality"),
        dictgen::InsensitiveStr::Ascii("sing"),
        dictgen::InsensitiveStr::Ascii("tiously"),
    ],
    values: &[
        &["caucasian"],
        &["causality"],
        &["causing"],
        &["cautiously"],
    ],
    range: 4..=7,
};

static WORD_CT_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_CT_CHILDREN),
    value: None,
};

pub static WORD_CT_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("hluhu"),
        dictgen::InsensitiveStr::Ascii("huhlu"),
        dictgen::InsensitiveStr::Ascii("hulhlu"),
        dictgen::InsensitiveStr::Ascii("hulluh"),
        dictgen::InsensitiveStr::Ascii("huluh"),
        dictgen::InsensitiveStr::Ascii("uhlhu"),
    ],
    values: &[
        &["cthulhu"],
        &["cthulhu"],
        &["cthulhu"],
        &["cthulhu"],
        &["cthulhu"],
        &["cthulhu"],
    ],
    range: 5..=6,
};

static WORD_CR_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_CR_CHILDREN),
    value: None,
};

static WORD_CR_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    Some(&WORD_CRA_NODE),
    None,
    None,
    None,
    Some(&WORD_CRE_NODE),
    None,
    None,
    Some(&WORD_CRH_NODE),
    Some(&WORD_CRI_NODE),
    None,
    None,
    None,
    None,
    None,
    Some(&WORD_CRO_NODE),
    Some(&WORD_CRP_NODE),
    None,
    None,
    Some(&WORD_CRS_NODE),
    Some(&WORD_CRT_NODE),
    Some(&WORD_CRU_NODE),
    None,
    None,
    None,
    Some(&WORD_CRY_NODE),
    None,
];

static WORD_CRY_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_CRY_CHILDREN),
    value: None,
};

pub static WORD_CRY_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("pitc"),
        dictgen::InsensitiveStr::Ascii("stalens"),
        dictgen::InsensitiveStr::Ascii("stalisation"),
        dictgen::InsensitiveStr::Ascii("stalisk"),
        dictgen::InsensitiveStr::Ascii("stallis"),
        dictgen::InsensitiveStr::Ascii("stalls"),
        dictgen::InsensitiveStr::Ascii("stalus"),
        dictgen::InsensitiveStr::Ascii("stalys"),
        dictgen::InsensitiveStr::Ascii("stas"),
        dictgen::InsensitiveStr::Ascii("stsl"),
        dictgen::InsensitiveStr::Ascii("topgraphic"),
        dictgen::InsensitiveStr::Ascii("tpic"),
        dictgen::InsensitiveStr::Ascii("tsal"),
    ],
    values: &[
        &["cryptic"],
        &["crystals"],
        &["crystallisation"],
        &["crystals"],
        &["crystals"],
        &["crystals"],
        &["crystals"],
        &["crystals"],
        &["crystals"],
        &["crystals"],
        &["cryptographic"],
        &["cryptic"],
        &["crystal"],
    ],
    range: 4..=11,
};

static WORD_CRU_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_CRU_CHILDREN),
    value: None,
};

pub static WORD_CRU_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("asder"),
        dictgen::InsensitiveStr::Ascii("ciaal"),
        dictgen::InsensitiveStr::Ascii("cibe"),
        dictgen::InsensitiveStr::Ascii("cibel"),
        dictgen::InsensitiveStr::Ascii("cifiction"),
        dictgen::InsensitiveStr::Ascii("etly"),
        dictgen::InsensitiveStr::Ascii("ical"),
        dictgen::InsensitiveStr::Ascii("icble"),
        dictgen::InsensitiveStr::Ascii("lety"),
        dictgen::InsensitiveStr::Ascii("sdae"),
        dictgen::InsensitiveStr::Ascii("sdaer"),
        dictgen::InsensitiveStr::Ascii("sdaers"),
        dictgen::InsensitiveStr::Ascii("sier"),
        dictgen::InsensitiveStr::Ascii("siers"),
        dictgen::InsensitiveStr::Ascii("sies"),
        dictgen::InsensitiveStr::Ascii("siing"),
        dictgen::InsensitiveStr::Ascii("sive"),
        dictgen::InsensitiveStr::Ascii("tchers"),
        dictgen::InsensitiveStr::Ascii("tchetts"),
        dictgen::InsensitiveStr::Ascii("tchs"),
        dictgen::InsensitiveStr::Ascii("thces"),
    ],
    values: &[
        &["crusader"],
        &["crucial"],
        &["crucible"],
        &["crucible"],
        &["crucifixion"],
        &["cruelty"],
        &["crucial"],
        &["crucible"],
        &["cruelty"],
        &["crusade"],
        &["crusader"],
        &["crusaders"],
        &["cruiser"],
        &["cruisers"],
        &["cruises"],
        &["cruising"],
        &["cursive"],
        &["crutches"],
        &["crutches"],
        &["crutches"],
        &["crutches"],
    ],
    range: 4..=9,
};

static WORD_CRT_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_CRT_CHILDREN),
    value: None,
};

pub static WORD_CRT_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ical"),
        dictgen::InsensitiveStr::Ascii("icised"),
    ],
    values: &[&["critical"], &["criticised"]],
    range: 4..=6,
};

static WORD_CRS_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_CRS_CHILDREN),
    value: None,
};

pub static WORD_CRS_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("ytal")],
    values: &[&["crystal"]],
    range: 4..=4,
};

static WORD_CRP_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_CRP_CHILDREN),
    value: None,
};

pub static WORD_CRP_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("ytic")],
    values: &[&["cryptic"]],
    range: 4..=4,
};

static WORD_CRO_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_CRO_CHILDREN),
    value: None,
};

pub static WORD_CRO_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("atioa"),
        dictgen::InsensitiveStr::Ascii("ckodiles"),
        dictgen::InsensitiveStr::Ascii("codille"),
        dictgen::InsensitiveStr::Ascii("codiller"),
        dictgen::InsensitiveStr::Ascii("codilule"),
        dictgen::InsensitiveStr::Ascii("poration"),
        dictgen::InsensitiveStr::Ascii("porations"),
        dictgen::InsensitiveStr::Ascii("pses"),
        dictgen::InsensitiveStr::Ascii("sair"),
        dictgen::InsensitiveStr::Ascii("ssfie"),
        dictgen::InsensitiveStr::Ascii("ssfiter"),
        dictgen::InsensitiveStr::Ascii("ssfiters"),
        dictgen::InsensitiveStr::Ascii("sshar"),
        dictgen::InsensitiveStr::Ascii("sshiar"),
        dictgen::InsensitiveStr::Ascii("ssifre"),
        dictgen::InsensitiveStr::Ascii("sspot"),
        dictgen::InsensitiveStr::Ascii("wbahr"),
        dictgen::InsensitiveStr::Ascii("wm"),
    ],
    values: &[
        &["croatia"],
        &["crocodiles"],
        &["crocodile"],
        &["crocodile"],
        &["crocodile"],
        &["corporation"],
        &["corporations"],
        &["corpses"],
        &["corsair"],
        &["crossfire"],
        &["crossfire"],
        &["crossfire"],
        &["crosshair"],
        &["crosshair"],
        &["crossfire"],
        &["crosspost"],
        &["crowbar"],
        &["crown"],
    ],
    range: 2..=9,
};

static WORD_CRI_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_CRI_CHILDREN),
    value: None,
};

static WORD_CRI_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    None,
    None,
    Some(&WORD_CRIC_NODE),
    None,
    None,
    None,
    Some(&WORD_CRIG_NODE),
    None,
    None,
    None,
    None,
    None,
    Some(&WORD_CRIM_NODE),
    Some(&WORD_CRIN_NODE),
    None,
    None,
    None,
    None,
    None,
    Some(&WORD_CRIT_NODE),
    None,
    None,
    None,
    None,
    None,
    None,
];

static WORD_CRIT_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_CRIT_CHILDREN),
    value: None,
};

pub static WORD_CRIT_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("era"),
        dictgen::InsensitiveStr::Ascii("ereon"),
        dictgen::InsensitiveStr::Ascii("erias"),
        dictgen::InsensitiveStr::Ascii("icable"),
        dictgen::InsensitiveStr::Ascii("icallity"),
        dictgen::InsensitiveStr::Ascii("icaly"),
        dictgen::InsensitiveStr::Ascii("icarlo"),
        dictgen::InsensitiveStr::Ascii("icas"),
        dictgen::InsensitiveStr::Ascii("ices"),
        dictgen::InsensitiveStr::Ascii("icicing"),
        dictgen::InsensitiveStr::Ascii("icie"),
        dictgen::InsensitiveStr::Ascii("icies"),
        dictgen::InsensitiveStr::Ascii("iciing"),
        dictgen::InsensitiveStr::Ascii("icim"),
        dictgen::InsensitiveStr::Ascii("icis"),
        dictgen::InsensitiveStr::Ascii("icisied"),
        dictgen::InsensitiveStr::Ascii("icisim"),
        dictgen::InsensitiveStr::Ascii("icisims"),
        dictgen::InsensitiveStr::Ascii("icisize"),
        dictgen::InsensitiveStr::Ascii("icisme"),
        dictgen::InsensitiveStr::Ascii("icisn"),
        dictgen::InsensitiveStr::Ascii("icisng"),
        dictgen::InsensitiveStr::Ascii("icists"),
        dictgen::InsensitiveStr::Ascii("icisze"),
        dictgen::InsensitiveStr::Ascii("iciszed"),
        dictgen::InsensitiveStr::Ascii("iciszing"),
        dictgen::InsensitiveStr::Ascii("icizms"),
        dictgen::InsensitiveStr::Ascii("icizng"),
        dictgen::InsensitiveStr::Ascii("icms"),
        dictgen::InsensitiveStr::Ascii("icos"),
        dictgen::InsensitiveStr::Ascii("icts"),
        dictgen::InsensitiveStr::Ascii("icus"),
        dictgen::InsensitiveStr::Ascii("iera"),
        dictgen::InsensitiveStr::Ascii("isice"),
        dictgen::InsensitiveStr::Ascii("isiced"),
        dictgen::InsensitiveStr::Ascii("isicing"),
        dictgen::InsensitiveStr::Ascii("isicm"),
        dictgen::InsensitiveStr::Ascii("isicms"),
        dictgen::InsensitiveStr::Ascii("isicsm"),
        dictgen::InsensitiveStr::Ascii("ising"),
        dictgen::InsensitiveStr::Ascii("isiscm"),
        dictgen::InsensitiveStr::Ascii("isising"),
        dictgen::InsensitiveStr::Ascii("isism"),
        dictgen::InsensitiveStr::Ascii("isisms"),
        dictgen::InsensitiveStr::Ascii("isize"),
        dictgen::InsensitiveStr::Ascii("isizes"),
        dictgen::InsensitiveStr::Ascii("isizms"),
        dictgen::InsensitiveStr::Ascii("ized"),
        dictgen::InsensitiveStr::Ascii("iziced"),
        dictgen::InsensitiveStr::Ascii("izicing"),
        dictgen::InsensitiveStr::Ascii("izing"),
        dictgen::InsensitiveStr::Ascii("izised"),
        dictgen::InsensitiveStr::Ascii("izising"),
        dictgen::InsensitiveStr::Ascii("izisms"),
        dictgen::InsensitiveStr::Ascii("izized"),
        dictgen::InsensitiveStr::Ascii("izizing"),
    ],
    values: &[
        &["criteria"],
        &["criterion"],
        &["criteria"],
        &["critical"],
        &["critically"],
        &["critically"],
        &["critical"],
        &["critics"],
        &["critics"],
        &["criticising"],
        &["criticise"],
        &["criticise"],
        &["criticising"],
        &["criticisms"],
        &["critics"],
        &["criticise"],
        &["criticism"],
        &["criticisms"],
        &["criticise"],
        &["criticise"],
        &["criticising"],
        &["criticising"],
        &["critics"],
        &["criticise"],
        &["criticise"],
        &["criticising"],
        &["criticisms"],
        &["criticizing"],
        &["critics"],
        &["critics"],
        &["critics"],
        &["critics"],
        &["criteria"],
        &["criticise"],
        &["criticized"],
        &["criticizing"],
        &["criticism"],
        &["criticisms"],
        &["criticisms"],
        &["criticising"],
        &["criticisms"],
        &["criticising"],
        &["criticism"],
        &["criticisms"],
        &["criticize"],
        &["criticizes"],
        &["criticisms"],
        &["criticized"],
        &["criticized"],
        &["criticizing"],
        &["criticizing"],
        &["criticised"],
        &["criticising"],
        &["criticisms"],
        &["criticized"],
        &["criticizing"],
    ],
    range: 3..=8,
};

static WORD_CRIN_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_CRIN_CHILDREN),
    value: None,
};

pub static WORD_CRIN_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("gely"),
        dictgen::InsensitiveStr::Ascii("gery"),
        dictgen::InsensitiveStr::Ascii("gewhorty"),
        dictgen::InsensitiveStr::Ascii("geworhty"),
        dictgen::InsensitiveStr::Ascii("geworhy"),
        dictgen::InsensitiveStr::Ascii("geworthey"),
        dictgen::InsensitiveStr::Ascii("geworthly"),
        dictgen::InsensitiveStr::Ascii("geworty"),
        dictgen::InsensitiveStr::Ascii("gewothy"),
        dictgen::InsensitiveStr::Ascii("gewrothy"),
        dictgen::InsensitiveStr::Ascii("gyworthy"),
    ],
    values: &[
        &["cringey"],
        &["cringey"],
        &["cringeworthy"],
        &["cringeworthy"],
        &["cringeworthy"],
        &["cringeworthy"],
        &["cringeworthy"],
        &["cringeworthy"],
        &["cringeworthy"],
        &["cringeworthy"],
        &["cringeworthy"],
    ],
    range: 4..=9,
};

static WORD_CRIM_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_CRIM_CHILDREN),
    value: None,
};

pub static WORD_CRIM_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("anally"),
        dictgen::InsensitiveStr::Ascii("inalty"),
        dictgen::InsensitiveStr::Ascii("inalul"),
        dictgen::InsensitiveStr::Ascii("inaly"),
    ],
    values: &[
        &["criminally"],
        &["criminally"],
        &["criminally"],
        &["criminally"],
    ],
    range: 5..=6,
};

static WORD_CRIG_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_CRIG_CHILDREN),
    value: None,
};

pub static WORD_CRIG_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("neworthy")],
    values: &[&["cringeworthy"]],
    range: 8..=8,
};

static WORD_CRIC_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_CRIC_CHILDREN),
    value: None,
};

pub static WORD_CRIC_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("itising"),
        dictgen::InsensitiveStr::Ascii("ketts"),
        dictgen::InsensitiveStr::Ascii("les"),
        dictgen::InsensitiveStr::Ascii("ling"),
        dictgen::InsensitiveStr::Ascii("ulating"),
        dictgen::InsensitiveStr::Ascii("umference"),
    ],
    values: &[
        &["criticising"],
        &["crickets"],
        &["circles"],
        &["circling"],
        &["circulating"],
        &["circumference"],
    ],
    range: 3..=9,
};

static WORD_CRH_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_CRH_CHILDREN),
    value: None,
};

pub static WORD_CRH_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("istmas")],
    values: &[&["christmas"]],
    range: 6..=6,
};

static WORD_CRE_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_CRE_CHILDREN),
    value: None,
};

pub static WORD_CRE_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("acionism"),
        dictgen::InsensitiveStr::Ascii("aeted"),
        dictgen::InsensitiveStr::Ascii("amic"),
        dictgen::InsensitiveStr::Ascii("atein"),
        dictgen::InsensitiveStr::Ascii("aten"),
        dictgen::InsensitiveStr::Ascii("ater"),
        dictgen::InsensitiveStr::Ascii("ateur"),
        dictgen::InsensitiveStr::Ascii("atie"),
        dictgen::InsensitiveStr::Ascii("atien"),
        dictgen::InsensitiveStr::Ascii("ationis"),
        dictgen::InsensitiveStr::Ascii("ationisim"),
        dictgen::InsensitiveStr::Ascii("ationistas"),
        dictgen::InsensitiveStr::Ascii("ationkit"),
        dictgen::InsensitiveStr::Ascii("ationnism"),
        dictgen::InsensitiveStr::Ascii("ationnist"),
        dictgen::InsensitiveStr::Ascii("ationsim"),
        dictgen::InsensitiveStr::Ascii("ationsism"),
        dictgen::InsensitiveStr::Ascii("ationsist"),
        dictgen::InsensitiveStr::Ascii("ationsit"),
        dictgen::InsensitiveStr::Ascii("ationsits"),
        dictgen::InsensitiveStr::Ascii("ationsm"),
        dictgen::InsensitiveStr::Ascii("ationst"),
        dictgen::InsensitiveStr::Ascii("ationsts"),
        dictgen::InsensitiveStr::Ascii("ativelly"),
        dictgen::InsensitiveStr::Ascii("ativey"),
        dictgen::InsensitiveStr::Ascii("ativily"),
        dictgen::InsensitiveStr::Ascii("ativley"),
        dictgen::InsensitiveStr::Ascii("atue"),
        dictgen::InsensitiveStr::Ascii("dencials"),
        dictgen::InsensitiveStr::Ascii("dentails"),
        dictgen::InsensitiveStr::Ascii("dentaisl"),
        dictgen::InsensitiveStr::Ascii("dibillity"),
        dictgen::InsensitiveStr::Ascii("dibilty"),
        dictgen::InsensitiveStr::Ascii("dientals"),
        dictgen::InsensitiveStr::Ascii("dintials"),
        dictgen::InsensitiveStr::Ascii("edence"),
        dictgen::InsensitiveStr::Ascii("eperest"),
        dictgen::InsensitiveStr::Ascii("epes"),
        dictgen::InsensitiveStr::Ascii("epgin"),
        dictgen::InsensitiveStr::Ascii("epig"),
        dictgen::InsensitiveStr::Ascii("ulty"),
    ],
    values: &[
        &["creationism"],
        &["created"],
        &["ceramic"],
        &["creatine"],
        &["creatine"],
        &["creature"],
        &["creature"],
        &["creatine"],
        &["creatine"],
        &["creations"],
        &["creationism"],
        &["creationists"],
        &["creationist"],
        &["creationism"],
        &["creationist"],
        &["creationism"],
        &["creationism"],
        &["creationist"],
        &["creationist"],
        &["creationists"],
        &["creationism"],
        &["creationist"],
        &["creationists"],
        &["creatively"],
        &["creatively"],
        &["creatively"],
        &["creatively"],
        &["creature"],
        &["credentials"],
        &["credentials"],
        &["credentials"],
        &["credibility"],
        &["credibility"],
        &["credentials"],
        &["credentials"],
        &["credence"],
        &["creepers"],
        &["creepers"],
        &["creeping"],
        &["creeping"],
        &["cruelty"],
    ],
    range: 4..=10,
};

static WORD_CRA_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_CRA_CHILDREN),
    value: None,
};

pub static WORD_CRA_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("bine"),
        dictgen::InsensitiveStr::Ascii("lwed"),
        dictgen::InsensitiveStr::Ascii("nberrry"),
        dictgen::InsensitiveStr::Ascii("nbery"),
        dictgen::InsensitiveStr::Ascii("nkenstein"),
        dictgen::InsensitiveStr::Ascii("otia"),
        dictgen::InsensitiveStr::Ascii("penter"),
        dictgen::InsensitiveStr::Ascii("weld"),
        dictgen::InsensitiveStr::Ascii("yones"),
    ],
    values: &[
        &["carbine"],
        &["crawled"],
        &["cranberry"],
        &["cranberry"],
        &["frankenstein"],
        &["croatia"],
        &["carpenter"],
        &["crawled"],
        &["crayons"],
    ],
    range: 4..=9,
};

static WORD_CP_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_CP_CHILDREN),
    value: None,
};

pub static WORD_CP_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("atains"),
        dictgen::InsensitiveStr::Ascii("oy"),
    ],
    values: &[&["captains"], &["coy"]],
    range: 2..=6,
};

static WORD_CO_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_CO_CHILDREN),
    value: None,
};

static WORD_CO_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    Some(&WORD_COA_NODE),
    None,
    Some(&WORD_COC_NODE),
    None,
    Some(&WORD_COE_NODE),
    Some(&WORD_COF_NODE),
    Some(&WORD_COG_NODE),
    Some(&WORD_COH_NODE),
    Some(&WORD_COI_NODE),
    None,
    None,
    Some(&WORD_COL_NODE),
    Some(&WORD_COM_NODE),
    Some(&WORD_CON_NODE),
    Some(&WORD_COO_NODE),
    Some(&WORD_COP_NODE),
    None,
    Some(&WORD_COR_NODE),
    Some(&WORD_COS_NODE),
    None,
    Some(&WORD_COU_NODE),
    Some(&WORD_COV_NODE),
    None,
    None,
    Some(&WORD_COY_NODE),
    None,
];

static WORD_COY_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_COY_CHILDREN),
    value: None,
};

pub static WORD_COY_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("otees"),
        dictgen::InsensitiveStr::Ascii("toes"),
    ],
    values: &[&["coyotes"], &["coyotes"]],
    range: 4..=5,
};

static WORD_COV_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_COV_CHILDREN),
    value: None,
};

pub static WORD_COV_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("anent"),
        dictgen::InsensitiveStr::Ascii("enat"),
        dictgen::InsensitiveStr::Ascii("enental"),
        dictgen::InsensitiveStr::Ascii("erted"),
        dictgen::InsensitiveStr::Ascii("nersation"),
    ],
    values: &[
        &["covenant"],
        &["covenant"],
        &["covenant"],
        &["converted"],
        &["conservation"],
    ],
    range: 4..=9,
};

static WORD_COU_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_COU_CHILDREN),
    value: None,
};

static WORD_COU_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    None,
    None,
    Some(&WORD_COUC_NODE),
    Some(&WORD_COUD_NODE),
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    Some(&WORD_COUL_NODE),
    None,
    Some(&WORD_COUN_NODE),
    None,
    None,
    None,
    Some(&WORD_COUR_NODE),
    Some(&WORD_COUS_NODE),
    Some(&WORD_COUT_NODE),
    None,
    None,
    None,
    None,
    None,
    None,
];

static WORD_COUT_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_COUT_CHILDREN),
    value: None,
};

pub static WORD_COUT_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("neract"),
        dictgen::InsensitiveStr::Ascii("nered"),
        dictgen::InsensitiveStr::Ascii("nerfeit"),
        dictgen::InsensitiveStr::Ascii("nering"),
        dictgen::InsensitiveStr::Ascii("nerpart"),
        dictgen::InsensitiveStr::Ascii("nerparts"),
        dictgen::InsensitiveStr::Ascii("nerplay"),
        dictgen::InsensitiveStr::Ascii("nerpoint"),
        dictgen::InsensitiveStr::Ascii("nerproductive"),
        dictgen::InsensitiveStr::Ascii("ners"),
    ],
    values: &[
        &["counteract"],
        &["countered"],
        &["counterfeit"],
        &["countering"],
        &["counterpart"],
        &["counterparts"],
        &["counterplay"],
        &["counterpoint"],
        &["counterproductive"],
        &["counters"],
    ],
    range: 4..=13,
};

static WORD_COUS_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_COUS_CHILDREN),
    value: None,
};

pub static WORD_COUS_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ines"),
        dictgen::InsensitiveStr::Ascii("ings"),
        dictgen::InsensitiveStr::Ascii("nelors"),
    ],
    values: &[&["cousins"], &["cousins"], &["counselors"]],
    range: 4..=6,
};

static WORD_COUR_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_COUR_CHILDREN),
    value: None,
};

pub static WORD_COUR_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("cework"),
        dictgen::InsensitiveStr::Ascii("ching"),
        dictgen::InsensitiveStr::Ascii("sefork"),
        dictgen::InsensitiveStr::Ascii("tesey"),
        dictgen::InsensitiveStr::Ascii("testy"),
        dictgen::InsensitiveStr::Ascii("tey"),
        dictgen::InsensitiveStr::Ascii("thosue"),
        dictgen::InsensitiveStr::Ascii("thourse"),
        dictgen::InsensitiveStr::Ascii("trom"),
        dictgen::InsensitiveStr::Ascii("trooom"),
        dictgen::InsensitiveStr::Ascii("tsey"),
        dictgen::InsensitiveStr::Ascii("urier"),
    ],
    values: &[
        &["coursework"],
        &["crouching"],
        &["coursework"],
        &["courtesy"],
        &["courtesy"],
        &["courtesy"],
        &["courthouse"],
        &["courthouse"],
        &["courtroom"],
        &["courtroom"],
        &["courtesy"],
        &["courier"],
    ],
    range: 3..=7,
};

static WORD_COUN_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_COUN_CHILDREN),
    value: None,
};

static WORD_COUN_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    None,
    None,
    Some(&WORD_COUNC_NODE),
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    Some(&WORD_COUNR_NODE),
    Some(&WORD_COUNS_NODE),
    Some(&WORD_COUNT_NODE),
    None,
    None,
    None,
    None,
    None,
    None,
];

static WORD_COUNT_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_COUNT_CHILDREN),
    value: None,
};

pub static WORD_COUNT_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ains"),
        dictgen::InsensitiveStr::Ascii("epart"),
        dictgen::InsensitiveStr::Ascii("eratk"),
        dictgen::InsensitiveStr::Ascii("erbat"),
        dictgen::InsensitiveStr::Ascii("ercat"),
        dictgen::InsensitiveStr::Ascii("ercoat"),
        dictgen::InsensitiveStr::Ascii("ercut"),
        dictgen::InsensitiveStr::Ascii("erd"),
        dictgen::InsensitiveStr::Ascii("eredit"),
        dictgen::InsensitiveStr::Ascii("eres"),
        dictgen::InsensitiveStr::Ascii("erfact"),
        dictgen::InsensitiveStr::Ascii("erfait"),
        dictgen::InsensitiveStr::Ascii("erfeight"),
        dictgen::InsensitiveStr::Ascii("erfest"),
        dictgen::InsensitiveStr::Ascii("erfiet"),
        dictgen::InsensitiveStr::Ascii("erfiets"),
        dictgen::InsensitiveStr::Ascii("erfited"),
        dictgen::InsensitiveStr::Ascii("eries"),
        dictgen::InsensitiveStr::Ascii("erpaly"),
        dictgen::InsensitiveStr::Ascii("erpary"),
        dictgen::InsensitiveStr::Ascii("erpath"),
        dictgen::InsensitiveStr::Ascii("erpats"),
        dictgen::InsensitiveStr::Ascii("erpont"),
        dictgen::InsensitiveStr::Ascii("erporductive"),
        dictgen::InsensitiveStr::Ascii("erprodutive"),
        dictgen::InsensitiveStr::Ascii("erract"),
        dictgen::InsensitiveStr::Ascii("erracts"),
        dictgen::InsensitiveStr::Ascii("erside"),
        dictgen::InsensitiveStr::Ascii("ert"),
        dictgen::InsensitiveStr::Ascii("ertrap"),
        dictgen::InsensitiveStr::Ascii("ertraps"),
        dictgen::InsensitiveStr::Ascii("es"),
        dictgen::InsensitiveStr::Ascii("ires"),
        dictgen::InsensitiveStr::Ascii("oring"),
        dictgen::InsensitiveStr::Ascii("res"),
        dictgen::InsensitiveStr::Ascii("riside"),
        dictgen::InsensitiveStr::Ascii("rycide"),
        dictgen::InsensitiveStr::Ascii("ryies"),
        dictgen::InsensitiveStr::Ascii("rying"),
        dictgen::InsensitiveStr::Ascii("rywides"),
        dictgen::InsensitiveStr::Ascii("rywise"),
    ],
    values: &[
        &["contains"],
        &["counteract"],
        &["counteract"],
        &["counteract"],
        &["counteract"],
        &["counteract"],
        &["counteract"],
        &["countered"],
        &["counterfeit"],
        &["counters"],
        &["counteract"],
        &["counterfeit"],
        &["counterfeit"],
        &["counterfeit"],
        &["counterfeit"],
        &["counterfeit"],
        &["counterfeit"],
        &["counters"],
        &["counterplay"],
        &["counterplay"],
        &["counterpart"],
        &["counterparts"],
        &["counterpoint"],
        &["counterproductive"],
        &["counterproductive"],
        &["counterpart"],
        &["counterparts"],
        &["countryside"],
        &["counteract"],
        &["counterpart"],
        &["counterparts"],
        &["counters"],
        &["countries"],
        &["countering"],
        &["counters"],
        &["countryside"],
        &["countryside"],
        &["countryside"],
        &["countering"],
        &["countryside"],
        &["countryside"],
    ],
    range: 2..=12,
};

static WORD_COUNS_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_COUNS_CHILDREN),
    value: None,
};

pub static WORD_COUNS_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("eil"),
        dictgen::InsensitiveStr::Ascii("elers"),
        dictgen::InsensitiveStr::Ascii("ellling"),
        dictgen::InsensitiveStr::Ascii("ellng"),
        dictgen::InsensitiveStr::Ascii("ilers"),
        dictgen::InsensitiveStr::Ascii("iling"),
        dictgen::InsensitiveStr::Ascii("illing"),
        dictgen::InsensitiveStr::Ascii("ilors"),
        dictgen::InsensitiveStr::Ascii("le"),
        dictgen::InsensitiveStr::Ascii("ole"),
        dictgen::InsensitiveStr::Ascii("olers"),
        dictgen::InsensitiveStr::Ascii("oling"),
    ],
    values: &[
        &["counsel"],
        &["counselors"],
        &["counselling"],
        &["counselling"],
        &["counselors"],
        &["counseling"],
        &["counselling"],
        &["counselors"],
        &["counsel"],
        &["counsel"],
        &["counselors"],
        &["counseling"],
    ],
    range: 2..=7,
};

static WORD_COUNR_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_COUNR_CHILDREN),
    value: None,
};

pub static WORD_COUNR_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ies"),
        dictgen::InsensitiveStr::Ascii("tyside"),
    ],
    values: &[&["countries"], &["countryside"]],
    range: 3..=6,
};

static WORD_COUNC_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_COUNC_CHILDREN),
    value: None,
};

pub static WORD_COUNC_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("eling"),
        dictgen::InsensitiveStr::Ascii("ellor"),
        dictgen::InsensitiveStr::Ascii("ellors"),
        dictgen::InsensitiveStr::Ascii("elors"),
        dictgen::InsensitiveStr::Ascii("idental"),
        dictgen::InsensitiveStr::Ascii("identally"),
        dictgen::InsensitiveStr::Ascii("ilers"),
        dictgen::InsensitiveStr::Ascii("iles"),
        dictgen::InsensitiveStr::Ascii("ills"),
        dictgen::InsensitiveStr::Ascii("ilos"),
    ],
    values: &[
        &["counseling"],
        &["councillor"],
        &["councillors"],
        &["counselors"],
        &["coincidental"],
        &["coincidentally"],
        &["councils"],
        &["councils"],
        &["councils"],
        &["councils"],
    ],
    range: 4..=9,
};

static WORD_COUL_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_COUL_CHILDREN),
    value: None,
};

pub static WORD_COUL_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("dnot"),
        dictgen::InsensitiveStr::Ascii("mns"),
        dictgen::InsensitiveStr::Ascii("ndt"),
        dictgen::InsensitiveStr::Ascii("ored"),
    ],
    values: &[&["couldnt"], &["columns"], &["couldnt"], &["colored"]],
    range: 3..=4,
};

static WORD_COUD_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_COUD_CHILDREN),
    value: None,
};

pub static WORD_COUD_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("l"),
        dictgen::InsensitiveStr::Ascii("lnt"),
    ],
    values: &[&["could"], &["couldnt"]],
    range: 1..=3,
};

static WORD_COUC_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_COUC_CHILDREN),
    value: None,
};

pub static WORD_COUC_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("il")],
    values: &[&["council"]],
    range: 2..=2,
};

static WORD_COS_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_COS_CHILDREN),
    value: None,
};

pub static WORD_COS_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("emtic"),
        dictgen::InsensitiveStr::Ascii("emtics"),
        dictgen::InsensitiveStr::Ascii("meticas"),
        dictgen::InsensitiveStr::Ascii("meticos"),
        dictgen::InsensitiveStr::Ascii("titution"),
        dictgen::InsensitiveStr::Ascii("tomizable"),
        dictgen::InsensitiveStr::Ascii("tomization"),
        dictgen::InsensitiveStr::Ascii("tumise"),
        dictgen::InsensitiveStr::Ascii("tumizable"),
        dictgen::InsensitiveStr::Ascii("tumization"),
        dictgen::InsensitiveStr::Ascii("tumizations"),
        dictgen::InsensitiveStr::Ascii("tumized"),
        dictgen::InsensitiveStr::Ascii("tums"),
        dictgen::InsensitiveStr::Ascii("utmes"),
    ],
    values: &[
        &["cosmetic"],
        &["cosmetics"],
        &["cosmetics"],
        &["cosmetics"],
        &["constitution"],
        &["customizable"],
        &["customization"],
        &["costumes"],
        &["customizable"],
        &["customization"],
        &["customization"],
        &["customized"],
        &["costumes"],
        &["costumes"],
    ],
    range: 4..=11,
};

static WORD_COR_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_COR_CHILDREN),
    value: None,
};

static WORD_COR_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    Some(&WORD_CORA_NODE),
    None,
    Some(&WORD_CORC_NODE),
    None,
    None,
    None,
    None,
    None,
    Some(&WORD_CORI_NODE),
    None,
    None,
    None,
    None,
    Some(&WORD_CORN_NODE),
    Some(&WORD_CORO_NODE),
    Some(&WORD_CORP_NODE),
    None,
    Some(&WORD_CORR_NODE),
    Some(&WORD_CORS_NODE),
    None,
    Some(&WORD_CORU_NODE),
    None,
    Some(&WORD_CORW_NODE),
    None,
    None,
    None,
];

static WORD_CORW_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_CORW_CHILDREN),
    value: None,
};

pub static WORD_CORW_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("bar")],
    values: &[&["crowbar"]],
    range: 3..=3,
};

static WORD_CORU_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_CORU_CHILDREN),
    value: None,
};

pub static WORD_CORU_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("ching")],
    values: &[&["crouching"]],
    range: 5..=5,
};

static WORD_CORS_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_CORS_CHILDREN),
    value: None,
};

pub static WORD_CORS_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ari"),
        dictgen::InsensitiveStr::Ascii("iar"),
        dictgen::InsensitiveStr::Ascii("pes"),
        dictgen::InsensitiveStr::Ascii("sfire"),
        dictgen::InsensitiveStr::Ascii("shair"),
        dictgen::InsensitiveStr::Ascii("spost"),
    ],
    values: &[
        &["corsair"],
        &["corsair"],
        &["corpses"],
        &["crossfire"],
        &["crosshair"],
        &["crosspost"],
    ],
    range: 3..=5,
};

static WORD_CORR_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_CORR_CHILDREN),
    value: None,
};

static WORD_CORR_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    Some(&WORD_CORRA_NODE),
    None,
    None,
    Some(&WORD_CORRD_NODE),
    Some(&WORD_CORRE_NODE),
    None,
    None,
    None,
    Some(&WORD_CORRI_NODE),
    None,
    None,
    None,
    None,
    None,
    Some(&WORD_CORRO_NODE),
    Some(&WORD_CORRP_NODE),
    None,
    None,
    None,
    None,
    Some(&WORD_CORRU_NODE),
    None,
    None,
    None,
    None,
    None,
];

static WORD_CORRU_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_CORRU_CHILDREN),
    value: None,
};

pub static WORD_CORRU_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("lates"),
        dictgen::InsensitiveStr::Ascii("pcion"),
        dictgen::InsensitiveStr::Ascii("ptin"),
        dictgen::InsensitiveStr::Ascii("pto"),
    ],
    values: &[
        &["correlates"],
        &["corruption"],
        &["corruption"],
        &["corruption"],
    ],
    range: 3..=5,
};

static WORD_CORRP_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_CORRP_CHILDREN),
    value: None,
};

pub static WORD_CORRP_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("ution")],
    values: &[&["corruption"]],
    range: 5..=5,
};

static WORD_CORRO_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_CORRO_CHILDREN),
    value: None,
};

pub static WORD_CORRO_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("lated"),
        dictgen::InsensitiveStr::Ascii("lates"),
        dictgen::InsensitiveStr::Ascii("lation"),
        dictgen::InsensitiveStr::Ascii("spond"),
        dictgen::InsensitiveStr::Ascii("spondence"),
        dictgen::InsensitiveStr::Ascii("sponding"),
        dictgen::InsensitiveStr::Ascii("sponds"),
    ],
    values: &[
        &["correlated"],
        &["correlates"],
        &["correlation"],
        &["correspond"],
        &["correspondence"],
        &["corresponding"],
        &["corresponds"],
    ],
    range: 5..=9,
};

static WORD_CORRI_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_CORRI_CHILDREN),
    value: None,
};

pub static WORD_CORRI_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("door"),
        dictgen::InsensitiveStr::Ascii("lated"),
        dictgen::InsensitiveStr::Ascii("lates"),
        dictgen::InsensitiveStr::Ascii("lation"),
        dictgen::InsensitiveStr::Ascii("spond"),
        dictgen::InsensitiveStr::Ascii("spondant"),
        dictgen::InsensitiveStr::Ascii("spondants"),
        dictgen::InsensitiveStr::Ascii("sponded"),
        dictgen::InsensitiveStr::Ascii("spondence"),
        dictgen::InsensitiveStr::Ascii("sponding"),
        dictgen::InsensitiveStr::Ascii("sponds"),
    ],
    values: &[
        &["corridor"],
        &["correlated"],
        &["correlates"],
        &["correlation"],
        &["correspond"],
        &["correspondent"],
        &["correspondents"],
        &["corresponded"],
        &["correspondence"],
        &["corresponding"],
        &["corresponds"],
    ],
    range: 4..=9,
};

static WORD_CORRE_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_CORRE_CHILDREN),
    value: None,
};

pub static WORD_CORRE_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ccion"),
        dictgen::InsensitiveStr::Ascii("citon"),
        dictgen::InsensitiveStr::Ascii("clty"),
        dictgen::InsensitiveStr::Ascii("cters"),
        dictgen::InsensitiveStr::Ascii("ctess"),
        dictgen::InsensitiveStr::Ascii("ctin"),
        dictgen::InsensitiveStr::Ascii("ctings"),
        dictgen::InsensitiveStr::Ascii("ctionals"),
        dictgen::InsensitiveStr::Ascii("ctivo"),
        dictgen::InsensitiveStr::Ascii("ctivos"),
        dictgen::InsensitiveStr::Ascii("ctons"),
        dictgen::InsensitiveStr::Ascii("cty"),
        dictgen::InsensitiveStr::Ascii("gated"),
        dictgen::InsensitiveStr::Ascii("kting"),
        dictgen::InsensitiveStr::Ascii("ktions"),
        dictgen::InsensitiveStr::Ascii("ktness"),
        dictgen::InsensitiveStr::Ascii("lacion"),
        dictgen::InsensitiveStr::Ascii("latas"),
        dictgen::InsensitiveStr::Ascii("latie"),
        dictgen::InsensitiveStr::Ascii("laties"),
        dictgen::InsensitiveStr::Ascii("lato"),
        dictgen::InsensitiveStr::Ascii("latos"),
        dictgen::InsensitiveStr::Ascii("nti"),
        dictgen::InsensitiveStr::Ascii("ponding"),
        dictgen::InsensitiveStr::Ascii("posding"),
        dictgen::InsensitiveStr::Ascii("psondence"),
        dictgen::InsensitiveStr::Ascii("psonding"),
        dictgen::InsensitiveStr::Ascii("spend"),
        dictgen::InsensitiveStr::Ascii("spondant"),
        dictgen::InsensitiveStr::Ascii("spondants"),
        dictgen::InsensitiveStr::Ascii("spondece"),
        dictgen::InsensitiveStr::Ascii("spondense"),
        dictgen::InsensitiveStr::Ascii("spondente"),
        dictgen::InsensitiveStr::Ascii("sponders"),
        dictgen::InsensitiveStr::Ascii("spondes"),
        dictgen::InsensitiveStr::Ascii("spondig"),
        dictgen::InsensitiveStr::Ascii("sponing"),
        dictgen::InsensitiveStr::Ascii("sponsing"),
        dictgen::InsensitiveStr::Ascii("tly"),
    ],
    values: &[
        &["correction"],
        &["corrections"],
        &["correctly"],
        &["correctors"],
        &["correctness"],
        &["correction"],
        &["corrections"],
        &["corrections"],
        &["correction"],
        &["corrections"],
        &["corrections"],
        &["correctly"],
        &["correlated"],
        &["correcting"],
        &["corrections"],
        &["correctness"],
        &["correlation"],
        &["correlates"],
        &["correlated"],
        &["correlates"],
        &["correlation"],
        &["correlates"],
        &["correcting"],
        &["corresponding"],
        &["corresponding"],
        &["correspondence"],
        &["corresponding"],
        &["correspond"],
        &["correspondent"],
        &["correspondents"],
        &["correspondence"],
        &["correspondence"],
        &["correspondence"],
        &["corresponds"],
        &["corresponds"],
        &["corresponding"],
        &["corresponding"],
        &["corresponding"],
        &["correctly"],
    ],
    range: 3..=9,
};

static WORD_CORRD_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_CORRD_CHILDREN),
    value: None,
};

pub static WORD_CORRD_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ination"),
        dictgen::InsensitiveStr::Ascii("ior"),
    ],
    values: &[&["coordination"], &["corridor"]],
    range: 3..=7,
};

static WORD_CORRA_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_CORRA_CHILDREN),
    value: None,
};

pub static WORD_CORRA_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("lated"),
        dictgen::InsensitiveStr::Ascii("lates"),
        dictgen::InsensitiveStr::Ascii("lation"),
    ],
    values: &[&["correlated"], &["correlates"], &["correlation"]],
    range: 5..=6,
};

static WORD_CORP_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_CORP_CHILDREN),
    value: None,
};

pub static WORD_CORP_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("arate"),
        dictgen::InsensitiveStr::Ascii("aration"),
        dictgen::InsensitiveStr::Ascii("arations"),
        dictgen::InsensitiveStr::Ascii("eration"),
        dictgen::InsensitiveStr::Ascii("erations"),
        dictgen::InsensitiveStr::Ascii("oracion"),
        dictgen::InsensitiveStr::Ascii("oratie"),
        dictgen::InsensitiveStr::Ascii("orativo"),
        dictgen::InsensitiveStr::Ascii("orativos"),
        dictgen::InsensitiveStr::Ascii("roate"),
        dictgen::InsensitiveStr::Ascii("roations"),
        dictgen::InsensitiveStr::Ascii("sers"),
    ],
    values: &[
        &["corporate"],
        &["corporation"],
        &["corporations"],
        &["corporation"],
        &["corporations"],
        &["corporation"],
        &["corporate"],
        &["corporation"],
        &["corporations"],
        &["corporate"],
        &["corporations"],
        &["corpses"],
    ],
    range: 4..=8,
};

static WORD_CORO_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_CORO_CHILDREN),
    value: None,
};

pub static WORD_CORO_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("llla"),
        dictgen::InsensitiveStr::Ascii("lloa"),
        dictgen::InsensitiveStr::Ascii("sion"),
    ],
    values: &[&["corolla"], &["corolla"], &["corrosion"]],
    range: 4..=4,
};

static WORD_CORN_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_CORN_CHILDREN),
    value: None,
};

pub static WORD_CORN_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ithians"),
        dictgen::InsensitiveStr::Ascii("mitted"),
    ],
    values: &[&["corinthians"], &["committed"]],
    range: 6..=7,
};

static WORD_CORI_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_CORI_CHILDREN),
    value: None,
};

pub static WORD_CORI_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("dal"),
        dictgen::InsensitiveStr::Ascii("nthains"),
        dictgen::InsensitiveStr::Ascii("nthans"),
        dictgen::InsensitiveStr::Ascii("ntheans"),
        dictgen::InsensitiveStr::Ascii("nthianos"),
        dictgen::InsensitiveStr::Ascii("nthias"),
        dictgen::InsensitiveStr::Ascii("nthiens"),
        dictgen::InsensitiveStr::Ascii("nthinans"),
        dictgen::InsensitiveStr::Ascii("nthinas"),
        dictgen::InsensitiveStr::Ascii("nthins"),
    ],
    values: &[
        &["cordial"],
        &["corinthians"],
        &["corinthians"],
        &["corinthians"],
        &["corinthians"],
        &["corinthians"],
        &["corinthians"],
        &["corinthians"],
        &["corinthians"],
        &["corinthians"],
    ],
    range: 3..=8,
};

static WORD_CORC_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_CORC_CHILDREN),
    value: None,
};

pub static WORD_CORC_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("odile")],
    values: &[&["crocodile"]],
    range: 5..=5,
};

static WORD_CORA_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_CORA_CHILDREN),
    value: None,
};

pub static WORD_CORA_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("lina"),
        dictgen::InsensitiveStr::Ascii("sir"),
        dictgen::InsensitiveStr::Ascii("tia"),
    ],
    values: &[&["carolina"], &["corsair"], &["croatia"]],
    range: 3..=4,
};

static WORD_COP_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_COP_CHILDREN),
    value: None,
};

pub static WORD_COP_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ehnagen"),
        dictgen::InsensitiveStr::Ascii("enaghen"),
        dictgen::InsensitiveStr::Ascii("enahgen"),
        dictgen::InsensitiveStr::Ascii("engagen"),
        dictgen::InsensitiveStr::Ascii("engahen"),
        dictgen::InsensitiveStr::Ascii("enhaagen"),
        dictgen::InsensitiveStr::Ascii("enhaegen"),
        dictgen::InsensitiveStr::Ascii("enhagan"),
        dictgen::InsensitiveStr::Ascii("enhagn"),
        dictgen::InsensitiveStr::Ascii("enhague"),
        dictgen::InsensitiveStr::Ascii("enhaguen"),
        dictgen::InsensitiveStr::Ascii("enhagun"),
        dictgen::InsensitiveStr::Ascii("enhangen"),
        dictgen::InsensitiveStr::Ascii("enhaven"),
        dictgen::InsensitiveStr::Ascii("enhegan"),
        dictgen::InsensitiveStr::Ascii("metitors"),
        dictgen::InsensitiveStr::Ascii("rorate"),
        dictgen::InsensitiveStr::Ascii("roration"),
        dictgen::InsensitiveStr::Ascii("rorations"),
        dictgen::InsensitiveStr::Ascii("rses"),
        dictgen::InsensitiveStr::Ascii("uter"),
        dictgen::InsensitiveStr::Ascii("yrighed"),
        dictgen::InsensitiveStr::Ascii("yrigted"),
        dictgen::InsensitiveStr::Ascii("yrigthed"),
        dictgen::InsensitiveStr::Ascii("ywrite"),
    ],
    values: &[
        &["copenhagen"],
        &["copenhagen"],
        &["copenhagen"],
        &["copenhagen"],
        &["copenhagen"],
        &["copenhagen"],
        &["copenhagen"],
        &["copenhagen"],
        &["copenhagen"],
        &["copenhagen"],
        &["copenhagen"],
        &["copenhagen"],
        &["copenhagen"],
        &["copenhagen"],
        &["copenhagen"],
        &["competitors"],
        &["corporate"],
        &["corporation"],
        &["corporations"],
        &["corpses"],
        &["computer"],
        &["copyrighted"],
        &["copyrighted"],
        &["copyrighted"],
        &["copyright"],
    ],
    range: 4..=9,
};

static WORD_COO_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_COO_CHILDREN),
    value: None,
};

pub static WORD_COO_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ldows"),
        dictgen::InsensitiveStr::Ascii("ldwons"),
        dictgen::InsensitiveStr::Ascii("peracion"),
        dictgen::InsensitiveStr::Ascii("perativo"),
        dictgen::InsensitiveStr::Ascii("peratve"),
        dictgen::InsensitiveStr::Ascii("poration"),
        dictgen::InsensitiveStr::Ascii("porative"),
        dictgen::InsensitiveStr::Ascii("rdenate"),
        dictgen::InsensitiveStr::Ascii("rdenated"),
        dictgen::InsensitiveStr::Ascii("rdenates"),
        dictgen::InsensitiveStr::Ascii("rdenation"),
        dictgen::InsensitiveStr::Ascii("rdiante"),
        dictgen::InsensitiveStr::Ascii("rdianted"),
        dictgen::InsensitiveStr::Ascii("rdiantes"),
        dictgen::InsensitiveStr::Ascii("rdiantion"),
        dictgen::InsensitiveStr::Ascii("rdiantor"),
        dictgen::InsensitiveStr::Ascii("rdinacion"),
        dictgen::InsensitiveStr::Ascii("rdinador"),
        dictgen::InsensitiveStr::Ascii("rdinants"),
        dictgen::InsensitiveStr::Ascii("rdinar"),
        dictgen::InsensitiveStr::Ascii("rdinare"),
        dictgen::InsensitiveStr::Ascii("rdinater"),
        dictgen::InsensitiveStr::Ascii("rdinaters"),
        dictgen::InsensitiveStr::Ascii("rdinatior"),
        dictgen::InsensitiveStr::Ascii("rdinato"),
        dictgen::InsensitiveStr::Ascii("rdinaton"),
        dictgen::InsensitiveStr::Ascii("rdinatore"),
        dictgen::InsensitiveStr::Ascii("rdinats"),
        dictgen::InsensitiveStr::Ascii("rdine"),
        dictgen::InsensitiveStr::Ascii("rdonate"),
        dictgen::InsensitiveStr::Ascii("rdonated"),
        dictgen::InsensitiveStr::Ascii("rdonates"),
        dictgen::InsensitiveStr::Ascii("rdonation"),
        dictgen::InsensitiveStr::Ascii("rdonator"),
        dictgen::InsensitiveStr::Ascii("responding"),
        dictgen::InsensitiveStr::Ascii("ridnate"),
        dictgen::InsensitiveStr::Ascii("ridnated"),
        dictgen::InsensitiveStr::Ascii("ridnates"),
        dictgen::InsensitiveStr::Ascii("ridnation"),
        dictgen::InsensitiveStr::Ascii("ridnator"),
        dictgen::InsensitiveStr::Ascii("rperation"),
        dictgen::InsensitiveStr::Ascii("rperations"),
    ],
    values: &[
        &["cooldowns"],
        &["cooldowns"],
        &["cooperation"],
        &["cooperation"],
        &["cooperative"],
        &["cooperation"],
        &["cooperative"],
        &["coordinate"],
        &["coordinated"],
        &["coordinates"],
        &["coordination"],
        &["coordinate"],
        &["coordinated"],
        &["coordinates"],
        &["coordination"],
        &["coordinator"],
        &["coordination"],
        &["coordinator"],
        &["coordinates"],
        &["coordinator"],
        &["coordinate"],
        &["coordinator"],
        &["coordinates"],
        &["coordinator"],
        &["coordination"],
        &["coordination"],
        &["coordinate"],
        &["coordinates"],
        &["coordinate"],
        &["coordinate"],
        &["coordinated"],
        &["coordinates"],
        &["coordination"],
        &["coordinator"],
        &["corresponding"],
        &["coordinate"],
        &["coordinated"],
        &["coordinates"],
        &["coordination"],
        &["coordinator"],
        &["cooperation"],
        &["corporations"],
    ],
    range: 5..=10,
};

static WORD_CON_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_CON_CHILDREN),
    value: None,
};

static WORD_CON_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    Some(&WORD_CONA_NODE),
    Some(&WORD_CONB_NODE),
    Some(&WORD_CONC_NODE),
    Some(&WORD_COND_NODE),
    Some(&WORD_CONE_NODE),
    Some(&WORD_CONF_NODE),
    Some(&WORD_CONG_NODE),
    None,
    Some(&WORD_CONI_NODE),
    Some(&WORD_CONJ_NODE),
    None,
    Some(&WORD_CONL_NODE),
    None,
    Some(&WORD_CONN_NODE),
    Some(&WORD_CONO_NODE),
    Some(&WORD_CONP_NODE),
    Some(&WORD_CONQ_NODE),
    None,
    Some(&WORD_CONS_NODE),
    Some(&WORD_CONT_NODE),
    None,
    Some(&WORD_CONV_NODE),
    None,
    None,
    None,
    None,
];

static WORD_CONV_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_CONV_CHILDREN),
    value: None,
};

static WORD_CONV_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    Some(&WORD_CONVA_NODE),
    None,
    Some(&WORD_CONVC_NODE),
    None,
    Some(&WORD_CONVE_NODE),
    None,
    None,
    None,
    Some(&WORD_CONVI_NODE),
    None,
    None,
    None,
    None,
    None,
    Some(&WORD_CONVO_NODE),
    None,
    None,
    None,
    Some(&WORD_CONVS_NODE),
    None,
    Some(&WORD_CONVU_NODE),
    None,
    None,
    None,
    None,
    None,
];

static WORD_CONVU_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_CONVU_CHILDREN),
    value: None,
};

pub static WORD_CONVU_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("lated"),
        dictgen::InsensitiveStr::Ascii("luted"),
    ],
    values: &[&["convoluted"], &["convoluted"]],
    range: 5..=5,
};

static WORD_CONVS_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_CONVS_CHILDREN),
    value: None,
};

pub static WORD_CONVS_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("eration")],
    values: &[&["conservation"]],
    range: 7..=7,
};

static WORD_CONVO_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_CONVO_CHILDREN),
    value: None,
};

pub static WORD_CONVO_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("luded"),
        dictgen::InsensitiveStr::Ascii("rsation"),
        dictgen::InsensitiveStr::Ascii("rsations"),
        dictgen::InsensitiveStr::Ascii("ulted"),
    ],
    values: &[
        &["convoluted"],
        &["conversation"],
        &["conversations"],
        &["convoluted"],
    ],
    range: 5..=8,
};

static WORD_CONVI_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_CONVI_CHILDREN),
    value: None,
};

pub static WORD_CONVI_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ccion"),
        dictgen::InsensitiveStr::Ascii("ced"),
        dictgen::InsensitiveStr::Ascii("citon"),
        dictgen::InsensitiveStr::Ascii("citons"),
        dictgen::InsensitiveStr::Ascii("cto"),
        dictgen::InsensitiveStr::Ascii("enence"),
        dictgen::InsensitiveStr::Ascii("enent"),
        dictgen::InsensitiveStr::Ascii("enently"),
        dictgen::InsensitiveStr::Ascii("enient"),
        dictgen::InsensitiveStr::Ascii("luted"),
        dictgen::InsensitiveStr::Ascii("nceing"),
        dictgen::InsensitiveStr::Ascii("ncente"),
        dictgen::InsensitiveStr::Ascii("ncersi"),
        dictgen::InsensitiveStr::Ascii("ncted"),
        dictgen::InsensitiveStr::Ascii("ne"),
        dictgen::InsensitiveStr::Ascii("ngi"),
        dictgen::InsensitiveStr::Ascii("nse"),
        dictgen::InsensitiveStr::Ascii("nsing"),
        dictgen::InsensitiveStr::Ascii("nving"),
        dictgen::InsensitiveStr::Ascii("rtible"),
    ],
    values: &[
        &["conviction"],
        &["convinced"],
        &["conviction"],
        &["convictions"],
        &["conviction"],
        &["convenience"],
        &["convenient"],
        &["conveniently"],
        &["convenient"],
        &["convoluted"],
        &["convincing"],
        &["convenient"],
        &["convinces"],
        &["convince"],
        &["convince"],
        &["convincing"],
        &["convinces"],
        &["convincing"],
        &["convincing"],
        &["convertible"],
    ],
    range: 2..=7,
};

static WORD_CONVE_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_CONVE_CHILDREN),
    value: None,
};

static WORD_CONVE_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    Some(&WORD_CONVEI_NODE),
    None,
    None,
    Some(&WORD_CONVEL_NODE),
    None,
    Some(&WORD_CONVEN_NODE),
    None,
    None,
    None,
    Some(&WORD_CONVER_NODE),
    Some(&WORD_CONVES_NODE),
    None,
    None,
    None,
    None,
    None,
    Some(&WORD_CONVEY_NODE),
    None,
];

static WORD_CONVEY_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_CONVEY_CHILDREN),
    value: None,
};

pub static WORD_CONVEY_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("d"),
        dictgen::InsensitiveStr::Ascii("ered"),
    ],
    values: &[&["conveyed"], &["conveyed"]],
    range: 1..=4,
};

static WORD_CONVES_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_CONVES_CHILDREN),
    value: None,
};

pub static WORD_CONVES_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("ration")],
    values: &[&["conservation"]],
    range: 6..=6,
};

static WORD_CONVER_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_CONVER_CHILDREN),
    value: None,
};

pub static WORD_CONVER_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("astion"),
        dictgen::InsensitiveStr::Ascii("astions"),
        dictgen::InsensitiveStr::Ascii("dation"),
        dictgen::InsensitiveStr::Ascii("esly"),
        dictgen::InsensitiveStr::Ascii("gens"),
        dictgen::InsensitiveStr::Ascii("ison"),
        dictgen::InsensitiveStr::Ascii("itble"),
        dictgen::InsensitiveStr::Ascii("ning"),
        dictgen::InsensitiveStr::Ascii("s"),
        dictgen::InsensitiveStr::Ascii("sacion"),
        dictgen::InsensitiveStr::Ascii("sacional"),
        dictgen::InsensitiveStr::Ascii("saion"),
        dictgen::InsensitiveStr::Ascii("saiton"),
        dictgen::InsensitiveStr::Ascii("sare"),
        dictgen::InsensitiveStr::Ascii("satin"),
        dictgen::InsensitiveStr::Ascii("satino"),
        dictgen::InsensitiveStr::Ascii("sationa"),
        dictgen::InsensitiveStr::Ascii("sationable"),
        dictgen::InsensitiveStr::Ascii("sationg"),
        dictgen::InsensitiveStr::Ascii("sationy"),
        dictgen::InsensitiveStr::Ascii("satiosn"),
        dictgen::InsensitiveStr::Ascii("satism"),
        dictgen::InsensitiveStr::Ascii("satives"),
        dictgen::InsensitiveStr::Ascii("satoin"),
        dictgen::InsensitiveStr::Ascii("seley"),
        dictgen::InsensitiveStr::Ascii("sie"),
        dictgen::InsensitiveStr::Ascii("sin"),
        dictgen::InsensitiveStr::Ascii("sino"),
        dictgen::InsensitiveStr::Ascii("siones"),
        dictgen::InsensitiveStr::Ascii("sley"),
        dictgen::InsensitiveStr::Ascii("soin"),
        dictgen::InsensitiveStr::Ascii("sons"),
        dictgen::InsensitiveStr::Ascii("st"),
        dictgen::InsensitiveStr::Ascii("staion"),
        dictgen::InsensitiveStr::Ascii("staional"),
        dictgen::InsensitiveStr::Ascii("staions"),
        dictgen::InsensitiveStr::Ascii("stion"),
        dictgen::InsensitiveStr::Ascii("tables"),
        dictgen::InsensitiveStr::Ascii("tiable"),
        dictgen::InsensitiveStr::Ascii("tibile"),
        dictgen::InsensitiveStr::Ascii("tie"),
        dictgen::InsensitiveStr::Ascii("tion"),
        dictgen::InsensitiveStr::Ascii("tire"),
        dictgen::InsensitiveStr::Ascii("tirea"),
        dictgen::InsensitiveStr::Ascii("tirle"),
        dictgen::InsensitiveStr::Ascii("tirme"),
        dictgen::InsensitiveStr::Ascii("tirte"),
        dictgen::InsensitiveStr::Ascii("tis"),
        dictgen::InsensitiveStr::Ascii("tr"),
        dictgen::InsensitiveStr::Ascii("vation"),
        dictgen::InsensitiveStr::Ascii("vatism"),
        dictgen::InsensitiveStr::Ascii("ying"),
        dictgen::InsensitiveStr::Ascii("zation"),
    ],
    values: &[
        &["conversations"],
        &["conservation"],
        &["conservation"],
        &["conversely"],
        &["converse"],
        &["conversions"],
        &["convertible"],
        &["converting"],
        &["converts"],
        &["conversation"],
        &["conversational"],
        &["conversion"],
        &["conversations"],
        &["converse"],
        &["conversations"],
        &["conservation"],
        &["conservation"],
        &["conversational"],
        &["conservation"],
        &["conservation"],
        &["conservation"],
        &["conservatism"],
        &["conservatives"],
        &["conversations"],
        &["conversely"],
        &["converse"],
        &["conversions"],
        &["conversions"],
        &["conversions"],
        &["conversely"],
        &["conversions"],
        &["conversions"],
        &["converts"],
        &["conversation"],
        &["conversational"],
        &["conversations"],
        &["conversion"],
        &["convertibles"],
        &["convertible"],
        &["convertible"],
        &["convertible"],
        &["conversion"],
        &["converter"],
        &["converter"],
        &["convertible"],
        &["converter"],
        &["converter"],
        &["converts"],
        &["converter"],
        &["conservation"],
        &["conservatism"],
        &["converting"],
        &["conservation"],
    ],
    range: 1..=10,
};

static WORD_CONVEN_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_CONVEN_CHILDREN),
    value: None,
};

pub static WORD_CONVEN_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ant"),
        dictgen::InsensitiveStr::Ascii("cen"),
        dictgen::InsensitiveStr::Ascii("cion"),
        dictgen::InsensitiveStr::Ascii("cional"),
        dictgen::InsensitiveStr::Ascii("eince"),
        dictgen::InsensitiveStr::Ascii("iance"),
        dictgen::InsensitiveStr::Ascii("iant"),
        dictgen::InsensitiveStr::Ascii("iantly"),
        dictgen::InsensitiveStr::Ascii("iece"),
        dictgen::InsensitiveStr::Ascii("iente"),
        dictgen::InsensitiveStr::Ascii("iet"),
        dictgen::InsensitiveStr::Ascii("ietly"),
        dictgen::InsensitiveStr::Ascii("ince"),
        dictgen::InsensitiveStr::Ascii("it"),
        dictgen::InsensitiveStr::Ascii("tial"),
        dictgen::InsensitiveStr::Ascii("tinal"),
        dictgen::InsensitiveStr::Ascii("tionnal"),
        dictgen::InsensitiveStr::Ascii("to"),
    ],
    values: &[
        &["covenant"],
        &["convenience"],
        &["convention"],
        &["conventional"],
        &["convenience"],
        &["convenience"],
        &["convenient"],
        &["conveniently"],
        &["convenience"],
        &["convenience"],
        &["convenient"],
        &["conveniently"],
        &["convenience"],
        &["convenient"],
        &["conventional"],
        &["conventional"],
        &["conventional"],
        &["convention"],
    ],
    range: 2..=7,
};

static WORD_CONVEL_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_CONVEL_CHILDREN),
    value: None,
};

pub static WORD_CONVEL_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("uted")],
    values: &[&["convoluted"]],
    range: 4..=4,
};

static WORD_CONVEI_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_CONVEI_CHILDREN),
    value: None,
};

pub static WORD_CONVEI_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("nence"),
        dictgen::InsensitiveStr::Ascii("nent"),
        dictgen::InsensitiveStr::Ascii("nently"),
    ],
    values: &[&["convenience"], &["convenient"], &["conveniently"]],
    range: 4..=6,
};

static WORD_CONVC_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_CONVC_CHILDREN),
    value: None,
};

pub static WORD_CONVC_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("ition")],
    values: &[&["convictions"]],
    range: 5..=5,
};

static WORD_CONVA_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_CONVA_CHILDREN),
    value: None,
};

pub static WORD_CONVA_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("luted")],
    values: &[&["convoluted"]],
    range: 5..=5,
};

static WORD_CONT_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_CONT_CHILDREN),
    value: None,
};

static WORD_CONT_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    Some(&WORD_CONTA_NODE),
    None,
    None,
    None,
    Some(&WORD_CONTE_NODE),
    None,
    None,
    None,
    Some(&WORD_CONTI_NODE),
    None,
    None,
    None,
    None,
    None,
    Some(&WORD_CONTO_NODE),
    None,
    None,
    Some(&WORD_CONTR_NODE),
    Some(&WORD_CONTS_NODE),
    None,
    Some(&WORD_CONTU_NODE),
    None,
    None,
    None,
    None,
    None,
];

static WORD_CONTU_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_CONTU_CHILDREN),
    value: None,
};

pub static WORD_CONTU_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ining"),
        dictgen::InsensitiveStr::Ascii("inity"),
    ],
    values: &[&["continuing"], &["continuity"]],
    range: 5..=5,
};

static WORD_CONTS_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_CONTS_CHILDREN),
    value: None,
};

pub static WORD_CONTS_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("truction")],
    values: &[&["construction"]],
    range: 8..=8,
};

static WORD_CONTR_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_CONTR_CHILDREN),
    value: None,
};

static WORD_CONTR_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    Some(&WORD_CONTRA_NODE),
    None,
    None,
    None,
    Some(&WORD_CONTRE_NODE),
    None,
    None,
    None,
    Some(&WORD_CONTRI_NODE),
    None,
    None,
    None,
    None,
    None,
    Some(&WORD_CONTRO_NODE),
    None,
    None,
    None,
    None,
    None,
    Some(&WORD_CONTRU_NODE),
    None,
    None,
    None,
    None,
    None,
];

static WORD_CONTRU_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_CONTRU_CHILDREN),
    value: None,
};

pub static WORD_CONTRU_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("bite"),
        dictgen::InsensitiveStr::Ascii("bute"),
        dictgen::InsensitiveStr::Ascii("butes"),
        dictgen::InsensitiveStr::Ascii("cting"),
        dictgen::InsensitiveStr::Ascii("ction"),
        dictgen::InsensitiveStr::Ascii("ctions"),
        dictgen::InsensitiveStr::Ascii("ctors"),
    ],
    values: &[
        &["contributes"],
        &["contribute"],
        &["contributes"],
        &["contracting"],
        &["construction"],
        &["contractions"],
        &["contractors"],
    ],
    range: 4..=6,
};

static WORD_CONTRO_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_CONTRO_CHILDREN),
    value: None,
};

pub static WORD_CONTRO_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ception"),
        dictgen::InsensitiveStr::Ascii("ceptives"),
        dictgen::InsensitiveStr::Ascii("dicting"),
        dictgen::InsensitiveStr::Ascii("diction"),
        dictgen::InsensitiveStr::Ascii("dictions"),
        dictgen::InsensitiveStr::Ascii("las"),
        dictgen::InsensitiveStr::Ascii("led"),
        dictgen::InsensitiveStr::Ascii("lelr"),
        dictgen::InsensitiveStr::Ascii("lers"),
        dictgen::InsensitiveStr::Ascii("les"),
        dictgen::InsensitiveStr::Ascii("leurs"),
        dictgen::InsensitiveStr::Ascii("ling"),
        dictgen::InsensitiveStr::Ascii("ll"),
        dictgen::InsensitiveStr::Ascii("lleras"),
        dictgen::InsensitiveStr::Ascii("lles"),
        dictgen::InsensitiveStr::Ascii("lllers"),
        dictgen::InsensitiveStr::Ascii("llore"),
        dictgen::InsensitiveStr::Ascii("lls"),
        dictgen::InsensitiveStr::Ascii("vercial"),
        dictgen::InsensitiveStr::Ascii("vercy"),
        dictgen::InsensitiveStr::Ascii("verial"),
        dictgen::InsensitiveStr::Ascii("veries"),
        dictgen::InsensitiveStr::Ascii("verisal"),
        dictgen::InsensitiveStr::Ascii("versa"),
        dictgen::InsensitiveStr::Ascii("versal"),
        dictgen::InsensitiveStr::Ascii("versary"),
        dictgen::InsensitiveStr::Ascii("versey"),
        dictgen::InsensitiveStr::Ascii("versity"),
        dictgen::InsensitiveStr::Ascii("vertial"),
        dictgen::InsensitiveStr::Ascii("very"),
        dictgen::InsensitiveStr::Ascii("vesy"),
    ],
    values: &[
        &["contraception"],
        &["contraceptives"],
        &["contradicting"],
        &["contradiction"],
        &["contradictions"],
        &["controls"],
        &["controlled"],
        &["controllers"],
        &["controls"],
        &["controls"],
        &["controllers"],
        &["controlling"],
        &["control"],
        &["controllers"],
        &["controls"],
        &["controllers"],
        &["controllers"],
        &["controls"],
        &["controversial"],
        &["controversy"],
        &["controversial"],
        &["controversies"],
        &["controversial"],
        &["controversial"],
        &["controversial"],
        &["controversy"],
        &["controversy"],
        &["controversy"],
        &["controversial"],
        &["controversy"],
        &["controversy"],
    ],
    range: 2..=8,
};

static WORD_CONTRI_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_CONTRI_CHILDREN),
    value: None,
};

pub static WORD_CONTRI_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("bucion"),
        dictgen::InsensitiveStr::Ascii("bue"),
        dictgen::InsensitiveStr::Ascii("bued"),
        dictgen::InsensitiveStr::Ascii("buem"),
        dictgen::InsensitiveStr::Ascii("buent"),
        dictgen::InsensitiveStr::Ascii("buer"),
        dictgen::InsensitiveStr::Ascii("bues"),
        dictgen::InsensitiveStr::Ascii("buie"),
        dictgen::InsensitiveStr::Ascii("buit"),
        dictgen::InsensitiveStr::Ascii("buito"),
        dictgen::InsensitiveStr::Ascii("buitor"),
        dictgen::InsensitiveStr::Ascii("buo"),
        dictgen::InsensitiveStr::Ascii("buter"),
        dictgen::InsensitiveStr::Ascii("buters"),
        dictgen::InsensitiveStr::Ascii("buteurs"),
        dictgen::InsensitiveStr::Ascii("butie"),
        dictgen::InsensitiveStr::Ascii("butin"),
        dictgen::InsensitiveStr::Ascii("butiors"),
        dictgen::InsensitiveStr::Ascii("butivo"),
        dictgen::InsensitiveStr::Ascii("buto"),
        dictgen::InsensitiveStr::Ascii("butons"),
        dictgen::InsensitiveStr::Ascii("butos"),
        dictgen::InsensitiveStr::Ascii("buts"),
        dictgen::InsensitiveStr::Ascii("buye"),
        dictgen::InsensitiveStr::Ascii("buyes"),
        dictgen::InsensitiveStr::Ascii("ception"),
        dictgen::InsensitiveStr::Ascii("ceptives"),
        dictgen::InsensitiveStr::Ascii("cted"),
        dictgen::InsensitiveStr::Ascii("cting"),
        dictgen::InsensitiveStr::Ascii("ction"),
        dictgen::InsensitiveStr::Ascii("ctions"),
        dictgen::InsensitiveStr::Ascii("dict"),
        dictgen::InsensitiveStr::Ascii("dicted"),
        dictgen::InsensitiveStr::Ascii("dictory"),
        dictgen::InsensitiveStr::Ascii("dicts"),
        dictgen::InsensitiveStr::Ascii("tutions"),
        dictgen::InsensitiveStr::Ascii("ubte"),
        dictgen::InsensitiveStr::Ascii("versial"),
        dictgen::InsensitiveStr::Ascii("versy"),
    ],
    values: &[
        &["contribution"],
        &["contribute"],
        &["contributed"],
        &["contribute"],
        &["contribute"],
        &["contribute"],
        &["contributes"],
        &["contribute"],
        &["contribute"],
        &["contribution"],
        &["contributor"],
        &["contributor"],
        &["contributor"],
        &["contributors"],
        &["contributes"],
        &["contribute"],
        &["contribution"],
        &["contributors"],
        &["contribution"],
        &["contribution"],
        &["contributors"],
        &["contributors"],
        &["contributes"],
        &["contribute"],
        &["contributes"],
        &["contraception"],
        &["contraceptives"],
        &["contracted"],
        &["contracting"],
        &["contraction"],
        &["contractions"],
        &["contradict"],
        &["contradicted"],
        &["contradictory"],
        &["contradicts"],
        &["contributions"],
        &["contributes"],
        &["controversial"],
        &["controversy"],
    ],
    range: 3..=8,
};

static WORD_CONTRE_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_CONTRE_CHILDREN),
    value: None,
};

pub static WORD_CONTRE_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ception"),
        dictgen::InsensitiveStr::Ascii("dict"),
        dictgen::InsensitiveStr::Ascii("versial"),
        dictgen::InsensitiveStr::Ascii("versy"),
    ],
    values: &[
        &["contraception"],
        &["contradict"],
        &["controversial"],
        &["controversy"],
    ],
    range: 4..=7,
};

static WORD_CONTRA_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_CONTRA_CHILDREN),
    value: None,
};

pub static WORD_CONTRA_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("bution"),
        dictgen::InsensitiveStr::Ascii("ccion"),
        dictgen::InsensitiveStr::Ascii("ceptie"),
        dictgen::InsensitiveStr::Ascii("ceptivo"),
        dictgen::InsensitiveStr::Ascii("ceptivos"),
        dictgen::InsensitiveStr::Ascii("cing"),
        dictgen::InsensitiveStr::Ascii("cr"),
        dictgen::InsensitiveStr::Ascii("cs"),
        dictgen::InsensitiveStr::Ascii("ctar"),
        dictgen::InsensitiveStr::Ascii("cter"),
        dictgen::InsensitiveStr::Ascii("ctin"),
        dictgen::InsensitiveStr::Ascii("cto"),
        dictgen::InsensitiveStr::Ascii("ctos"),
        dictgen::InsensitiveStr::Ascii("ddice"),
        dictgen::InsensitiveStr::Ascii("diccion"),
        dictgen::InsensitiveStr::Ascii("dice"),
        dictgen::InsensitiveStr::Ascii("dices"),
        dictgen::InsensitiveStr::Ascii("dicing"),
        dictgen::InsensitiveStr::Ascii("dicion"),
        dictgen::InsensitiveStr::Ascii("dicitng"),
        dictgen::InsensitiveStr::Ascii("diciton"),
        dictgen::InsensitiveStr::Ascii("dicitons"),
        dictgen::InsensitiveStr::Ascii("dicory"),
        dictgen::InsensitiveStr::Ascii("dics"),
        dictgen::InsensitiveStr::Ascii("dictary"),
        dictgen::InsensitiveStr::Ascii("dictie"),
        dictgen::InsensitiveStr::Ascii("dictin"),
        dictgen::InsensitiveStr::Ascii("dictiong"),
        dictgen::InsensitiveStr::Ascii("dicton"),
        dictgen::InsensitiveStr::Ascii("dictons"),
        dictgen::InsensitiveStr::Ascii("dtion"),
        dictgen::InsensitiveStr::Ascii("ticted"),
        dictgen::InsensitiveStr::Ascii("ticting"),
        dictgen::InsensitiveStr::Ascii("vercial"),
        dictgen::InsensitiveStr::Ascii("versial"),
        dictgen::InsensitiveStr::Ascii("versy"),
    ],
    values: &[
        &["contribution"],
        &["contraction"],
        &["contraceptives"],
        &["contraception"],
        &["contraceptives"],
        &["contracting"],
        &["contractor"],
        &["contracts"],
        &["contractor"],
        &["contractor"],
        &["contraction"],
        &["contraction"],
        &["contracts"],
        &["contradicted"],
        &["contradiction"],
        &["contradicted"],
        &["contradicts"],
        &["contradicting"],
        &["contradiction"],
        &["contradicting"],
        &["contradiction"],
        &["contradictions"],
        &["contradictory"],
        &["contradicts"],
        &["contradictory"],
        &["contradicted"],
        &["contradiction"],
        &["contradicting"],
        &["contradiction"],
        &["contradicts"],
        &["contraction"],
        &["contradicted"],
        &["contradicting"],
        &["controversial"],
        &["controversial"],
        &["controversy"],
    ],
    range: 2..=8,
};

static WORD_CONTO_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_CONTO_CHILDREN),
    value: None,
};

pub static WORD_CONTO_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("rller")],
    values: &[&["controllers"]],
    range: 5..=5,
};

static WORD_CONTI_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_CONTI_CHILDREN),
    value: None,
};

static WORD_CONTI_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    Some(&WORD_CONTIA_NODE),
    Some(&WORD_CONTIB_NODE),
    None,
    None,
    Some(&WORD_CONTIE_NODE),
    None,
    Some(&WORD_CONTIG_NODE),
    None,
    None,
    None,
    None,
    None,
    Some(&WORD_CONTIM_NODE),
    Some(&WORD_CONTIN_NODE),
    None,
    None,
    None,
    Some(&WORD_CONTIR_NODE),
    None,
    Some(&WORD_CONTIT_NODE),
    Some(&WORD_CONTIU_NODE),
    None,
    None,
    None,
    None,
    None,
];

static WORD_CONTIU_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_CONTIU_CHILDREN),
    value: None,
};

pub static WORD_CONTIU_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("nal"),
        dictgen::InsensitiveStr::Ascii("nally"),
        dictgen::InsensitiveStr::Ascii("nation"),
        dictgen::InsensitiveStr::Ascii("ning"),
        dictgen::InsensitiveStr::Ascii("nity"),
    ],
    values: &[
        &["continual"],
        &["continually"],
        &["continuation"],
        &["containing"],
        &["continuity"],
    ],
    range: 3..=6,
};

static WORD_CONTIT_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_CONTIT_CHILDREN),
    value: None,
};

pub static WORD_CONTIT_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("nent")],
    values: &[&["contingent"]],
    range: 4..=4,
};

static WORD_CONTIR_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_CONTIR_CHILDREN),
    value: None,
};

pub static WORD_CONTIR_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("buted"),
        dictgen::InsensitiveStr::Ascii("bution"),
        dictgen::InsensitiveStr::Ascii("butors"),
    ],
    values: &[&["contributed"], &["contribution"], &["contributors"]],
    range: 5..=6,
};

static WORD_CONTIN_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_CONTIN_CHILDREN),
    value: None,
};

pub static WORD_CONTIN_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ant"),
        dictgen::InsensitiveStr::Ascii("ants"),
        dictgen::InsensitiveStr::Ascii("e"),
        dictgen::InsensitiveStr::Ascii("ed"),
        dictgen::InsensitiveStr::Ascii("enal"),
        dictgen::InsensitiveStr::Ascii("enet"),
        dictgen::InsensitiveStr::Ascii("enets"),
        dictgen::InsensitiveStr::Ascii("ens"),
        dictgen::InsensitiveStr::Ascii("entais"),
        dictgen::InsensitiveStr::Ascii("entes"),
        dictgen::InsensitiveStr::Ascii("ential"),
        dictgen::InsensitiveStr::Ascii("entul"),
        dictgen::InsensitiveStr::Ascii("eous"),
        dictgen::InsensitiveStr::Ascii("eously"),
        dictgen::InsensitiveStr::Ascii("es"),
        dictgen::InsensitiveStr::Ascii("etal"),
        dictgen::InsensitiveStr::Ascii("gancy"),
        dictgen::InsensitiveStr::Ascii("gecy"),
        dictgen::InsensitiveStr::Ascii("geny"),
        dictgen::InsensitiveStr::Ascii("gient"),
        dictgen::InsensitiveStr::Ascii("gincy"),
        dictgen::InsensitiveStr::Ascii("ient"),
        dictgen::InsensitiveStr::Ascii("ious"),
        dictgen::InsensitiveStr::Ascii("iously"),
        dictgen::InsensitiveStr::Ascii("iuty"),
        dictgen::InsensitiveStr::Ascii("ous"),
        dictgen::InsensitiveStr::Ascii("ously"),
        dictgen::InsensitiveStr::Ascii("tent"),
        dictgen::InsensitiveStr::Ascii("uacion"),
        dictgen::InsensitiveStr::Ascii("ualy"),
        dictgen::InsensitiveStr::Ascii("uare"),
        dictgen::InsensitiveStr::Ascii("uarla"),
        dictgen::InsensitiveStr::Ascii("uarlo"),
        dictgen::InsensitiveStr::Ascii("uasse"),
        dictgen::InsensitiveStr::Ascii("uati"),
        dictgen::InsensitiveStr::Ascii("uating"),
        dictgen::InsensitiveStr::Ascii("uativo"),
        dictgen::InsensitiveStr::Ascii("uato"),
        dictgen::InsensitiveStr::Ascii("ueing"),
        dictgen::InsensitiveStr::Ascii("uemos"),
        dictgen::InsensitiveStr::Ascii("uent"),
        dictgen::InsensitiveStr::Ascii("ueous"),
        dictgen::InsensitiveStr::Ascii("uety"),
        dictgen::InsensitiveStr::Ascii("uining"),
        dictgen::InsensitiveStr::Ascii("uious"),
        dictgen::InsensitiveStr::Ascii("um"),
        dictgen::InsensitiveStr::Ascii("unes"),
        dictgen::InsensitiveStr::Ascii("uning"),
        dictgen::InsensitiveStr::Ascii("unity"),
        dictgen::InsensitiveStr::Ascii("uons"),
        dictgen::InsensitiveStr::Ascii("uos"),
        dictgen::InsensitiveStr::Ascii("uosly"),
        dictgen::InsensitiveStr::Ascii("us"),
        dictgen::InsensitiveStr::Ascii("ut"),
        dictgen::InsensitiveStr::Ascii("ute"),
        dictgen::InsensitiveStr::Ascii("uting"),
        dictgen::InsensitiveStr::Ascii("utity"),
        dictgen::InsensitiveStr::Ascii("utiy"),
        dictgen::InsensitiveStr::Ascii("uu"),
        dictgen::InsensitiveStr::Ascii("uuing"),
        dictgen::InsensitiveStr::Ascii("uuity"),
        dictgen::InsensitiveStr::Ascii("uuum"),
    ],
    values: &[
        &["continental"],
        &["continents"],
        &["continue"],
        &["continued"],
        &["continental"],
        &["continents"],
        &["continents"],
        &["continents"],
        &["continents"],
        &["continents"],
        &["continental"],
        &["continental"],
        &["continuous"],
        &["continuously"],
        &["continents"],
        &["continental"],
        &["contingency"],
        &["contingency"],
        &["contingency"],
        &["contingent"],
        &["contingency"],
        &["contingent"],
        &["continuous"],
        &["continuously"],
        &["continuity"],
        &["continuous"],
        &["continuously"],
        &["contingent"],
        &["continuation"],
        &["continually"],
        &["continue"],
        &["continual"],
        &["continual"],
        &["continues"],
        &["continuity"],
        &["continuation"],
        &["continuation"],
        &["continuation"],
        &["continuing"],
        &["continues"],
        &["contingent"],
        &["continuous"],
        &["continuity"],
        &["continuing"],
        &["continuous"],
        &["continuum"],
        &["continents"],
        &["continuing"],
        &["continuity"],
        &["continuous"],
        &["continuous"],
        &["continuously"],
        &["continues"],
        &["continuity"],
        &["continue"],
        &["continuing"],
        &["continuity"],
        &["continuity"],
        &["continuous"],
        &["continuing"],
        &["continuity"],
        &["continuum"],
    ],
    range: 1..=6,
};

static WORD_CONTIM_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_CONTIM_CHILDREN),
    value: None,
};

pub static WORD_CONTIM_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("plate"),
        dictgen::InsensitiveStr::Ascii("plating"),
    ],
    values: &[&["contemplate"], &["contemplating"]],
    range: 5..=7,
};

static WORD_CONTIG_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_CONTIG_CHILDREN),
    value: None,
};

pub static WORD_CONTIG_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ent"),
        dictgen::InsensitiveStr::Ascii("ents"),
        dictgen::InsensitiveStr::Ascii("ious"),
        dictgen::InsensitiveStr::Ascii("nent"),
    ],
    values: &[
        &["contingent"],
        &["continents"],
        &["contagious"],
        &["contingent"],
    ],
    range: 3..=4,
};

static WORD_CONTIE_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_CONTIE_CHILDREN),
    value: None,
};

pub static WORD_CONTIE_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("ntous")],
    values: &[&["contentious"]],
    range: 5..=5,
};

static WORD_CONTIB_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_CONTIB_CHILDREN),
    value: None,
};

pub static WORD_CONTIB_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ute"),
        dictgen::InsensitiveStr::Ascii("uted"),
        dictgen::InsensitiveStr::Ascii("utes"),
    ],
    values: &[&["contribute"], &["contributed"], &["contributes"]],
    range: 3..=4,
};

static WORD_CONTIA_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_CONTIA_CHILDREN),
    value: None,
};

pub static WORD_CONTIA_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("n"),
        dictgen::InsensitiveStr::Ascii("ner"),
        dictgen::InsensitiveStr::Ascii("ners"),
        dictgen::InsensitiveStr::Ascii("ning"),
        dictgen::InsensitiveStr::Ascii("nment"),
        dictgen::InsensitiveStr::Ascii("ns"),
    ],
    values: &[
        &["contain"],
        &["container"],
        &["containers"],
        &["containing"],
        &["containment"],
        &["contains"],
    ],
    range: 1..=5,
};

static WORD_CONTE_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_CONTE_CHILDREN),
    value: None,
};

pub static WORD_CONTE_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ction"),
        dictgen::InsensitiveStr::Ascii("ctual"),
        dictgen::InsensitiveStr::Ascii("iners"),
        dictgen::InsensitiveStr::Ascii("mpate"),
        dictgen::InsensitiveStr::Ascii("mperary"),
        dictgen::InsensitiveStr::Ascii("mplare"),
        dictgen::InsensitiveStr::Ascii("mplat"),
        dictgen::InsensitiveStr::Ascii("mple"),
        dictgen::InsensitiveStr::Ascii("mpoary"),
        dictgen::InsensitiveStr::Ascii("mporaneus"),
        dictgen::InsensitiveStr::Ascii("mporany"),
        dictgen::InsensitiveStr::Ascii("mporay"),
        dictgen::InsensitiveStr::Ascii("mpory"),
        dictgen::InsensitiveStr::Ascii("mt"),
        dictgen::InsensitiveStr::Ascii("nants"),
        dictgen::InsensitiveStr::Ascii("ncion"),
        dictgen::InsensitiveStr::Ascii("ncious"),
        dictgen::InsensitiveStr::Ascii("ndor"),
        dictgen::InsensitiveStr::Ascii("ndors"),
        dictgen::InsensitiveStr::Ascii("nental"),
        dictgen::InsensitiveStr::Ascii("nents"),
        dictgen::InsensitiveStr::Ascii("neurs"),
        dictgen::InsensitiveStr::Ascii("ngency"),
        dictgen::InsensitiveStr::Ascii("ngent"),
        dictgen::InsensitiveStr::Ascii("nintal"),
        dictgen::InsensitiveStr::Ascii("nplate"),
        dictgen::InsensitiveStr::Ascii("nplating"),
        dictgen::InsensitiveStr::Ascii("ns"),
        dictgen::InsensitiveStr::Ascii("nse"),
        dictgen::InsensitiveStr::Ascii("nsion"),
        dictgen::InsensitiveStr::Ascii("nsious"),
        dictgen::InsensitiveStr::Ascii("nst"),
        dictgen::InsensitiveStr::Ascii("ntants"),
        dictgen::InsensitiveStr::Ascii("ntas"),
        dictgen::InsensitiveStr::Ascii("ntes"),
        dictgen::InsensitiveStr::Ascii("ntino"),
        dictgen::InsensitiveStr::Ascii("ntios"),
        dictgen::InsensitiveStr::Ascii("ntos"),
        dictgen::InsensitiveStr::Ascii("ntous"),
        dictgen::InsensitiveStr::Ascii("ntuous"),
        dictgen::InsensitiveStr::Ascii("ss"),
        dictgen::InsensitiveStr::Ascii("stais"),
        dictgen::InsensitiveStr::Ascii("stans"),
        dictgen::InsensitiveStr::Ascii("stas"),
        dictgen::InsensitiveStr::Ascii("stase"),
        dictgen::InsensitiveStr::Ascii("staste"),
        dictgen::InsensitiveStr::Ascii("stat"),
        dictgen::InsensitiveStr::Ascii("stents"),
        dictgen::InsensitiveStr::Ascii("stes"),
        dictgen::InsensitiveStr::Ascii("stion"),
        dictgen::InsensitiveStr::Ascii("stors"),
        dictgen::InsensitiveStr::Ascii("xta"),
        dictgen::InsensitiveStr::Ascii("xtes"),
        dictgen::InsensitiveStr::Ascii("xtful"),
        dictgen::InsensitiveStr::Ascii("xtl"),
        dictgen::InsensitiveStr::Ascii("xtos"),
        dictgen::InsensitiveStr::Ascii("xtuel"),
        dictgen::InsensitiveStr::Ascii("xtura"),
    ],
    values: &[
        &["contention"],
        &["contextual"],
        &["contenders"],
        &["contemplate"],
        &["contemporary"],
        &["contemplate"],
        &["contempt"],
        &["contemplate"],
        &["contemporary"],
        &["contemporaneous"],
        &["contemporary"],
        &["contemporary"],
        &["contemporary"],
        &["contempt"],
        &["continents"],
        &["contention"],
        &["contentious"],
        &["contender"],
        &["contenders"],
        &["continental"],
        &["continents"],
        &["contenders"],
        &["contingency"],
        &["contingent"],
        &["continental"],
        &["contemplate"],
        &["contemplating"],
        &["contents"],
        &["contenders"],
        &["contention"],
        &["contentious"],
        &["contents"],
        &["contestants"],
        &["contents"],
        &["contents"],
        &["contention"],
        &["contentious"],
        &["contents"],
        &["contentious"],
        &["contentious"],
        &["contests"],
        &["contests"],
        &["contests"],
        &["contests"],
        &["contests"],
        &["contestants"],
        &["contestants"],
        &["contestants"],
        &["contests"],
        &["contention"],
        &["contests"],
        &["contextual"],
        &["contexts"],
        &["contextual"],
        &["contextual"],
        &["contexts"],
        &["contextual"],
        &["contextual"],
    ],
    range: 2..=9,
};

static WORD_CONTA_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_CONTA_CHILDREN),
    value: None,
};

pub static WORD_CONTA_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("cs"),
        dictgen::InsensitiveStr::Ascii("ctes"),
        dictgen::InsensitiveStr::Ascii("ction"),
        dictgen::InsensitiveStr::Ascii("ctos"),
        dictgen::InsensitiveStr::Ascii("geous"),
        dictgen::InsensitiveStr::Ascii("gios"),
        dictgen::InsensitiveStr::Ascii("giosa"),
        dictgen::InsensitiveStr::Ascii("gioso"),
        dictgen::InsensitiveStr::Ascii("giosum"),
        dictgen::InsensitiveStr::Ascii("igous"),
        dictgen::InsensitiveStr::Ascii("iminate"),
        dictgen::InsensitiveStr::Ascii("ind"),
        dictgen::InsensitiveStr::Ascii("inered"),
        dictgen::InsensitiveStr::Ascii("ines"),
        dictgen::InsensitiveStr::Ascii("ing"),
        dictgen::InsensitiveStr::Ascii("inig"),
        dictgen::InsensitiveStr::Ascii("inmemt"),
        dictgen::InsensitiveStr::Ascii("inors"),
        dictgen::InsensitiveStr::Ascii("inters"),
        dictgen::InsensitiveStr::Ascii("inting"),
        dictgen::InsensitiveStr::Ascii("ints"),
        dictgen::InsensitiveStr::Ascii("ire"),
        dictgen::InsensitiveStr::Ascii("is"),
        dictgen::InsensitiveStr::Ascii("minacion"),
        dictgen::InsensitiveStr::Ascii("minanted"),
        dictgen::InsensitiveStr::Ascii("minatie"),
        dictgen::InsensitiveStr::Ascii("minato"),
        dictgen::InsensitiveStr::Ascii("minaton"),
        dictgen::InsensitiveStr::Ascii("minen"),
        dictgen::InsensitiveStr::Ascii("minent"),
        dictgen::InsensitiveStr::Ascii("minents"),
        dictgen::InsensitiveStr::Ascii("minted"),
        dictgen::InsensitiveStr::Ascii("mporaries"),
        dictgen::InsensitiveStr::Ascii("mporary"),
        dictgen::InsensitiveStr::Ascii("ncting"),
        dictgen::InsensitiveStr::Ascii("nimate"),
        dictgen::InsensitiveStr::Ascii("nimated"),
        dictgen::InsensitiveStr::Ascii("nimation"),
        dictgen::InsensitiveStr::Ascii("niments"),
        dictgen::InsensitiveStr::Ascii("nti"),
        dictgen::InsensitiveStr::Ascii("nting"),
        dictgen::InsensitiveStr::Ascii("st"),
    ],
    values: &[
        &["contacts"],
        &["contacts"],
        &["contacting"],
        &["contacts"],
        &["contagious"],
        &["contagious"],
        &["contagious"],
        &["contagious"],
        &["contagious"],
        &["contagious"],
        &["contaminate"],
        &["contained"],
        &["contained"],
        &["contains"],
        &["containing"],
        &["containing"],
        &["containment"],
        &["containers"],
        &["containers"],
        &["containing"],
        &["contains"],
        &["containers"],
        &["contains"],
        &["contamination"],
        &["contaminated"],
        &["contaminated"],
        &["contamination"],
        &["contamination"],
        &["containment"],
        &["containment"],
        &["containment"],
        &["contaminated"],
        &["contemporaries"],
        &["contemporary"],
        &["contracting"],
        &["contaminated"],
        &["contaminated"],
        &["contamination"],
        &["containment"],
        &["contacting"],
        &["contacting"],
        &["contacts"],
    ],
    range: 2..=9,
};

static WORD_CONS_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_CONS_CHILDREN),
    value: None,
};

static WORD_CONS_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    None,
    None,
    Some(&WORD_CONSC_NODE),
    Some(&WORD_CONSD_NODE),
    Some(&WORD_CONSE_NODE),
    Some(&WORD_CONSF_NODE),
    None,
    None,
    Some(&WORD_CONSI_NODE),
    None,
    None,
    Some(&WORD_CONSL_NODE),
    None,
    None,
    Some(&WORD_CONSO_NODE),
    Some(&WORD_CONSP_NODE),
    Some(&WORD_CONSQ_NODE),
    None,
    None,
    Some(&WORD_CONST_NODE),
    Some(&WORD_CONSU_NODE),
    None,
    None,
    None,
    None,
    None,
];

static WORD_CONSU_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_CONSU_CHILDREN),
    value: None,
};

pub static WORD_CONSU_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("eling"),
        dictgen::InsensitiveStr::Ascii("elling"),
        dictgen::InsensitiveStr::Ascii("lant"),
        dictgen::InsensitiveStr::Ascii("lation"),
        dictgen::InsensitiveStr::Ascii("ltaion"),
        dictgen::InsensitiveStr::Ascii("ltanti"),
        dictgen::InsensitiveStr::Ascii("ltat"),
        dictgen::InsensitiveStr::Ascii("ltata"),
        dictgen::InsensitiveStr::Ascii("ltate"),
        dictgen::InsensitiveStr::Ascii("ltati"),
        dictgen::InsensitiveStr::Ascii("ltating"),
        dictgen::InsensitiveStr::Ascii("ltato"),
        dictgen::InsensitiveStr::Ascii("ltent"),
        dictgen::InsensitiveStr::Ascii("mate"),
        dictgen::InsensitiveStr::Ascii("mated"),
        dictgen::InsensitiveStr::Ascii("mation"),
        dictgen::InsensitiveStr::Ascii("mbale"),
        dictgen::InsensitiveStr::Ascii("mbales"),
        dictgen::InsensitiveStr::Ascii("ments"),
        dictgen::InsensitiveStr::Ascii("merisim"),
        dictgen::InsensitiveStr::Ascii("mersim"),
        dictgen::InsensitiveStr::Ascii("mibles"),
        dictgen::InsensitiveStr::Ascii("mirem"),
        dictgen::InsensitiveStr::Ascii("mires"),
        dictgen::InsensitiveStr::Ascii("mirse"),
        dictgen::InsensitiveStr::Ascii("miste"),
        dictgen::InsensitiveStr::Ascii("mpion"),
        dictgen::InsensitiveStr::Ascii("ms"),
    ],
    values: &[
        &["consulting"],
        &["counselling"],
        &["consultant"],
        &["consolation"],
        &["consultation"],
        &["consultation"],
        &["consultant"],
        &["consultant"],
        &["consultant"],
        &["consultant"],
        &["consultation"],
        &["consultation"],
        &["consultant"],
        &["consummate"],
        &["consummated"],
        &["consumption"],
        &["consumables"],
        &["consumables"],
        &["consumes"],
        &["consumerism"],
        &["consumerism"],
        &["consumables"],
        &["consumerism"],
        &["consumerism"],
        &["consumerism"],
        &["consumes"],
        &["consumption"],
        &["consumes"],
    ],
    range: 2..=7,
};

static WORD_CONST_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_CONST_CHILDREN),
    value: None,
};

static WORD_CONST_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    Some(&WORD_CONSTA_NODE),
    None,
    None,
    None,
    Some(&WORD_CONSTE_NODE),
    None,
    None,
    None,
    Some(&WORD_CONSTI_NODE),
    None,
    None,
    None,
    None,
    Some(&WORD_CONSTN_NODE),
    None,
    None,
    None,
    Some(&WORD_CONSTR_NODE),
    None,
    Some(&WORD_CONSTT_NODE),
    Some(&WORD_CONSTU_NODE),
    None,
    None,
    None,
    None,
    None,
];

static WORD_CONSTU_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_CONSTU_CHILDREN),
    value: None,
};

pub static WORD_CONSTU_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ction"),
        dictgen::InsensitiveStr::Ascii("rcted"),
        dictgen::InsensitiveStr::Ascii("rction"),
        dictgen::InsensitiveStr::Ascii("red"),
    ],
    values: &[
        &["construction"],
        &["constructed"],
        &["construction"],
        &["construed"],
    ],
    range: 3..=6,
};

static WORD_CONSTT_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_CONSTT_CHILDREN),
    value: None,
};

pub static WORD_CONSTT_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("ruction")],
    values: &[&["construction"]],
    range: 7..=7,
};

static WORD_CONSTR_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_CONSTR_CHILDREN),
    value: None,
};

pub static WORD_CONSTR_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("acting"),
        dictgen::InsensitiveStr::Ascii("action"),
        dictgen::InsensitiveStr::Ascii("acts"),
        dictgen::InsensitiveStr::Ascii("ainsts"),
        dictgen::InsensitiveStr::Ascii("ait"),
        dictgen::InsensitiveStr::Ascii("aits"),
        dictgen::InsensitiveStr::Ascii("ansi"),
        dictgen::InsensitiveStr::Ascii("ants"),
        dictgen::InsensitiveStr::Ascii("at"),
        dictgen::InsensitiveStr::Ascii("ating"),
        dictgen::InsensitiveStr::Ascii("iants"),
        dictgen::InsensitiveStr::Ascii("uccion"),
        dictgen::InsensitiveStr::Ascii("uced"),
        dictgen::InsensitiveStr::Ascii("ucing"),
        dictgen::InsensitiveStr::Ascii("ucion"),
        dictgen::InsensitiveStr::Ascii("uciton"),
        dictgen::InsensitiveStr::Ascii("ucive"),
        dictgen::InsensitiveStr::Ascii("ucs"),
        dictgen::InsensitiveStr::Ascii("ucteds"),
        dictgen::InsensitiveStr::Ascii("ucticon"),
        dictgen::InsensitiveStr::Ascii("uctie"),
        dictgen::InsensitiveStr::Ascii("uctief"),
        dictgen::InsensitiveStr::Ascii("ucties"),
        dictgen::InsensitiveStr::Ascii("uctieve"),
        dictgen::InsensitiveStr::Ascii("uctifs"),
        dictgen::InsensitiveStr::Ascii("uctiin"),
        dictgen::InsensitiveStr::Ascii("uctiong"),
        dictgen::InsensitiveStr::Ascii("uctivo"),
        dictgen::InsensitiveStr::Ascii("ucto"),
        dictgen::InsensitiveStr::Ascii("uctos"),
        dictgen::InsensitiveStr::Ascii("uctur"),
        dictgen::InsensitiveStr::Ascii("uctus"),
        dictgen::InsensitiveStr::Ascii("ude"),
        dictgen::InsensitiveStr::Ascii("uint"),
        dictgen::InsensitiveStr::Ascii("uits"),
        dictgen::InsensitiveStr::Ascii("ust"),
        dictgen::InsensitiveStr::Ascii("ut"),
        dictgen::InsensitiveStr::Ascii("uted"),
    ],
    values: &[
        &["constructing"],
        &["construction"],
        &["constructs"],
        &["constraints"],
        &["constraints"],
        &["constraints"],
        &["constraints"],
        &["constraints"],
        &["constraint"],
        &["constraint"],
        &["constraints"],
        &["construction"],
        &["constructed"],
        &["constructing"],
        &["construction"],
        &["construction"],
        &["constructive"],
        &["constructs"],
        &["constructs"],
        &["construction"],
        &["constructive"],
        &["constructive"],
        &["constructs"],
        &["constructive"],
        &["constructs"],
        &["constructing"],
        &["constructing"],
        &["construction"],
        &["construction"],
        &["constructs"],
        &["constructor"],
        &["constructs"],
        &["construed"],
        &["constraint"],
        &["constructs"],
        &["constructs"],
        &["constructs"],
        &["constructed"],
    ],
    range: 2..=7,
};

static WORD_CONSTN_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_CONSTN_CHILDREN),
    value: None,
};

pub static WORD_CONSTN_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("atly")],
    values: &[&["constantly"]],
    range: 4..=4,
};

static WORD_CONSTI_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_CONSTI_CHILDREN),
    value: None,
};

pub static WORD_CONSTI_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("llation"),
        dictgen::InsensitiveStr::Ascii("nually"),
        dictgen::InsensitiveStr::Ascii("tition"),
        dictgen::InsensitiveStr::Ascii("titional"),
        dictgen::InsensitiveStr::Ascii("tuant"),
        dictgen::InsensitiveStr::Ascii("tuante"),
        dictgen::InsensitiveStr::Ascii("tuants"),
        dictgen::InsensitiveStr::Ascii("tuates"),
        dictgen::InsensitiveStr::Ascii("tucion"),
        dictgen::InsensitiveStr::Ascii("tucional"),
        dictgen::InsensitiveStr::Ascii("tude"),
        dictgen::InsensitiveStr::Ascii("tue"),
        dictgen::InsensitiveStr::Ascii("tued"),
        dictgen::InsensitiveStr::Ascii("tuem"),
        dictgen::InsensitiveStr::Ascii("tuer"),
        dictgen::InsensitiveStr::Ascii("tues"),
        dictgen::InsensitiveStr::Ascii("tuie"),
        dictgen::InsensitiveStr::Ascii("tuient"),
        dictgen::InsensitiveStr::Ascii("tuinte"),
        dictgen::InsensitiveStr::Ascii("tuintes"),
        dictgen::InsensitiveStr::Ascii("tuion"),
        dictgen::InsensitiveStr::Ascii("tuional"),
        dictgen::InsensitiveStr::Ascii("tuit"),
        dictgen::InsensitiveStr::Ascii("tuite"),
        dictgen::InsensitiveStr::Ascii("tutents"),
        dictgen::InsensitiveStr::Ascii("tutie"),
        dictgen::InsensitiveStr::Ascii("tutiei"),
        dictgen::InsensitiveStr::Ascii("tutinal"),
        dictgen::InsensitiveStr::Ascii("tutionnal"),
        dictgen::InsensitiveStr::Ascii("tutn"),
        dictgen::InsensitiveStr::Ascii("tutues"),
        dictgen::InsensitiveStr::Ascii("tuye"),
        dictgen::InsensitiveStr::Ascii("utents"),
    ],
    values: &[
        &["constellation"],
        &["continually"],
        &["constitution"],
        &["constitutional"],
        &["constituent"],
        &["constituents"],
        &["constituents"],
        &["constitutes"],
        &["constitution"],
        &["constitutional"],
        &["constitute"],
        &["constitutes"],
        &["constitute"],
        &["constitute"],
        &["constitute"],
        &["constitutes"],
        &["constitute"],
        &["constitute"],
        &["constituents"],
        &["constituents"],
        &["constitution"],
        &["constitutional"],
        &["constitute"],
        &["constitute"],
        &["constitutes"],
        &["constitutes"],
        &["constitute"],
        &["constitutional"],
        &["constitutional"],
        &["constituents"],
        &["constitute"],
        &["constitute"],
        &["constituents"],
    ],
    range: 3..=9,
};

static WORD_CONSTE_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_CONSTE_CHILDREN),
    value: None,
};

pub static WORD_CONSTE_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("ntly")],
    values: &[&["constantly"]],
    range: 4..=4,
};

static WORD_CONSTA_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_CONSTA_CHILDREN),
    value: None,
};

pub static WORD_CONSTA_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ints"),
        dictgen::InsensitiveStr::Ascii("llation"),
        dictgen::InsensitiveStr::Ascii("nly"),
        dictgen::InsensitiveStr::Ascii("ns"),
        dictgen::InsensitiveStr::Ascii("nst"),
        dictgen::InsensitiveStr::Ascii("ntins"),
        dictgen::InsensitiveStr::Ascii("ntivs"),
        dictgen::InsensitiveStr::Ascii("nty"),
        dictgen::InsensitiveStr::Ascii("rints"),
        dictgen::InsensitiveStr::Ascii("rnation"),
        dictgen::InsensitiveStr::Ascii("snt"),
        dictgen::InsensitiveStr::Ascii("st"),
        dictgen::InsensitiveStr::Ascii("tn"),
        dictgen::InsensitiveStr::Ascii("tnly"),
    ],
    values: &[
        &["constraints"],
        &["constellation"],
        &["constantly"],
        &["constants"],
        &["constants"],
        &["constants"],
        &["constants"],
        &["constantly"],
        &["constraint"],
        &["consternation"],
        &["constants"],
        &["constants"],
        &["constant"],
        &["constantly"],
    ],
    range: 2..=7,
};

static WORD_CONSQ_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_CONSQ_CHILDREN),
    value: None,
};

pub static WORD_CONSQ_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("euences")],
    values: &[&["consequence"]],
    range: 7..=7,
};

static WORD_CONSP_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_CONSP_CHILDREN),
    value: None,
};

pub static WORD_CONSP_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ericies"),
        dictgen::InsensitiveStr::Ascii("irace"),
        dictgen::InsensitiveStr::Ascii("iraces"),
        dictgen::InsensitiveStr::Ascii("iracize"),
        dictgen::InsensitiveStr::Ascii("iracys"),
        dictgen::InsensitiveStr::Ascii("irancy"),
        dictgen::InsensitiveStr::Ascii("iriator"),
        dictgen::InsensitiveStr::Ascii("iricies"),
        dictgen::InsensitiveStr::Ascii("iricy"),
        dictgen::InsensitiveStr::Ascii("riacies"),
        dictgen::InsensitiveStr::Ascii("riacy"),
    ],
    values: &[
        &["conspiracies"],
        &["conspiracies"],
        &["conspiracies"],
        &["conspiracies"],
        &["conspiracies"],
        &["conspiracy"],
        &["conspirator"],
        &["conspiracies"],
        &["conspiracy"],
        &["conspiracies"],
        &["conspiracy"],
    ],
    range: 5..=7,
};

static WORD_CONSO_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_CONSO_CHILDREN),
    value: None,
};

pub static WORD_CONSO_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("lacion"),
        dictgen::InsensitiveStr::Ascii("lato"),
        dictgen::InsensitiveStr::Ascii("ldiate"),
        dictgen::InsensitiveStr::Ascii("ldiated"),
        dictgen::InsensitiveStr::Ascii("lidad"),
        dictgen::InsensitiveStr::Ascii("lidare"),
        dictgen::InsensitiveStr::Ascii("lide"),
        dictgen::InsensitiveStr::Ascii("litated"),
        dictgen::InsensitiveStr::Ascii("lodate"),
        dictgen::InsensitiveStr::Ascii("lodated"),
        dictgen::InsensitiveStr::Ascii("ltation"),
        dictgen::InsensitiveStr::Ascii("mation"),
        dictgen::InsensitiveStr::Ascii("nent"),
        dictgen::InsensitiveStr::Ascii("nents"),
        dictgen::InsensitiveStr::Ascii("rcium"),
    ],
    values: &[
        &["consolation"],
        &["consolation"],
        &["consolidate"],
        &["consolidated"],
        &["consolidated"],
        &["consolidate"],
        &["consolidate"],
        &["consolidate"],
        &["consolidate"],
        &["consolidated"],
        &["consultation"],
        &["consolation"],
        &["consonant"],
        &["consonants"],
        &["consortium"],
    ],
    range: 4..=7,
};

static WORD_CONSL_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_CONSL_CHILDREN),
    value: None,
};

pub static WORD_CONSL_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("utant"),
        dictgen::InsensitiveStr::Ascii("utants"),
        dictgen::InsensitiveStr::Ascii("uting"),
    ],
    values: &[&["consultant"], &["consultant"], &["consulting"]],
    range: 5..=6,
};

static WORD_CONSI_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_CONSI_CHILDREN),
    value: None,
};

pub static WORD_CONSI_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("cence"),
        dictgen::InsensitiveStr::Ascii("ciousness"),
        dictgen::InsensitiveStr::Ascii("cous"),
        dictgen::InsensitiveStr::Ascii("cousness"),
        dictgen::InsensitiveStr::Ascii("derabe"),
        dictgen::InsensitiveStr::Ascii("derabely"),
        dictgen::InsensitiveStr::Ascii("derabile"),
        dictgen::InsensitiveStr::Ascii("derablely"),
        dictgen::InsensitiveStr::Ascii("derabley"),
        dictgen::InsensitiveStr::Ascii("derablly"),
        dictgen::InsensitiveStr::Ascii("deracion"),
        dictgen::InsensitiveStr::Ascii("derais"),
        dictgen::InsensitiveStr::Ascii("derant"),
        dictgen::InsensitiveStr::Ascii("derarle"),
        dictgen::InsensitiveStr::Ascii("derarte"),
        dictgen::InsensitiveStr::Ascii("deras"),
        dictgen::InsensitiveStr::Ascii("deraste"),
        dictgen::InsensitiveStr::Ascii("deratie"),
        dictgen::InsensitiveStr::Ascii("deratin"),
        dictgen::InsensitiveStr::Ascii("derato"),
        dictgen::InsensitiveStr::Ascii("deratoin"),
        dictgen::InsensitiveStr::Ascii("derble"),
        dictgen::InsensitiveStr::Ascii("derbly"),
        dictgen::InsensitiveStr::Ascii("derd"),
        dictgen::InsensitiveStr::Ascii("dereis"),
        dictgen::InsensitiveStr::Ascii("deret"),
        dictgen::InsensitiveStr::Ascii("deribly"),
        dictgen::InsensitiveStr::Ascii("derstion"),
        dictgen::InsensitiveStr::Ascii("derstions"),
        dictgen::InsensitiveStr::Ascii("dert"),
        dictgen::InsensitiveStr::Ascii("dertaion"),
        dictgen::InsensitiveStr::Ascii("lation"),
        dictgen::InsensitiveStr::Ascii("lidate"),
        dictgen::InsensitiveStr::Ascii("lidated"),
        dictgen::InsensitiveStr::Ascii("ous"),
        dictgen::InsensitiveStr::Ascii("pracies"),
        dictgen::InsensitiveStr::Ascii("pracy"),
        dictgen::InsensitiveStr::Ascii("quently"),
        dictgen::InsensitiveStr::Ascii("sent"),
        dictgen::InsensitiveStr::Ascii("stance"),
        dictgen::InsensitiveStr::Ascii("stant"),
        dictgen::InsensitiveStr::Ascii("stantly"),
        dictgen::InsensitiveStr::Ascii("stencey"),
        dictgen::InsensitiveStr::Ascii("stenly"),
        dictgen::InsensitiveStr::Ascii("stens"),
        dictgen::InsensitiveStr::Ascii("stensy"),
        dictgen::InsensitiveStr::Ascii("stentcy"),
        dictgen::InsensitiveStr::Ascii("stenty"),
        dictgen::InsensitiveStr::Ascii("steny"),
        dictgen::InsensitiveStr::Ascii("stes"),
        dictgen::InsensitiveStr::Ascii("tency"),
        dictgen::InsensitiveStr::Ascii("tuencies"),
        dictgen::InsensitiveStr::Ascii("tuted"),
        dictgen::InsensitiveStr::Ascii("tutents"),
        dictgen::InsensitiveStr::Ascii("tution"),
        dictgen::InsensitiveStr::Ascii("tutional"),
    ],
    values: &[
        &["conscience"],
        &["consciousness"],
        &["conscious"],
        &["consciousness"],
        &["considerate"],
        &["considerable"],
        &["considerable"],
        &["considerably"],
        &["considerably"],
        &["considerably"],
        &["consideration"],
        &["considers"],
        &["considerate"],
        &["considerable"],
        &["considerate"],
        &["considers"],
        &["considerate"],
        &["considerate"],
        &["considerations"],
        &["consideration"],
        &["considerations"],
        &["considerable"],
        &["considerably"],
        &["considered"],
        &["considers"],
        &["considerate"],
        &["considerably"],
        &["considerations"],
        &["considerations"],
        &["considerate"],
        &["considerations"],
        &["consolation"],
        &["consolidate"],
        &["consolidated"],
        &["conscious"],
        &["conspiracies"],
        &["conspiracy"],
        &["consequently"],
        &["consistent"],
        &["consistency"],
        &["consistent"],
        &["consistently"],
        &["consistency"],
        &["consistently"],
        &["consists"],
        &["consistency"],
        &["consistently"],
        &["consistently"],
        &["consistency"],
        &["consists"],
        &["consistency"],
        &["constituencies"],
        &["constituted"],
        &["constituents"],
        &["constitution"],
        &["constitutional"],
    ],
    range: 3..=9,
};

static WORD_CONSF_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_CONSF_CHILDREN),
    value: None,
};

pub static WORD_CONSF_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("icated")],
    values: &[&["confiscated"]],
    range: 6..=6,
};

static WORD_CONSE_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_CONSE_CHILDREN),
    value: None,
};

pub static WORD_CONSE_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ctuive"),
        dictgen::InsensitiveStr::Ascii("ctutive"),
        dictgen::InsensitiveStr::Ascii("cuence"),
        dictgen::InsensitiveStr::Ascii("cuences"),
        dictgen::InsensitiveStr::Ascii("cuentes"),
        dictgen::InsensitiveStr::Ascii("cuently"),
        dictgen::InsensitiveStr::Ascii("guence"),
        dictgen::InsensitiveStr::Ascii("lation"),
        dictgen::InsensitiveStr::Ascii("nding"),
        dictgen::InsensitiveStr::Ascii("nquently"),
        dictgen::InsensitiveStr::Ascii("nsuarlo"),
        dictgen::InsensitiveStr::Ascii("nsuel"),
        dictgen::InsensitiveStr::Ascii("nsul"),
        dictgen::InsensitiveStr::Ascii("ntrate"),
        dictgen::InsensitiveStr::Ascii("ntrated"),
        dictgen::InsensitiveStr::Ascii("ntrates"),
        dictgen::InsensitiveStr::Ascii("ntrating"),
        dictgen::InsensitiveStr::Ascii("ntration"),
        dictgen::InsensitiveStr::Ascii("ntrations"),
        dictgen::InsensitiveStr::Ascii("nusal"),
        dictgen::InsensitiveStr::Ascii("pt"),
        dictgen::InsensitiveStr::Ascii("qeunces"),
        dictgen::InsensitiveStr::Ascii("quece"),
        dictgen::InsensitiveStr::Ascii("quencies"),
        dictgen::InsensitiveStr::Ascii("quenes"),
        dictgen::InsensitiveStr::Ascii("quense"),
        dictgen::InsensitiveStr::Ascii("quenses"),
        dictgen::InsensitiveStr::Ascii("quental"),
        dictgen::InsensitiveStr::Ascii("quente"),
        dictgen::InsensitiveStr::Ascii("quentely"),
        dictgen::InsensitiveStr::Ascii("quentually"),
        dictgen::InsensitiveStr::Ascii("quenty"),
        dictgen::InsensitiveStr::Ascii("queseces"),
        dictgen::InsensitiveStr::Ascii("qunce"),
        dictgen::InsensitiveStr::Ascii("quneces"),
        dictgen::InsensitiveStr::Ascii("qutive"),
        dictgen::InsensitiveStr::Ascii("rn"),
        dictgen::InsensitiveStr::Ascii("rned"),
        dictgen::InsensitiveStr::Ascii("rvacion"),
        dictgen::InsensitiveStr::Ascii("rvanti"),
        dictgen::InsensitiveStr::Ascii("rvare"),
        dictgen::InsensitiveStr::Ascii("rvatie"),
        dictgen::InsensitiveStr::Ascii("rvaties"),
        dictgen::InsensitiveStr::Ascii("rvatisim"),
        dictgen::InsensitiveStr::Ascii("rvativo"),
        dictgen::InsensitiveStr::Ascii("rvativs"),
        dictgen::InsensitiveStr::Ascii("rvativsm"),
        dictgen::InsensitiveStr::Ascii("rvato"),
        dictgen::InsensitiveStr::Ascii("rvaton"),
        dictgen::InsensitiveStr::Ascii("rvice"),
        dictgen::InsensitiveStr::Ascii("rvies"),
        dictgen::InsensitiveStr::Ascii("rvitave"),
        dictgen::InsensitiveStr::Ascii("rvite"),
        dictgen::InsensitiveStr::Ascii("rvitism"),
        dictgen::InsensitiveStr::Ascii("rvitive"),
        dictgen::InsensitiveStr::Ascii("rvitives"),
    ],
    values: &[
        &["consecutive"],
        &["consecutive"],
        &["consequence"],
        &["consequences"],
        &["consequences"],
        &["consequently"],
        &["consequence"],
        &["consolation"],
        &["consenting"],
        &["consequently"],
        &["consensual"],
        &["consensual"],
        &["consensual"],
        &["concentrate"],
        &["concentrated"],
        &["concentrates"],
        &["concentrating"],
        &["concentration"],
        &["concentrations"],
        &["consensual"],
        &["concept"],
        &["consequence"],
        &["consequence"],
        &["consequence"],
        &["consequence"],
        &["consequences"],
        &["consequences"],
        &["consequently"],
        &["consequence"],
        &["consequently"],
        &["consequently"],
        &["consequently"],
        &["consequences"],
        &["consequence"],
        &["consequence"],
        &["consecutive"],
        &["concern"],
        &["concerned"],
        &["conservation"],
        &["conservation"],
        &["conserve"],
        &["conservatives"],
        &["conservatives"],
        &["conservatism"],
        &["conservation"],
        &["conservatism"],
        &["conservatism"],
        &["conservation"],
        &["conservation"],
        &["conserve"],
        &["conserve"],
        &["conservatives"],
        &["conserve"],
        &["conservatism"],
        &["conservative"],
        &["conservatives"],
    ],
    range: 2..=10,
};

static WORD_CONSD_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_CONSD_CHILDREN),
    value: None,
};

pub static WORD_CONSD_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ider"),
        dictgen::InsensitiveStr::Ascii("idered"),
        dictgen::InsensitiveStr::Ascii("ieration"),
        dictgen::InsensitiveStr::Ascii("iered"),
    ],
    values: &[
        &["consider"],
        &["considered"],
        &["considerations"],
        &["considered"],
    ],
    range: 4..=8,
};

static WORD_CONSC_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_CONSC_CHILDREN),
    value: None,
};

pub static WORD_CONSC_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ent"),
        dictgen::InsensitiveStr::Ascii("iense"),
        dictgen::InsensitiveStr::Ascii("iouly"),
        dictgen::InsensitiveStr::Ascii("iouness"),
        dictgen::InsensitiveStr::Ascii("iouslly"),
        dictgen::InsensitiveStr::Ascii("ioussness"),
    ],
    values: &[
        &["consent"],
        &["conscience"],
        &["consciously"],
        &["consciousness"],
        &["consciously"],
        &["consciousness"],
    ],
    range: 3..=9,
};

static WORD_CONQ_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_CONQ_CHILDREN),
    value: None,
};

pub static WORD_CONQ_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("eur"),
        dictgen::InsensitiveStr::Ascii("euring"),
        dictgen::InsensitiveStr::Ascii("ouring"),
        dictgen::InsensitiveStr::Ascii("ueor"),
        dictgen::InsensitiveStr::Ascii("uerd"),
        dictgen::InsensitiveStr::Ascii("uerer"),
        dictgen::InsensitiveStr::Ascii("uerers"),
        dictgen::InsensitiveStr::Ascii("uerring"),
        dictgen::InsensitiveStr::Ascii("uoring"),
        dictgen::InsensitiveStr::Ascii("ure"),
        dictgen::InsensitiveStr::Ascii("ured"),
    ],
    values: &[
        &["conquer"],
        &["conquering"],
        &["conquering"],
        &["conquer"],
        &["conquered"],
        &["conqueror"],
        &["conquerors"],
        &["conquering"],
        &["conquering"],
        &["conquer"],
        &["conquered"],
    ],
    range: 3..=7,
};

static WORD_CONP_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_CONP_CHILDREN),
    value: None,
};

pub static WORD_CONP_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("assionate"),
        dictgen::InsensitiveStr::Ascii("ensating"),
        dictgen::InsensitiveStr::Ascii("ensation"),
        dictgen::InsensitiveStr::Ascii("etitions"),
        dictgen::InsensitiveStr::Ascii("lications"),
        dictgen::InsensitiveStr::Ascii("limentary"),
        dictgen::InsensitiveStr::Ascii("limented"),
        dictgen::InsensitiveStr::Ascii("limenting"),
        dictgen::InsensitiveStr::Ascii("rehension"),
        dictgen::InsensitiveStr::Ascii("romising"),
        dictgen::InsensitiveStr::Ascii("siracy"),
    ],
    values: &[
        &["compassionate"],
        &["compensating"],
        &["compensation"],
        &["competitions"],
        &["complications"],
        &["complimentary"],
        &["complimented"],
        &["complimenting"],
        &["comprehension"],
        &["compromising"],
        &["conspiracy"],
    ],
    range: 6..=9,
};

static WORD_CONO_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_CONO_CHILDREN),
    value: None,
};

pub static WORD_CONO_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("lization"),
        dictgen::InsensitiveStr::Ascii("ntation"),
        dictgen::InsensitiveStr::Ascii("tations"),
    ],
    values: &[&["colonization"], &["connotation"], &["connotations"]],
    range: 7..=8,
};

static WORD_CONN_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_CONN_CHILDREN),
    value: None,
};

pub static WORD_CONN_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("atation"),
        dictgen::InsensitiveStr::Ascii("atations"),
        dictgen::InsensitiveStr::Ascii("cetion"),
        dictgen::InsensitiveStr::Ascii("ecitcut"),
        dictgen::InsensitiveStr::Ascii("eciton"),
        dictgen::InsensitiveStr::Ascii("ecs"),
        dictgen::InsensitiveStr::Ascii("ectes"),
        dictgen::InsensitiveStr::Ascii("ecticon"),
        dictgen::InsensitiveStr::Ascii("ecticuit"),
        dictgen::InsensitiveStr::Ascii("ecticunts"),
        dictgen::InsensitiveStr::Ascii("ecties"),
        dictgen::InsensitiveStr::Ascii("ectins"),
        dictgen::InsensitiveStr::Ascii("ectiong"),
        dictgen::InsensitiveStr::Ascii("ectit"),
        dictgen::InsensitiveStr::Ascii("ectivety"),
        dictgen::InsensitiveStr::Ascii("ectivitiy"),
        dictgen::InsensitiveStr::Ascii("ectivty"),
        dictgen::InsensitiveStr::Ascii("ectivy"),
        dictgen::InsensitiveStr::Ascii("ectos"),
        dictgen::InsensitiveStr::Ascii("ectpro"),
        dictgen::InsensitiveStr::Ascii("etation"),
        dictgen::InsensitiveStr::Ascii("etations"),
        dictgen::InsensitiveStr::Ascii("eticut"),
        dictgen::InsensitiveStr::Ascii("itations"),
        dictgen::InsensitiveStr::Ascii("onation"),
        dictgen::InsensitiveStr::Ascii("onations"),
        dictgen::InsensitiveStr::Ascii("otacion"),
        dictgen::InsensitiveStr::Ascii("otaion"),
    ],
    values: &[
        &["connotation"],
        &["connotations"],
        &["connections"],
        &["connecticut"],
        &["connection"],
        &["connects"],
        &["connects"],
        &["connection"],
        &["connecticut"],
        &["connecticut"],
        &["connects"],
        &["connects"],
        &["connecting"],
        &["connecticut"],
        &["connectivity"],
        &["connectivity"],
        &["connectivity"],
        &["connectivity"],
        &["connectors"],
        &["connector"],
        &["connotation"],
        &["connotations"],
        &["connecticut"],
        &["connotations"],
        &["connotation"],
        &["connotations"],
        &["connotation"],
        &["connotation"],
    ],
    range: 3..=9,
};

static WORD_CONL_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_CONL_CHILDREN),
    value: None,
};

pub static WORD_CONL_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("cude"),
        dictgen::InsensitiveStr::Ascii("cuded"),
        dictgen::InsensitiveStr::Ascii("cusion"),
        dictgen::InsensitiveStr::Ascii("cusions"),
    ],
    values: &[
        &["conclude"],
        &["concluded"],
        &["conclusion"],
        &["conclusions"],
    ],
    range: 4..=7,
};

static WORD_CONJ_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_CONJ_CHILDREN),
    value: None,
};

pub static WORD_CONJ_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ecutre"),
        dictgen::InsensitiveStr::Ascii("onction"),
        dictgen::InsensitiveStr::Ascii("ucntion"),
        dictgen::InsensitiveStr::Ascii("uction"),
        dictgen::InsensitiveStr::Ascii("uncion"),
        dictgen::InsensitiveStr::Ascii("uncting"),
    ],
    values: &[
        &["conjecture"],
        &["conjunction"],
        &["conjunction"],
        &["conjunction"],
        &["conjunction"],
        &["conjunction"],
    ],
    range: 6..=7,
};

static WORD_CONI_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_CONI_CHILDREN),
    value: None,
};

pub static WORD_CONI_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("cide"),
        dictgen::InsensitiveStr::Ascii("cidence"),
        dictgen::InsensitiveStr::Ascii("cidental"),
        dictgen::InsensitiveStr::Ascii("cidentally"),
        dictgen::InsensitiveStr::Ascii("fguration"),
        dictgen::InsensitiveStr::Ascii("fgurations"),
        dictgen::InsensitiveStr::Ascii("sderation"),
        dictgen::InsensitiveStr::Ascii("ved"),
    ],
    values: &[
        &["coincide"],
        &["coincidence"],
        &["coincidental"],
        &["coincidentally"],
        &["configurations"],
        &["configurations"],
        &["considerations"],
        &["connived"],
    ],
    range: 3..=10,
};

static WORD_CONG_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_CONG_CHILDREN),
    value: None,
};

pub static WORD_CONG_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("egration"),
        dictgen::InsensitiveStr::Ascii("ergation"),
        dictgen::InsensitiveStr::Ascii("itive"),
        dictgen::InsensitiveStr::Ascii("laturation"),
        dictgen::InsensitiveStr::Ascii("laturations"),
        dictgen::InsensitiveStr::Ascii("radulate"),
        dictgen::InsensitiveStr::Ascii("radulations"),
        dictgen::InsensitiveStr::Ascii("ragation"),
        dictgen::InsensitiveStr::Ascii("ragulate"),
        dictgen::InsensitiveStr::Ascii("ragulations"),
        dictgen::InsensitiveStr::Ascii("rassman"),
        dictgen::InsensitiveStr::Ascii("ratualte"),
        dictgen::InsensitiveStr::Ascii("ratualted"),
        dictgen::InsensitiveStr::Ascii("ratualtions"),
        dictgen::InsensitiveStr::Ascii("ratuate"),
        dictgen::InsensitiveStr::Ascii("ratulatons"),
        dictgen::InsensitiveStr::Ascii("ratule"),
        dictgen::InsensitiveStr::Ascii("raturations"),
        dictgen::InsensitiveStr::Ascii("regacion"),
        dictgen::InsensitiveStr::Ascii("resional"),
        dictgen::InsensitiveStr::Ascii("resman"),
        dictgen::InsensitiveStr::Ascii("resmen"),
        dictgen::InsensitiveStr::Ascii("ressen"),
        dictgen::InsensitiveStr::Ascii("resssman"),
        dictgen::InsensitiveStr::Ascii("resssmen"),
        dictgen::InsensitiveStr::Ascii("retation"),
        dictgen::InsensitiveStr::Ascii("rigation"),
    ],
    values: &[
        &["congregation"],
        &["congregation"],
        &["cognitive"],
        &["congratulations"],
        &["congratulations"],
        &["congratulate"],
        &["congratulations"],
        &["congregation"],
        &["congratulate"],
        &["congratulations"],
        &["congressman"],
        &["congratulate"],
        &["congratulate"],
        &["congratulations"],
        &["congratulate"],
        &["congratulations"],
        &["congratulate"],
        &["congratulations"],
        &["congregation"],
        &["congressional"],
        &["congressman"],
        &["congressmen"],
        &["congressmen"],
        &["congressman"],
        &["congressmen"],
        &["congregation"],
        &["congregation"],
    ],
    range: 5..=11,
};

static WORD_CONF_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_CONF_CHILDREN),
    value: None,
};

static WORD_CONF_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    None,
    None,
    None,
    None,
    Some(&WORD_CONFE_NODE),
    None,
    None,
    None,
    Some(&WORD_CONFI_NODE),
    None,
    None,
    Some(&WORD_CONFL_NODE),
    None,
    None,
    Some(&WORD_CONFO_NODE),
    None,
    None,
    Some(&WORD_CONFR_NODE),
    None,
    None,
    Some(&WORD_CONFU_NODE),
    None,
    None,
    None,
    None,
    None,
];

static WORD_CONFU_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_CONFU_CHILDREN),
    value: None,
};

pub static WORD_CONFU_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("gurations"),
        dictgen::InsensitiveStr::Ascii("ssion"),
        dictgen::InsensitiveStr::Ascii("ssions"),
    ],
    values: &[&["configurations"], &["confession"], &["confessions"]],
    range: 5..=9,
};

static WORD_CONFR_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_CONFR_CHILDREN),
    value: None,
};

pub static WORD_CONFR_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("entation"),
        dictgen::InsensitiveStr::Ascii("entational"),
        dictgen::InsensitiveStr::Ascii("imation"),
        dictgen::InsensitiveStr::Ascii("imed"),
        dictgen::InsensitiveStr::Ascii("iming"),
        dictgen::InsensitiveStr::Ascii("ims"),
        dictgen::InsensitiveStr::Ascii("ontacion"),
        dictgen::InsensitiveStr::Ascii("ontacional"),
        dictgen::InsensitiveStr::Ascii("ontaion"),
        dictgen::InsensitiveStr::Ascii("ontating"),
        dictgen::InsensitiveStr::Ascii("ontativo"),
        dictgen::InsensitiveStr::Ascii("ontato"),
    ],
    values: &[
        &["confrontation"],
        &["confrontational"],
        &["confirmation"],
        &["confirmed"],
        &["confirming"],
        &["confirms"],
        &["confrontation"],
        &["confrontational"],
        &["confrontation"],
        &["confrontation"],
        &["confrontation"],
        &["confrontation"],
    ],
    range: 3..=10,
};

static WORD_CONFO_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_CONFO_CHILDREN),
    value: None,
};

pub static WORD_CONFO_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("rtable")],
    values: &[&["comfortable"]],
    range: 6..=6,
};

static WORD_CONFL_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_CONFL_CHILDREN),
    value: None,
};

pub static WORD_CONFL_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("cit"),
        dictgen::InsensitiveStr::Ascii("citing"),
        dictgen::InsensitiveStr::Ascii("cits"),
        dictgen::InsensitiveStr::Ascii("cting"),
        dictgen::InsensitiveStr::Ascii("icing"),
        dictgen::InsensitiveStr::Ascii("ics"),
        dictgen::InsensitiveStr::Ascii("ictos"),
        dictgen::InsensitiveStr::Ascii("it"),
        dictgen::InsensitiveStr::Ascii("iting"),
    ],
    values: &[
        &["conflict"],
        &["conflicting"],
        &["conflicts"],
        &["conflating"],
        &["conflicting"],
        &["conflicts"],
        &["conflicts"],
        &["conflict"],
        &["conflating"],
    ],
    range: 2..=6,
};

static WORD_CONFI_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_CONFI_CHILDREN),
    value: None,
};

pub static WORD_CONFI_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("dance"),
        dictgen::InsensitiveStr::Ascii("dantly"),
        dictgen::InsensitiveStr::Ascii("dencial"),
        dictgen::InsensitiveStr::Ascii("denciality"),
        dictgen::InsensitiveStr::Ascii("denly"),
        dictgen::InsensitiveStr::Ascii("dense"),
        dictgen::InsensitiveStr::Ascii("dentail"),
        dictgen::InsensitiveStr::Ascii("dentally"),
        dictgen::InsensitiveStr::Ascii("dentaly"),
        dictgen::InsensitiveStr::Ascii("dentely"),
        dictgen::InsensitiveStr::Ascii("dentiel"),
        dictgen::InsensitiveStr::Ascii("dentuality"),
        dictgen::InsensitiveStr::Ascii("denty"),
        dictgen::InsensitiveStr::Ascii("deny"),
        dictgen::InsensitiveStr::Ascii("ds"),
        dictgen::InsensitiveStr::Ascii("gruation"),
        dictgen::InsensitiveStr::Ascii("guartion"),
        dictgen::InsensitiveStr::Ascii("guartions"),
        dictgen::InsensitiveStr::Ascii("gue"),
        dictgen::InsensitiveStr::Ascii("guracion"),
        dictgen::InsensitiveStr::Ascii("guraiton"),
        dictgen::InsensitiveStr::Ascii("gurare"),
        dictgen::InsensitiveStr::Ascii("gurate"),
        dictgen::InsensitiveStr::Ascii("guratin"),
        dictgen::InsensitiveStr::Ascii("gurato"),
        dictgen::InsensitiveStr::Ascii("guratoin"),
        dictgen::InsensitiveStr::Ascii("guraton"),
        dictgen::InsensitiveStr::Ascii("gureable"),
        dictgen::InsensitiveStr::Ascii("lct"),
        dictgen::InsensitiveStr::Ascii("lcting"),
        dictgen::InsensitiveStr::Ascii("lcts"),
        dictgen::InsensitiveStr::Ascii("mred"),
        dictgen::InsensitiveStr::Ascii("ns"),
        dictgen::InsensitiveStr::Ascii("rmacion"),
        dictgen::InsensitiveStr::Ascii("rmas"),
        dictgen::InsensitiveStr::Ascii("rmd"),
        dictgen::InsensitiveStr::Ascii("se"),
        dictgen::InsensitiveStr::Ascii("sgated"),
    ],
    values: &[
        &["confidence"],
        &["confidently"],
        &["confidential"],
        &["confidential"],
        &["confidently"],
        &["confidence"],
        &["confidential"],
        &["confidentially"],
        &["confidently"],
        &["confidently"],
        &["confidential"],
        &["confidential"],
        &["confidently"],
        &["confidently"],
        &["confides"],
        &["configurations"],
        &["configuration"],
        &["configurations"],
        &["configure"],
        &["configuration"],
        &["configuration"],
        &["configure"],
        &["configure"],
        &["configurations"],
        &["configuration"],
        &["configurations"],
        &["configuration"],
        &["configurable"],
        &["conflict"],
        &["conflicting"],
        &["conflicts"],
        &["confirmed"],
        &["confines"],
        &["confirmation"],
        &["confirms"],
        &["confirmed"],
        &["confines"],
        &["confiscated"],
    ],
    range: 2..=10,
};

static WORD_CONFE_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_CONFE_CHILDREN),
    value: None,
};

pub static WORD_CONFE_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("daracy"),
        dictgen::InsensitiveStr::Ascii("darate"),
        dictgen::InsensitiveStr::Ascii("darcy"),
        dictgen::InsensitiveStr::Ascii("dence"),
        dictgen::InsensitiveStr::Ascii("dential"),
        dictgen::InsensitiveStr::Ascii("derancy"),
        dictgen::InsensitiveStr::Ascii("deratie"),
        dictgen::InsensitiveStr::Ascii("dercy"),
        dictgen::InsensitiveStr::Ascii("derecy"),
        dictgen::InsensitiveStr::Ascii("rance"),
        dictgen::InsensitiveStr::Ascii("rances"),
        dictgen::InsensitiveStr::Ascii("redate"),
        dictgen::InsensitiveStr::Ascii("rene"),
        dictgen::InsensitiveStr::Ascii("renze"),
        dictgen::InsensitiveStr::Ascii("rerate"),
        dictgen::InsensitiveStr::Ascii("rmation"),
        dictgen::InsensitiveStr::Ascii("rming"),
        dictgen::InsensitiveStr::Ascii("rnece"),
        dictgen::InsensitiveStr::Ascii("rsation"),
        dictgen::InsensitiveStr::Ascii("scated"),
        dictgen::InsensitiveStr::Ascii("ses"),
        dictgen::InsensitiveStr::Ascii("sos"),
        dictgen::InsensitiveStr::Ascii("ssin"),
        dictgen::InsensitiveStr::Ascii("ssino"),
        dictgen::InsensitiveStr::Ascii("ssionis"),
        dictgen::InsensitiveStr::Ascii("sso"),
        dictgen::InsensitiveStr::Ascii("sssion"),
    ],
    values: &[
        &["confederacy"],
        &["confederate"],
        &["confederacy"],
        &["conference"],
        &["confidential"],
        &["confederacy"],
        &["confederate"],
        &["confederacy"],
        &["confederacy"],
        &["conference"],
        &["conferences"],
        &["confederate"],
        &["conferences"],
        &["conference"],
        &["confederate"],
        &["confirmation"],
        &["confirming"],
        &["conferences"],
        &["conservation"],
        &["confiscated"],
        &["confess"],
        &["confess"],
        &["confession"],
        &["confessions"],
        &["confessions"],
        &["confession"],
        &["confessions"],
    ],
    range: 3..=7,
};

static WORD_CONE_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_CONE_CHILDREN),
    value: None,
};

pub static WORD_CONE_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("cntration"),
        dictgen::InsensitiveStr::Ascii("cted"),
        dictgen::InsensitiveStr::Ascii("ction"),
        dictgen::InsensitiveStr::Ascii("ncting"),
        dictgen::InsensitiveStr::Ascii("nction"),
        dictgen::InsensitiveStr::Ascii("nctions"),
        dictgen::InsensitiveStr::Ascii("nctivity"),
        dictgen::InsensitiveStr::Ascii("nctor"),
        dictgen::InsensitiveStr::Ascii("nctors"),
        dictgen::InsensitiveStr::Ascii("nctration"),
        dictgen::InsensitiveStr::Ascii("ncts"),
        dictgen::InsensitiveStr::Ascii("scutive"),
        dictgen::InsensitiveStr::Ascii("sencus"),
    ],
    values: &[
        &["concentrations"],
        &["connected"],
        &["connection"],
        &["connecting"],
        &["connection"],
        &["connections"],
        &["connectivity"],
        &["connector"],
        &["connectors"],
        &["concentrations"],
        &["connects"],
        &["consecutive"],
        &["consensus"],
    ],
    range: 4..=9,
};

static WORD_COND_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_COND_CHILDREN),
    value: None,
};

pub static WORD_COND_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("amnation"),
        dictgen::InsensitiveStr::Ascii("amned"),
        dictgen::InsensitiveStr::Ascii("amning"),
        dictgen::InsensitiveStr::Ascii("ascending"),
        dictgen::InsensitiveStr::Ascii("eferacy"),
        dictgen::InsensitiveStr::Ascii("emantion"),
        dictgen::InsensitiveStr::Ascii("emend"),
        dictgen::InsensitiveStr::Ascii("emmed"),
        dictgen::InsensitiveStr::Ascii("emming"),
        dictgen::InsensitiveStr::Ascii("emnd"),
        dictgen::InsensitiveStr::Ascii("emnig"),
        dictgen::InsensitiveStr::Ascii("encing"),
        dictgen::InsensitiveStr::Ascii("enm"),
        dictgen::InsensitiveStr::Ascii("enmation"),
        dictgen::InsensitiveStr::Ascii("enmed"),
        dictgen::InsensitiveStr::Ascii("enming"),
        dictgen::InsensitiveStr::Ascii("ensend"),
        dictgen::InsensitiveStr::Ascii("escencion"),
        dictgen::InsensitiveStr::Ascii("escendion"),
        dictgen::InsensitiveStr::Ascii("escening"),
        dictgen::InsensitiveStr::Ascii("escenion"),
        dictgen::InsensitiveStr::Ascii("escenscion"),
        dictgen::InsensitiveStr::Ascii("escensing"),
        dictgen::InsensitiveStr::Ascii("esend"),
        dictgen::InsensitiveStr::Ascii("esned"),
        dictgen::InsensitiveStr::Ascii("icional"),
        dictgen::InsensitiveStr::Ascii("idtion"),
        dictgen::InsensitiveStr::Ascii("idtions"),
        dictgen::InsensitiveStr::Ascii("iscending"),
        dictgen::InsensitiveStr::Ascii("itinal"),
        dictgen::InsensitiveStr::Ascii("itiner"),
        dictgen::InsensitiveStr::Ascii("itionar"),
        dictgen::InsensitiveStr::Ascii("itiond"),
        dictgen::InsensitiveStr::Ascii("itionel"),
        dictgen::InsensitiveStr::Ascii("itiong"),
        dictgen::InsensitiveStr::Ascii("itionnal"),
        dictgen::InsensitiveStr::Ascii("itionned"),
        dictgen::InsensitiveStr::Ascii("itionner"),
        dictgen::InsensitiveStr::Ascii("itionning"),
        dictgen::InsensitiveStr::Ascii("iton"),
        dictgen::InsensitiveStr::Ascii("iut"),
        dictgen::InsensitiveStr::Ascii("men"),
        dictgen::InsensitiveStr::Ascii("menation"),
        dictgen::InsensitiveStr::Ascii("mened"),
        dictgen::InsensitiveStr::Ascii("mening"),
        dictgen::InsensitiveStr::Ascii("olances"),
        dictgen::InsensitiveStr::Ascii("olencies"),
        dictgen::InsensitiveStr::Ascii("olensces"),
        dictgen::InsensitiveStr::Ascii("olenses"),
        dictgen::InsensitiveStr::Ascii("olonces"),
        dictgen::InsensitiveStr::Ascii("omes"),
        dictgen::InsensitiveStr::Ascii("omnation"),
        dictgen::InsensitiveStr::Ascii("omns"),
        dictgen::InsensitiveStr::Ascii("radicted"),
        dictgen::InsensitiveStr::Ascii("radicting"),
        dictgen::InsensitiveStr::Ascii("radiction"),
        dictgen::InsensitiveStr::Ascii("radictions"),
        dictgen::InsensitiveStr::Ascii("radictory"),
        dictgen::InsensitiveStr::Ascii("uctiong"),
        dictgen::InsensitiveStr::Ascii("uict"),
        dictgen::InsensitiveStr::Ascii("uiting"),
        dictgen::InsensitiveStr::Ascii("ulences"),
    ],
    values: &[
        &["condemnation"],
        &["condemned"],
        &["condemning"],
        &["condescending"],
        &["confederacy"],
        &["condemnation"],
        &["condemned"],
        &["condemned"],
        &["condemning"],
        &["condemned"],
        &["condemning"],
        &["condemning"],
        &["condemn"],
        &["condemnation"],
        &["condemned"],
        &["condemning"],
        &["condensed"],
        &["condescension"],
        &["condescension"],
        &["condescending"],
        &["condescension"],
        &["condescension"],
        &["condescension"],
        &["condensed"],
        &["condensed"],
        &["conditional"],
        &["condition"],
        &["conditions"],
        &["condescending"],
        &["conditional"],
        &["conditioner"],
        &["conditioner"],
        &["conditioned"],
        &["conditional"],
        &["conditioning"],
        &["conditional"],
        &["conditioned"],
        &["conditioner"],
        &["conditioning"],
        &["condition"],
        &["conduit"],
        &["condemn"],
        &["condemnation"],
        &["condemned"],
        &["condemning"],
        &["condolences"],
        &["condolences"],
        &["condolences"],
        &["condolences"],
        &["condolences"],
        &["condoms"],
        &["condemnation"],
        &["condoms"],
        &["contradicted"],
        &["contradicting"],
        &["contradiction"],
        &["contradictions"],
        &["contradictory"],
        &["conducting"],
        &["conduit"],
        &["conducting"],
        &["condolences"],
    ],
    range: 3..=10,
};

static WORD_CONC_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_CONC_CHILDREN),
    value: None,
};

static WORD_CONC_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    Some(&WORD_CONCA_NODE),
    None,
    None,
    None,
    Some(&WORD_CONCE_NODE),
    None,
    None,
    None,
    Some(&WORD_CONCI_NODE),
    None,
    None,
    Some(&WORD_CONCL_NODE),
    None,
    Some(&WORD_CONCN_NODE),
    Some(&WORD_CONCO_NODE),
    None,
    None,
    Some(&WORD_CONCR_NODE),
    Some(&WORD_CONCS_NODE),
    None,
    Some(&WORD_CONCU_NODE),
    None,
    None,
    None,
    None,
    None,
];

static WORD_CONCU_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_CONCU_CHILDREN),
    value: None,
};

pub static WORD_CONCU_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("lsion"),
        dictgen::InsensitiveStr::Ascii("lsions"),
        dictgen::InsensitiveStr::Ascii("lsive"),
        dictgen::InsensitiveStr::Ascii("rment"),
        dictgen::InsensitiveStr::Ascii("rrant"),
        dictgen::InsensitiveStr::Ascii("rrect"),
        dictgen::InsensitiveStr::Ascii("rret"),
        dictgen::InsensitiveStr::Ascii("sions"),
        dictgen::InsensitiveStr::Ascii("sison"),
        dictgen::InsensitiveStr::Ascii("sssion"),
    ],
    values: &[
        &["conclusion"],
        &["conclusions"],
        &["conclusive"],
        &["concurrent"],
        &["concurrent"],
        &["concurrent"],
        &["concurrent"],
        &["concussion"],
        &["concussions"],
        &["concussions"],
    ],
    range: 4..=6,
};

static WORD_CONCS_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_CONCS_CHILDREN),
    value: None,
};

pub static WORD_CONCS_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ience"),
        dictgen::InsensitiveStr::Ascii("ious"),
        dictgen::InsensitiveStr::Ascii("iously"),
        dictgen::InsensitiveStr::Ascii("iousness"),
    ],
    values: &[
        &["conscience"],
        &["conscious"],
        &["consciously"],
        &["consciousness"],
    ],
    range: 4..=8,
};

static WORD_CONCR_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_CONCR_CHILDREN),
    value: None,
};

pub static WORD_CONCR_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("eet"),
        dictgen::InsensitiveStr::Ascii("et"),
        dictgen::InsensitiveStr::Ascii("ets"),
    ],
    values: &[&["concrete"], &["concert"], &["concerts"]],
    range: 2..=3,
};

static WORD_CONCO_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_CONCO_CHILDREN),
    value: None,
};

pub static WORD_CONCO_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("rrent")],
    values: &[&["concurrent"]],
    range: 5..=5,
};

static WORD_CONCN_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_CONCN_CHILDREN),
    value: None,
};

pub static WORD_CONCN_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("etration")],
    values: &[&["concentrations"]],
    range: 8..=8,
};

static WORD_CONCL_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_CONCL_CHILDREN),
    value: None,
};

pub static WORD_CONCL_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("suion"),
        dictgen::InsensitiveStr::Ascii("suions"),
        dictgen::InsensitiveStr::Ascii("udendo"),
        dictgen::InsensitiveStr::Ascii("ue"),
        dictgen::InsensitiveStr::Ascii("ued"),
        dictgen::InsensitiveStr::Ascii("use"),
        dictgen::InsensitiveStr::Ascii("usie"),
        dictgen::InsensitiveStr::Ascii("usies"),
        dictgen::InsensitiveStr::Ascii("usiones"),
        dictgen::InsensitiveStr::Ascii("usivley"),
        dictgen::InsensitiveStr::Ascii("uso"),
        dictgen::InsensitiveStr::Ascii("ussion"),
        dictgen::InsensitiveStr::Ascii("ussive"),
        dictgen::InsensitiveStr::Ascii("ution"),
        dictgen::InsensitiveStr::Ascii("utions"),
    ],
    values: &[
        &["concussion"],
        &["concussions"],
        &["concluded"],
        &["conclude"],
        &["conclude"],
        &["conclusive"],
        &["conclusive"],
        &["conclusive"],
        &["conclusions"],
        &["conclusive"],
        &["conclusion"],
        &["conclusions"],
        &["conclusive"],
        &["conclusion"],
        &["conclusions"],
    ],
    range: 2..=7,
};

static WORD_CONCI_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_CONCI_CHILDREN),
    value: None,
};

pub static WORD_CONCI_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("bes"),
        dictgen::InsensitiveStr::Ascii("der"),
        dictgen::InsensitiveStr::Ascii("derable"),
        dictgen::InsensitiveStr::Ascii("derably"),
        dictgen::InsensitiveStr::Ascii("deration"),
        dictgen::InsensitiveStr::Ascii("derations"),
        dictgen::InsensitiveStr::Ascii("dered"),
        dictgen::InsensitiveStr::Ascii("dering"),
        dictgen::InsensitiveStr::Ascii("ders"),
        dictgen::InsensitiveStr::Ascii("des"),
        dictgen::InsensitiveStr::Ascii("eted"),
        dictgen::InsensitiveStr::Ascii("eved"),
        dictgen::InsensitiveStr::Ascii("ous"),
        dictgen::InsensitiveStr::Ascii("ously"),
        dictgen::InsensitiveStr::Ascii("ousness"),
        dictgen::InsensitiveStr::Ascii("oussness"),
        dictgen::InsensitiveStr::Ascii("ssion"),
        dictgen::InsensitiveStr::Ascii("veable"),
        dictgen::InsensitiveStr::Ascii("veably"),
    ],
    values: &[
        &["concise"],
        &["consider"],
        &["considerable"],
        &["considerably"],
        &["consideration"],
        &["considerations"],
        &["considered"],
        &["considering"],
        &["considers"],
        &["concise"],
        &["conceited"],
        &["conceived"],
        &["conscious"],
        &["consciously"],
        &["consciousness"],
        &["consciousness"],
        &["concession"],
        &["conceivable"],
        &["conceivably"],
    ],
    range: 3..=9,
};

static WORD_CONCE_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_CONCE_CHILDREN),
    value: None,
};

static WORD_CONCE_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    Some(&WORD_CONCEA_NODE),
    None,
    None,
    Some(&WORD_CONCED_NODE),
    Some(&WORD_CONCEE_NODE),
    None,
    None,
    None,
    Some(&WORD_CONCEI_NODE),
    None,
    None,
    Some(&WORD_CONCEL_NODE),
    None,
    Some(&WORD_CONCEN_NODE),
    None,
    Some(&WORD_CONCEP_NODE),
    Some(&WORD_CONCEQ_NODE),
    Some(&WORD_CONCER_NODE),
    Some(&WORD_CONCES_NODE),
    Some(&WORD_CONCET_NODE),
    None,
    Some(&WORD_CONCEV_NODE),
    None,
    None,
    None,
    None,
];

static WORD_CONCEV_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_CONCEV_CHILDREN),
    value: None,
};

pub static WORD_CONCEV_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ed"),
        dictgen::InsensitiveStr::Ascii("iable"),
        dictgen::InsensitiveStr::Ascii("iably"),
        dictgen::InsensitiveStr::Ascii("ied"),
    ],
    values: &[
        &["concede"],
        &["conceivable"],
        &["conceivably"],
        &["conceived"],
    ],
    range: 2..=5,
};

static WORD_CONCET_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_CONCET_CHILDREN),
    value: None,
};

pub static WORD_CONCET_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("ed")],
    values: &[&["concede"]],
    range: 2..=2,
};

static WORD_CONCES_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_CONCES_CHILDREN),
    value: None,
};

pub static WORD_CONCES_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ions"),
        dictgen::InsensitiveStr::Ascii("so"),
    ],
    values: &[&["concession"], &["concession"]],
    range: 2..=4,
};

static WORD_CONCER_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_CONCER_CHILDREN),
    value: None,
};

pub static WORD_CONCER_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ed"),
        dictgen::InsensitiveStr::Ascii("nig"),
        dictgen::InsensitiveStr::Ascii("nt"),
        dictgen::InsensitiveStr::Ascii("sation"),
        dictgen::InsensitiveStr::Ascii("sion"),
        dictgen::InsensitiveStr::Ascii("tas"),
        dictgen::InsensitiveStr::Ascii("te"),
        dictgen::InsensitiveStr::Ascii("tmate"),
        dictgen::InsensitiveStr::Ascii("vation"),
        dictgen::InsensitiveStr::Ascii("vatism"),
        dictgen::InsensitiveStr::Ascii("vative"),
        dictgen::InsensitiveStr::Ascii("vatives"),
    ],
    values: &[
        &["concede"],
        &["concerning"],
        &["concert"],
        &["conservation"],
        &["concession"],
        &["concerts"],
        &["concrete"],
        &["concentrate"],
        &["conservation"],
        &["conservatism"],
        &["conservative"],
        &["conservatives"],
    ],
    range: 2..=7,
};

static WORD_CONCEQ_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_CONCEQ_CHILDREN),
    value: None,
};

pub static WORD_CONCEQ_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("uences"),
        dictgen::InsensitiveStr::Ascii("uently"),
    ],
    values: &[&["consequences"], &["consequently"]],
    range: 6..=6,
};

static WORD_CONCEP_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_CONCEP_CHILDREN),
    value: None,
};

pub static WORD_CONCEP_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("s"),
        dictgen::InsensitiveStr::Ascii("ta"),
        dictgen::InsensitiveStr::Ascii("tial"),
        dictgen::InsensitiveStr::Ascii("tos"),
        dictgen::InsensitiveStr::Ascii("tuel"),
        dictgen::InsensitiveStr::Ascii("tul"),
    ],
    values: &[
        &["concepts"],
        &["conceptual"],
        &["conceptual"],
        &["concepts"],
        &["conceptual"],
        &["conceptual"],
    ],
    range: 1..=4,
};

static WORD_CONCEN_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_CONCEN_CHILDREN),
    value: None,
};

pub static WORD_CONCEN_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("crate"),
        dictgen::InsensitiveStr::Ascii("cration"),
        dictgen::InsensitiveStr::Ascii("ed"),
        dictgen::InsensitiveStr::Ascii("rtation"),
        dictgen::InsensitiveStr::Ascii("sus"),
        dictgen::InsensitiveStr::Ascii("tartion"),
        dictgen::InsensitiveStr::Ascii("tate"),
        dictgen::InsensitiveStr::Ascii("ting"),
        dictgen::InsensitiveStr::Ascii("trace"),
        dictgen::InsensitiveStr::Ascii("tracion"),
        dictgen::InsensitiveStr::Ascii("trade"),
        dictgen::InsensitiveStr::Ascii("traded"),
        dictgen::InsensitiveStr::Ascii("traing"),
        dictgen::InsensitiveStr::Ascii("traion"),
        dictgen::InsensitiveStr::Ascii("trait"),
        dictgen::InsensitiveStr::Ascii("traited"),
        dictgen::InsensitiveStr::Ascii("traiton"),
        dictgen::InsensitiveStr::Ascii("trant"),
        dictgen::InsensitiveStr::Ascii("trare"),
        dictgen::InsensitiveStr::Ascii("trarte"),
        dictgen::InsensitiveStr::Ascii("tratie"),
        dictgen::InsensitiveStr::Ascii("tratin"),
        dictgen::InsensitiveStr::Ascii("trato"),
        dictgen::InsensitiveStr::Ascii("tratons"),
    ],
    values: &[
        &["concentrate"],
        &["concentration"],
        &["concede"],
        &["concentrations"],
        &["consensus"],
        &["concentrations"],
        &["concentrate"],
        &["connecting"],
        &["concentrate"],
        &["concentration"],
        &["concentrated"],
        &["concentrated"],
        &["concentrating"],
        &["concentration"],
        &["concentrate"],
        &["concentrated"],
        &["concentrations"],
        &["concentrate"],
        &["concentrate"],
        &["concentrate"],
        &["concentrate"],
        &["concentration"],
        &["concentration"],
        &["concentrations"],
    ],
    range: 2..=7,
};

static WORD_CONCEL_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_CONCEL_CHILDREN),
    value: None,
};

pub static WORD_CONCEL_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("aed"),
        dictgen::InsensitiveStr::Ascii("aer"),
        dictgen::InsensitiveStr::Ascii("ear"),
        dictgen::InsensitiveStr::Ascii("ed"),
        dictgen::InsensitiveStr::Ascii("lation"),
    ],
    values: &[
        &["concealed"],
        &["concealer"],
        &["concealer"],
        &["concede"],
        &["cancellation"],
    ],
    range: 2..=6,
};

static WORD_CONCEI_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_CONCEI_CHILDREN),
    value: None,
};

pub static WORD_CONCEI_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("de"),
        dictgen::InsensitiveStr::Ascii("tual"),
        dictgen::InsensitiveStr::Ascii("vablely"),
        dictgen::InsensitiveStr::Ascii("vabley"),
        dictgen::InsensitiveStr::Ascii("vibly"),
    ],
    values: &[
        &["conceived"],
        &["conceptual"],
        &["conceivably"],
        &["conceivably"],
        &["conceivably"],
    ],
    range: 2..=7,
};

static WORD_CONCEE_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_CONCEE_CHILDREN),
    value: None,
};

pub static WORD_CONCEE_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("d")],
    values: &[&["concede"]],
    range: 1..=1,
};

static WORD_CONCED_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_CONCED_CHILDREN),
    value: None,
};

pub static WORD_CONCED_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("endo"),
        dictgen::InsensitiveStr::Ascii("ered"),
    ],
    values: &[&["conceded"], &["conceded"]],
    range: 4..=4,
};

static WORD_CONCEA_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_CONCEA_CHILDREN),
    value: None,
};

pub static WORD_CONCEA_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("ld")],
    values: &[&["concealed"]],
    range: 2..=2,
};

static WORD_CONCA_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_CONCA_CHILDREN),
    value: None,
};

pub static WORD_CONCA_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("tinated"),
        dictgen::InsensitiveStr::Ascii("tination"),
    ],
    values: &[&["contaminated"], &["contamination"]],
    range: 7..=8,
};

static WORD_CONB_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_CONB_CHILDREN),
    value: None,
};

pub static WORD_CONB_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("inations")],
    values: &[&["combinations"]],
    range: 8..=8,
};

static WORD_CONA_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_CONA_CHILDREN),
    value: None,
};

pub static WORD_CONA_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("nical"),
        dictgen::InsensitiveStr::Ascii("tiner"),
        dictgen::InsensitiveStr::Ascii("tiners"),
        dictgen::InsensitiveStr::Ascii("tins"),
    ],
    values: &[
        &["canonical"],
        &["container"],
        &["containers"],
        &["contains"],
    ],
    range: 4..=6,
};

static WORD_COM_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_COM_CHILDREN),
    value: None,
};

static WORD_COM_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    Some(&WORD_COMA_NODE),
    Some(&WORD_COMB_NODE),
    None,
    Some(&WORD_COMD_NODE),
    Some(&WORD_COME_NODE),
    Some(&WORD_COMF_NODE),
    None,
    None,
    Some(&WORD_COMI_NODE),
    None,
    None,
    None,
    Some(&WORD_COMM_NODE),
    None,
    None,
    Some(&WORD_COMP_NODE),
    None,
    Some(&WORD_COMR_NODE),
    Some(&WORD_COMS_NODE),
    Some(&WORD_COMT_NODE),
    None,
    None,
    None,
    None,
    None,
    None,
];

static WORD_COMT_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_COMT_CHILDREN),
    value: None,
};

pub static WORD_COMT_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("aminated"),
        dictgen::InsensitiveStr::Ascii("amination"),
        dictgen::InsensitiveStr::Ascii("emplating"),
        dictgen::InsensitiveStr::Ascii("emporary"),
        dictgen::InsensitiveStr::Ascii("pon"),
    ],
    values: &[
        &["contaminated"],
        &["contamination"],
        &["contemplating"],
        &["contemporary"],
        &["compton"],
    ],
    range: 3..=9,
};

static WORD_COMS_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_COMS_CHILDREN),
    value: None,
};

pub static WORD_COMS_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("etic"),
        dictgen::InsensitiveStr::Ascii("etics"),
    ],
    values: &[&["cosmetic"], &["cosmetics"]],
    range: 4..=5,
};

static WORD_COMR_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_COMR_CHILDREN),
    value: None,
};

pub static WORD_COMR_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("adets"),
        dictgen::InsensitiveStr::Ascii("adre"),
        dictgen::InsensitiveStr::Ascii("ads"),
        dictgen::InsensitiveStr::Ascii("pomising"),
    ],
    values: &[
        &["comrades"],
        &["comrade"],
        &["comrades"],
        &["compromising"],
    ],
    range: 3..=8,
};

static WORD_COMP_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_COMP_CHILDREN),
    value: None,
};

static WORD_COMP_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    Some(&WORD_COMPA_NODE),
    None,
    None,
    None,
    Some(&WORD_COMPE_NODE),
    None,
    None,
    Some(&WORD_COMPH_NODE),
    Some(&WORD_COMPI_NODE),
    None,
    None,
    Some(&WORD_COMPL_NODE),
    None,
    Some(&WORD_COMPN_NODE),
    Some(&WORD_COMPO_NODE),
    None,
    None,
    Some(&WORD_COMPR_NODE),
    Some(&WORD_COMPS_NODE),
    Some(&WORD_COMPT_NODE),
    Some(&WORD_COMPU_NODE),
    None,
    None,
    None,
    None,
    None,
];

static WORD_COMPU_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_COMPU_CHILDREN),
    value: None,
};

pub static WORD_COMPU_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("lisve"),
        dictgen::InsensitiveStr::Ascii("losry"),
        dictgen::InsensitiveStr::Ascii("lsary"),
        dictgen::InsensitiveStr::Ascii("lsery"),
        dictgen::InsensitiveStr::Ascii("lsing"),
        dictgen::InsensitiveStr::Ascii("lsivley"),
        dictgen::InsensitiveStr::Ascii("lsivo"),
        dictgen::InsensitiveStr::Ascii("lsorary"),
        dictgen::InsensitiveStr::Ascii("lstion"),
        dictgen::InsensitiveStr::Ascii("lsury"),
        dictgen::InsensitiveStr::Ascii("nation"),
        dictgen::InsensitiveStr::Ascii("net"),
        dictgen::InsensitiveStr::Ascii("slion"),
        dictgen::InsensitiveStr::Ascii("slive"),
        dictgen::InsensitiveStr::Ascii("slory"),
        dictgen::InsensitiveStr::Ascii("stion"),
        dictgen::InsensitiveStr::Ascii("tacion"),
        dictgen::InsensitiveStr::Ascii("tacional"),
        dictgen::InsensitiveStr::Ascii("tanti"),
        dictgen::InsensitiveStr::Ascii("tarized"),
        dictgen::InsensitiveStr::Ascii("tating"),
        dictgen::InsensitiveStr::Ascii("tationnal"),
        dictgen::InsensitiveStr::Ascii("tato"),
        dictgen::InsensitiveStr::Ascii("tition"),
        dictgen::InsensitiveStr::Ascii("tre"),
    ],
    values: &[
        &["compulsive"],
        &["compulsory"],
        &["compulsory"],
        &["compulsory"],
        &["compulsion"],
        &["compulsive"],
        &["compulsion"],
        &["compulsory"],
        &["compulsion"],
        &["compulsory"],
        &["computation"],
        &["compute"],
        &["compulsion"],
        &["compulsive"],
        &["compulsory"],
        &["compulsion"],
        &["computation"],
        &["computational"],
        &["computation"],
        &["computerized"],
        &["computation"],
        &["computational"],
        &["computation"],
        &["computation"],
        &["compute"],
    ],
    range: 3..=9,
};

static WORD_COMPT_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_COMPT_CHILDREN),
    value: None,
};

pub static WORD_COMPT_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ability"),
        dictgen::InsensitiveStr::Ascii("eting"),
        dictgen::InsensitiveStr::Ascii("etion"),
        dictgen::InsensitiveStr::Ascii("eurs"),
        dictgen::InsensitiveStr::Ascii("own"),
        dictgen::InsensitiveStr::Ascii("uers"),
    ],
    values: &[
        &["compatibility"],
        &["completing"],
        &["completion"],
        &["computers"],
        &["compton"],
        &["computers"],
    ],
    range: 3..=7,
};

static WORD_COMPS_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_COMPS_CHILDREN),
    value: None,
};

pub static WORD_COMPS_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("ers")],
    values: &[&["compress"]],
    range: 3..=3,
};

static WORD_COMPR_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_COMPR_CHILDREN),
    value: None,
};

pub static WORD_COMPR_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("able"),
        dictgen::InsensitiveStr::Ascii("aison"),
        dictgen::InsensitiveStr::Ascii("amise"),
        dictgen::InsensitiveStr::Ascii("amised"),
        dictgen::InsensitiveStr::Ascii("amises"),
        dictgen::InsensitiveStr::Ascii("amising"),
        dictgen::InsensitiveStr::Ascii("assem"),
        dictgen::InsensitiveStr::Ascii("ehand"),
        dictgen::InsensitiveStr::Ascii("ehention"),
        dictgen::InsensitiveStr::Ascii("emised"),
        dictgen::InsensitiveStr::Ascii("emises"),
        dictgen::InsensitiveStr::Ascii("emising"),
        dictgen::InsensitiveStr::Ascii("ension"),
        dictgen::InsensitiveStr::Ascii("esas"),
        dictgen::InsensitiveStr::Ascii("ese"),
        dictgen::InsensitiveStr::Ascii("eses"),
        dictgen::InsensitiveStr::Ascii("esion"),
        dictgen::InsensitiveStr::Ascii("eso"),
        dictgen::InsensitiveStr::Ascii("esores"),
        dictgen::InsensitiveStr::Ascii("esors"),
        dictgen::InsensitiveStr::Ascii("esser"),
        dictgen::InsensitiveStr::Ascii("essio"),
        dictgen::InsensitiveStr::Ascii("esson"),
        dictgen::InsensitiveStr::Ascii("esssed"),
        dictgen::InsensitiveStr::Ascii("esssion"),
        dictgen::InsensitiveStr::Ascii("esssor"),
        dictgen::InsensitiveStr::Ascii("ihend"),
        dictgen::InsensitiveStr::Ascii("imise"),
        dictgen::InsensitiveStr::Ascii("imised"),
        dictgen::InsensitiveStr::Ascii("imises"),
        dictgen::InsensitiveStr::Ascii("omessi"),
        dictgen::InsensitiveStr::Ascii("omisng"),
        dictgen::InsensitiveStr::Ascii("omiss"),
        dictgen::InsensitiveStr::Ascii("omisse"),
        dictgen::InsensitiveStr::Ascii("omissen"),
        dictgen::InsensitiveStr::Ascii("omisses"),
        dictgen::InsensitiveStr::Ascii("omisso"),
        dictgen::InsensitiveStr::Ascii("omize"),
        dictgen::InsensitiveStr::Ascii("omized"),
        dictgen::InsensitiveStr::Ascii("omizing"),
        dictgen::InsensitiveStr::Ascii("omosing"),
        dictgen::InsensitiveStr::Ascii("omsie"),
        dictgen::InsensitiveStr::Ascii("ossor"),
    ],
    values: &[
        &["comparable"],
        &["comparisons"],
        &["compromise"],
        &["compromised"],
        &["compromises"],
        &["compromising"],
        &["compress"],
        &["comprehend"],
        &["comprehension"],
        &["compromised"],
        &["compromises"],
        &["compromising"],
        &["compression"],
        &["compress"],
        &["compressed"],
        &["compress"],
        &["compression"],
        &["compressor"],
        &["compressor"],
        &["compressor"],
        &["compressor"],
        &["compressor"],
        &["compression"],
        &["compressed"],
        &["compression"],
        &["compressor"],
        &["comprehend"],
        &["compromise"],
        &["compromised"],
        &["compromises"],
        &["compromises"],
        &["compromising"],
        &["compromises"],
        &["compromises"],
        &["compromise"],
        &["compromises"],
        &["compromises"],
        &["compromise"],
        &["compromised"],
        &["compromising"],
        &["compromising"],
        &["compromises"],
        &["compressor"],
    ],
    range: 3..=8,
};

static WORD_COMPO_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_COMPO_CHILDREN),
    value: None,
};

pub static WORD_COMPO_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("lation"),
        dictgen::InsensitiveStr::Ascii("lsive"),
        dictgen::InsensitiveStr::Ascii("lsory"),
        dictgen::InsensitiveStr::Ascii("lsury"),
        dictgen::InsensitiveStr::Ascii("nant"),
        dictgen::InsensitiveStr::Ascii("nants"),
        dictgen::InsensitiveStr::Ascii("nenet"),
        dictgen::InsensitiveStr::Ascii("nenets"),
        dictgen::InsensitiveStr::Ascii("nentes"),
        dictgen::InsensitiveStr::Ascii("nes"),
        dictgen::InsensitiveStr::Ascii("net"),
        dictgen::InsensitiveStr::Ascii("nsate"),
        dictgen::InsensitiveStr::Ascii("nts"),
        dictgen::InsensitiveStr::Ascii("rable"),
        dictgen::InsensitiveStr::Ascii("set"),
        dictgen::InsensitiveStr::Ascii("sicion"),
        dictgen::InsensitiveStr::Ascii("siiton"),
        dictgen::InsensitiveStr::Ascii("sision"),
        dictgen::InsensitiveStr::Ascii("sistion"),
        dictgen::InsensitiveStr::Ascii("sit"),
        dictgen::InsensitiveStr::Ascii("sitie"),
        dictgen::InsensitiveStr::Ascii("sitied"),
        dictgen::InsensitiveStr::Ascii("sities"),
        dictgen::InsensitiveStr::Ascii("sitionwise"),
        dictgen::InsensitiveStr::Ascii("sitoin"),
        dictgen::InsensitiveStr::Ascii("siton"),
        dictgen::InsensitiveStr::Ascii("sitons"),
        dictgen::InsensitiveStr::Ascii("sitore"),
        dictgen::InsensitiveStr::Ascii("ste"),
        dictgen::InsensitiveStr::Ascii("stiion"),
        dictgen::InsensitiveStr::Ascii("tition"),
        dictgen::InsensitiveStr::Ascii("ts"),
    ],
    values: &[
        &["compilation"],
        &["compulsive"],
        &["compulsory"],
        &["compulsory"],
        &["component"],
        &["components"],
        &["components"],
        &["components"],
        &["components"],
        &["compose"],
        &["components"],
        &["compensate"],
        &["compost"],
        &["comparable"],
        &["compost"],
        &["composition"],
        &["compositions"],
        &["compositions"],
        &["compositions"],
        &["compost"],
        &["composite"],
        &["composite"],
        &["composite"],
        &["compositions"],
        &["compositions"],
        &["composition"],
        &["compositions"],
        &["composite"],
        &["compose"],
        &["compositions"],
        &["composition"],
        &["compost"],
    ],
    range: 2..=10,
};

static WORD_COMPN_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_COMPN_CHILDREN),
    value: None,
};

pub static WORD_COMPN_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("ay")],
    values: &[&["company"]],
    range: 2..=2,
};

static WORD_COMPL_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_COMPL_CHILDREN),
    value: None,
};

static WORD_COMPL_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    Some(&WORD_COMPLA_NODE),
    None,
    Some(&WORD_COMPLC_NODE),
    None,
    Some(&WORD_COMPLE_NODE),
    None,
    None,
    None,
    Some(&WORD_COMPLI_NODE),
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    Some(&WORD_COMPLU_NODE),
    None,
    None,
    None,
    None,
    None,
];

static WORD_COMPLU_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_COMPLU_CHILDREN),
    value: None,
};

pub static WORD_COMPLU_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("sion"),
        dictgen::InsensitiveStr::Ascii("sions"),
        dictgen::InsensitiveStr::Ascii("sive"),
        dictgen::InsensitiveStr::Ascii("sory"),
    ],
    values: &[
        &["compulsion"],
        &["compulsion"],
        &["compulsive"],
        &["compulsory"],
    ],
    range: 4..=5,
};

static WORD_COMPLI_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_COMPLI_CHILDREN),
    value: None,
};

pub static WORD_COMPLI_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("acted"),
        dictgen::InsensitiveStr::Ascii("actions"),
        dictgen::InsensitiveStr::Ascii("aned"),
        dictgen::InsensitiveStr::Ascii("ans"),
        dictgen::InsensitiveStr::Ascii("ants"),
        dictgen::InsensitiveStr::Ascii("ation"),
        dictgen::InsensitiveStr::Ascii("ations"),
        dictgen::InsensitiveStr::Ascii("cacion"),
        dictgen::InsensitiveStr::Ascii("caed"),
        dictgen::InsensitiveStr::Ascii("caitons"),
        dictgen::InsensitiveStr::Ascii("care"),
        dictgen::InsensitiveStr::Ascii("carte"),
        dictgen::InsensitiveStr::Ascii("cati"),
        dictgen::InsensitiveStr::Ascii("catie"),
        dictgen::InsensitiveStr::Ascii("catied"),
        dictgen::InsensitiveStr::Ascii("caties"),
        dictgen::InsensitiveStr::Ascii("catii"),
        dictgen::InsensitiveStr::Ascii("catin"),
        dictgen::InsensitiveStr::Ascii("cato"),
        dictgen::InsensitiveStr::Ascii("catred"),
        dictgen::InsensitiveStr::Ascii("catted"),
        dictgen::InsensitiveStr::Ascii("cite"),
        dictgen::InsensitiveStr::Ascii("ct"),
        dictgen::InsensitiveStr::Ascii("ctaed"),
        dictgen::InsensitiveStr::Ascii("cted"),
        dictgen::InsensitiveStr::Ascii("ence"),
        dictgen::InsensitiveStr::Ascii("er"),
        dictgen::InsensitiveStr::Ascii("lation"),
        dictgen::InsensitiveStr::Ascii("lations"),
        dictgen::InsensitiveStr::Ascii("mate"),
        dictgen::InsensitiveStr::Ascii("mation"),
        dictgen::InsensitiveStr::Ascii("menary"),
        dictgen::InsensitiveStr::Ascii("mentarity"),
        dictgen::InsensitiveStr::Ascii("mente"),
        dictgen::InsensitiveStr::Ascii("mentery"),
        dictgen::InsensitiveStr::Ascii("mentje"),
        dictgen::InsensitiveStr::Ascii("mentoni"),
        dictgen::InsensitiveStr::Ascii("mentory"),
        dictgen::InsensitiveStr::Ascii("mentry"),
        dictgen::InsensitiveStr::Ascii("menty"),
        dictgen::InsensitiveStr::Ascii("nation"),
        dictgen::InsensitiveStr::Ascii("tation"),
        dictgen::InsensitiveStr::Ascii("tion"),
    ],
    values: &[
        &["complicate"],
        &["complication"],
        &["compliance"],
        &["complains"],
        &["complaints"],
        &["compilation"],
        &["compilation"],
        &["complication"],
        &["complicate"],
        &["complication"],
        &["complicate"],
        &["complicate"],
        &["complicit"],
        &["complicit"],
        &["complicate"],
        &["complicate"],
        &["complicit"],
        &["complicit"],
        &["complication"],
        &["complicate"],
        &["complicate"],
        &["complicate"],
        &["complicit"],
        &["complicate"],
        &["complicated"],
        &["compliance"],
        &["compiler"],
        &["complication"],
        &["complications"],
        &["complicate"],
        &["complication"],
        &["complimentary"],
        &["complimentary"],
        &["complement"],
        &["complimentary"],
        &["complimented"],
        &["complimenting"],
        &["complimentary"],
        &["complimentary"],
        &["complimentary"],
        &["complication"],
        &["complication"],
        &["completion"],
    ],
    range: 2..=9,
};

static WORD_COMPLE_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_COMPLE_CHILDREN),
    value: None,
};

pub static WORD_COMPLE_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ation"),
        dictgen::InsensitiveStr::Ascii("atly"),
        dictgen::InsensitiveStr::Ascii("cate"),
        dictgen::InsensitiveStr::Ascii("cated"),
        dictgen::InsensitiveStr::Ascii("cations"),
        dictgen::InsensitiveStr::Ascii("et"),
        dictgen::InsensitiveStr::Ascii("taste"),
        dictgen::InsensitiveStr::Ascii("teds"),
        dictgen::InsensitiveStr::Ascii("teing"),
        dictgen::InsensitiveStr::Ascii("teion"),
        dictgen::InsensitiveStr::Ascii("telly"),
        dictgen::InsensitiveStr::Ascii("telyl"),
        dictgen::InsensitiveStr::Ascii("telys"),
        dictgen::InsensitiveStr::Ascii("ten"),
        dictgen::InsensitiveStr::Ascii("tenes"),
        dictgen::InsensitiveStr::Ascii("tent"),
        dictgen::InsensitiveStr::Ascii("tetion"),
        dictgen::InsensitiveStr::Ascii("tey"),
        dictgen::InsensitiveStr::Ascii("ti"),
        dictgen::InsensitiveStr::Ascii("tily"),
        dictgen::InsensitiveStr::Ascii("tin"),
        dictgen::InsensitiveStr::Ascii("tito"),
        dictgen::InsensitiveStr::Ascii("tley"),
        dictgen::InsensitiveStr::Ascii("ts"),
        dictgen::InsensitiveStr::Ascii("ty"),
        dictgen::InsensitiveStr::Ascii("xers"),
        dictgen::InsensitiveStr::Ascii("xety"),
        dictgen::InsensitiveStr::Ascii("xitiy"),
        dictgen::InsensitiveStr::Ascii("xs"),
        dictgen::InsensitiveStr::Ascii("xt"),
        dictgen::InsensitiveStr::Ascii("xy"),
    ],
    values: &[
        &["compilation"],
        &["completely"],
        &["complicate"],
        &["complicated"],
        &["complications"],
        &["complete"],
        &["completes"],
        &["completes"],
        &["completing"],
        &["completion"],
        &["completely"],
        &["completely"],
        &["completes"],
        &["complement"],
        &["completes"],
        &["complement"],
        &["completion"],
        &["completely"],
        &["complexity"],
        &["complexity"],
        &["completion"],
        &["completion"],
        &["completely"],
        &["completes"],
        &["completely"],
        &["complexes"],
        &["complexity"],
        &["complexity"],
        &["complexes"],
        &["complexity"],
        &["complexity"],
    ],
    range: 2..=7,
};

static WORD_COMPLC_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_COMPLC_CHILDREN),
    value: None,
};

pub static WORD_COMPLC_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("iated"),
        dictgen::InsensitiveStr::Ascii("iations"),
    ],
    values: &[&["complicate"], &["complication"]],
    range: 5..=7,
};

static WORD_COMPLA_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_COMPLA_CHILDREN),
    value: None,
};

pub static WORD_COMPLA_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("cant"),
        dictgen::InsensitiveStr::Ascii("cient"),
        dictgen::InsensitiveStr::Ascii("ince"),
        dictgen::InsensitiveStr::Ascii("ind"),
        dictgen::InsensitiveStr::Ascii("ines"),
        dictgen::InsensitiveStr::Ascii("ing"),
        dictgen::InsensitiveStr::Ascii("inging"),
        dictgen::InsensitiveStr::Ascii("inig"),
        dictgen::InsensitiveStr::Ascii("inte"),
        dictgen::InsensitiveStr::Ascii("is"),
        dictgen::InsensitiveStr::Ascii("ne"),
        dictgen::InsensitiveStr::Ascii("te"),
        dictgen::InsensitiveStr::Ascii("tion"),
    ],
    values: &[
        &["complacent"],
        &["complacent"],
        &["compliance"],
        &["complained"],
        &["complaints"],
        &["complaining"],
        &["complaining"],
        &["complaining"],
        &["complained"],
        &["complains"],
        &["complacent"],
        &["complacent"],
        &["completion"],
    ],
    range: 2..=6,
};

static WORD_COMPI_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_COMPI_CHILDREN),
    value: None,
};

pub static WORD_COMPI_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("lacion"),
        dictgen::InsensitiveStr::Ascii("lance"),
        dictgen::InsensitiveStr::Ascii("lant"),
        dictgen::InsensitiveStr::Ascii("lare"),
        dictgen::InsensitiveStr::Ascii("lato"),
        dictgen::InsensitiveStr::Ascii("laton"),
        dictgen::InsensitiveStr::Ascii("lcated"),
        dictgen::InsensitiveStr::Ascii("lcations"),
        dictgen::InsensitiveStr::Ascii("lr"),
        dictgen::InsensitiveStr::Ascii("nation"),
        dictgen::InsensitiveStr::Ascii("nsate"),
        dictgen::InsensitiveStr::Ascii("nsated"),
        dictgen::InsensitiveStr::Ascii("nsating"),
        dictgen::InsensitiveStr::Ascii("nsation"),
        dictgen::InsensitiveStr::Ascii("tability"),
        dictgen::InsensitiveStr::Ascii("table"),
        dictgen::InsensitiveStr::Ascii("tance"),
        dictgen::InsensitiveStr::Ascii("tation"),
        dictgen::InsensitiveStr::Ascii("tent"),
        dictgen::InsensitiveStr::Ascii("tetion"),
    ],
    values: &[
        &["compilation"],
        &["compliance"],
        &["compliant"],
        &["compiler"],
        &["compilation"],
        &["compilation"],
        &["complicate"],
        &["complication"],
        &["compiler"],
        &["compilation"],
        &["compensate"],
        &["compensated"],
        &["compensating"],
        &["compensation"],
        &["compatibility"],
        &["compatible"],
        &["compliance"],
        &["computation"],
        &["competent"],
        &["competitions"],
    ],
    range: 2..=8,
};

static WORD_COMPH_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_COMPH_CHILDREN),
    value: None,
};

pub static WORD_COMPH_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("rehensive")],
    values: &[&["comprehensive"]],
    range: 9..=9,
};

static WORD_COMPE_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_COMPE_CHILDREN),
    value: None,
};

static WORD_COMPE_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    Some(&WORD_COMPEA_NODE),
    None,
    None,
    Some(&WORD_COMPED_NODE),
    Some(&WORD_COMPEE_NODE),
    None,
    None,
    None,
    Some(&WORD_COMPEI_NODE),
    None,
    None,
    Some(&WORD_COMPEL_NODE),
    Some(&WORD_COMPEM_NODE),
    Some(&WORD_COMPEN_NODE),
    None,
    None,
    None,
    Some(&WORD_COMPER_NODE),
    Some(&WORD_COMPES_NODE),
    Some(&WORD_COMPET_NODE),
    None,
    None,
    None,
    None,
    None,
    None,
];

static WORD_COMPET_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_COMPET_CHILDREN),
    value: None,
};

pub static WORD_COMPET_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ance"),
        dictgen::InsensitiveStr::Ascii("ant"),
        dictgen::InsensitiveStr::Ascii("ation"),
        dictgen::InsensitiveStr::Ascii("ative"),
        dictgen::InsensitiveStr::Ascii("atively"),
        dictgen::InsensitiveStr::Ascii("ator"),
        dictgen::InsensitiveStr::Ascii("ators"),
        dictgen::InsensitiveStr::Ascii("end"),
        dictgen::InsensitiveStr::Ascii("enet"),
        dictgen::InsensitiveStr::Ascii("ense"),
        dictgen::InsensitiveStr::Ascii("enze"),
        dictgen::InsensitiveStr::Ascii("eted"),
        dictgen::InsensitiveStr::Ascii("etion"),
        dictgen::InsensitiveStr::Ascii("etions"),
        dictgen::InsensitiveStr::Ascii("etor"),
        dictgen::InsensitiveStr::Ascii("etors"),
        dictgen::InsensitiveStr::Ascii("idor"),
        dictgen::InsensitiveStr::Ascii("ion"),
        dictgen::InsensitiveStr::Ascii("iors"),
        dictgen::InsensitiveStr::Ascii("itavely"),
        dictgen::InsensitiveStr::Ascii("iters"),
        dictgen::InsensitiveStr::Ascii("itevely"),
        dictgen::InsensitiveStr::Ascii("itevly"),
        dictgen::InsensitiveStr::Ascii("itie"),
        dictgen::InsensitiveStr::Ascii("itiion"),
        dictgen::InsensitiveStr::Ascii("itin"),
        dictgen::InsensitiveStr::Ascii("iting"),
        dictgen::InsensitiveStr::Ascii("itio"),
        dictgen::InsensitiveStr::Ascii("itioners"),
        dictgen::InsensitiveStr::Ascii("itior"),
        dictgen::InsensitiveStr::Ascii("itiors"),
        dictgen::InsensitiveStr::Ascii("itivley"),
        dictgen::InsensitiveStr::Ascii("itivly"),
        dictgen::InsensitiveStr::Ascii("itivo"),
        dictgen::InsensitiveStr::Ascii("itivos"),
        dictgen::InsensitiveStr::Ascii("itoin"),
        dictgen::InsensitiveStr::Ascii("iton"),
        dictgen::InsensitiveStr::Ascii("itons"),
        dictgen::InsensitiveStr::Ascii("itve"),
        dictgen::InsensitiveStr::Ascii("ive"),
        dictgen::InsensitiveStr::Ascii("iveness"),
        dictgen::InsensitiveStr::Ascii("ution"),
    ],
    values: &[
        &["competence"],
        &["competent"],
        &["computation"],
        &["competitive"],
        &["competitively"],
        &["competitor"],
        &["competitors"],
        &["competed"],
        &["competence"],
        &["competence"],
        &["competence"],
        &["competed"],
        &["competition"],
        &["competitions"],
        &["competitor"],
        &["competitors"],
        &["competitor"],
        &["competition"],
        &["competitors"],
        &["competitively"],
        &["competitors"],
        &["competitively"],
        &["competitively"],
        &["competitive"],
        &["competition"],
        &["competitions"],
        &["competition"],
        &["competitor"],
        &["competitions"],
        &["competitor"],
        &["competitors"],
        &["competitively"],
        &["competitively"],
        &["competition"],
        &["competitions"],
        &["competitions"],
        &["competition"],
        &["competitors"],
        &["competitive"],
        &["competitive"],
        &["competitiveness"],
        &["computation"],
    ],
    range: 3..=8,
};

static WORD_COMPES_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_COMPES_CHILDREN),
    value: None,
};

pub static WORD_COMPES_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ition"),
        dictgen::InsensitiveStr::Ascii("itions"),
        dictgen::InsensitiveStr::Ascii("sion"),
    ],
    values: &[&["composition"], &["compositions"], &["compassion"]],
    range: 4..=6,
};

static WORD_COMPER_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_COMPER_CHILDREN),
    value: None,
};

pub static WORD_COMPER_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("able"),
        dictgen::InsensitiveStr::Ascii("ative"),
        dictgen::InsensitiveStr::Ascii("atively"),
        dictgen::InsensitiveStr::Ascii("hend"),
        dictgen::InsensitiveStr::Ascii("hension"),
    ],
    values: &[
        &["comparable"],
        &["comparative"],
        &["comparatively"],
        &["comprehend"],
        &["comprehension"],
    ],
    range: 4..=7,
};

static WORD_COMPEN_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_COMPEN_CHILDREN),
    value: None,
};

pub static WORD_COMPEN_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("duim"),
        dictgen::InsensitiveStr::Ascii("ents"),
        dictgen::InsensitiveStr::Ascii("idum"),
        dictgen::InsensitiveStr::Ascii("sacion"),
        dictgen::InsensitiveStr::Ascii("sante"),
        dictgen::InsensitiveStr::Ascii("santion"),
        dictgen::InsensitiveStr::Ascii("sare"),
        dictgen::InsensitiveStr::Ascii("satie"),
        dictgen::InsensitiveStr::Ascii("satin"),
        dictgen::InsensitiveStr::Ascii("sationg"),
        dictgen::InsensitiveStr::Ascii("sative"),
        dictgen::InsensitiveStr::Ascii("se"),
        dictgen::InsensitiveStr::Ascii("state"),
    ],
    values: &[
        &["compendium"],
        &["components"],
        &["compendium"],
        &["compensation"],
        &["compensate"],
        &["compensation"],
        &["compensate"],
        &["compensate"],
        &["compensation"],
        &["compensating"],
        &["compensate"],
        &["compensate"],
        &["compensate"],
    ],
    range: 2..=7,
};

static WORD_COMPEM_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_COMPEM_CHILDREN),
    value: None,
};

pub static WORD_COMPEM_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("dium")],
    values: &[&["compendium"]],
    range: 4..=4,
};

static WORD_COMPEL_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_COMPEL_CHILDREN),
    value: None,
};

pub static WORD_COMPEL_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ation"),
        dictgen::InsensitiveStr::Ascii("te"),
        dictgen::InsensitiveStr::Ascii("tely"),
        dictgen::InsensitiveStr::Ascii("tes"),
        dictgen::InsensitiveStr::Ascii("ting"),
        dictgen::InsensitiveStr::Ascii("tion"),
    ],
    values: &[
        &["compilation"],
        &["complete"],
        &["completely"],
        &["completes"],
        &["completing"],
        &["completion"],
    ],
    range: 2..=5,
};

static WORD_COMPEI_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_COMPEI_CHILDREN),
    value: None,
};

pub static WORD_COMPEI_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("tions"),
        dictgen::InsensitiveStr::Ascii("ttion"),
    ],
    values: &[&["competitions"], &["competitions"]],
    range: 5..=5,
};

static WORD_COMPEE_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_COMPEE_CHILDREN),
    value: None,
};

pub static WORD_COMPEE_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("ting")],
    values: &[&["completing"]],
    range: 4..=4,
};

static WORD_COMPED_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_COMPED_CHILDREN),
    value: None,
};

pub static WORD_COMPED_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("e"),
        dictgen::InsensitiveStr::Ascii("itive"),
        dictgen::InsensitiveStr::Ascii("itively"),
        dictgen::InsensitiveStr::Ascii("itor"),
        dictgen::InsensitiveStr::Ascii("itors"),
        dictgen::InsensitiveStr::Ascii("nium"),
    ],
    values: &[
        &["competed"],
        &["competitive"],
        &["competitively"],
        &["competitor"],
        &["competitors"],
        &["compendium"],
    ],
    range: 1..=7,
};

static WORD_COMPEA_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_COMPEA_CHILDREN),
    value: None,
};

pub static WORD_COMPEA_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("ting")],
    values: &[&["completing"]],
    range: 4..=4,
};

static WORD_COMPA_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_COMPA_CHILDREN),
    value: None,
};

static WORD_COMPA_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    None,
    Some(&WORD_COMPAB_NODE),
    None,
    Some(&WORD_COMPAD_NODE),
    None,
    None,
    Some(&WORD_COMPAG_NODE),
    None,
    Some(&WORD_COMPAI_NODE),
    None,
    None,
    Some(&WORD_COMPAL_NODE),
    None,
    Some(&WORD_COMPAN_NODE),
    None,
    None,
    None,
    Some(&WORD_COMPAR_NODE),
    Some(&WORD_COMPAS_NODE),
    Some(&WORD_COMPAT_NODE),
    None,
    None,
    None,
    None,
    None,
    None,
];

static WORD_COMPAT_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_COMPAT_CHILDREN),
    value: None,
};

pub static WORD_COMPAT_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("abile"),
        dictgen::InsensitiveStr::Ascii("abilities"),
        dictgen::InsensitiveStr::Ascii("ability"),
        dictgen::InsensitiveStr::Ascii("ablities"),
        dictgen::InsensitiveStr::Ascii("ablity"),
        dictgen::InsensitiveStr::Ascii("ative"),
        dictgen::InsensitiveStr::Ascii("iable"),
        dictgen::InsensitiveStr::Ascii("ibel"),
        dictgen::InsensitiveStr::Ascii("ibil"),
        dictgen::InsensitiveStr::Ascii("ibile"),
        dictgen::InsensitiveStr::Ascii("ibiliy"),
        dictgen::InsensitiveStr::Ascii("ibillity"),
        dictgen::InsensitiveStr::Ascii("ibiltiy"),
        dictgen::InsensitiveStr::Ascii("ibilty"),
        dictgen::InsensitiveStr::Ascii("ibily"),
        dictgen::InsensitiveStr::Ascii("iblities"),
        dictgen::InsensitiveStr::Ascii("iblity"),
    ],
    values: &[
        &["compatible"],
        &["compatibilities"],
        &["compatibility"],
        &["compatibilities"],
        &["compatibility"],
        &["comparative"],
        &["compatible"],
        &["compatible"],
        &["compatible"],
        &["compatible"],
        &["compatibility"],
        &["compatibility"],
        &["compatibility"],
        &["compatibility"],
        &["compatibility"],
        &["compatibilities"],
        &["compatibility"],
    ],
    range: 4..=9,
};

static WORD_COMPAS_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_COMPAS_CHILDREN),
    value: None,
};

pub static WORD_COMPAS_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("e"),
        dictgen::InsensitiveStr::Ascii("sione"),
        dictgen::InsensitiveStr::Ascii("so"),
        dictgen::InsensitiveStr::Ascii("ssion"),
    ],
    values: &[
        &["compares"],
        &["compassionate"],
        &["compassion"],
        &["compassion"],
    ],
    range: 1..=5,
};

static WORD_COMPAR_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_COMPAR_CHILDREN),
    value: None,
};

pub static WORD_COMPAR_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("abil"),
        dictgen::InsensitiveStr::Ascii("abile"),
        dictgen::InsensitiveStr::Ascii("asion"),
        dictgen::InsensitiveStr::Ascii("ason"),
        dictgen::InsensitiveStr::Ascii("asons"),
        dictgen::InsensitiveStr::Ascii("aste"),
        dictgen::InsensitiveStr::Ascii("atie"),
        dictgen::InsensitiveStr::Ascii("ativley"),
        dictgen::InsensitiveStr::Ascii("ativly"),
        dictgen::InsensitiveStr::Ascii("eble"),
        dictgen::InsensitiveStr::Ascii("ement"),
        dictgen::InsensitiveStr::Ascii("emos"),
        dictgen::InsensitiveStr::Ascii("etive"),
        dictgen::InsensitiveStr::Ascii("etively"),
        dictgen::InsensitiveStr::Ascii("ions"),
        dictgen::InsensitiveStr::Ascii("iosn"),
        dictgen::InsensitiveStr::Ascii("isen"),
        dictgen::InsensitiveStr::Ascii("ision"),
        dictgen::InsensitiveStr::Ascii("isions"),
        dictgen::InsensitiveStr::Ascii("isn"),
        dictgen::InsensitiveStr::Ascii("ission"),
        dictgen::InsensitiveStr::Ascii("isson"),
        dictgen::InsensitiveStr::Ascii("issons"),
        dictgen::InsensitiveStr::Ascii("itave"),
        dictgen::InsensitiveStr::Ascii("itavely"),
        dictgen::InsensitiveStr::Ascii("itive"),
        dictgen::InsensitiveStr::Ascii("itively"),
        dictgen::InsensitiveStr::Ascii("itve"),
        dictgen::InsensitiveStr::Ascii("se"),
        dictgen::InsensitiveStr::Ascii("sion"),
        dictgen::InsensitiveStr::Ascii("sions"),
        dictgen::InsensitiveStr::Ascii("te"),
        dictgen::InsensitiveStr::Ascii("tent"),
        dictgen::InsensitiveStr::Ascii("tmet"),
    ],
    values: &[
        &["comparable"],
        &["comparable"],
        &["comparison"],
        &["comparison"],
        &["comparisons"],
        &["compares"],
        &["comparative"],
        &["comparatively"],
        &["comparatively"],
        &["comparable"],
        &["compartment"],
        &["compares"],
        &["comparative"],
        &["comparatively"],
        &["comparison"],
        &["comparisons"],
        &["compares"],
        &["comparison"],
        &["comparisons"],
        &["comparisons"],
        &["comparisons"],
        &["comparisons"],
        &["comparisons"],
        &["comparative"],
        &["comparatively"],
        &["comparative"],
        &["comparatively"],
        &["comparative"],
        &["compares"],
        &["comparison"],
        &["comparisons"],
        &["compare"],
        &["compartment"],
        &["compartment"],
    ],
    range: 2..=7,
};

static WORD_COMPAN_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_COMPAN_CHILDREN),
    value: None,
};

pub static WORD_COMPAN_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("dium"),
        dictgen::InsensitiveStr::Ascii("ians"),
        dictgen::InsensitiveStr::Ascii("ines"),
        dictgen::InsensitiveStr::Ascii("is"),
        dictgen::InsensitiveStr::Ascii("sate"),
        dictgen::InsensitiveStr::Ascii("sated"),
        dictgen::InsensitiveStr::Ascii("sating"),
        dictgen::InsensitiveStr::Ascii("sation"),
    ],
    values: &[
        &["compendium"],
        &["companions"],
        &["companions"],
        &["companions"],
        &["compensate"],
        &["compensated"],
        &["compensating"],
        &["compensation"],
    ],
    range: 2..=6,
};

static WORD_COMPAL_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_COMPAL_CHILDREN),
    value: None,
};

pub static WORD_COMPAL_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ation"),
        dictgen::InsensitiveStr::Ascii("ined"),
        dictgen::InsensitiveStr::Ascii("ins"),
        dictgen::InsensitiveStr::Ascii("int"),
    ],
    values: &[
        &["compilation"],
        &["complained"],
        &["complains"],
        &["compliant"],
    ],
    range: 3..=5,
};

static WORD_COMPAI_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_COMPAI_CHILDREN),
    value: None,
};

pub static WORD_COMPAI_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("nes"),
        dictgen::InsensitiveStr::Ascii("nons"),
        dictgen::InsensitiveStr::Ascii("rson"),
    ],
    values: &[&["companies"], &["companions"], &["comparison"]],
    range: 3..=4,
};

static WORD_COMPAG_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_COMPAG_CHILDREN),
    value: None,
};

pub static WORD_COMPAG_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("nons")],
    values: &[&["companions"]],
    range: 4..=4,
};

static WORD_COMPAD_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_COMPAD_CHILDREN),
    value: None,
};

pub static WORD_COMPAD_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ibility"),
        dictgen::InsensitiveStr::Ascii("ible"),
    ],
    values: &[&["compatibility"], &["compatible"]],
    range: 4..=7,
};

static WORD_COMPAB_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_COMPAB_CHILDREN),
    value: None,
};

pub static WORD_COMPAB_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("ility")],
    values: &[&["compatibility"]],
    range: 5..=5,
};

static WORD_COMM_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_COMM_CHILDREN),
    value: None,
};

static WORD_COMM_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    Some(&WORD_COMMA_NODE),
    None,
    None,
    None,
    Some(&WORD_COMME_NODE),
    None,
    None,
    None,
    Some(&WORD_COMMI_NODE),
    None,
    None,
    None,
    Some(&WORD_COMMM_NODE),
    None,
    Some(&WORD_COMMO_NODE),
    None,
    None,
    None,
    None,
    Some(&WORD_COMMT_NODE),
    Some(&WORD_COMMU_NODE),
    None,
    None,
    None,
    None,
    None,
];

static WORD_COMMU_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_COMMU_CHILDREN),
    value: None,
};

pub static WORD_COMMU_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ications"),
        dictgen::InsensitiveStr::Ascii("incate"),
        dictgen::InsensitiveStr::Ascii("incation"),
        dictgen::InsensitiveStr::Ascii("inications"),
        dictgen::InsensitiveStr::Ascii("nciate"),
        dictgen::InsensitiveStr::Ascii("nciated"),
        dictgen::InsensitiveStr::Ascii("nciation"),
        dictgen::InsensitiveStr::Ascii("nciations"),
        dictgen::InsensitiveStr::Ascii("niaction"),
        dictgen::InsensitiveStr::Ascii("niation"),
        dictgen::InsensitiveStr::Ascii("nicae"),
        dictgen::InsensitiveStr::Ascii("nicaiton"),
        dictgen::InsensitiveStr::Ascii("nicatie"),
        dictgen::InsensitiveStr::Ascii("nicatin"),
        dictgen::InsensitiveStr::Ascii("nicatoin"),
        dictgen::InsensitiveStr::Ascii("nicaton"),
        dictgen::InsensitiveStr::Ascii("nicatons"),
        dictgen::InsensitiveStr::Ascii("nicted"),
        dictgen::InsensitiveStr::Ascii("nisim"),
        dictgen::InsensitiveStr::Ascii("niss"),
        dictgen::InsensitiveStr::Ascii("nistas"),
        dictgen::InsensitiveStr::Ascii("niste"),
        dictgen::InsensitiveStr::Ascii("nistes"),
        dictgen::InsensitiveStr::Ascii("nit"),
        dictgen::InsensitiveStr::Ascii("nite"),
        dictgen::InsensitiveStr::Ascii("nites"),
        dictgen::InsensitiveStr::Ascii("nitites"),
        dictgen::InsensitiveStr::Ascii("nits"),
        dictgen::InsensitiveStr::Ascii("nsim"),
        dictgen::InsensitiveStr::Ascii("nters"),
    ],
    values: &[
        &["communications"],
        &["communicated"],
        &["communications"],
        &["communications"],
        &["communicate"],
        &["communicated"],
        &["communication"],
        &["communications"],
        &["communications"],
        &["communication"],
        &["communicated"],
        &["communication"],
        &["communicate"],
        &["communications"],
        &["communications"],
        &["communication"],
        &["communications"],
        &["communicated"],
        &["communism"],
        &["communists"],
        &["communists"],
        &["communities"],
        &["communists"],
        &["communist"],
        &["communities"],
        &["communities"],
        &["communities"],
        &["communist"],
        &["communism"],
        &["commenters"],
    ],
    range: 3..=10,
};

static WORD_COMMT_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_COMMT_CHILDREN),
    value: None,
};

pub static WORD_COMMT_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("iment")],
    values: &[&["commitments"]],
    range: 5..=5,
};

static WORD_COMMO_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_COMMO_CHILDREN),
    value: None,
};

pub static WORD_COMMO_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("dites"),
        dictgen::InsensitiveStr::Ascii("ditites"),
        dictgen::InsensitiveStr::Ascii("doties"),
        dictgen::InsensitiveStr::Ascii("mplace"),
        dictgen::InsensitiveStr::Ascii("mwealth"),
        dictgen::InsensitiveStr::Ascii("ngly"),
        dictgen::InsensitiveStr::Ascii("nhealth"),
        dictgen::InsensitiveStr::Ascii("nspace"),
        dictgen::InsensitiveStr::Ascii("nweath"),
        dictgen::InsensitiveStr::Ascii("nweatlh"),
        dictgen::InsensitiveStr::Ascii("nwelath"),
        dictgen::InsensitiveStr::Ascii("nwelth"),
    ],
    values: &[
        &["commodities"],
        &["commodities"],
        &["commodities"],
        &["commonplace"],
        &["commonwealth"],
        &["commonly"],
        &["commonwealth"],
        &["commonplace"],
        &["commonwealth"],
        &["commonwealth"],
        &["commonwealth"],
        &["commonwealth"],
    ],
    range: 4..=7,
};

static WORD_COMMM_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_COMMM_CHILDREN),
    value: None,
};

pub static WORD_COMMM_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("and"),
        dictgen::InsensitiveStr::Ascii("emorated"),
    ],
    values: &[&["command"], &["commemorated"]],
    range: 3..=8,
};

static WORD_COMMI_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_COMMI_CHILDREN),
    value: None,
};

pub static WORD_COMMI_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("est"),
        dictgen::InsensitiveStr::Ascii("ng"),
        dictgen::InsensitiveStr::Ascii("nicate"),
        dictgen::InsensitiveStr::Ascii("nicated"),
        dictgen::InsensitiveStr::Ascii("nication"),
        dictgen::InsensitiveStr::Ascii("nists"),
        dictgen::InsensitiveStr::Ascii("nucate"),
        dictgen::InsensitiveStr::Ascii("nucation"),
        dictgen::InsensitiveStr::Ascii("shioned"),
        dictgen::InsensitiveStr::Ascii("shioner"),
        dictgen::InsensitiveStr::Ascii("sion"),
        dictgen::InsensitiveStr::Ascii("sioned"),
        dictgen::InsensitiveStr::Ascii("sioner"),
        dictgen::InsensitiveStr::Ascii("sioning"),
        dictgen::InsensitiveStr::Ascii("sison"),
        dictgen::InsensitiveStr::Ascii("ssionar"),
        dictgen::InsensitiveStr::Ascii("ssionees"),
        dictgen::InsensitiveStr::Ascii("ssionned"),
        dictgen::InsensitiveStr::Ascii("ssionner"),
        dictgen::InsensitiveStr::Ascii("ssionor"),
        dictgen::InsensitiveStr::Ascii("ssons"),
        dictgen::InsensitiveStr::Ascii("sssion"),
        dictgen::InsensitiveStr::Ascii("td"),
        dictgen::InsensitiveStr::Ascii("ted"),
        dictgen::InsensitiveStr::Ascii("tee"),
        dictgen::InsensitiveStr::Ascii("teed"),
        dictgen::InsensitiveStr::Ascii("tes"),
        dictgen::InsensitiveStr::Ascii("teted"),
        dictgen::InsensitiveStr::Ascii("ting"),
        dictgen::InsensitiveStr::Ascii("tmet"),
        dictgen::InsensitiveStr::Ascii("tte"),
        dictgen::InsensitiveStr::Ascii("ttment"),
        dictgen::InsensitiveStr::Ascii("ttments"),
        dictgen::InsensitiveStr::Ascii("tts"),
        dictgen::InsensitiveStr::Ascii("tus"),
    ],
    values: &[
        &["commits"],
        &["coming"],
        &["communicate"],
        &["communicated"],
        &["communication"],
        &["communists"],
        &["communicate"],
        &["communications"],
        &["commissioned"],
        &["commissioner"],
        &["commission"],
        &["commissioned"],
        &["commissioner"],
        &["commissioning"],
        &["commissions"],
        &["commissioner"],
        &["commissions"],
        &["commissioned"],
        &["commissioner"],
        &["commissioner"],
        &["commissions"],
        &["commissions"],
        &["commited"],
        &["committed"],
        &["committee"],
        &["commited"],
        &["commits"],
        &["commited"],
        &["committing"],
        &["commitments"],
        &["committee"],
        &["commitment"],
        &["commitments"],
        &["commits"],
        &["commits"],
    ],
    range: 2..=8,
};

static WORD_COMME_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_COMME_CHILDREN),
    value: None,
};

pub static WORD_COMME_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("cen"),
        dictgen::InsensitiveStr::Ascii("dic"),
        dictgen::InsensitiveStr::Ascii("merative"),
        dictgen::InsensitiveStr::Ascii("mmorate"),
        dictgen::InsensitiveStr::Ascii("mmorating"),
        dictgen::InsensitiveStr::Ascii("mters"),
        dictgen::InsensitiveStr::Ascii("ncera"),
        dictgen::InsensitiveStr::Ascii("nciez"),
        dictgen::InsensitiveStr::Ascii("ndment"),
        dictgen::InsensitiveStr::Ascii("ndments"),
        dictgen::InsensitiveStr::Ascii("nse"),
        dictgen::InsensitiveStr::Ascii("ntaar"),
        dictgen::InsensitiveStr::Ascii("ntar"),
        dictgen::InsensitiveStr::Ascii("ntare"),
        dictgen::InsensitiveStr::Ascii("ntarea"),
        dictgen::InsensitiveStr::Ascii("ntaren"),
        dictgen::InsensitiveStr::Ascii("ntars"),
        dictgen::InsensitiveStr::Ascii("ntart"),
        dictgen::InsensitiveStr::Ascii("ntater"),
        dictgen::InsensitiveStr::Ascii("nteers"),
        dictgen::InsensitiveStr::Ascii("nteries"),
        dictgen::InsensitiveStr::Ascii("ntery"),
        dictgen::InsensitiveStr::Ascii("ntes"),
        dictgen::InsensitiveStr::Ascii("ntries"),
        dictgen::InsensitiveStr::Ascii("ntsry"),
        dictgen::InsensitiveStr::Ascii("nty"),
        dictgen::InsensitiveStr::Ascii("nwealth"),
        dictgen::InsensitiveStr::Ascii("rcail"),
        dictgen::InsensitiveStr::Ascii("rcent"),
        dictgen::InsensitiveStr::Ascii("rciales"),
        dictgen::InsensitiveStr::Ascii("rcialy"),
        dictgen::InsensitiveStr::Ascii("rcie"),
        dictgen::InsensitiveStr::Ascii("re"),
        dictgen::InsensitiveStr::Ascii("rical"),
        dictgen::InsensitiveStr::Ascii("rically"),
        dictgen::InsensitiveStr::Ascii("ricals"),
        dictgen::InsensitiveStr::Ascii("ricial"),
        dictgen::InsensitiveStr::Ascii("ricially"),
        dictgen::InsensitiveStr::Ascii("rorative"),
    ],
    values: &[
        &["commence"],
        &["comedic"],
        &["commemorative"],
        &["commemorate"],
        &["commemorating"],
        &["commenters"],
        &["commerce"],
        &["commence"],
        &["commandment"],
        &["commandments"],
        &["commenters"],
        &["commentary"],
        &["commentator"],
        &["commenter"],
        &["commenter"],
        &["commenter"],
        &["commenters"],
        &["commentator"],
        &["commentator"],
        &["commenter"],
        &["commenters"],
        &["commentary"],
        &["commenters"],
        &["commenters"],
        &["commenters"],
        &["commentary"],
        &["commonwealth"],
        &["commercials"],
        &["commence"],
        &["commercials"],
        &["commercially"],
        &["commerce"],
        &["commerce"],
        &["commercial"],
        &["commercially"],
        &["commercials"],
        &["commercial"],
        &["commercially"],
        &["commemorative"],
    ],
    range: 2..=9,
};

static WORD_COMMA_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_COMMA_CHILDREN),
    value: None,
};

pub static WORD_COMMA_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ndbox"),
        dictgen::InsensitiveStr::Ascii("ndd"),
        dictgen::InsensitiveStr::Ascii("ndemnts"),
        dictgen::InsensitiveStr::Ascii("ndent"),
        dictgen::InsensitiveStr::Ascii("ndered"),
        dictgen::InsensitiveStr::Ascii("ndes"),
        dictgen::InsensitiveStr::Ascii("ndeur"),
        dictgen::InsensitiveStr::Ascii("ndmant"),
        dictgen::InsensitiveStr::Ascii("ndmants"),
        dictgen::InsensitiveStr::Ascii("ndmends"),
        dictgen::InsensitiveStr::Ascii("ndore"),
        dictgen::InsensitiveStr::Ascii("ndpod"),
        dictgen::InsensitiveStr::Ascii("nists"),
        dictgen::InsensitiveStr::Ascii("no"),
        dictgen::InsensitiveStr::Ascii("ns"),
        dictgen::InsensitiveStr::Ascii("ntator"),
    ],
    values: &[
        &["commando"],
        &["commanded"],
        &["commandment"],
        &["commandment"],
        &["commanded"],
        &["commands"],
        &["commanders"],
        &["commandment"],
        &["commandments"],
        &["commandments"],
        &["commanders"],
        &["commando"],
        &["communists"],
        &["commando"],
        &["commands"],
        &["commentator"],
    ],
    range: 2..=7,
};

static WORD_COMI_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_COMI_CHILDREN),
    value: None,
};

pub static WORD_COMI_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("sion"),
        dictgen::InsensitiveStr::Ascii("sioned"),
        dictgen::InsensitiveStr::Ascii("sioner"),
        dictgen::InsensitiveStr::Ascii("sioning"),
        dictgen::InsensitiveStr::Ascii("sions"),
        dictgen::InsensitiveStr::Ascii("ssion"),
        dictgen::InsensitiveStr::Ascii("ssioned"),
        dictgen::InsensitiveStr::Ascii("ssioner"),
        dictgen::InsensitiveStr::Ascii("ssioning"),
        dictgen::InsensitiveStr::Ascii("ssions"),
        dictgen::InsensitiveStr::Ascii("ted"),
        dictgen::InsensitiveStr::Ascii("ting"),
        dictgen::InsensitiveStr::Ascii("tted"),
        dictgen::InsensitiveStr::Ascii("ttee"),
        dictgen::InsensitiveStr::Ascii("tting"),
    ],
    values: &[
        &["commission"],
        &["commissioned"],
        &["commissioner"],
        &["commissioning"],
        &["commissions"],
        &["commission"],
        &["commissioned"],
        &["commissioner"],
        &["commissioning"],
        &["commissions"],
        &["committed"],
        &["committing"],
        &["committed"],
        &["committee"],
        &["committing"],
    ],
    range: 3..=8,
};

static WORD_COMF_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_COMF_CHILDREN),
    value: None,
};

pub static WORD_COMF_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ertable"),
        dictgen::InsensitiveStr::Ascii("ertably"),
        dictgen::InsensitiveStr::Ascii("erting"),
        dictgen::InsensitiveStr::Ascii("irmation"),
        dictgen::InsensitiveStr::Ascii("orming"),
        dictgen::InsensitiveStr::Ascii("ortabel"),
        dictgen::InsensitiveStr::Ascii("ortabil"),
        dictgen::InsensitiveStr::Ascii("ortablely"),
        dictgen::InsensitiveStr::Ascii("ortabley"),
        dictgen::InsensitiveStr::Ascii("ortablity"),
        dictgen::InsensitiveStr::Ascii("ortablly"),
        dictgen::InsensitiveStr::Ascii("ortbly"),
        dictgen::InsensitiveStr::Ascii("rontation"),
        dictgen::InsensitiveStr::Ascii("rontational"),
        dictgen::InsensitiveStr::Ascii("rotable"),
        dictgen::InsensitiveStr::Ascii("torable"),
        dictgen::InsensitiveStr::Ascii("torably"),
    ],
    values: &[
        &["comfortable"],
        &["comfortably"],
        &["comforting"],
        &["confirmation"],
        &["comforting"],
        &["comfortably"],
        &["comfortably"],
        &["comfortably"],
        &["comfortably"],
        &["comfortably"],
        &["comfortably"],
        &["comfortably"],
        &["confrontation"],
        &["confrontational"],
        &["comfortable"],
        &["comfortable"],
        &["comfortably"],
    ],
    range: 6..=11,
};

static WORD_COME_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_COME_CHILDREN),
    value: None,
};

pub static WORD_COME_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("diac"),
        dictgen::InsensitiveStr::Ascii("diantes"),
        dictgen::InsensitiveStr::Ascii("diants"),
        dictgen::InsensitiveStr::Ascii("dias"),
        dictgen::InsensitiveStr::Ascii("mmorates"),
        dictgen::InsensitiveStr::Ascii("moretion"),
        dictgen::InsensitiveStr::Ascii("pndium"),
        dictgen::InsensitiveStr::Ascii("ptition"),
        dictgen::InsensitiveStr::Ascii("ptitions"),
        dictgen::InsensitiveStr::Ascii("ptitive"),
        dictgen::InsensitiveStr::Ascii("ptitively"),
        dictgen::InsensitiveStr::Ascii("ptitors"),
        dictgen::InsensitiveStr::Ascii("stic"),
        dictgen::InsensitiveStr::Ascii("stics"),
    ],
    values: &[
        &["comedic"],
        &["comedians"],
        &["comedians"],
        &["comedians"],
        &["commemorates"],
        &["commemoration"],
        &["compendium"],
        &["competition"],
        &["competitions"],
        &["competitive"],
        &["competitively"],
        &["competitors"],
        &["cosmetic"],
        &["cosmetics"],
    ],
    range: 4..=9,
};

static WORD_COMD_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_COMD_CHILDREN),
    value: None,
};

pub static WORD_COMD_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("eic"),
        dictgen::InsensitiveStr::Ascii("emnation"),
    ],
    values: &[&["comedic"], &["condemnation"]],
    range: 3..=8,
};

static WORD_COMB_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_COMB_CHILDREN),
    value: None,
};

pub static WORD_COMB_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ack"),
        dictgen::InsensitiveStr::Ascii("anations"),
        dictgen::InsensitiveStr::Ascii("atabts"),
        dictgen::InsensitiveStr::Ascii("atans"),
        dictgen::InsensitiveStr::Ascii("atents"),
        dictgen::InsensitiveStr::Ascii("atibility"),
        dictgen::InsensitiveStr::Ascii("iantion"),
        dictgen::InsensitiveStr::Ascii("iens"),
        dictgen::InsensitiveStr::Ascii("inacion"),
        dictgen::InsensitiveStr::Ascii("inaison"),
        dictgen::InsensitiveStr::Ascii("inaiton"),
        dictgen::InsensitiveStr::Ascii("inatin"),
        dictgen::InsensitiveStr::Ascii("inatino"),
        dictgen::InsensitiveStr::Ascii("inatins"),
        dictgen::InsensitiveStr::Ascii("inatios"),
        dictgen::InsensitiveStr::Ascii("inato"),
        dictgen::InsensitiveStr::Ascii("inaton"),
        dictgen::InsensitiveStr::Ascii("inig"),
        dictgen::InsensitiveStr::Ascii("inining"),
        dictgen::InsensitiveStr::Ascii("ins"),
        dictgen::InsensitiveStr::Ascii("onation"),
        dictgen::InsensitiveStr::Ascii("onations"),
        dictgen::InsensitiveStr::Ascii("usion"),
    ],
    values: &[
        &["comeback"],
        &["combinations"],
        &["combatants"],
        &["combatants"],
        &["combatants"],
        &["compatibility"],
        &["combinations"],
        &["combines"],
        &["combination"],
        &["combinations"],
        &["combinations"],
        &["combinations"],
        &["combinations"],
        &["combinations"],
        &["combinations"],
        &["combination"],
        &["combination"],
        &["combining"],
        &["combining"],
        &["combines"],
        &["combination"],
        &["combinations"],
        &["combustion"],
    ],
    range: 3..=9,
};

static WORD_COMA_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_COMA_CHILDREN),
    value: None,
};

pub static WORD_COMA_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("dres"),
        dictgen::InsensitiveStr::Ascii("nder"),
        dictgen::InsensitiveStr::Ascii("ndo"),
        dictgen::InsensitiveStr::Ascii("ndos"),
        dictgen::InsensitiveStr::Ascii("ny"),
        dictgen::InsensitiveStr::Ascii("pany"),
        dictgen::InsensitiveStr::Ascii("pnies"),
        dictgen::InsensitiveStr::Ascii("pnions"),
        dictgen::InsensitiveStr::Ascii("pny"),
        dictgen::InsensitiveStr::Ascii("prable"),
        dictgen::InsensitiveStr::Ascii("pre"),
        dictgen::InsensitiveStr::Ascii("pres"),
        dictgen::InsensitiveStr::Ascii("prison"),
        dictgen::InsensitiveStr::Ascii("prisons"),
        dictgen::InsensitiveStr::Ascii("ptible"),
        dictgen::InsensitiveStr::Ascii("rde"),
    ],
    values: &[
        &["comrades"],
        &["commander"],
        &["commando"],
        &["commandos"],
        &["company"],
        &["company"],
        &["companies"],
        &["companions"],
        &["company"],
        &["comparable"],
        &["compare"],
        &["compares"],
        &["comparison"],
        &["comparisons"],
        &["compatible"],
        &["comrade"],
    ],
    range: 2..=7,
};

static WORD_COL_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_COL_CHILDREN),
    value: None,
};

static WORD_COL_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    Some(&WORD_COLA_NODE),
    None,
    None,
    None,
    Some(&WORD_COLE_NODE),
    None,
    Some(&WORD_COLG_NODE),
    None,
    None,
    None,
    None,
    Some(&WORD_COLL_NODE),
    None,
    None,
    Some(&WORD_COLO_NODE),
    None,
    None,
    None,
    None,
    None,
    Some(&WORD_COLU_NODE),
    None,
    None,
    None,
    None,
    None,
];

static WORD_COLU_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_COLU_CHILDREN),
    value: None,
};

pub static WORD_COLU_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("bmia"),
        dictgen::InsensitiveStr::Ascii("mbidae"),
        dictgen::InsensitiveStr::Ascii("mbina"),
        dictgen::InsensitiveStr::Ascii("mnas"),
        dictgen::InsensitiveStr::Ascii("msn"),
    ],
    values: &[
        &["columbia"],
        &["columbia"],
        &["columbia"],
        &["columns"],
        &["columns"],
    ],
    range: 3..=6,
};

static WORD_COLO_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_COLO_CHILDREN),
    value: None,
};

pub static WORD_COLO_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ardo"),
        dictgen::InsensitiveStr::Ascii("gen"),
        dictgen::InsensitiveStr::Ascii("mba"),
        dictgen::InsensitiveStr::Ascii("mbina"),
        dictgen::InsensitiveStr::Ascii("nge"),
        dictgen::InsensitiveStr::Ascii("nialisim"),
        dictgen::InsensitiveStr::Ascii("nializm"),
        dictgen::InsensitiveStr::Ascii("nialsim"),
        dictgen::InsensitiveStr::Ascii("nialsm"),
        dictgen::InsensitiveStr::Ascii("nianism"),
        dictgen::InsensitiveStr::Ascii("nizacion"),
        dictgen::InsensitiveStr::Ascii("nizaton"),
        dictgen::InsensitiveStr::Ascii("nizators"),
        dictgen::InsensitiveStr::Ascii("nozation"),
        dictgen::InsensitiveStr::Ascii("rao"),
        dictgen::InsensitiveStr::Ascii("rblend"),
        dictgen::InsensitiveStr::Ascii("rdao"),
        dictgen::InsensitiveStr::Ascii("ublind"),
        dictgen::InsensitiveStr::Ascii("urd"),
    ],
    values: &[
        &["colorado"],
        &["cologne"],
        &["colombia"],
        &["colombia"],
        &["cologne"],
        &["colonialism"],
        &["colonialism"],
        &["colonialism"],
        &["colonialism"],
        &["colonialism"],
        &["colonization"],
        &["colonization"],
        &["colonizers"],
        &["colonization"],
        &["colorado"],
        &["colorblind"],
        &["colorado"],
        &["colorblind"],
        &["coloured"],
    ],
    range: 3..=8,
};

static WORD_COLL_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_COLL_CHILDREN),
    value: None,
};

static WORD_COLL_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    Some(&WORD_COLLA_NODE),
    None,
    Some(&WORD_COLLC_NODE),
    None,
    Some(&WORD_COLLE_NODE),
    None,
    None,
    None,
    Some(&WORD_COLLI_NODE),
    None,
    None,
    None,
    None,
    None,
    Some(&WORD_COLLO_NODE),
    Some(&WORD_COLLP_NODE),
    None,
    None,
    None,
    None,
    Some(&WORD_COLLU_NODE),
    None,
    None,
    None,
    None,
    None,
];

static WORD_COLLU_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_COLLU_CHILDREN),
    value: None,
};

pub static WORD_COLLU_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("mn")],
    values: &[&["column"]],
    range: 2..=2,
};

static WORD_COLLP_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_COLLP_CHILDREN),
    value: None,
};

pub static WORD_COLLP_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ase"),
        dictgen::InsensitiveStr::Ascii("ased"),
        dictgen::InsensitiveStr::Ascii("ases"),
        dictgen::InsensitiveStr::Ascii("asing"),
    ],
    values: &[
        &["collapse"],
        &["collapsed"],
        &["collapses"],
        &["collapsing"],
    ],
    range: 3..=5,
};

static WORD_COLLO_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_COLLO_CHILDREN),
    value: None,
};

pub static WORD_COLLO_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("barate"),
        dictgen::InsensitiveStr::Ascii("baration"),
        dictgen::InsensitiveStr::Ascii("borate"),
        dictgen::InsensitiveStr::Ascii("nade"),
        dictgen::InsensitiveStr::Ascii("nies"),
        dictgen::InsensitiveStr::Ascii("ny"),
        dictgen::InsensitiveStr::Ascii("qiual"),
        dictgen::InsensitiveStr::Ascii("quail"),
        dictgen::InsensitiveStr::Ascii("queal"),
        dictgen::InsensitiveStr::Ascii("sal"),
    ],
    values: &[
        &["collaborate"],
        &["collaboration"],
        &["collaborate"],
        &["colonnade"],
        &["colonies"],
        &["colony"],
        &["colloquial"],
        &["colloquial"],
        &["colloquial"],
        &["colossal"],
    ],
    range: 2..=8,
};

static WORD_COLLI_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_COLLI_CHILDREN),
    value: None,
};

pub static WORD_COLLI_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("quial"),
        dictgen::InsensitiveStr::Ascii("sin"),
        dictgen::InsensitiveStr::Ascii("ssion"),
        dictgen::InsensitiveStr::Ascii("sson"),
        dictgen::InsensitiveStr::Ascii("tions"),
    ],
    values: &[
        &["colloquial"],
        &["collisions"],
        &["collisions"],
        &["collisions"],
        &["collisions"],
    ],
    range: 3..=5,
};

static WORD_COLLE_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_COLLE_CHILDREN),
    value: None,
};

pub static WORD_COLLE_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("age"),
        dictgen::InsensitiveStr::Ascii("auge"),
        dictgen::InsensitiveStr::Ascii("auges"),
        dictgen::InsensitiveStr::Ascii("citon"),
        dictgen::InsensitiveStr::Ascii("cte"),
        dictgen::InsensitiveStr::Ascii("ctems"),
        dictgen::InsensitiveStr::Ascii("ctes"),
        dictgen::InsensitiveStr::Ascii("ctie"),
        dictgen::InsensitiveStr::Ascii("ctief"),
        dictgen::InsensitiveStr::Ascii("cties"),
        dictgen::InsensitiveStr::Ascii("ctieve"),
        dictgen::InsensitiveStr::Ascii("ctifs"),
        dictgen::InsensitiveStr::Ascii("ctioners"),
        dictgen::InsensitiveStr::Ascii("ctivelly"),
        dictgen::InsensitiveStr::Ascii("ctivily"),
        dictgen::InsensitiveStr::Ascii("ctivley"),
        dictgen::InsensitiveStr::Ascii("ctivly"),
        dictgen::InsensitiveStr::Ascii("ctivo"),
        dictgen::InsensitiveStr::Ascii("ctivos"),
        dictgen::InsensitiveStr::Ascii("ctoin"),
        dictgen::InsensitiveStr::Ascii("cton"),
        dictgen::InsensitiveStr::Ascii("ctons"),
        dictgen::InsensitiveStr::Ascii("ctos"),
        dictgen::InsensitiveStr::Ascii("ctros"),
        dictgen::InsensitiveStr::Ascii("gaue"),
        dictgen::InsensitiveStr::Ascii("gaues"),
        dictgen::InsensitiveStr::Ascii("gue"),
        dictgen::InsensitiveStr::Ascii("gues"),
        dictgen::InsensitiveStr::Ascii("quial"),
        dictgen::InsensitiveStr::Ascii("st"),
        dictgen::InsensitiveStr::Ascii("teral"),
    ],
    values: &[
        &["colleagues"],
        &["colleague"],
        &["colleagues"],
        &["collection"],
        &["collective"],
        &["collects"],
        &["collects"],
        &["collective"],
        &["collective"],
        &["collects"],
        &["collective"],
        &["collects"],
        &["collections"],
        &["collectively"],
        &["collectively"],
        &["collectively"],
        &["collectively"],
        &["collection"],
        &["collections"],
        &["collections"],
        &["collection"],
        &["collections"],
        &["collectors"],
        &["collects"],
        &["colleague"],
        &["colleagues"],
        &["colleague"],
        &["colleagues"],
        &["colloquial"],
        &["collects"],
        &["collateral"],
    ],
    range: 2..=8,
};

static WORD_COLLC_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_COLLC_CHILDREN),
    value: None,
};

pub static WORD_COLLC_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("etion")],
    values: &[&["collections"]],
    range: 5..=5,
};

static WORD_COLLA_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_COLLA_CHILDREN),
    value: None,
};

pub static WORD_COLLA_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("barate"),
        dictgen::InsensitiveStr::Ascii("baration"),
        dictgen::InsensitiveStr::Ascii("berate"),
        dictgen::InsensitiveStr::Ascii("beration"),
        dictgen::InsensitiveStr::Ascii("berative"),
        dictgen::InsensitiveStr::Ascii("berator"),
        dictgen::InsensitiveStr::Ascii("borant"),
        dictgen::InsensitiveStr::Ascii("borare"),
        dictgen::InsensitiveStr::Ascii("boratie"),
        dictgen::InsensitiveStr::Ascii("boratin"),
        dictgen::InsensitiveStr::Ascii("borato"),
        dictgen::InsensitiveStr::Ascii("boratore"),
        dictgen::InsensitiveStr::Ascii("bore"),
        dictgen::InsensitiveStr::Ascii("pe"),
        dictgen::InsensitiveStr::Ascii("pes"),
        dictgen::InsensitiveStr::Ascii("pseing"),
        dictgen::InsensitiveStr::Ascii("psers"),
        dictgen::InsensitiveStr::Ascii("quial"),
        dictgen::InsensitiveStr::Ascii("res"),
        dictgen::InsensitiveStr::Ascii("ris"),
        dictgen::InsensitiveStr::Ascii("ros"),
        dictgen::InsensitiveStr::Ascii("spe"),
        dictgen::InsensitiveStr::Ascii("sped"),
        dictgen::InsensitiveStr::Ascii("spes"),
        dictgen::InsensitiveStr::Ascii("sping"),
        dictgen::InsensitiveStr::Ascii("taral"),
        dictgen::InsensitiveStr::Ascii("terial"),
        dictgen::InsensitiveStr::Ascii("terol"),
        dictgen::InsensitiveStr::Ascii("toral"),
    ],
    values: &[
        &["collaborate"],
        &["collaboration"],
        &["collaborate"],
        &["collaboration"],
        &["collaborative"],
        &["collaborate"],
        &["collaborate"],
        &["collaborate"],
        &["collaborate"],
        &["collaboration"],
        &["collaboration"],
        &["collaborate"],
        &["collaborate"],
        &["collapse"],
        &["collapse"],
        &["collapsing"],
        &["collapses"],
        &["colloquial"],
        &["collars"],
        &["collars"],
        &["collars"],
        &["collapse"],
        &["collapsed"],
        &["collapses"],
        &["collapsing"],
        &["collateral"],
        &["collateral"],
        &["collateral"],
        &["collateral"],
    ],
    range: 2..=8,
};

static WORD_COLG_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_COLG_CHILDREN),
    value: None,
};

pub static WORD_COLG_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("one")],
    values: &[&["cologne"]],
    range: 3..=3,
};

static WORD_COLE_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_COLE_CHILDREN),
    value: None,
};

pub static WORD_COLE_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("lctive"),
        dictgen::InsensitiveStr::Ascii("lctors"),
    ],
    values: &[&["collective"], &["collectors"]],
    range: 6..=6,
};

static WORD_COLA_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_COLA_CHILDREN),
    value: None,
};

pub static WORD_COLA_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("borations"),
        dictgen::InsensitiveStr::Ascii("teral"),
    ],
    values: &[&["collaborations"], &["collateral"]],
    range: 5..=9,
};

static WORD_COI_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_COI_CHILDREN),
    value: None,
};

pub static WORD_COI_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ncedental"),
        dictgen::InsensitiveStr::Ascii("ncedentally"),
        dictgen::InsensitiveStr::Ascii("ncedince"),
        dictgen::InsensitiveStr::Ascii("ncidance"),
        dictgen::InsensitiveStr::Ascii("ncidencal"),
        dictgen::InsensitiveStr::Ascii("ncidense"),
        dictgen::InsensitiveStr::Ascii("ncidentaly"),
        dictgen::InsensitiveStr::Ascii("ncidente"),
        dictgen::InsensitiveStr::Ascii("ncidentia"),
        dictgen::InsensitiveStr::Ascii("ncidential"),
        dictgen::InsensitiveStr::Ascii("ncidince"),
        dictgen::InsensitiveStr::Ascii("ncidnce"),
        dictgen::InsensitiveStr::Ascii("ndice"),
        dictgen::InsensitiveStr::Ascii("ndidental"),
        dictgen::InsensitiveStr::Ascii("nsidence"),
        dictgen::InsensitiveStr::Ascii("nsidental"),
        dictgen::InsensitiveStr::Ascii("nsidentally"),
        dictgen::InsensitiveStr::Ascii("nterpoint"),
    ],
    values: &[
        &["coincidental"],
        &["coincidentally"],
        &["coincidence"],
        &["coincidence"],
        &["coincidental"],
        &["coincidence"],
        &["coincidentally"],
        &["coincidence"],
        &["coincidental"],
        &["coincidental"],
        &["coincidence"],
        &["coincide"],
        &["coincide"],
        &["coincidental"],
        &["coincidence"],
        &["coincidental"],
        &["coincidentally"],
        &["counterpoint"],
    ],
    range: 5..=11,
};

static WORD_COH_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_COH_CHILDREN),
    value: None,
};

pub static WORD_COH_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("esie")],
    values: &[&["cohesive"]],
    range: 4..=4,
};

static WORD_COG_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_COG_CHILDREN),
    value: None,
};

pub static WORD_COG_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("natious"),
        dictgen::InsensitiveStr::Ascii("nitivie"),
        dictgen::InsensitiveStr::Ascii("nizent"),
    ],
    values: &[&["contagious"], &["cognitive"], &["cognizant"]],
    range: 6..=7,
};

static WORD_COF_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_COF_CHILDREN),
    value: None,
};

pub static WORD_COF_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("orm")],
    values: &[&["conform"]],
    range: 3..=3,
};

static WORD_COE_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_COE_CHILDREN),
    value: None,
};

pub static WORD_COE_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("fficeint"),
        dictgen::InsensitiveStr::Ascii("fficent"),
        dictgen::InsensitiveStr::Ascii("fficiant"),
        dictgen::InsensitiveStr::Ascii("fficienct"),
        dictgen::InsensitiveStr::Ascii("ncidental"),
    ],
    values: &[
        &["coefficient"],
        &["coefficient"],
        &["coefficient"],
        &["coefficient"],
        &["coincidental"],
    ],
    range: 7..=9,
};

static WORD_COC_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_COC_CHILDREN),
    value: None,
};

pub static WORD_COC_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("karoches"),
        dictgen::InsensitiveStr::Ascii("katils"),
        dictgen::InsensitiveStr::Ascii("kraoches"),
        dictgen::InsensitiveStr::Ascii("kroachers"),
        dictgen::InsensitiveStr::Ascii("kroachs"),
        dictgen::InsensitiveStr::Ascii("kroackes"),
        dictgen::InsensitiveStr::Ascii("kroahes"),
        dictgen::InsensitiveStr::Ascii("ktailers"),
        dictgen::InsensitiveStr::Ascii("ktials"),
        dictgen::InsensitiveStr::Ascii("tail"),
    ],
    values: &[
        &["cockroaches"],
        &["cocktails"],
        &["cockroaches"],
        &["cockroaches"],
        &["cockroaches"],
        &["cockroaches"],
        &["cockroaches"],
        &["cocktails"],
        &["cocktails"],
        &["cocktail"],
    ],
    range: 4..=9,
};

static WORD_COA_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_COA_CHILDREN),
    value: None,
};

pub static WORD_COA_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("lese")],
    values: &[&["coalesce"]],
    range: 4..=4,
};

static WORD_CM_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_CM_CHILDREN),
    value: None,
};

pub static WORD_CM_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("oputer")],
    values: &[&["computer"]],
    range: 6..=6,
};

static WORD_CL_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_CL_CHILDREN),
    value: None,
};

static WORD_CL_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    Some(&WORD_CLA_NODE),
    None,
    None,
    None,
    Some(&WORD_CLE_NODE),
    None,
    None,
    Some(&WORD_CLH_NODE),
    Some(&WORD_CLI_NODE),
    None,
    None,
    None,
    None,
    None,
    Some(&WORD_CLO_NODE),
    None,
    None,
    None,
    None,
    None,
    Some(&WORD_CLU_NODE),
    None,
    None,
    None,
    Some(&WORD_CLY_NODE),
    None,
];

static WORD_CLY_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_CLY_CHILDREN),
    value: None,
};

pub static WORD_CLY_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("amore"),
        dictgen::InsensitiveStr::Ascii("inder"),
    ],
    values: &[&["claymore"], &["cylinder"]],
    range: 5..=5,
};

static WORD_CLU_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_CLU_CHILDREN),
    value: None,
};

pub static WORD_CLU_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ases"),
        dictgen::InsensitiveStr::Ascii("cthing"),
        dictgen::InsensitiveStr::Ascii("prit"),
        dictgen::InsensitiveStr::Ascii("tchign"),
        dictgen::InsensitiveStr::Ascii("thcing"),
    ],
    values: &[
        &["clauses"],
        &["clutching"],
        &["culprit"],
        &["clutching"],
        &["clutching"],
    ],
    range: 4..=6,
};

static WORD_CLO_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_CLO_CHILDREN),
    value: None,
};

pub static WORD_CLO_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("esly"),
        dictgen::InsensitiveStr::Ascii("seing"),
        dictgen::InsensitiveStr::Ascii("seley"),
        dictgen::InsensitiveStr::Ascii("sley"),
    ],
    values: &[&["closely"], &["closing"], &["closely"], &["closely"]],
    range: 4..=5,
};

static WORD_CLI_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_CLI_CHILDREN),
    value: None,
};

pub static WORD_CLI_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("amtes"),
        dictgen::InsensitiveStr::Ascii("antro"),
        dictgen::InsensitiveStr::Ascii("ckare"),
        dictgen::InsensitiveStr::Ascii("ckbat"),
        dictgen::InsensitiveStr::Ascii("ckear"),
        dictgen::InsensitiveStr::Ascii("entes"),
        dictgen::InsensitiveStr::Ascii("ffbanger"),
        dictgen::InsensitiveStr::Ascii("ffhager"),
        dictgen::InsensitiveStr::Ascii("ffhander"),
        dictgen::InsensitiveStr::Ascii("ffhangar"),
        dictgen::InsensitiveStr::Ascii("fthanger"),
        dictgen::InsensitiveStr::Ascii("kcbait"),
        dictgen::InsensitiveStr::Ascii("mateers"),
        dictgen::InsensitiveStr::Ascii("matiser"),
        dictgen::InsensitiveStr::Ascii("mats"),
        dictgen::InsensitiveStr::Ascii("mbes"),
        dictgen::InsensitiveStr::Ascii("ncial"),
        dictgen::InsensitiveStr::Ascii("ncially"),
        dictgen::InsensitiveStr::Ascii("ncis"),
        dictgen::InsensitiveStr::Ascii("nicaly"),
        dictgen::InsensitiveStr::Ascii("nicas"),
        dictgen::InsensitiveStr::Ascii("nicos"),
        dictgen::InsensitiveStr::Ascii("pbaord"),
        dictgen::InsensitiveStr::Ascii("pboad"),
        dictgen::InsensitiveStr::Ascii("tiros"),
        dictgen::InsensitiveStr::Ascii("toridis"),
        dictgen::InsensitiveStr::Ascii("tories"),
        dictgen::InsensitiveStr::Ascii("torios"),
        dictgen::InsensitiveStr::Ascii("torious"),
        dictgen::InsensitiveStr::Ascii("torius"),
        dictgen::InsensitiveStr::Ascii("tors"),
    ],
    values: &[
        &["climates"],
        &["cilantro"],
        &["clicker"],
        &["clickbait"],
        &["clicker"],
        &["clients"],
        &["cliffhanger"],
        &["cliffhanger"],
        &["cliffhanger"],
        &["cliffhanger"],
        &["cliffhanger"],
        &["clickbait"],
        &["climates"],
        &["climates"],
        &["climates"],
        &["climbers"],
        &["clinical"],
        &["clinically"],
        &["clinics"],
        &["clinically"],
        &["clinics"],
        &["clinics"],
        &["clipboard"],
        &["clipboard"],
        &["clitoris"],
        &["clitoris"],
        &["clitoris"],
        &["clitoris"],
        &["clitoris"],
        &["clitoris"],
        &["clitoris"],
    ],
    range: 4..=8,
};

static WORD_CLH_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_CLH_CHILDREN),
    value: None,
};

pub static WORD_CLH_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("orine")],
    values: &[&["chlorine"]],
    range: 5..=5,
};

static WORD_CLE_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_CLE_CHILDREN),
    value: None,
};

pub static WORD_CLE_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("anes"),
        dictgen::InsensitiveStr::Ascii("anies"),
        dictgen::InsensitiveStr::Ascii("anilness"),
        dictgen::InsensitiveStr::Ascii("anisng"),
        dictgen::InsensitiveStr::Ascii("anleness"),
        dictgen::InsensitiveStr::Ascii("anliess"),
        dictgen::InsensitiveStr::Ascii("anlyness"),
        dictgen::InsensitiveStr::Ascii("ansiness"),
        dictgen::InsensitiveStr::Ascii("areance"),
        dictgen::InsensitiveStr::Ascii("asne"),
        dictgen::InsensitiveStr::Ascii("asner"),
        dictgen::InsensitiveStr::Ascii("asning"),
        dictgen::InsensitiveStr::Ascii("ints"),
        dictgen::InsensitiveStr::Ascii("nase"),
        dictgen::InsensitiveStr::Ascii("naser"),
        dictgen::InsensitiveStr::Ascii("ra"),
        dictgen::InsensitiveStr::Ascii("rification"),
        dictgen::InsensitiveStr::Ascii("sius"),
        dictgen::InsensitiveStr::Ascii("tics"),
        dictgen::InsensitiveStr::Ascii("velry"),
        dictgen::InsensitiveStr::Ascii("verleys"),
        dictgen::InsensitiveStr::Ascii("very"),
    ],
    values: &[
        &["cleanse"],
        &["cleanse"],
        &["cleanliness"],
        &["cleansing"],
        &["cleanliness"],
        &["cleanliness"],
        &["cleanliness"],
        &["cleanliness"],
        &["clearance"],
        &["cleanse"],
        &["cleanser"],
        &["cleansing"],
        &["clients"],
        &["cleanse"],
        &["cleanser"],
        &["clear"],
        &["clarification"],
        &["celsius"],
        &["celtics"],
        &["cleverly"],
        &["cleverly"],
        &["cleverly"],
    ],
    range: 2..=10,
};

static WORD_CLA_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_CLA_CHILDREN),
    value: None,
};

pub static WORD_CLA_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("cium"),
        dictgen::InsensitiveStr::Ascii("culations"),
        dictgen::InsensitiveStr::Ascii("culator"),
        dictgen::InsensitiveStr::Ascii("culators"),
        dictgen::InsensitiveStr::Ascii("er"),
        dictgen::InsensitiveStr::Ascii("erer"),
        dictgen::InsensitiveStr::Ascii("erly"),
        dictgen::InsensitiveStr::Ascii("gary"),
        dictgen::InsensitiveStr::Ascii("ibre"),
        dictgen::InsensitiveStr::Ascii("imes"),
        dictgen::InsensitiveStr::Ascii("irfy"),
        dictgen::InsensitiveStr::Ascii("irfying"),
        dictgen::InsensitiveStr::Ascii("irty"),
        dictgen::InsensitiveStr::Ascii("nand"),
        dictgen::InsensitiveStr::Ascii("nnand"),
        dictgen::InsensitiveStr::Ascii("rfiy"),
        dictgen::InsensitiveStr::Ascii("rificaiton"),
        dictgen::InsensitiveStr::Ascii("rifiy"),
        dictgen::InsensitiveStr::Ascii("rskon"),
        dictgen::InsensitiveStr::Ascii("s"),
        dictgen::InsensitiveStr::Ascii("sic"),
        dictgen::InsensitiveStr::Ascii("sical"),
        dictgen::InsensitiveStr::Ascii("sically"),
        dictgen::InsensitiveStr::Ascii("sification"),
        dictgen::InsensitiveStr::Ascii("ssicals"),
        dictgen::InsensitiveStr::Ascii("ssicos"),
        dictgen::InsensitiveStr::Ascii("ssicus"),
        dictgen::InsensitiveStr::Ascii("ssificaiton"),
        dictgen::InsensitiveStr::Ascii("ssificato"),
        dictgen::InsensitiveStr::Ascii("ssifides"),
        dictgen::InsensitiveStr::Ascii("ssifiy"),
        dictgen::InsensitiveStr::Ascii("ssis"),
        dictgen::InsensitiveStr::Ascii("ssrom"),
        dictgen::InsensitiveStr::Ascii("ssrooom"),
        dictgen::InsensitiveStr::Ascii("sssic"),
        dictgen::InsensitiveStr::Ascii("sues"),
        dictgen::InsensitiveStr::Ascii("usens"),
        dictgen::InsensitiveStr::Ascii("ymer"),
        dictgen::InsensitiveStr::Ascii("ymoe"),
    ],
    values: &[
        &["calcium"],
        &["calculations"],
        &["calculator"],
        &["calculators"],
        &["clear"],
        &["clearer"],
        &["clearly"],
        &["calgary"],
        &["calibre"],
        &["claims"],
        &["clarify"],
        &["clarifying"],
        &["clarity"],
        &["clannad"],
        &["clannad"],
        &["clarify"],
        &["clarification"],
        &["clarify"],
        &["clarkson"],
        &["class"],
        &["classic"],
        &["classical"],
        &["classically"],
        &["clarification"],
        &["classics"],
        &["classics"],
        &["classics"],
        &["classification"],
        &["classification"],
        &["classified"],
        &["classify"],
        &["classics"],
        &["classroom"],
        &["classroom"],
        &["classics"],
        &["clauses"],
        &["clauses"],
        &["claymore"],
        &["claymore"],
    ],
    range: 1..=11,
};

static WORD_CI_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_CI_CHILDREN),
    value: None,
};

static WORD_CI_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    None,
    None,
    Some(&WORD_CIC_NODE),
    None,
    Some(&WORD_CIE_NODE),
    None,
    Some(&WORD_CIG_NODE),
    None,
    None,
    None,
    None,
    Some(&WORD_CIL_NODE),
    None,
    Some(&WORD_CIN_NODE),
    None,
    None,
    None,
    Some(&WORD_CIR_NODE),
    None,
    Some(&WORD_CIT_NODE),
    None,
    Some(&WORD_CIV_NODE),
    None,
    None,
    None,
    None,
];

static WORD_CIV_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_CIV_CHILDREN),
    value: None,
};

pub static WORD_CIV_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ilains"),
        dictgen::InsensitiveStr::Ascii("iliaztion"),
        dictgen::InsensitiveStr::Ascii("ilications"),
        dictgen::InsensitiveStr::Ascii("ilizacion"),
        dictgen::InsensitiveStr::Ascii("ilizaiton"),
        dictgen::InsensitiveStr::Ascii("ilizaitons"),
        dictgen::InsensitiveStr::Ascii("ilizatin"),
        dictgen::InsensitiveStr::Ascii("ilizatoin"),
        dictgen::InsensitiveStr::Ascii("ilizaton"),
        dictgen::InsensitiveStr::Ascii("ilizatons"),
        dictgen::InsensitiveStr::Ascii("illian"),
        dictgen::InsensitiveStr::Ascii("ilziation"),
        dictgen::InsensitiveStr::Ascii("izilation"),
    ],
    values: &[
        &["civilians"],
        &["civilizations"],
        &["civilizations"],
        &["civilization"],
        &["civilization"],
        &["civilizations"],
        &["civilizations"],
        &["civilizations"],
        &["civilization"],
        &["civilizations"],
        &["civilian"],
        &["civilizations"],
        &["civilizations"],
    ],
    range: 6..=10,
};

static WORD_CIT_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_CIT_CHILDREN),
    value: None,
};

pub static WORD_CIT_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("icenship"),
        dictgen::InsensitiveStr::Ascii("isenship"),
        dictgen::InsensitiveStr::Ascii("izinship"),
    ],
    values: &[&["citizenship"], &["citizenship"], &["citizenship"]],
    range: 8..=8,
};

static WORD_CIR_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_CIR_CHILDREN),
    value: None,
};

pub static WORD_CIR_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("cels"),
        dictgen::InsensitiveStr::Ascii("cimcised"),
        dictgen::InsensitiveStr::Ascii("ciuts"),
        dictgen::InsensitiveStr::Ascii("ckets"),
        dictgen::InsensitiveStr::Ascii("clebs"),
        dictgen::InsensitiveStr::Ascii("cluar"),
        dictgen::InsensitiveStr::Ascii("cluating"),
        dictgen::InsensitiveStr::Ascii("comference"),
        dictgen::InsensitiveStr::Ascii("cualtion"),
        dictgen::InsensitiveStr::Ascii("cuis"),
        dictgen::InsensitiveStr::Ascii("cuitos"),
        dictgen::InsensitiveStr::Ascii("culacion"),
        dictgen::InsensitiveStr::Ascii("culaire"),
        dictgen::InsensitiveStr::Ascii("culatiing"),
        dictgen::InsensitiveStr::Ascii("culationg"),
        dictgen::InsensitiveStr::Ascii("culaton"),
        dictgen::InsensitiveStr::Ascii("cumcisied"),
        dictgen::InsensitiveStr::Ascii("cumcison"),
        dictgen::InsensitiveStr::Ascii("cumcission"),
        dictgen::InsensitiveStr::Ascii("cumcition"),
        dictgen::InsensitiveStr::Ascii("cumferance"),
        dictgen::InsensitiveStr::Ascii("cumsice"),
        dictgen::InsensitiveStr::Ascii("cumsiced"),
        dictgen::InsensitiveStr::Ascii("cumsicion"),
        dictgen::InsensitiveStr::Ascii("cumsicions"),
        dictgen::InsensitiveStr::Ascii("cumsied"),
        dictgen::InsensitiveStr::Ascii("cumsised"),
        dictgen::InsensitiveStr::Ascii("cumsision"),
        dictgen::InsensitiveStr::Ascii("cumsition"),
        dictgen::InsensitiveStr::Ascii("cumsizion"),
        dictgen::InsensitiveStr::Ascii("cumstace"),
        dictgen::InsensitiveStr::Ascii("cumstanes"),
        dictgen::InsensitiveStr::Ascii("cumstanial"),
        dictgen::InsensitiveStr::Ascii("cumstansial"),
        dictgen::InsensitiveStr::Ascii("cumstanta"),
        dictgen::InsensitiveStr::Ascii("cumstantal"),
        dictgen::InsensitiveStr::Ascii("cumstante"),
        dictgen::InsensitiveStr::Ascii("cumstantional"),
        dictgen::InsensitiveStr::Ascii("cumstantual"),
        dictgen::InsensitiveStr::Ascii("cumstential"),
        dictgen::InsensitiveStr::Ascii("cumstnaces"),
        dictgen::InsensitiveStr::Ascii("cumvrent"),
        dictgen::InsensitiveStr::Ascii("cumwent"),
        dictgen::InsensitiveStr::Ascii("cuncised"),
        dictgen::InsensitiveStr::Ascii("cuncision"),
        dictgen::InsensitiveStr::Ascii("cunference"),
        dictgen::InsensitiveStr::Ascii("cunstance"),
        dictgen::InsensitiveStr::Ascii("cunstances"),
        dictgen::InsensitiveStr::Ascii("cunstantial"),
        dictgen::InsensitiveStr::Ascii("cunvent"),
        dictgen::InsensitiveStr::Ascii("cut"),
        dictgen::InsensitiveStr::Ascii("icuit"),
        dictgen::InsensitiveStr::Ascii("iculum"),
        dictgen::InsensitiveStr::Ascii("lces"),
        dictgen::InsensitiveStr::Ascii("lcing"),
        dictgen::InsensitiveStr::Ascii("ruculum"),
        dictgen::InsensitiveStr::Ascii("ticise"),
        dictgen::InsensitiveStr::Ascii("ticising"),
        dictgen::InsensitiveStr::Ascii("uclar"),
        dictgen::InsensitiveStr::Ascii("uclating"),
        dictgen::InsensitiveStr::Ascii("uclation"),
        dictgen::InsensitiveStr::Ascii("ucmference"),
        dictgen::InsensitiveStr::Ascii("ucmstances"),
    ],
    values: &[
        &["circles"],
        &["circumcised"],
        &["circuits"],
        &["crickets"],
        &["circles"],
        &["circular"],
        &["circulating"],
        &["circumference"],
        &["circulation"],
        &["circuits"],
        &["circuits"],
        &["circulation"],
        &["circular"],
        &["circulating"],
        &["circulating"],
        &["circulation"],
        &["circumcised"],
        &["circumcision"],
        &["circumcision"],
        &["circumcision"],
        &["circumference"],
        &["circumcised"],
        &["circumcised"],
        &["circumcision"],
        &["circumcision"],
        &["circumcised"],
        &["circumcised"],
        &["circumcision"],
        &["circumcision"],
        &["circumcision"],
        &["circumstance"],
        &["circumstance"],
        &["circumstantial"],
        &["circumstantial"],
        &["circumstantial"],
        &["circumstantial"],
        &["circumstance"],
        &["circumstantial"],
        &["circumstantial"],
        &["circumstantial"],
        &["circumstance"],
        &["circumvent"],
        &["circumvent"],
        &["circumcised"],
        &["circumcision"],
        &["circumference"],
        &["circumstance"],
        &["circumstances"],
        &["circumstantial"],
        &["circumvent"],
        &["circuit"],
        &["circuit"],
        &["curriculum"],
        &["circles"],
        &["circling"],
        &["curriculum"],
        &["criticise"],
        &["criticising"],
        &["circular"],
        &["circulating"],
        &["circulation"],
        &["circumference"],
        &["circumstances"],
    ],
    range: 3..=13,
};

static WORD_CIN_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_CIN_CHILDREN),
    value: None,
};

pub static WORD_CIN_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("cinatti"),
        dictgen::InsensitiveStr::Ascii("cinnasti"),
        dictgen::InsensitiveStr::Ascii("cinnatti"),
        dictgen::InsensitiveStr::Ascii("cinnnati"),
        dictgen::InsensitiveStr::Ascii("ematagraphy"),
        dictgen::InsensitiveStr::Ascii("ematagrophy"),
        dictgen::InsensitiveStr::Ascii("ematograhpy"),
        dictgen::InsensitiveStr::Ascii("ematograhy"),
        dictgen::InsensitiveStr::Ascii("ematograpy"),
        dictgen::InsensitiveStr::Ascii("ematogrophy"),
        dictgen::InsensitiveStr::Ascii("ematogrpahy"),
        dictgen::InsensitiveStr::Ascii("emetography"),
        dictgen::InsensitiveStr::Ascii("imatography"),
        dictgen::InsensitiveStr::Ascii("ncinati"),
    ],
    values: &[
        &["cincinnati"],
        &["cincinnati"],
        &["cincinnati"],
        &["cincinnati"],
        &["cinematography"],
        &["cinematography"],
        &["cinematography"],
        &["cinematography"],
        &["cinematography"],
        &["cinematography"],
        &["cinematography"],
        &["cinematography"],
        &["cinematography"],
        &["cincinnati"],
    ],
    range: 7..=11,
};

static WORD_CIL_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_CIL_CHILDREN),
    value: None,
};

pub static WORD_CIL_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("anto"),
        dictgen::InsensitiveStr::Ascii("ents"),
        dictgen::InsensitiveStr::Ascii("ivians"),
        dictgen::InsensitiveStr::Ascii("ivization"),
        dictgen::InsensitiveStr::Ascii("mbers"),
        dictgen::InsensitiveStr::Ascii("natro"),
        dictgen::InsensitiveStr::Ascii("pboard"),
        dictgen::InsensitiveStr::Ascii("toris"),
        dictgen::InsensitiveStr::Ascii("ynders"),
    ],
    values: &[
        &["cilantro"],
        &["clients"],
        &["civilians"],
        &["civilizations"],
        &["climbers"],
        &["cilantro"],
        &["clipboard"],
        &["clitoris"],
        &["cylinders"],
    ],
    range: 4..=9,
};

static WORD_CIG_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_CIG_CHILDREN),
    value: None,
};

pub static WORD_CIG_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("arattes"),
        dictgen::InsensitiveStr::Ascii("arete"),
        dictgen::InsensitiveStr::Ascii("aretts"),
        dictgen::InsensitiveStr::Ascii("eratte"),
        dictgen::InsensitiveStr::Ascii("erattes"),
    ],
    values: &[
        &["cigarettes"],
        &["cigarets"],
        &["cigarettes"],
        &["cigarette"],
        &["cigarettes"],
    ],
    range: 5..=7,
};

static WORD_CIE_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_CIE_CHILDREN),
    value: None,
};

pub static WORD_CIE_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("lings")],
    values: &[&["ceilings"]],
    range: 5..=5,
};

static WORD_CIC_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_CIC_CHILDREN),
    value: None,
};

pub static WORD_CIC_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("rulating")],
    values: &[&["circulating"]],
    range: 8..=8,
};

static WORD_CH_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_CH_CHILDREN),
    value: None,
};

static WORD_CH_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    Some(&WORD_CHA_NODE),
    None,
    Some(&WORD_CHC_NODE),
    None,
    Some(&WORD_CHE_NODE),
    None,
    None,
    None,
    Some(&WORD_CHI_NODE),
    None,
    None,
    Some(&WORD_CHL_NODE),
    Some(&WORD_CHM_NODE),
    None,
    Some(&WORD_CHO_NODE),
    None,
    None,
    Some(&WORD_CHR_NODE),
    None,
    Some(&WORD_CHT_NODE),
    Some(&WORD_CHU_NODE),
    None,
    None,
    None,
    None,
    None,
];

static WORD_CHU_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_CHU_CHILDREN),
    value: None,
};

pub static WORD_CHU_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ch"),
        dictgen::InsensitiveStr::Ascii("ckels"),
        dictgen::InsensitiveStr::Ascii("rchers"),
        dictgen::InsensitiveStr::Ascii("rchs"),
    ],
    values: &[&["church"], &["chuckles"], &["churches"], &["churches"]],
    range: 2..=6,
};

static WORD_CHT_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_CHT_CHILDREN),
    value: None,
};

pub static WORD_CHT_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("ulhu")],
    values: &[&["cthulhu"]],
    range: 4..=4,
};

static WORD_CHR_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_CHR_CHILDREN),
    value: None,
};

pub static WORD_CHR_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("acter"),
        dictgen::InsensitiveStr::Ascii("enobyl"),
        dictgen::InsensitiveStr::Ascii("isitan"),
        dictgen::InsensitiveStr::Ascii("isitanity"),
        dictgen::InsensitiveStr::Ascii("isitans"),
        dictgen::InsensitiveStr::Ascii("istain"),
        dictgen::InsensitiveStr::Ascii("istainity"),
        dictgen::InsensitiveStr::Ascii("istains"),
        dictgen::InsensitiveStr::Ascii("istams"),
        dictgen::InsensitiveStr::Ascii("istiaan"),
        dictgen::InsensitiveStr::Ascii("istiantiy"),
        dictgen::InsensitiveStr::Ascii("istianty"),
        dictgen::InsensitiveStr::Ascii("istimas"),
        dictgen::InsensitiveStr::Ascii("istin"),
        dictgen::InsensitiveStr::Ascii("istinaity"),
        dictgen::InsensitiveStr::Ascii("istinas"),
        dictgen::InsensitiveStr::Ascii("istines"),
        dictgen::InsensitiveStr::Ascii("istmans"),
        dictgen::InsensitiveStr::Ascii("oline"),
        dictgen::InsensitiveStr::Ascii("omasome"),
        dictgen::InsensitiveStr::Ascii("omasomes"),
        dictgen::InsensitiveStr::Ascii("omesome"),
        dictgen::InsensitiveStr::Ascii("omesomes"),
        dictgen::InsensitiveStr::Ascii("omisome"),
        dictgen::InsensitiveStr::Ascii("omisomes"),
        dictgen::InsensitiveStr::Ascii("omose"),
        dictgen::InsensitiveStr::Ascii("omosmes"),
        dictgen::InsensitiveStr::Ascii("omosomers"),
        dictgen::InsensitiveStr::Ascii("omosoms"),
        dictgen::InsensitiveStr::Ascii("omosone"),
        dictgen::InsensitiveStr::Ascii("omosones"),
        dictgen::InsensitiveStr::Ascii("omosoom"),
        dictgen::InsensitiveStr::Ascii("omossome"),
        dictgen::InsensitiveStr::Ascii("omozome"),
        dictgen::InsensitiveStr::Ascii("omozomes"),
        dictgen::InsensitiveStr::Ascii("onciles"),
        dictgen::InsensitiveStr::Ascii("onicales"),
        dictgen::InsensitiveStr::Ascii("onicals"),
        dictgen::InsensitiveStr::Ascii("onice"),
        dictgen::InsensitiveStr::Ascii("onicels"),
        dictgen::InsensitiveStr::Ascii("onichles"),
        dictgen::InsensitiveStr::Ascii("onocles"),
        dictgen::InsensitiveStr::Ascii("onoligical"),
        dictgen::InsensitiveStr::Ascii("onologial"),
        dictgen::InsensitiveStr::Ascii("onologicly"),
        dictgen::InsensitiveStr::Ascii("onosome"),
        dictgen::InsensitiveStr::Ascii("sitian"),
        dictgen::InsensitiveStr::Ascii("sitianity"),
        dictgen::InsensitiveStr::Ascii("sitians"),
        dictgen::InsensitiveStr::Ascii("sitmas"),
        dictgen::InsensitiveStr::Ascii("uches"),
    ],
    values: &[
        &["character"],
        &["chernobyl"],
        &["christian"],
        &["christianity"],
        &["christians"],
        &["christian"],
        &["christianity"],
        &["christians"],
        &["christmas"],
        &["christian"],
        &["christianity"],
        &["christianity"],
        &["christians"],
        &["christian"],
        &["christianity"],
        &["christians"],
        &["christians"],
        &["christians"],
        &["chlorine"],
        &["chromosome"],
        &["chromosomes"],
        &["chromosome"],
        &["chromosomes"],
        &["chromosome"],
        &["chromosomes"],
        &["chromosome"],
        &["chromosomes"],
        &["chromosomes"],
        &["chromosomes"],
        &["chromosome"],
        &["chromosomes"],
        &["chromosome"],
        &["chromosomes"],
        &["chromosome"],
        &["chromosomes"],
        &["chronicles"],
        &["chronicles"],
        &["chronicles"],
        &["chronicles"],
        &["chronicles"],
        &["chronicles"],
        &["chronicles"],
        &["chronological"],
        &["chronological"],
        &["chronological"],
        &["chromosome"],
        &["christian"],
        &["christianity"],
        &["christians"],
        &["christmas"],
        &["churches"],
    ],
    range: 5..=10,
};

static WORD_CHO_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_CHO_CHILDREN),
    value: None,
};

pub static WORD_CHO_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("atic"),
        dictgen::InsensitiveStr::Ascii("calates"),
        dictgen::InsensitiveStr::Ascii("cies"),
        dictgen::InsensitiveStr::Ascii("cloate"),
        dictgen::InsensitiveStr::Ascii("cloates"),
        dictgen::InsensitiveStr::Ascii("coalte"),
        dictgen::InsensitiveStr::Ascii("coaltes"),
        dictgen::InsensitiveStr::Ascii("colae"),
        dictgen::InsensitiveStr::Ascii("colateers"),
        dictgen::InsensitiveStr::Ascii("colatie"),
        dictgen::InsensitiveStr::Ascii("colatos"),
        dictgen::InsensitiveStr::Ascii("colats"),
        dictgen::InsensitiveStr::Ascii("colatte"),
        dictgen::InsensitiveStr::Ascii("colet"),
        dictgen::InsensitiveStr::Ascii("colotes"),
        dictgen::InsensitiveStr::Ascii("colste"),
        dictgen::InsensitiveStr::Ascii("esive"),
        dictgen::InsensitiveStr::Ascii("icers"),
        dictgen::InsensitiveStr::Ascii("lesteral"),
        dictgen::InsensitiveStr::Ascii("lestoral"),
        dictgen::InsensitiveStr::Ascii("lestorol"),
        dictgen::InsensitiveStr::Ascii("lestrol"),
        dictgen::InsensitiveStr::Ascii("locate"),
        dictgen::InsensitiveStr::Ascii("losterol"),
        dictgen::InsensitiveStr::Ascii("lrine"),
        dictgen::InsensitiveStr::Ascii("osen"),
        dictgen::InsensitiveStr::Ascii("rline"),
        dictgen::InsensitiveStr::Ascii("rmosome"),
        dictgen::InsensitiveStr::Ascii("rmosomes"),
        dictgen::InsensitiveStr::Ascii("rnicles"),
        dictgen::InsensitiveStr::Ascii("rnological"),
    ],
    values: &[
        &["chaotic"],
        &["chocolates"],
        &["choices"],
        &["chocolate"],
        &["chocolates"],
        &["chocolate"],
        &["chocolates"],
        &["chocolates"],
        &["chocolates"],
        &["chocolates"],
        &["chocolates"],
        &["chocolates"],
        &["chocolates"],
        &["chocolates"],
        &["chocolates"],
        &["chocolates"],
        &["cohesive"],
        &["choices"],
        &["cholesterol"],
        &["cholesterol"],
        &["cholesterol"],
        &["cholesterol"],
        &["chocolate"],
        &["cholesterol"],
        &["chlorine"],
        &["chosen"],
        &["chlorine"],
        &["chromosome"],
        &["chromosomes"],
        &["chronicles"],
        &["chronological"],
    ],
    range: 4..=10,
};

static WORD_CHM_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_CHM_CHILDREN),
    value: None,
};

pub static WORD_CHM_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("abers")],
    values: &[&["chambers"]],
    range: 5..=5,
};

static WORD_CHL_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_CHL_CHILDREN),
    value: None,
};

pub static WORD_CHL_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("esea"),
        dictgen::InsensitiveStr::Ascii("idfree"),
        dictgen::InsensitiveStr::Ascii("idish"),
        dictgen::InsensitiveStr::Ascii("idrens"),
        dictgen::InsensitiveStr::Ascii("oesterol"),
        dictgen::InsensitiveStr::Ascii("roine"),
    ],
    values: &[
        &["chelsea"],
        &["childfree"],
        &["childish"],
        &["childrens"],
        &["cholesterol"],
        &["chlorine"],
    ],
    range: 4..=8,
};

static WORD_CHI_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_CHI_CHILDREN),
    value: None,
};

pub static WORD_CHI_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ansaw"),
        dictgen::InsensitiveStr::Ascii("dlbirth"),
        dictgen::InsensitiveStr::Ascii("dlfree"),
        dictgen::InsensitiveStr::Ascii("dlish"),
        dictgen::InsensitiveStr::Ascii("dlrens"),
        dictgen::InsensitiveStr::Ascii("ense"),
        dictgen::InsensitiveStr::Ascii("hauhua"),
        dictgen::InsensitiveStr::Ascii("huaha"),
        dictgen::InsensitiveStr::Ascii("huahau"),
        dictgen::InsensitiveStr::Ascii("huahuha"),
        dictgen::InsensitiveStr::Ascii("huahuita"),
        dictgen::InsensitiveStr::Ascii("ldbird"),
        dictgen::InsensitiveStr::Ascii("ldbrith"),
        dictgen::InsensitiveStr::Ascii("lden"),
        dictgen::InsensitiveStr::Ascii("lderns"),
        dictgen::InsensitiveStr::Ascii("ldisch"),
        dictgen::InsensitiveStr::Ascii("ldrends"),
        dictgen::InsensitiveStr::Ascii("ldrenis"),
        dictgen::InsensitiveStr::Ascii("ldrenmrs"),
        dictgen::InsensitiveStr::Ascii("ldrents"),
        dictgen::InsensitiveStr::Ascii("ldres"),
        dictgen::InsensitiveStr::Ascii("ldresn"),
        dictgen::InsensitiveStr::Ascii("llade"),
        dictgen::InsensitiveStr::Ascii("llead"),
        dictgen::InsensitiveStr::Ascii("llend"),
        dictgen::InsensitiveStr::Ascii("lvary"),
        dictgen::InsensitiveStr::Ascii("meny"),
        dictgen::InsensitiveStr::Ascii("nees"),
        dictgen::InsensitiveStr::Ascii("nesse"),
        dictgen::InsensitiveStr::Ascii("nmey"),
        dictgen::InsensitiveStr::Ascii("pest"),
        dictgen::InsensitiveStr::Ascii("rstian"),
        dictgen::InsensitiveStr::Ascii("rstianity"),
        dictgen::InsensitiveStr::Ascii("rstians"),
        dictgen::InsensitiveStr::Ascii("rstmas"),
        dictgen::InsensitiveStr::Ascii("spet"),
        dictgen::InsensitiveStr::Ascii("uhahua"),
        dictgen::InsensitiveStr::Ascii("valy"),
        dictgen::InsensitiveStr::Ascii("varly"),
        dictgen::InsensitiveStr::Ascii("vlary"),
    ],
    values: &[
        &["chainsaw"],
        &["childbirth"],
        &["childfree"],
        &["childish"],
        &["childrens"],
        &["chinese"],
        &["chihuahua"],
        &["chihuahua"],
        &["chihuahua"],
        &["chihuahua"],
        &["chihuahua"],
        &["childbirth"],
        &["childbirth"],
        &["children"],
        &["childrens"],
        &["childish"],
        &["childrens"],
        &["childrens"],
        &["childrens"],
        &["childrens"],
        &["childrens"],
        &["childrens"],
        &["chilled"],
        &["chilled"],
        &["chilled"],
        &["chivalry"],
        &["chimney"],
        &["chinese"],
        &["chinese"],
        &["chimney"],
        &["chipset"],
        &["christian"],
        &["christianity"],
        &["christians"],
        &["christmas"],
        &["chipset"],
        &["chihuahua"],
        &["chivalry"],
        &["chivalry"],
        &["chivalry"],
    ],
    range: 4..=9,
};

static WORD_CHE_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_CHE_CHILDREN),
    value: None,
};

pub static WORD_CHE_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("chpoint"),
        dictgen::InsensitiveStr::Ascii("ckare"),
        dictgen::InsensitiveStr::Ascii("ckear"),
        dictgen::InsensitiveStr::Ascii("ckmeat"),
        dictgen::InsensitiveStr::Ascii("ckpiont"),
        dictgen::InsensitiveStr::Ascii("ckpoins"),
        dictgen::InsensitiveStr::Ascii("ckpointusa"),
        dictgen::InsensitiveStr::Ascii("ckpoit"),
        dictgen::InsensitiveStr::Ascii("ckponts"),
        dictgen::InsensitiveStr::Ascii("eots"),
        dictgen::InsensitiveStr::Ascii("erleadra"),
        dictgen::InsensitiveStr::Ascii("erlearder"),
        dictgen::InsensitiveStr::Ascii("erleards"),
        dictgen::InsensitiveStr::Ascii("erleeder"),
        dictgen::InsensitiveStr::Ascii("erleeders"),
        dictgen::InsensitiveStr::Ascii("eseberger"),
        dictgen::InsensitiveStr::Ascii("eseborger"),
        dictgen::InsensitiveStr::Ascii("esebruger"),
        dictgen::InsensitiveStr::Ascii("esebuger"),
        dictgen::InsensitiveStr::Ascii("eseburgare"),
        dictgen::InsensitiveStr::Ascii("eseburges"),
        dictgen::InsensitiveStr::Ascii("eseburgie"),
        dictgen::InsensitiveStr::Ascii("eseburgler"),
        dictgen::InsensitiveStr::Ascii("eseburgs"),
        dictgen::InsensitiveStr::Ascii("eseburguer"),
        dictgen::InsensitiveStr::Ascii("eseburguers"),
        dictgen::InsensitiveStr::Ascii("esecase"),
        dictgen::InsensitiveStr::Ascii("esecave"),
        dictgen::InsensitiveStr::Ascii("esees"),
        dictgen::InsensitiveStr::Ascii("eseface"),
        dictgen::InsensitiveStr::Ascii("eseus"),
        dictgen::InsensitiveStr::Ascii("esse"),
        dictgen::InsensitiveStr::Ascii("etoos"),
        dictgen::InsensitiveStr::Ascii("ezeburger"),
        dictgen::InsensitiveStr::Ascii("ezeburgers"),
        dictgen::InsensitiveStr::Ascii("ezecake"),
        dictgen::InsensitiveStr::Ascii("if"),
        dictgen::InsensitiveStr::Ascii("ifs"),
        dictgen::InsensitiveStr::Ascii("kcer"),
        dictgen::InsensitiveStr::Ascii("kcmate"),
        dictgen::InsensitiveStr::Ascii("lsae"),
        dictgen::InsensitiveStr::Ascii("mcial"),
        dictgen::InsensitiveStr::Ascii("mcially"),
        dictgen::InsensitiveStr::Ascii("mestry"),
        dictgen::InsensitiveStr::Ascii("micaly"),
        dictgen::InsensitiveStr::Ascii("misty"),
        dictgen::InsensitiveStr::Ascii("msitry"),
        dictgen::InsensitiveStr::Ascii("rnboyl"),
        dictgen::InsensitiveStr::Ascii("rnobl"),
        dictgen::InsensitiveStr::Ascii("rnobly"),
        dictgen::InsensitiveStr::Ascii("rnoybl"),
        dictgen::InsensitiveStr::Ascii("rnyobl"),
        dictgen::InsensitiveStr::Ascii("ronbyl"),
        dictgen::InsensitiveStr::Ascii("slea"),
    ],
    values: &[
        &["checkpoint"],
        &["checker"],
        &["checker"],
        &["checkmate"],
        &["checkpoint"],
        &["checkpoints"],
        &["checkpoints"],
        &["checkpoints"],
        &["checkpoints"],
        &["cheetos"],
        &["cheerleader"],
        &["cheerleader"],
        &["cheerleaders"],
        &["cheerleader"],
        &["cheerleaders"],
        &["cheeseburger"],
        &["cheeseburger"],
        &["cheeseburgers"],
        &["cheeseburger"],
        &["cheeseburger"],
        &["cheeseburgers"],
        &["cheeseburger"],
        &["cheeseburger"],
        &["cheeseburgers"],
        &["cheeseburger"],
        &["cheeseburgers"],
        &["cheesecake"],
        &["cheesecake"],
        &["cheeses"],
        &["cheesecake"],
        &["cheeses"],
        &["cheeses"],
        &["cheetos"],
        &["cheeseburger"],
        &["cheeseburgers"],
        &["cheesecake"],
        &["chief"],
        &["chiefs"],
        &["checker"],
        &["checkmate"],
        &["chelsea"],
        &["chemical"],
        &["chemically"],
        &["chemistry"],
        &["chemically"],
        &["chemistry"],
        &["chemistry"],
        &["chernobyl"],
        &["chernobyl"],
        &["chernobyl"],
        &["chernobyl"],
        &["chernobyl"],
        &["chernobyl"],
        &["chelsea"],
    ],
    range: 2..=11,
};

static WORD_CHC_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_CHC_CHILDREN),
    value: None,
};

pub static WORD_CHC_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("ukles")],
    values: &[&["chuckles"]],
    range: 5..=5,
};

static WORD_CHA_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_CHA_CHILDREN),
    value: None,
};

static WORD_CHA_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    Some(&WORD_CHAI_NODE),
    None,
    None,
    Some(&WORD_CHAL_NODE),
    Some(&WORD_CHAM_NODE),
    Some(&WORD_CHAN_NODE),
    None,
    None,
    None,
    Some(&WORD_CHAR_NODE),
    Some(&WORD_CHAS_NODE),
    Some(&WORD_CHAT_NODE),
    None,
    None,
    None,
    None,
    None,
    None,
];

static WORD_CHAT_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_CHAT_CHILDREN),
    value: None,
};

pub static WORD_CHAT_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("edral"),
        dictgen::InsensitiveStr::Ascii("oic"),
        dictgen::InsensitiveStr::Ascii("olic"),
        dictgen::InsensitiveStr::Ascii("olics"),
    ],
    values: &[&["cathedral"], &["chaotic"], &["catholic"], &["catholics"]],
    range: 3..=5,
};

static WORD_CHAS_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_CHAS_CHILDREN),
    value: None,
};

pub static WORD_CHAS_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("iers"),
        dictgen::InsensitiveStr::Ascii("iss"),
        dictgen::InsensitiveStr::Ascii("r"),
        dictgen::InsensitiveStr::Ascii("sids"),
        dictgen::InsensitiveStr::Ascii("sies"),
    ],
    values: &[
        &["cashiers"],
        &["chassis"],
        &["chaser"],
        &["chassis"],
        &["chassis"],
    ],
    range: 1..=4,
};

static WORD_CHAR_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_CHAR_CHILDREN),
    value: None,
};

pub static WORD_CHAR_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("achter"),
        dictgen::InsensitiveStr::Ascii("achters"),
        dictgen::InsensitiveStr::Ascii("actaristic"),
        dictgen::InsensitiveStr::Ascii("actaristics"),
        dictgen::InsensitiveStr::Ascii("actarization"),
        dictgen::InsensitiveStr::Ascii("actarize"),
        dictgen::InsensitiveStr::Ascii("actarized"),
        dictgen::InsensitiveStr::Ascii("acterazation"),
        dictgen::InsensitiveStr::Ascii("actere"),
        dictgen::InsensitiveStr::Ascii("acterisic"),
        dictgen::InsensitiveStr::Ascii("acterisics"),
        dictgen::InsensitiveStr::Ascii("acterisitc"),
        dictgen::InsensitiveStr::Ascii("acterisitcs"),
        dictgen::InsensitiveStr::Ascii("acterisitic"),
        dictgen::InsensitiveStr::Ascii("acterisitics"),
        dictgen::InsensitiveStr::Ascii("acteristc"),
        dictgen::InsensitiveStr::Ascii("acteristcs"),
        dictgen::InsensitiveStr::Ascii("acterists"),
        dictgen::InsensitiveStr::Ascii("acteristsics"),
        dictgen::InsensitiveStr::Ascii("acteritics"),
        dictgen::InsensitiveStr::Ascii("acterizarion"),
        dictgen::InsensitiveStr::Ascii("acterizaton"),
        dictgen::InsensitiveStr::Ascii("actersistic"),
        dictgen::InsensitiveStr::Ascii("actersitic"),
        dictgen::InsensitiveStr::Ascii("actersitics"),
        dictgen::InsensitiveStr::Ascii("acterz"),
        dictgen::InsensitiveStr::Ascii("actor"),
        dictgen::InsensitiveStr::Ascii("actoristics"),
        dictgen::InsensitiveStr::Ascii("actors"),
        dictgen::InsensitiveStr::Ascii("akters"),
        dictgen::InsensitiveStr::Ascii("asmatic"),
        dictgen::InsensitiveStr::Ascii("asteristic"),
        dictgen::InsensitiveStr::Ascii("atable"),
        dictgen::InsensitiveStr::Ascii("aterized"),
        dictgen::InsensitiveStr::Ascii("caol"),
        dictgen::InsensitiveStr::Ascii("col"),
        dictgen::InsensitiveStr::Ascii("ecteristic"),
        dictgen::InsensitiveStr::Ascii("ecteristics"),
        dictgen::InsensitiveStr::Ascii("ecterization"),
        dictgen::InsensitiveStr::Ascii("ecters"),
        dictgen::InsensitiveStr::Ascii("gehr"),
        dictgen::InsensitiveStr::Ascii("geur"),
        dictgen::InsensitiveStr::Ascii("icterization"),
        dictgen::InsensitiveStr::Ascii("icterized"),
        dictgen::InsensitiveStr::Ascii("iman"),
        dictgen::InsensitiveStr::Ascii("imastic"),
        dictgen::InsensitiveStr::Ascii("imsa"),
        dictgen::InsensitiveStr::Ascii("isa"),
        dictgen::InsensitiveStr::Ascii("ismastic"),
        dictgen::InsensitiveStr::Ascii("ismatisch"),
        dictgen::InsensitiveStr::Ascii("istics"),
        dictgen::InsensitiveStr::Ascii("itible"),
        dictgen::InsensitiveStr::Ascii("misa"),
        dictgen::InsensitiveStr::Ascii("ocal"),
        dictgen::InsensitiveStr::Ascii("sima"),
        dictgen::InsensitiveStr::Ascii("simatic"),
        dictgen::InsensitiveStr::Ascii("tiable"),
    ],
    values: &[
        &["character"],
        &["characters"],
        &["characteristic"],
        &["characteristics"],
        &["characterization"],
        &["characterize"],
        &["characterized"],
        &["characterization"],
        &["characterize"],
        &["characteristic"],
        &["characteristics"],
        &["characteristics"],
        &["characteristics"],
        &["characteristic"],
        &["characteristics"],
        &["characteristics"],
        &["characteristics"],
        &["characteristics"],
        &["characteristic"],
        &["characteristic"],
        &["characterization"],
        &["characterization"],
        &["characteristic"],
        &["characteristics"],
        &["characteristics"],
        &["characterize"],
        &["character"],
        &["characteristics"],
        &["characters"],
        &["characters"],
        &["charismatic"],
        &["characteristics"],
        &["charitable"],
        &["characterized"],
        &["charcoal"],
        &["charcoal"],
        &["characteristic"],
        &["characteristics"],
        &["characterization"],
        &["characters"],
        &["charger"],
        &["charger"],
        &["characterization"],
        &["characterized"],
        &["chairman"],
        &["charismatic"],
        &["charisma"],
        &["charisma"],
        &["charismatic"],
        &["charismatic"],
        &["characteristics"],
        &["charitable"],
        &["charisma"],
        &["charcoal"],
        &["charisma"],
        &["charismatic"],
        &["charitable"],
    ],
    range: 3..=12,
};

static WORD_CHAN_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_CHAN_CHILDREN),
    value: None,
};

pub static WORD_CHAN_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("celler"),
        dictgen::InsensitiveStr::Ascii("cellour"),
        dictgen::InsensitiveStr::Ascii("cillor"),
        dictgen::InsensitiveStr::Ascii("dlure"),
        dictgen::InsensitiveStr::Ascii("gable"),
        dictgen::InsensitiveStr::Ascii("isaw"),
        dictgen::InsensitiveStr::Ascii("lder"),
        dictgen::InsensitiveStr::Ascii("pionship"),
        dictgen::InsensitiveStr::Ascii("pionships"),
        dictgen::InsensitiveStr::Ascii("sellor"),
    ],
    values: &[
        &["chancellor"],
        &["chancellor"],
        &["chancellor"],
        &["chandler"],
        &["changeable"],
        &["chainsaw"],
        &["chandler"],
        &["championship"],
        &["championships"],
        &["chancellor"],
    ],
    range: 4..=9,
};

static WORD_CHAM_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_CHAM_CHILDREN),
    value: None,
};

pub static WORD_CHAM_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("bear"),
        dictgen::InsensitiveStr::Ascii("bre"),
        dictgen::InsensitiveStr::Ascii("bres"),
        dictgen::InsensitiveStr::Ascii("eleooon"),
        dictgen::InsensitiveStr::Ascii("eloen"),
        dictgen::InsensitiveStr::Ascii("iponship"),
        dictgen::InsensitiveStr::Ascii("page"),
        dictgen::InsensitiveStr::Ascii("pagen"),
        dictgen::InsensitiveStr::Ascii("pange"),
        dictgen::InsensitiveStr::Ascii("pinoship"),
        dictgen::InsensitiveStr::Ascii("pionchip"),
        dictgen::InsensitiveStr::Ascii("pionchips"),
        dictgen::InsensitiveStr::Ascii("pionshiop"),
        dictgen::InsensitiveStr::Ascii("pionshp"),
        dictgen::InsensitiveStr::Ascii("pionsihp"),
        dictgen::InsensitiveStr::Ascii("pionsip"),
        dictgen::InsensitiveStr::Ascii("pionsips"),
        dictgen::InsensitiveStr::Ascii("pionsship"),
        dictgen::InsensitiveStr::Ascii("piosnhip"),
        dictgen::InsensitiveStr::Ascii("poinship"),
    ],
    values: &[
        &["chamber"],
        &["chamber"],
        &["chambers"],
        &["chameleon"],
        &["chameleon"],
        &["championships"],
        &["champagne"],
        &["champagne"],
        &["champagne"],
        &["championships"],
        &["championship"],
        &["championship"],
        &["championships"],
        &["championship"],
        &["championships"],
        &["championship"],
        &["championships"],
        &["championships"],
        &["championships"],
        &["championship"],
    ],
    range: 3..=9,
};

static WORD_CHAL_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_CHAL_CHILDREN),
    value: None,
};

pub static WORD_CHAL_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("enging"),
        dictgen::InsensitiveStr::Ascii("lange"),
        dictgen::InsensitiveStr::Ascii("langed"),
        dictgen::InsensitiveStr::Ascii("langes"),
        dictgen::InsensitiveStr::Ascii("langing"),
        dictgen::InsensitiveStr::Ascii("lege"),
        dictgen::InsensitiveStr::Ascii("legner"),
        dictgen::InsensitiveStr::Ascii("lender"),
        dictgen::InsensitiveStr::Ascii("leneged"),
        dictgen::InsensitiveStr::Ascii("leneger"),
        dictgen::InsensitiveStr::Ascii("leneges"),
        dictgen::InsensitiveStr::Ascii("lengeing"),
        dictgen::InsensitiveStr::Ascii("lengr"),
        dictgen::InsensitiveStr::Ascii("lengs"),
        dictgen::InsensitiveStr::Ascii("lengue"),
        dictgen::InsensitiveStr::Ascii("lengur"),
        dictgen::InsensitiveStr::Ascii("lening"),
        dictgen::InsensitiveStr::Ascii("lneger"),
    ],
    values: &[
        &["challenging"],
        &["challenge"],
        &["challenged"],
        &["challenges"],
        &["challenging"],
        &["challenge"],
        &["challenger"],
        &["challenger"],
        &["challenged"],
        &["challenger"],
        &["challenges"],
        &["challenging"],
        &["challenger"],
        &["challenges"],
        &["challenger"],
        &["challenger"],
        &["challenging"],
        &["challenger"],
    ],
    range: 4..=8,
};

static WORD_CHAI_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_CHAI_CHILDREN),
    value: None,
};

pub static WORD_CHAI_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("rmain"),
        dictgen::InsensitiveStr::Ascii("rtable"),
    ],
    values: &[&["chairman"], &["charitable"]],
    range: 5..=6,
};

static WORD_CE_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_CE_CHILDREN),
    value: None,
};

static WORD_CE_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    Some(&WORD_CEA_NODE),
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    Some(&WORD_CEL_NODE),
    Some(&WORD_CEM_NODE),
    Some(&WORD_CEN_NODE),
    None,
    None,
    None,
    Some(&WORD_CER_NODE),
    Some(&WORD_CES_NODE),
    Some(&WORD_CET_NODE),
    None,
    None,
    None,
    None,
    None,
    None,
];

static WORD_CET_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_CET_CHILDREN),
    value: None,
};

pub static WORD_CET_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("lics")],
    values: &[&["celtics"]],
    range: 4..=4,
};

static WORD_CES_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_CES_CHILDREN),
    value: None,
};

pub static WORD_CES_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("sationalism"),
        dictgen::InsensitiveStr::Ascii("sationalist"),
        dictgen::InsensitiveStr::Ascii("spol"),
        dictgen::InsensitiveStr::Ascii("spoool"),
    ],
    values: &[
        &["sensationalism"],
        &["sensationalist"],
        &["cesspool"],
        &["cesspool"],
    ],
    range: 4..=11,
};

static WORD_CER_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_CER_CHILDREN),
    value: None,
};

pub static WORD_CER_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("atine"),
        dictgen::InsensitiveStr::Ascii("beral"),
        dictgen::InsensitiveStr::Ascii("breus"),
        dictgen::InsensitiveStr::Ascii("bures"),
        dictgen::InsensitiveStr::Ascii("cumstance"),
        dictgen::InsensitiveStr::Ascii("ebrawl"),
        dictgen::InsensitiveStr::Ascii("emone"),
        dictgen::InsensitiveStr::Ascii("emonias"),
        dictgen::InsensitiveStr::Ascii("emoniis"),
        dictgen::InsensitiveStr::Ascii("emonije"),
        dictgen::InsensitiveStr::Ascii("ification"),
        dictgen::InsensitiveStr::Ascii("imonial"),
        dictgen::InsensitiveStr::Ascii("imonies"),
        dictgen::InsensitiveStr::Ascii("imonious"),
        dictgen::InsensitiveStr::Ascii("imony"),
        dictgen::InsensitiveStr::Ascii("itfication"),
        dictgen::InsensitiveStr::Ascii("maic"),
        dictgen::InsensitiveStr::Ascii("omony"),
        dictgen::InsensitiveStr::Ascii("tainity"),
        dictgen::InsensitiveStr::Ascii("tainlyt"),
        dictgen::InsensitiveStr::Ascii("taintity"),
        dictgen::InsensitiveStr::Ascii("tainy"),
        dictgen::InsensitiveStr::Ascii("tanity"),
        dictgen::InsensitiveStr::Ascii("tian"),
        dictgen::InsensitiveStr::Ascii("tianty"),
        dictgen::InsensitiveStr::Ascii("tificaat"),
        dictgen::InsensitiveStr::Ascii("tificaiton"),
        dictgen::InsensitiveStr::Ascii("tificare"),
        dictgen::InsensitiveStr::Ascii("tificationkits"),
        dictgen::InsensitiveStr::Ascii("tificato"),
        dictgen::InsensitiveStr::Ascii("tificats"),
        dictgen::InsensitiveStr::Ascii("tificiate"),
        dictgen::InsensitiveStr::Ascii("vial"),
    ],
    values: &[
        &["creatine"],
        &["cerebral"],
        &["cerberus"],
        &["cerberus"],
        &["circumstance"],
        &["cerebral"],
        &["ceremonies"],
        &["ceremonies"],
        &["ceremonies"],
        &["ceremonies"],
        &["verification"],
        &["ceremonial"],
        &["ceremonies"],
        &["ceremonious"],
        &["ceremony"],
        &["certifications"],
        &["ceramic"],
        &["ceremony"],
        &["certainty"],
        &["certainty"],
        &["certainty"],
        &["certainty"],
        &["certainty"],
        &["certain"],
        &["certainty"],
        &["certificate"],
        &["certification"],
        &["certificate"],
        &["certifications"],
        &["certification"],
        &["certificates"],
        &["certificate"],
        &["cervical"],
    ],
    range: 4..=14,
};

static WORD_CEN_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_CEN_CHILDREN),
    value: None,
};

pub static WORD_CEN_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("cus"),
        dictgen::InsensitiveStr::Ascii("itpede"),
        dictgen::InsensitiveStr::Ascii("sorhsip"),
        dictgen::InsensitiveStr::Ascii("sur"),
        dictgen::InsensitiveStr::Ascii("surship"),
        dictgen::InsensitiveStr::Ascii("tentenial"),
        dictgen::InsensitiveStr::Ascii("tepide"),
        dictgen::InsensitiveStr::Ascii("teres"),
        dictgen::InsensitiveStr::Ascii("terns"),
        dictgen::InsensitiveStr::Ascii("tipeddle"),
        dictgen::InsensitiveStr::Ascii("tipedle"),
        dictgen::InsensitiveStr::Ascii("tipeed"),
        dictgen::InsensitiveStr::Ascii("trase"),
        dictgen::InsensitiveStr::Ascii("truies"),
        dictgen::InsensitiveStr::Ascii("truy"),
        dictgen::InsensitiveStr::Ascii("tuties"),
        dictgen::InsensitiveStr::Ascii("tuty"),
    ],
    values: &[
        &["census"],
        &["centipede"],
        &["censorship"],
        &["censor"],
        &["censorship"],
        &["centennial"],
        &["centipede"],
        &["centers"],
        &["centers"],
        &["centipede"],
        &["centipede"],
        &["centipede"],
        &["centres"],
        &["centuries"],
        &["century"],
        &["centuries"],
        &["century"],
    ],
    range: 3..=9,
};

static WORD_CEM_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_CEM_CHILDREN),
    value: None,
};

pub static WORD_CEM_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("entary"),
        dictgen::InsensitiveStr::Ascii("etarey"),
        dictgen::InsensitiveStr::Ascii("etaries"),
        dictgen::InsensitiveStr::Ascii("etary"),
    ],
    values: &[&["cemetery"], &["cemetery"], &["cemeteries"], &["cemetery"]],
    range: 5..=7,
};

static WORD_CEL_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_CEL_CHILDREN),
    value: None,
};

pub static WORD_CEL_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("cius"),
        dictgen::InsensitiveStr::Ascii("ebartion"),
        dictgen::InsensitiveStr::Ascii("ebirties"),
        dictgen::InsensitiveStr::Ascii("ebirty"),
        dictgen::InsensitiveStr::Ascii("ebracion"),
        dictgen::InsensitiveStr::Ascii("ebrasion"),
        dictgen::InsensitiveStr::Ascii("ebratin"),
        dictgen::InsensitiveStr::Ascii("ebratings"),
        dictgen::InsensitiveStr::Ascii("ebrationis"),
        dictgen::InsensitiveStr::Ascii("ebrationists"),
        dictgen::InsensitiveStr::Ascii("ebrato"),
        dictgen::InsensitiveStr::Ascii("ebratons"),
        dictgen::InsensitiveStr::Ascii("ebrite"),
        dictgen::InsensitiveStr::Ascii("ebrites"),
        dictgen::InsensitiveStr::Ascii("ebritites"),
        dictgen::InsensitiveStr::Ascii("ebritiy"),
        dictgen::InsensitiveStr::Ascii("esital"),
        dictgen::InsensitiveStr::Ascii("estail"),
        dictgen::InsensitiveStr::Ascii("ibrations"),
        dictgen::InsensitiveStr::Ascii("isus"),
        dictgen::InsensitiveStr::Ascii("itcs"),
        dictgen::InsensitiveStr::Ascii("lpading"),
        dictgen::InsensitiveStr::Ascii("lulaire"),
        dictgen::InsensitiveStr::Ascii("lural"),
        dictgen::InsensitiveStr::Ascii("suis"),
        dictgen::InsensitiveStr::Ascii("ullar"),
        dictgen::InsensitiveStr::Ascii("verly"),
    ],
    values: &[
        &["celsius"],
        &["celebrations"],
        &["celebrities"],
        &["celebrity"],
        &["celebration"],
        &["celebrations"],
        &["celebration"],
        &["celebrations"],
        &["celebrations"],
        &["celebrations"],
        &["celebration"],
        &["celebrations"],
        &["celebrities"],
        &["celebrities"],
        &["celebrities"],
        &["celebrity"],
        &["celestial"],
        &["celestial"],
        &["celebrations"],
        &["celsius"],
        &["celtics"],
        &["cellpadding"],
        &["cellular"],
        &["cellular"],
        &["celsius"],
        &["cellular"],
        &["cleverly"],
    ],
    range: 4..=12,
};

static WORD_CEA_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_CEA_CHILDREN),
    value: None,
};

pub static WORD_CEA_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("sar")],
    values: &[&["cesar"]],
    range: 3..=3,
};

static WORD_CA_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_CA_CHILDREN),
    value: None,
};

static WORD_CA_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    None,
    Some(&WORD_CAB_NODE),
    Some(&WORD_CAC_NODE),
    None,
    None,
    Some(&WORD_CAF_NODE),
    None,
    Some(&WORD_CAH_NODE),
    Some(&WORD_CAI_NODE),
    None,
    None,
    Some(&WORD_CAL_NODE),
    Some(&WORD_CAM_NODE),
    Some(&WORD_CAN_NODE),
    Some(&WORD_CAO_NODE),
    Some(&WORD_CAP_NODE),
    None,
    Some(&WORD_CAR_NODE),
    Some(&WORD_CAS_NODE),
    Some(&WORD_CAT_NODE),
    Some(&WORD_CAU_NODE),
    Some(&WORD_CAV_NODE),
    None,
    None,
    None,
    None,
];

static WORD_CAV_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_CAV_CHILDREN),
    value: None,
};

pub static WORD_CAV_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("arly"),
        dictgen::InsensitiveStr::Ascii("lary"),
    ],
    values: &[&["cavalry"], &["cavalry"]],
    range: 4..=4,
};

static WORD_CAU_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_CAU_CHILDREN),
    value: None,
};

pub static WORD_CAU_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("caisan"),
        dictgen::InsensitiveStr::Ascii("casain"),
        dictgen::InsensitiveStr::Ascii("casin"),
        dictgen::InsensitiveStr::Ascii("ilflower"),
        dictgen::InsensitiveStr::Ascii("lfilower"),
        dictgen::InsensitiveStr::Ascii("ncks"),
        dictgen::InsensitiveStr::Ascii("sacian"),
        dictgen::InsensitiveStr::Ascii("sailty"),
        dictgen::InsensitiveStr::Ascii("salties"),
        dictgen::InsensitiveStr::Ascii("salty"),
        dictgen::InsensitiveStr::Ascii("tionsly"),
    ],
    values: &[
        &["caucasian"],
        &["caucasian"],
        &["caucasian"],
        &["cauliflower"],
        &["cauliflower"],
        &["canucks"],
        &["caucasian"],
        &["causality"],
        &["casualties"],
        &["casualty"],
        &["cautiously"],
    ],
    range: 4..=8,
};

static WORD_CAT_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_CAT_CHILDREN),
    value: None,
};

static WORD_CAT_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    Some(&WORD_CATA_NODE),
    None,
    None,
    None,
    Some(&WORD_CATE_NODE),
    None,
    None,
    Some(&WORD_CATH_NODE),
    Some(&WORD_CATI_NODE),
    None,
    None,
    Some(&WORD_CATL_NODE),
    None,
    None,
    Some(&WORD_CATO_NODE),
    None,
    None,
    None,
    None,
    Some(&WORD_CATT_NODE),
    None,
    None,
    None,
    None,
    None,
    None,
];

static WORD_CATT_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_CATT_CHILDREN),
    value: None,
};

pub static WORD_CATT_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("erpilar"),
        dictgen::InsensitiveStr::Ascii("erpilars"),
        dictgen::InsensitiveStr::Ascii("erpillar"),
        dictgen::InsensitiveStr::Ascii("erpillars"),
        dictgen::InsensitiveStr::Ascii("leship"),
    ],
    values: &[
        &["caterpillar"],
        &["caterpillars"],
        &["caterpillar"],
        &["caterpillars"],
        &["battleship"],
    ],
    range: 6..=9,
};

static WORD_CATO_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_CATO_CHILDREN),
    value: None,
};

pub static WORD_CATO_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("gerized"),
        dictgen::InsensitiveStr::Ascii("straphic"),
        dictgen::InsensitiveStr::Ascii("strophic"),
    ],
    values: &[&["categorized"], &["catastrophic"], &["catastrophic"]],
    range: 7..=8,
};

static WORD_CATL_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_CATL_CHILDREN),
    value: None,
};

pub static WORD_CATL_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("ayst")],
    values: &[&["catalyst"]],
    range: 4..=4,
};

static WORD_CATI_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_CATI_CHILDREN),
    value: None,
};

pub static WORD_CATI_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("gorically"),
        dictgen::InsensitiveStr::Ascii("strophic"),
        dictgen::InsensitiveStr::Ascii("vating"),
    ],
    values: &[&["categorically"], &["catastrophic"], &["activating"]],
    range: 6..=9,
};

static WORD_CATH_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_CATH_CHILDREN),
    value: None,
};

pub static WORD_CATH_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("deral"),
        dictgen::InsensitiveStr::Ascii("erdal"),
        dictgen::InsensitiveStr::Ascii("lic"),
        dictgen::InsensitiveStr::Ascii("loic"),
        dictgen::InsensitiveStr::Ascii("loics"),
        dictgen::InsensitiveStr::Ascii("olacism"),
        dictgen::InsensitiveStr::Ascii("olicisim"),
        dictgen::InsensitiveStr::Ascii("olicsim"),
        dictgen::InsensitiveStr::Ascii("olicsm"),
        dictgen::InsensitiveStr::Ascii("olicus"),
        dictgen::InsensitiveStr::Ascii("olisicm"),
        dictgen::InsensitiveStr::Ascii("olisim"),
        dictgen::InsensitiveStr::Ascii("olisism"),
        dictgen::InsensitiveStr::Ascii("olizism"),
        dictgen::InsensitiveStr::Ascii("olocisim"),
        dictgen::InsensitiveStr::Ascii("olocism"),
        dictgen::InsensitiveStr::Ascii("redal"),
    ],
    values: &[
        &["cathedral"],
        &["cathedral"],
        &["catholic"],
        &["catholic"],
        &["catholics"],
        &["catholicism"],
        &["catholicism"],
        &["catholicism"],
        &["catholicism"],
        &["catholics"],
        &["catholicism"],
        &["catholicism"],
        &["catholicism"],
        &["catholicism"],
        &["catholicism"],
        &["catholicism"],
        &["cathedral"],
    ],
    range: 3..=8,
};

static WORD_CATE_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_CATE_CHILDREN),
    value: None,
};

pub static WORD_CATE_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("goricaly"),
        dictgen::InsensitiveStr::Ascii("gorice"),
        dictgen::InsensitiveStr::Ascii("goried"),
        dictgen::InsensitiveStr::Ascii("goriei"),
        dictgen::InsensitiveStr::Ascii("goriezed"),
        dictgen::InsensitiveStr::Ascii("groized"),
        dictgen::InsensitiveStr::Ascii("ogrize"),
        dictgen::InsensitiveStr::Ascii("pillar"),
        dictgen::InsensitiveStr::Ascii("pillars"),
        dictgen::InsensitiveStr::Ascii("rgorize"),
        dictgen::InsensitiveStr::Ascii("rgorized"),
        dictgen::InsensitiveStr::Ascii("rogized"),
        dictgen::InsensitiveStr::Ascii("rpilar"),
        dictgen::InsensitiveStr::Ascii("rpilars"),
        dictgen::InsensitiveStr::Ascii("rpiller"),
        dictgen::InsensitiveStr::Ascii("rpillers"),
        dictgen::InsensitiveStr::Ascii("strophic"),
    ],
    values: &[
        &["categorically"],
        &["categorize"],
        &["categorized"],
        &["categorize"],
        &["categorized"],
        &["categorized"],
        &["categorized"],
        &["caterpillar"],
        &["caterpillars"],
        &["categorize"],
        &["categorized"],
        &["categorized"],
        &["caterpillar"],
        &["caterpillars"],
        &["caterpillar"],
        &["caterpillars"],
        &["catastrophic"],
    ],
    range: 6..=8,
};

static WORD_CATA_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_CATA_CHILDREN),
    value: None,
};

pub static WORD_CATA_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("clsym"),
        dictgen::InsensitiveStr::Ascii("clym"),
        dictgen::InsensitiveStr::Ascii("clyms"),
        dictgen::InsensitiveStr::Ascii("clysim"),
        dictgen::InsensitiveStr::Ascii("clysym"),
        dictgen::InsensitiveStr::Ascii("cylsm"),
        dictgen::InsensitiveStr::Ascii("cyslm"),
        dictgen::InsensitiveStr::Ascii("gorically"),
        dictgen::InsensitiveStr::Ascii("gories"),
        dictgen::InsensitiveStr::Ascii("gorized"),
        dictgen::InsensitiveStr::Ascii("gory"),
        dictgen::InsensitiveStr::Ascii("lcysm"),
        dictgen::InsensitiveStr::Ascii("lgoue"),
        dictgen::InsensitiveStr::Ascii("line"),
        dictgen::InsensitiveStr::Ascii("loge"),
        dictgen::InsensitiveStr::Ascii("lsyt"),
        dictgen::InsensitiveStr::Ascii("pillar"),
        dictgen::InsensitiveStr::Ascii("pillars"),
        dictgen::InsensitiveStr::Ascii("piller"),
        dictgen::InsensitiveStr::Ascii("pillers"),
        dictgen::InsensitiveStr::Ascii("sthrope"),
        dictgen::InsensitiveStr::Ascii("straphe"),
        dictgen::InsensitiveStr::Ascii("straphic"),
        dictgen::InsensitiveStr::Ascii("strohpe"),
        dictgen::InsensitiveStr::Ascii("strohpic"),
        dictgen::InsensitiveStr::Ascii("strope"),
        dictgen::InsensitiveStr::Ascii("strophie"),
        dictgen::InsensitiveStr::Ascii("strophies"),
        dictgen::InsensitiveStr::Ascii("strophize"),
        dictgen::InsensitiveStr::Ascii("stropic"),
        dictgen::InsensitiveStr::Ascii("strphe"),
        dictgen::InsensitiveStr::Ascii("ylst"),
    ],
    values: &[
        &["cataclysm"],
        &["cataclysm"],
        &["cataclysm"],
        &["cataclysm"],
        &["cataclysm"],
        &["cataclysm"],
        &["cataclysm"],
        &["categorically"],
        &["categories"],
        &["categorized"],
        &["category"],
        &["cataclysm"],
        &["catalogue"],
        &["catiline"],
        &["catalogue"],
        &["catalyst"],
        &["caterpillar"],
        &["caterpillars"],
        &["caterpillar"],
        &["caterpillars"],
        &["catastrophe"],
        &["catastrophe"],
        &["catastrophic"],
        &["catastrophe"],
        &["catastrophic"],
        &["catastrophe"],
        &["catastrophe"],
        &["catastrophe"],
        &["catastrophe"],
        &["catastrophic"],
        &["catastrophe"],
        &["catalyst"],
    ],
    range: 4..=9,
};

static WORD_CAS_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_CAS_CHILDREN),
    value: None,
};

pub static WORD_CAS_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("aulity"),
        dictgen::InsensitiveStr::Ascii("aulties"),
        dictgen::InsensitiveStr::Ascii("aulty"),
        dictgen::InsensitiveStr::Ascii("ette"),
        dictgen::InsensitiveStr::Ascii("heir"),
        dictgen::InsensitiveStr::Ascii("heirs"),
        dictgen::InsensitiveStr::Ascii("hieer"),
        dictgen::InsensitiveStr::Ascii("hieres"),
        dictgen::InsensitiveStr::Ascii("hies"),
        dictgen::InsensitiveStr::Ascii("hire"),
        dictgen::InsensitiveStr::Ascii("hires"),
        dictgen::InsensitiveStr::Ascii("ion"),
        dictgen::InsensitiveStr::Ascii("ltes"),
        dictgen::InsensitiveStr::Ascii("pule"),
        dictgen::InsensitiveStr::Ascii("sawory"),
        dictgen::InsensitiveStr::Ascii("sete"),
        dictgen::InsensitiveStr::Ascii("settte"),
        dictgen::InsensitiveStr::Ascii("sowarry"),
        dictgen::InsensitiveStr::Ascii("tatrophe"),
        dictgen::InsensitiveStr::Ascii("tels"),
        dictgen::InsensitiveStr::Ascii("tleos"),
        dictgen::InsensitiveStr::Ascii("tlers"),
        dictgen::InsensitiveStr::Ascii("ualites"),
        dictgen::InsensitiveStr::Ascii("ualries"),
        dictgen::InsensitiveStr::Ascii("uation"),
        dictgen::InsensitiveStr::Ascii("ue"),
        dictgen::InsensitiveStr::Ascii("ued"),
        dictgen::InsensitiveStr::Ascii("ues"),
        dictgen::InsensitiveStr::Ascii("uing"),
        dictgen::InsensitiveStr::Ascii("ulaties"),
        dictgen::InsensitiveStr::Ascii("ulaty"),
    ],
    values: &[
        &["causality"],
        &["casualties"],
        &["casualty"],
        &["cassette"],
        &["cashier"],
        &["cashiers"],
        &["cashier"],
        &["cashiers"],
        &["cashiers"],
        &["cashier"],
        &["cashiers"],
        &["caisson"],
        &["castles"],
        &["capsule"],
        &["cassowary"],
        &["cassette"],
        &["cassette"],
        &["cassowary"],
        &["catastrophe"],
        &["castles"],
        &["castles"],
        &["castles"],
        &["casualties"],
        &["casualties"],
        &["causation"],
        &["cause"],
        &["caused"],
        &["causes"],
        &["causing"],
        &["casualties"],
        &["casualty"],
    ],
    range: 2..=8,
};

static WORD_CAR_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_CAR_CHILDREN),
    value: None,
};

static WORD_CAR_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    Some(&WORD_CARA_NODE),
    Some(&WORD_CARB_NODE),
    Some(&WORD_CARC_NODE),
    Some(&WORD_CARD_NODE),
    Some(&WORD_CARE_NODE),
    None,
    None,
    None,
    Some(&WORD_CARI_NODE),
    None,
    None,
    Some(&WORD_CARL_NODE),
    Some(&WORD_CARM_NODE),
    Some(&WORD_CARN_NODE),
    Some(&WORD_CARO_NODE),
    Some(&WORD_CARP_NODE),
    None,
    Some(&WORD_CARR_NODE),
    None,
    Some(&WORD_CART_NODE),
    None,
    Some(&WORD_CARV_NODE),
    None,
    None,
    Some(&WORD_CARY_NODE),
    None,
];

static WORD_CARY_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_CARY_CHILDREN),
    value: None,
};

pub static WORD_CARY_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("ons")],
    values: &[&["crayons"]],
    range: 3..=3,
};

static WORD_CARV_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_CARV_CHILDREN),
    value: None,
};

pub static WORD_CARV_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("inal")],
    values: &[&["carnival"]],
    range: 4..=4,
};

static WORD_CART_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_CART_CHILDREN),
    value: None,
};

pub static WORD_CART_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("dridge"),
        dictgen::InsensitiveStr::Ascii("drige"),
        dictgen::InsensitiveStr::Ascii("driges"),
        dictgen::InsensitiveStr::Ascii("ells"),
        dictgen::InsensitiveStr::Ascii("hagian"),
        dictgen::InsensitiveStr::Ascii("hographer"),
        dictgen::InsensitiveStr::Ascii("ilege"),
        dictgen::InsensitiveStr::Ascii("ilidge"),
        dictgen::InsensitiveStr::Ascii("irdge"),
        dictgen::InsensitiveStr::Ascii("irdges"),
        dictgen::InsensitiveStr::Ascii("les"),
        dictgen::InsensitiveStr::Ascii("maan"),
        dictgen::InsensitiveStr::Ascii("rdige"),
        dictgen::InsensitiveStr::Ascii("rdiges"),
        dictgen::InsensitiveStr::Ascii("riages"),
        dictgen::InsensitiveStr::Ascii("ride"),
        dictgen::InsensitiveStr::Ascii("rigde"),
        dictgen::InsensitiveStr::Ascii("rigdes"),
        dictgen::InsensitiveStr::Ascii("rige"),
    ],
    values: &[
        &["cartridge"],
        &["cartridge"],
        &["cartridges"],
        &["cartels"],
        &["carthaginian"],
        &["cartographer"],
        &["cartilage"],
        &["cartilage"],
        &["cartridge"],
        &["cartridges"],
        &["cartels"],
        &["cartman"],
        &["cartridge"],
        &["cartridges"],
        &["cartridges"],
        &["cartridge"],
        &["cartridge"],
        &["cartridges"],
        &["cartridge"],
    ],
    range: 3..=9,
};

static WORD_CARR_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_CARR_CHILDREN),
    value: None,
};

pub static WORD_CARR_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("eer"),
        dictgen::InsensitiveStr::Ascii("ers"),
        dictgen::InsensitiveStr::Ascii("ibbean"),
        dictgen::InsensitiveStr::Ascii("ibean"),
        dictgen::InsensitiveStr::Ascii("otts"),
        dictgen::InsensitiveStr::Ascii("otus"),
    ],
    values: &[
        &["career"],
        &["careers"],
        &["caribbean"],
        &["caribbean"],
        &["carrots"],
        &["carrots"],
    ],
    range: 3..=6,
};

static WORD_CARP_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_CARP_CHILDREN),
    value: None,
};

pub static WORD_CARP_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("etner"),
        dictgen::InsensitiveStr::Ascii("tener"),
    ],
    values: &[&["carpenter"], &["carpenter"]],
    range: 5..=5,
};

static WORD_CARO_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_CARO_CHILDREN),
    value: None,
};

pub static WORD_CARO_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("lan"),
        dictgen::InsensitiveStr::Ascii("linia"),
    ],
    values: &[&["carolina"], &["carolina"]],
    range: 3..=5,
};

static WORD_CARN_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_CARN_CHILDREN),
    value: None,
};

pub static WORD_CARN_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("agie"),
        dictgen::InsensitiveStr::Ascii("berry"),
        dictgen::InsensitiveStr::Ascii("ege"),
        dictgen::InsensitiveStr::Ascii("ige"),
        dictgen::InsensitiveStr::Ascii("igie"),
        dictgen::InsensitiveStr::Ascii("iverous"),
        dictgen::InsensitiveStr::Ascii("vial"),
    ],
    values: &[
        &["carnegie"],
        &["cranberry"],
        &["carnage"],
        &["carnage"],
        &["carnegie"],
        &["carnivorous"],
        &["carnival"],
    ],
    range: 3..=7,
};

static WORD_CARM_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_CARM_CHILDREN),
    value: None,
};

pub static WORD_CARM_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("alite"),
        dictgen::InsensitiveStr::Ascii("tan"),
    ],
    values: &[&["carmelite"], &["cartman"]],
    range: 3..=5,
};

static WORD_CARL_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_CARL_CHILDREN),
    value: None,
};

pub static WORD_CARL_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("oina")],
    values: &[&["carolina"]],
    range: 4..=4,
};

static WORD_CARI_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_CARI_CHILDREN),
    value: None,
};

pub static WORD_CARI_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("acture"),
        dictgen::InsensitiveStr::Ascii("actures"),
        dictgen::InsensitiveStr::Ascii("cate"),
        dictgen::InsensitiveStr::Ascii("catore"),
        dictgen::InsensitiveStr::Ascii("caturale"),
        dictgen::InsensitiveStr::Ascii("caturile"),
        dictgen::InsensitiveStr::Ascii("caturise"),
        dictgen::InsensitiveStr::Ascii("caturize"),
        dictgen::InsensitiveStr::Ascii("citure"),
        dictgen::InsensitiveStr::Ascii("cuture"),
        dictgen::InsensitiveStr::Ascii("dac"),
        dictgen::InsensitiveStr::Ascii("dgan"),
        dictgen::InsensitiveStr::Ascii("dnal"),
        dictgen::InsensitiveStr::Ascii("dnals"),
        dictgen::InsensitiveStr::Ascii("dovascular"),
        dictgen::InsensitiveStr::Ascii("nval"),
        dictgen::InsensitiveStr::Ascii("smatic"),
    ],
    values: &[
        &["caricature"],
        &["caricature"],
        &["caricature"],
        &["caricature"],
        &["caricature"],
        &["caricature"],
        &["caricature"],
        &["caricature"],
        &["caricature"],
        &["caricature"],
        &["cardiac"],
        &["cardigan"],
        &["cardinal"],
        &["cardinals"],
        &["cardiovascular"],
        &["carnival"],
        &["charismatic"],
    ],
    range: 3..=10,
};

static WORD_CARE_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_CARE_CHILDREN),
    value: None,
};

pub static WORD_CARE_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("flly"),
        dictgen::InsensitiveStr::Ascii("full"),
        dictgen::InsensitiveStr::Ascii("fullly"),
        dictgen::InsensitiveStr::Ascii("fuly"),
        dictgen::InsensitiveStr::Ascii("ing"),
    ],
    values: &[
        &["carefully"],
        &["careful"],
        &["carefully"],
        &["carefully"],
        &["caring"],
    ],
    range: 3..=6,
};

static WORD_CARD_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_CARD_CHILDREN),
    value: None,
};

pub static WORD_CARD_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("aic"),
        dictgen::InsensitiveStr::Ascii("baord"),
        dictgen::InsensitiveStr::Ascii("boad"),
        dictgen::InsensitiveStr::Ascii("borad"),
        dictgen::InsensitiveStr::Ascii("ianl"),
        dictgen::InsensitiveStr::Ascii("ianls"),
        dictgen::InsensitiveStr::Ascii("ina"),
        dictgen::InsensitiveStr::Ascii("inales"),
        dictgen::InsensitiveStr::Ascii("inalis"),
        dictgen::InsensitiveStr::Ascii("iocascular"),
        dictgen::InsensitiveStr::Ascii("iovascualar"),
        dictgen::InsensitiveStr::Ascii("iovascualr"),
        dictgen::InsensitiveStr::Ascii("iovasculaire"),
        dictgen::InsensitiveStr::Ascii("iovasculaires"),
        dictgen::InsensitiveStr::Ascii("iovasuclar"),
        dictgen::InsensitiveStr::Ascii("nial"),
        dictgen::InsensitiveStr::Ascii("nials"),
    ],
    values: &[
        &["cardiac"],
        &["cardboard"],
        &["cardboard"],
        &["cardboard"],
        &["cardinal"],
        &["cardinals"],
        &["cardigan"],
        &["cardinals"],
        &["cardinals"],
        &["cardiovascular"],
        &["cardiovascular"],
        &["cardiovascular"],
        &["cardiovascular"],
        &["cardiovascular"],
        &["cardiovascular"],
        &["cardinal"],
        &["cardinals"],
    ],
    range: 3..=13,
};

static WORD_CARC_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_CARC_CHILDREN),
    value: None,
};

pub static WORD_CARC_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("as"),
        dictgen::InsensitiveStr::Ascii("iature"),
    ],
    values: &[&["carcass"], &["caricature"]],
    range: 2..=6,
};

static WORD_CARB_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_CARB_CHILDREN),
    value: None,
};

pub static WORD_CARB_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ien"),
        dictgen::InsensitiveStr::Ascii("ohdyrates"),
        dictgen::InsensitiveStr::Ascii("ohidrates"),
        dictgen::InsensitiveStr::Ascii("ohydrats"),
        dictgen::InsensitiveStr::Ascii("ohyrdate"),
        dictgen::InsensitiveStr::Ascii("ohyrdates"),
        dictgen::InsensitiveStr::Ascii("oyhdrates"),
    ],
    values: &[
        &["carbine"],
        &["carbohydrates"],
        &["carbohydrates"],
        &["carbohydrates"],
        &["carbohydrates"],
        &["carbohydrates"],
        &["carbohydrates"],
    ],
    range: 3..=9,
};

static WORD_CARA_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_CARA_CHILDREN),
    value: None,
};

pub static WORD_CARA_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("chter"),
        dictgen::InsensitiveStr::Ascii("citure"),
        dictgen::InsensitiveStr::Ascii("cterized"),
        dictgen::InsensitiveStr::Ascii("nge"),
    ],
    values: &[
        &["character"],
        &["caricature"],
        &["characterized"],
        &["carnage"],
    ],
    range: 3..=8,
};

static WORD_CAP_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_CAP_CHILDREN),
    value: None,
};

static WORD_CAP_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    Some(&WORD_CAPA_NODE),
    None,
    None,
    None,
    Some(&WORD_CAPE_NODE),
    None,
    None,
    None,
    Some(&WORD_CAPI_NODE),
    None,
    None,
    None,
    Some(&WORD_CAPM_NODE),
    None,
    None,
    None,
    None,
    Some(&WORD_CAPR_NODE),
    Some(&WORD_CAPS_NODE),
    Some(&WORD_CAPT_NODE),
    Some(&WORD_CAPU_NODE),
    None,
    None,
    None,
    None,
    None,
];

static WORD_CAPU_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_CAPU_CHILDREN),
    value: None,
};

pub static WORD_CAPU_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("sle"),
        dictgen::InsensitiveStr::Ascii("sles"),
        dictgen::InsensitiveStr::Ascii("tres"),
    ],
    values: &[&["capsule"], &["capsules"], &["captures"]],
    range: 3..=4,
};

static WORD_CAPT_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_CAPT_CHILDREN),
    value: None,
};

pub static WORD_CAPT_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ainers"),
        dictgen::InsensitiveStr::Ascii("ais"),
        dictgen::InsensitiveStr::Ascii("eurs"),
        dictgen::InsensitiveStr::Ascii("ial"),
        dictgen::InsensitiveStr::Ascii("ialism"),
        dictgen::InsensitiveStr::Ascii("ialist"),
        dictgen::InsensitiveStr::Ascii("ialists"),
        dictgen::InsensitiveStr::Ascii("ialization"),
        dictgen::InsensitiveStr::Ascii("ialize"),
        dictgen::InsensitiveStr::Ascii("ialized"),
        dictgen::InsensitiveStr::Ascii("ials"),
        dictgen::InsensitiveStr::Ascii("ians"),
        dictgen::InsensitiveStr::Ascii("iol"),
        dictgen::InsensitiveStr::Ascii("ivitiy"),
        dictgen::InsensitiveStr::Ascii("ued"),
        dictgen::InsensitiveStr::Ascii("urd"),
    ],
    values: &[
        &["captains"],
        &["captains"],
        &["captures"],
        &["capital"],
        &["capitalism"],
        &["capitalist"],
        &["capitalists"],
        &["capitalization"],
        &["capitalize"],
        &["capitalized"],
        &["capitals"],
        &["captains"],
        &["capitol"],
        &["captivity"],
        &["captured"],
        &["captured"],
    ],
    range: 3..=10,
};

static WORD_CAPS_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_CAPS_CHILDREN),
    value: None,
};

pub static WORD_CAPS_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("uels"),
        dictgen::InsensitiveStr::Ascii("ulers"),
        dictgen::InsensitiveStr::Ascii("ulets"),
        dictgen::InsensitiveStr::Ascii("uls"),
        dictgen::InsensitiveStr::Ascii("ulse"),
        dictgen::InsensitiveStr::Ascii("umel"),
    ],
    values: &[
        &["capsules"],
        &["capsules"],
        &["capsules"],
        &["capsules"],
        &["capsules"],
        &["capsule"],
    ],
    range: 3..=5,
};

static WORD_CAPR_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_CAPR_CHILDREN),
    value: None,
};

pub static WORD_CAPR_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("enter")],
    values: &[&["carpenter"]],
    range: 5..=5,
};

static WORD_CAPM_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_CAPM_CHILDREN),
    value: None,
};

pub static WORD_CAPM_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("bell")],
    values: &[&["campbell"]],
    range: 4..=4,
};

static WORD_CAPI_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_CAPI_CHILDREN),
    value: None,
};

pub static WORD_CAPI_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("alized"),
        dictgen::InsensitiveStr::Ascii("ble"),
        dictgen::InsensitiveStr::Ascii("cator"),
        dictgen::InsensitiveStr::Ascii("cators"),
        dictgen::InsensitiveStr::Ascii("talis"),
        dictgen::InsensitiveStr::Ascii("talisim"),
        dictgen::InsensitiveStr::Ascii("talisn"),
        dictgen::InsensitiveStr::Ascii("talistes"),
        dictgen::InsensitiveStr::Ascii("talits"),
        dictgen::InsensitiveStr::Ascii("talizacion"),
        dictgen::InsensitiveStr::Ascii("talizaiton"),
        dictgen::InsensitiveStr::Ascii("talizating"),
        dictgen::InsensitiveStr::Ascii("talizaton"),
        dictgen::InsensitiveStr::Ascii("talsim"),
        dictgen::InsensitiveStr::Ascii("talsit"),
        dictgen::InsensitiveStr::Ascii("tans"),
        dictgen::InsensitiveStr::Ascii("tarist"),
        dictgen::InsensitiveStr::Ascii("tas"),
        dictgen::InsensitiveStr::Ascii("tilazation"),
        dictgen::InsensitiveStr::Ascii("tilism"),
        dictgen::InsensitiveStr::Ascii("tilist"),
        dictgen::InsensitiveStr::Ascii("tilists"),
        dictgen::InsensitiveStr::Ascii("tilize"),
        dictgen::InsensitiveStr::Ascii("tilized"),
        dictgen::InsensitiveStr::Ascii("tlaism"),
        dictgen::InsensitiveStr::Ascii("tlaist"),
        dictgen::InsensitiveStr::Ascii("tlaize"),
        dictgen::InsensitiveStr::Ascii("tola"),
        dictgen::InsensitiveStr::Ascii("tolism"),
        dictgen::InsensitiveStr::Ascii("tolist"),
        dictgen::InsensitiveStr::Ascii("tolists"),
        dictgen::InsensitiveStr::Ascii("tolization"),
        dictgen::InsensitiveStr::Ascii("tolize"),
        dictgen::InsensitiveStr::Ascii("tolized"),
        dictgen::InsensitiveStr::Ascii("tulo"),
    ],
    values: &[
        &["capitalized"],
        &["capable"],
        &["capacitor"],
        &["capacitors"],
        &["capitals"],
        &["capitalism"],
        &["capitals"],
        &["capitalists"],
        &["capitalists"],
        &["capitalization"],
        &["capitalization"],
        &["capitalization"],
        &["capitalization"],
        &["capitalism"],
        &["capitalists"],
        &["captains"],
        &["capitalist"],
        &["capitals"],
        &["capitalization"],
        &["capitalism"],
        &["capitalist"],
        &["capitalists"],
        &["capitalize"],
        &["capitalized"],
        &["capitalism"],
        &["capitalist"],
        &["capitalized"],
        &["capital"],
        &["capitalism"],
        &["capitalist"],
        &["capitalists"],
        &["capitalization"],
        &["capitalize"],
        &["capitalized"],
        &["capitol"],
    ],
    range: 3..=10,
};

static WORD_CAPE_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_CAPE_CHILDREN),
    value: None,
};

pub static WORD_CAPE_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("rbility")],
    values: &[&["capability"]],
    range: 7..=7,
};

static WORD_CAPA_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_CAPA_CHILDREN),
    value: None,
};

pub static WORD_CAPA_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("bality"),
        dictgen::InsensitiveStr::Ascii("bilites"),
        dictgen::InsensitiveStr::Ascii("bilitiy"),
        dictgen::InsensitiveStr::Ascii("billity"),
        dictgen::InsensitiveStr::Ascii("biltiy"),
        dictgen::InsensitiveStr::Ascii("cators"),
        dictgen::InsensitiveStr::Ascii("citaron"),
        dictgen::InsensitiveStr::Ascii("citers"),
        dictgen::InsensitiveStr::Ascii("citores"),
        dictgen::InsensitiveStr::Ascii("ctior"),
        dictgen::InsensitiveStr::Ascii("ctiors"),
        dictgen::InsensitiveStr::Ascii("sitors"),
        dictgen::InsensitiveStr::Ascii("tilism"),
        dictgen::InsensitiveStr::Ascii("tilist"),
        dictgen::InsensitiveStr::Ascii("tilists"),
        dictgen::InsensitiveStr::Ascii("tilization"),
        dictgen::InsensitiveStr::Ascii("tilize"),
        dictgen::InsensitiveStr::Ascii("tilized"),
    ],
    values: &[
        &["capability"],
        &["capabilities"],
        &["capability"],
        &["capability"],
        &["capability"],
        &["capacitors"],
        &["capacitor"],
        &["capacitors"],
        &["capacitors"],
        &["capacitor"],
        &["capacitors"],
        &["capacitors"],
        &["capitalism"],
        &["capitalist"],
        &["capitalists"],
        &["capitalization"],
        &["capitalize"],
        &["capitalized"],
    ],
    range: 5..=10,
};

static WORD_CAO_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_CAO_CHILDREN),
    value: None,
};

pub static WORD_CAO_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("st")],
    values: &[&["coast"]],
    range: 2..=2,
};

static WORD_CAN_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_CAN_CHILDREN),
    value: None,
};

pub static WORD_CAN_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("adains"),
        dictgen::InsensitiveStr::Ascii("adianese"),
        dictgen::InsensitiveStr::Ascii("adias"),
        dictgen::InsensitiveStr::Ascii("anbis"),
        dictgen::InsensitiveStr::Ascii("celas"),
        dictgen::InsensitiveStr::Ascii("celes"),
        dictgen::InsensitiveStr::Ascii("cellato"),
        dictgen::InsensitiveStr::Ascii("cells"),
        dictgen::InsensitiveStr::Ascii("celtation"),
        dictgen::InsensitiveStr::Ascii("ceres"),
        dictgen::InsensitiveStr::Ascii("cerns"),
        dictgen::InsensitiveStr::Ascii("cerus"),
        dictgen::InsensitiveStr::Ascii("cles"),
        dictgen::InsensitiveStr::Ascii("cres"),
        dictgen::InsensitiveStr::Ascii("cuks"),
        dictgen::InsensitiveStr::Ascii("dadate"),
        dictgen::InsensitiveStr::Ascii("diate"),
        dictgen::InsensitiveStr::Ascii("didatas"),
        dictgen::InsensitiveStr::Ascii("didats"),
        dictgen::InsensitiveStr::Ascii("didatxs"),
        dictgen::InsensitiveStr::Ascii("didiate"),
        dictgen::InsensitiveStr::Ascii("diens"),
        dictgen::InsensitiveStr::Ascii("ditates"),
        dictgen::InsensitiveStr::Ascii("ides"),
        dictgen::InsensitiveStr::Ascii("istre"),
        dictgen::InsensitiveStr::Ascii("nabil"),
        dictgen::InsensitiveStr::Ascii("nabilism"),
        dictgen::InsensitiveStr::Ascii("nabolism"),
        dictgen::InsensitiveStr::Ascii("nbial"),
        dictgen::InsensitiveStr::Ascii("niablism"),
        dictgen::InsensitiveStr::Ascii("nibalisim"),
        dictgen::InsensitiveStr::Ascii("nibalizm"),
        dictgen::InsensitiveStr::Ascii("nibaljim"),
        dictgen::InsensitiveStr::Ascii("niballism"),
        dictgen::InsensitiveStr::Ascii("nibalsim"),
        dictgen::InsensitiveStr::Ascii("nibalsm"),
        dictgen::InsensitiveStr::Ascii("nibas"),
        dictgen::InsensitiveStr::Ascii("nibilism"),
        dictgen::InsensitiveStr::Ascii("nister"),
        dictgen::InsensitiveStr::Ascii("nisters"),
        dictgen::InsensitiveStr::Ascii("nnot"),
        dictgen::InsensitiveStr::Ascii("nobalism"),
        dictgen::InsensitiveStr::Ascii("noical"),
        dictgen::InsensitiveStr::Ascii("nonical"),
        dictgen::InsensitiveStr::Ascii("notation"),
        dictgen::InsensitiveStr::Ascii("notations"),
        dictgen::InsensitiveStr::Ascii("oncial"),
        dictgen::InsensitiveStr::Ascii("rage"),
        dictgen::InsensitiveStr::Ascii("siter"),
    ],
    values: &[
        &["canadians"],
        &["canadians"],
        &["canadians"],
        &["cannabis"],
        &["cancels"],
        &["cancels"],
        &["cancellation"],
        &["cancels"],
        &["cancellation"],
        &["cancers"],
        &["cancers"],
        &["cancers"],
        &["cancels"],
        &["cancers"],
        &["canucks"],
        &["candidate"],
        &["candidate"],
        &["candidates"],
        &["candidates"],
        &["candidates"],
        &["candidate"],
        &["candies"],
        &["candidates"],
        &["candies"],
        &["canister"],
        &["cannibal"],
        &["cannibalism"],
        &["cannibalism"],
        &["cannibal"],
        &["cannibalism"],
        &["cannibalism"],
        &["cannibalism"],
        &["cannibalism"],
        &["cannibalism"],
        &["cannibalism"],
        &["cannibalism"],
        &["cannabis"],
        &["cannibalism"],
        &["canister"],
        &["canisters"],
        &["cannot"],
        &["cannibalism"],
        &["canonical"],
        &["canonical"],
        &["connotation"],
        &["connotations"],
        &["canonical"],
        &["carnage"],
        &["canister"],
    ],
    range: 4..=9,
};

static WORD_CAM_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_CAM_CHILDREN),
    value: None,
};

pub static WORD_CAM_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("apign"),
        dictgen::InsensitiveStr::Ascii("birdge"),
        dictgen::InsensitiveStr::Ascii("boda"),
        dictgen::InsensitiveStr::Ascii("bodai"),
        dictgen::InsensitiveStr::Ascii("bodican"),
        dictgen::InsensitiveStr::Ascii("boida"),
        dictgen::InsensitiveStr::Ascii("bpell"),
        dictgen::InsensitiveStr::Ascii("brdige"),
        dictgen::InsensitiveStr::Ascii("bride"),
        dictgen::InsensitiveStr::Ascii("brigde"),
        dictgen::InsensitiveStr::Ascii("brige"),
        dictgen::InsensitiveStr::Ascii("oflage"),
        dictgen::InsensitiveStr::Ascii("ofluage"),
        dictgen::InsensitiveStr::Ascii("oufalge"),
        dictgen::InsensitiveStr::Ascii("ouflague"),
        dictgen::InsensitiveStr::Ascii("ouflagued"),
        dictgen::InsensitiveStr::Ascii("ouflauge"),
        dictgen::InsensitiveStr::Ascii("oufle"),
        dictgen::InsensitiveStr::Ascii("ouglage"),
        dictgen::InsensitiveStr::Ascii("pagin"),
        dictgen::InsensitiveStr::Ascii("pagining"),
        dictgen::InsensitiveStr::Ascii("pagins"),
        dictgen::InsensitiveStr::Ascii("paiging"),
        dictgen::InsensitiveStr::Ascii("paignes"),
        dictgen::InsensitiveStr::Ascii("pain"),
        dictgen::InsensitiveStr::Ascii("paing"),
        dictgen::InsensitiveStr::Ascii("painging"),
        dictgen::InsensitiveStr::Ascii("paings"),
        dictgen::InsensitiveStr::Ascii("pains"),
        dictgen::InsensitiveStr::Ascii("peras"),
        dictgen::InsensitiveStr::Ascii("peros"),
        dictgen::InsensitiveStr::Ascii("piagns"),
        dictgen::InsensitiveStr::Ascii("pusers"),
        dictgen::InsensitiveStr::Ascii("puss"),
        dictgen::InsensitiveStr::Ascii("rbidge"),
    ],
    values: &[
        &["campaign"],
        &["cambridge"],
        &["cambodia"],
        &["cambodia"],
        &["cambodia"],
        &["cambodia"],
        &["campbell"],
        &["cambridge"],
        &["cambridge"],
        &["cambridge"],
        &["cambridge"],
        &["camouflage"],
        &["camouflage"],
        &["camouflage"],
        &["camouflage"],
        &["camouflage"],
        &["camouflage"],
        &["camouflage"],
        &["camouflage"],
        &["campaign"],
        &["campaigning"],
        &["campaigns"],
        &["campaigning"],
        &["campaigns"],
        &["campaign"],
        &["campaign"],
        &["campaigning"],
        &["campaigns"],
        &["campaigns"],
        &["campers"],
        &["campers"],
        &["campaigns"],
        &["campuses"],
        &["campuses"],
        &["cambridge"],
    ],
    range: 4..=9,
};

static WORD_CAL_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_CAL_CHILDREN),
    value: None,
};

static WORD_CAL_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    Some(&WORD_CALA_NODE),
    Some(&WORD_CALB_NODE),
    Some(&WORD_CALC_NODE),
    None,
    None,
    None,
    Some(&WORD_CALG_NODE),
    None,
    Some(&WORD_CALI_NODE),
    None,
    None,
    None,
    None,
    None,
    Some(&WORD_CALO_NODE),
    None,
    None,
    Some(&WORD_CALR_NODE),
    Some(&WORD_CALS_NODE),
    None,
    Some(&WORD_CALU_NODE),
    None,
    None,
    None,
    Some(&WORD_CALY_NODE),
    None,
];

static WORD_CALY_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_CALY_CHILDREN),
    value: None,
};

pub static WORD_CALY_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("more")],
    values: &[&["claymore"]],
    range: 4..=4,
};

static WORD_CALU_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_CALU_CHILDREN),
    value: None,
};

pub static WORD_CALU_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("clate"),
        dictgen::InsensitiveStr::Ascii("clated"),
        dictgen::InsensitiveStr::Ascii("clating"),
        dictgen::InsensitiveStr::Ascii("clation"),
        dictgen::InsensitiveStr::Ascii("clations"),
        dictgen::InsensitiveStr::Ascii("clator"),
        dictgen::InsensitiveStr::Ascii("clators"),
        dictgen::InsensitiveStr::Ascii("culate"),
        dictgen::InsensitiveStr::Ascii("culated"),
        dictgen::InsensitiveStr::Ascii("iflower"),
        dictgen::InsensitiveStr::Ascii("late"),
        dictgen::InsensitiveStr::Ascii("lated"),
        dictgen::InsensitiveStr::Ascii("later"),
        dictgen::InsensitiveStr::Ascii("ses"),
    ],
    values: &[
        &["calculate"],
        &["calculated"],
        &["calculating"],
        &["calculation"],
        &["calculations"],
        &["calculator"],
        &["calculators"],
        &["calculate"],
        &["calculated"],
        &["cauliflower"],
        &["calculate"],
        &["calculated"],
        &["calculator"],
        &["clauses"],
    ],
    range: 3..=8,
};

static WORD_CALS_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_CALS_CHILDREN),
    value: None,
};

pub static WORD_CALS_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("sification"),
        dictgen::InsensitiveStr::Ascii("sified"),
        dictgen::InsensitiveStr::Ascii("sify"),
    ],
    values: &[&["classification"], &["classified"], &["classify"]],
    range: 4..=10,
};

static WORD_CALR_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_CALR_CHILDREN),
    value: None,
};

pub static WORD_CALR_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ification"),
        dictgen::InsensitiveStr::Ascii("ify"),
        dictgen::InsensitiveStr::Ascii("ifying"),
        dictgen::InsensitiveStr::Ascii("ity"),
        dictgen::InsensitiveStr::Ascii("kson"),
        dictgen::InsensitiveStr::Ascii("oies"),
    ],
    values: &[
        &["clarification"],
        &["clarify"],
        &["clarifying"],
        &["clarity"],
        &["clarkson"],
        &["calories"],
    ],
    range: 3..=9,
};

static WORD_CALO_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_CALO_CHILDREN),
    value: None,
};

pub static WORD_CALO_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("ires")],
    values: &[&["calories"]],
    range: 4..=4,
};

static WORD_CALI_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_CALI_CHILDREN),
    value: None,
};

pub static WORD_CALI_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("bartion"),
        dictgen::InsensitiveStr::Ascii("bler"),
        dictgen::InsensitiveStr::Ascii("braiton"),
        dictgen::InsensitiveStr::Ascii("bratin"),
        dictgen::InsensitiveStr::Ascii("braton"),
        dictgen::InsensitiveStr::Ascii("cum"),
        dictgen::InsensitiveStr::Ascii("fnoria"),
        dictgen::InsensitiveStr::Ascii("fonria"),
        dictgen::InsensitiveStr::Ascii("forian"),
        dictgen::InsensitiveStr::Ascii("forina"),
        dictgen::InsensitiveStr::Ascii("forinan"),
        dictgen::InsensitiveStr::Ascii("forna"),
        dictgen::InsensitiveStr::Ascii("fornai"),
        dictgen::InsensitiveStr::Ascii("fornain"),
        dictgen::InsensitiveStr::Ascii("fornains"),
        dictgen::InsensitiveStr::Ascii("forniaman"),
        dictgen::InsensitiveStr::Ascii("fornica"),
        dictgen::InsensitiveStr::Ascii("fornican"),
        dictgen::InsensitiveStr::Ascii("fornien"),
        dictgen::InsensitiveStr::Ascii("forniia"),
        dictgen::InsensitiveStr::Ascii("fornina"),
        dictgen::InsensitiveStr::Ascii("forninan"),
        dictgen::InsensitiveStr::Ascii("fornnia"),
        dictgen::InsensitiveStr::Ascii("fronia"),
        dictgen::InsensitiveStr::Ascii("fronian"),
        dictgen::InsensitiveStr::Ascii("graphy"),
        dictgen::InsensitiveStr::Ascii("ofrnia"),
    ],
    values: &[
        &["calibration"],
        &["caliber"],
        &["calibration"],
        &["calibration"],
        &["calibration"],
        &["calcium"],
        &["californian"],
        &["californian"],
        &["californian"],
        &["california"],
        &["californian"],
        &["california"],
        &["californian"],
        &["californian"],
        &["californian"],
        &["californian"],
        &["california"],
        &["californian"],
        &["californian"],
        &["californian"],
        &["californian"],
        &["californian"],
        &["californian"],
        &["california"],
        &["californian"],
        &["calligraphy"],
        &["californian"],
    ],
    range: 3..=9,
};

static WORD_CALG_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_CALG_CHILDREN),
    value: None,
};

pub static WORD_CALG_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("arry")],
    values: &[&["calgary"]],
    range: 4..=4,
};

static WORD_CALC_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_CALC_CHILDREN),
    value: None,
};

pub static WORD_CALC_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("luations"),
        dictgen::InsensitiveStr::Ascii("luator"),
        dictgen::InsensitiveStr::Ascii("ualte"),
        dictgen::InsensitiveStr::Ascii("ualted"),
        dictgen::InsensitiveStr::Ascii("ualting"),
        dictgen::InsensitiveStr::Ascii("ualtion"),
        dictgen::InsensitiveStr::Ascii("ualtions"),
        dictgen::InsensitiveStr::Ascii("ualtor"),
        dictgen::InsensitiveStr::Ascii("ualtors"),
        dictgen::InsensitiveStr::Ascii("uim"),
        dictgen::InsensitiveStr::Ascii("ulador"),
        dictgen::InsensitiveStr::Ascii("ular"),
        dictgen::InsensitiveStr::Ascii("ularon"),
        dictgen::InsensitiveStr::Ascii("ulater"),
        dictgen::InsensitiveStr::Ascii("ulaters"),
        dictgen::InsensitiveStr::Ascii("ulatin"),
        dictgen::InsensitiveStr::Ascii("ulationg"),
        dictgen::InsensitiveStr::Ascii("ulatios"),
        dictgen::InsensitiveStr::Ascii("ulatoare"),
        dictgen::InsensitiveStr::Ascii("ulatons"),
        dictgen::InsensitiveStr::Ascii("uls"),
    ],
    values: &[
        &["calculation"],
        &["calculators"],
        &["calculate"],
        &["calculated"],
        &["calculating"],
        &["calculations"],
        &["calculations"],
        &["calculator"],
        &["calculators"],
        &["calcium"],
        &["calculator"],
        &["calculator"],
        &["calculator"],
        &["calculator"],
        &["calculators"],
        &["calculations"],
        &["calculating"],
        &["calculators"],
        &["calculator"],
        &["calculations"],
        &["calculus"],
    ],
    range: 3..=8,
};

static WORD_CALB_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_CALB_CHILDREN),
    value: None,
};

pub static WORD_CALB_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ack"),
        dictgen::InsensitiveStr::Ascii("iration"),
        dictgen::InsensitiveStr::Ascii("ire"),
    ],
    values: &[&["callback"], &["calibration"], &["calibre"]],
    range: 3..=7,
};

static WORD_CALA_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_CALA_CHILDREN),
    value: None,
};

pub static WORD_CALA_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ber"),
        dictgen::InsensitiveStr::Ascii("gry"),
    ],
    values: &[&["caliber"], &["calgary"]],
    range: 3..=3,
};

static WORD_CAI_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_CAI_CHILDREN),
    value: None,
};

pub static WORD_CAI_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("lbration"),
        dictgen::InsensitiveStr::Ascii("lbre"),
        dictgen::InsensitiveStr::Ascii("nster"),
    ],
    values: &[&["calibration"], &["calibre"], &["canister"]],
    range: 4..=8,
};

static WORD_CAH_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_CAH_CHILDREN),
    value: None,
};

pub static WORD_CAH_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ched"),
        dictgen::InsensitiveStr::Ascii("otic"),
        dictgen::InsensitiveStr::Ascii("racters"),
        dictgen::InsensitiveStr::Ascii("sier"),
        dictgen::InsensitiveStr::Ascii("siers"),
    ],
    values: &[
        &["cached"],
        &["chaotic"],
        &["characters"],
        &["cashier"],
        &["cashiers"],
    ],
    range: 4..=7,
};

static WORD_CAF_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_CAF_CHILDREN),
    value: None,
};

pub static WORD_CAF_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("eteira"),
        dictgen::InsensitiveStr::Ascii("etera"),
        dictgen::InsensitiveStr::Ascii("etiera"),
        dictgen::InsensitiveStr::Ascii("feen"),
        dictgen::InsensitiveStr::Ascii("feinne"),
        dictgen::InsensitiveStr::Ascii("finee"),
    ],
    values: &[
        &["cafeteria"],
        &["cafeteria"],
        &["cafeteria"],
        &["caffeine"],
        &["caffeine"],
        &["caffeine"],
    ],
    range: 4..=6,
};

static WORD_CAC_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_CAC_CHILDREN),
    value: None,
};

pub static WORD_CAC_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ausian"),
        dictgen::InsensitiveStr::Ascii("lium"),
        dictgen::InsensitiveStr::Ascii("lulate"),
        dictgen::InsensitiveStr::Ascii("lulated"),
        dictgen::InsensitiveStr::Ascii("lulating"),
        dictgen::InsensitiveStr::Ascii("lulation"),
        dictgen::InsensitiveStr::Ascii("lulations"),
        dictgen::InsensitiveStr::Ascii("lulator"),
        dictgen::InsensitiveStr::Ascii("lulators"),
        dictgen::InsensitiveStr::Ascii("lulus"),
        dictgen::InsensitiveStr::Ascii("uasian"),
        dictgen::InsensitiveStr::Ascii("ulater"),
        dictgen::InsensitiveStr::Ascii("uses"),
    ],
    values: &[
        &["caucasian"],
        &["calcium"],
        &["calculate"],
        &["calculated"],
        &["calculating"],
        &["calculation"],
        &["calculations"],
        &["calculator"],
        &["calculators"],
        &["calculus"],
        &["caucasian"],
        &["calculator"],
        &["caucuses"],
    ],
    range: 4..=9,
};

static WORD_CAB_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_CAB_CHILDREN),
    value: None,
};

pub static WORD_CAB_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("abge"),
        dictgen::InsensitiveStr::Ascii("abilities"),
        dictgen::InsensitiveStr::Ascii("bagge"),
        dictgen::InsensitiveStr::Ascii("ients"),
        dictgen::InsensitiveStr::Ascii("inate"),
        dictgen::InsensitiveStr::Ascii("inent"),
        dictgen::InsensitiveStr::Ascii("ines"),
        dictgen::InsensitiveStr::Ascii("inettas"),
        dictgen::InsensitiveStr::Ascii("niet"),
        dictgen::InsensitiveStr::Ascii("niets"),
    ],
    values: &[
        &["cabbage"],
        &["capabilities"],
        &["cabbage"],
        &["cabinets"],
        &["cabinet"],
        &["cabinet"],
        &["cabinets"],
        &["cabinets"],
        &["cabinet"],
        &["cabinets"],
    ],
    range: 4..=9,
};

static WORD_B_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_B_CHILDREN),
    value: None,
};

static WORD_B_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    Some(&WORD_BA_NODE),
    None,
    Some(&WORD_BC_NODE),
    None,
    Some(&WORD_BE_NODE),
    None,
    None,
    None,
    Some(&WORD_BI_NODE),
    None,
    None,
    Some(&WORD_BL_NODE),
    None,
    None,
    Some(&WORD_BO_NODE),
    None,
    None,
    Some(&WORD_BR_NODE),
    None,
    Some(&WORD_BT_NODE),
    Some(&WORD_BU_NODE),
    None,
    None,
    None,
    Some(&WORD_BY_NODE),
    None,
];

static WORD_BY_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_BY_CHILDREN),
    value: None,
};

pub static WORD_BY_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("cicles")],
    values: &[&["bicycles"]],
    range: 6..=6,
};

static WORD_BU_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_BU_CHILDREN),
    value: None,
};

static WORD_BU_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    None,
    Some(&WORD_BUB_NODE),
    None,
    Some(&WORD_BUD_NODE),
    Some(&WORD_BUE_NODE),
    None,
    Some(&WORD_BUG_NODE),
    Some(&WORD_BUH_NODE),
    Some(&WORD_BUI_NODE),
    None,
    None,
    Some(&WORD_BUL_NODE),
    None,
    None,
    Some(&WORD_BUO_NODE),
    None,
    None,
    Some(&WORD_BUR_NODE),
    Some(&WORD_BUS_NODE),
    Some(&WORD_BUT_NODE),
    None,
    None,
    None,
    None,
    None,
    None,
];

static WORD_BUT_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_BUT_CHILDREN),
    value: None,
};

pub static WORD_BUT_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("cherd"),
        dictgen::InsensitiveStr::Ascii("hcered"),
        dictgen::InsensitiveStr::Ascii("terey"),
        dictgen::InsensitiveStr::Ascii("terfies"),
        dictgen::InsensitiveStr::Ascii("terfiles"),
        dictgen::InsensitiveStr::Ascii("terfleye"),
        dictgen::InsensitiveStr::Ascii("terflyes"),
        dictgen::InsensitiveStr::Ascii("terfries"),
        dictgen::InsensitiveStr::Ascii("terfy"),
        dictgen::InsensitiveStr::Ascii("terlfies"),
        dictgen::InsensitiveStr::Ascii("terlfy"),
        dictgen::InsensitiveStr::Ascii("terry"),
        dictgen::InsensitiveStr::Ascii("thoe"),
        dictgen::InsensitiveStr::Ascii("thoel"),
        dictgen::InsensitiveStr::Ascii("trey"),
    ],
    values: &[
        &["butchered"],
        &["butchered"],
        &["buttery"],
        &["butterflies"],
        &["butterflies"],
        &["butterfly"],
        &["butterflies"],
        &["butterflies"],
        &["butterfly"],
        &["butterflies"],
        &["butterfly"],
        &["buttery"],
        &["butthole"],
        &["butthole"],
        &["buttery"],
    ],
    range: 4..=8,
};

static WORD_BUS_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_BUS_CHILDREN),
    value: None,
};

pub static WORD_BUS_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ines"),
        dictgen::InsensitiveStr::Ascii("ineses"),
        dictgen::InsensitiveStr::Ascii("inesman"),
        dictgen::InsensitiveStr::Ascii("inesmen"),
        dictgen::InsensitiveStr::Ascii("inessa"),
        dictgen::InsensitiveStr::Ascii("inesse"),
        dictgen::InsensitiveStr::Ascii("inessemen"),
        dictgen::InsensitiveStr::Ascii("inessen"),
        dictgen::InsensitiveStr::Ascii("inessnes"),
        dictgen::InsensitiveStr::Ascii("inesss"),
        dictgen::InsensitiveStr::Ascii("ness"),
        dictgen::InsensitiveStr::Ascii("niessmen"),
        dictgen::InsensitiveStr::Ascii("rting"),
        dictgen::InsensitiveStr::Ascii("siness"),
    ],
    values: &[
        &["business"],
        &["business"],
        &["businessman"],
        &["businessmen"],
        &["businessman"],
        &["businessmen"],
        &["businessmen"],
        &["businessmen"],
        &["businessmen"],
        &["businesses"],
        &["business"],
        &["businessmen"],
        &["bursting"],
        &["business"],
    ],
    range: 4..=9,
};

static WORD_BUR_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_BUR_CHILDREN),
    value: None,
};

pub static WORD_BUR_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("eacuracy"),
        dictgen::InsensitiveStr::Ascii("eaocracy"),
        dictgen::InsensitiveStr::Ascii("eaocratic"),
        dictgen::InsensitiveStr::Ascii("eaocrats"),
        dictgen::InsensitiveStr::Ascii("eaucats"),
        dictgen::InsensitiveStr::Ascii("eaucracie"),
        dictgen::InsensitiveStr::Ascii("eaucractic"),
        dictgen::InsensitiveStr::Ascii("eaucracts"),
        dictgen::InsensitiveStr::Ascii("eaucraps"),
        dictgen::InsensitiveStr::Ascii("eaucrash"),
        dictgen::InsensitiveStr::Ascii("eaucrasy"),
        dictgen::InsensitiveStr::Ascii("eaucrates"),
        dictgen::InsensitiveStr::Ascii("eaucratics"),
        dictgen::InsensitiveStr::Ascii("eaucratisch"),
        dictgen::InsensitiveStr::Ascii("eaucratische"),
        dictgen::InsensitiveStr::Ascii("eaucratius"),
        dictgen::InsensitiveStr::Ascii("eaucrazy"),
        dictgen::InsensitiveStr::Ascii("euacracy"),
        dictgen::InsensitiveStr::Ascii("euacratic"),
        dictgen::InsensitiveStr::Ascii("euacrats"),
        dictgen::InsensitiveStr::Ascii("gunday"),
        dictgen::InsensitiveStr::Ascii("gundry"),
        dictgen::InsensitiveStr::Ascii("guny"),
        dictgen::InsensitiveStr::Ascii("ing"),
        dictgen::InsensitiveStr::Ascii("iser"),
        dictgen::InsensitiveStr::Ascii("isers"),
        dictgen::InsensitiveStr::Ascii("lgar"),
        dictgen::InsensitiveStr::Ascii("nign"),
        dictgen::InsensitiveStr::Ascii("ried"),
        dictgen::InsensitiveStr::Ascii("riots"),
        dictgen::InsensitiveStr::Ascii("ritio"),
        dictgen::InsensitiveStr::Ascii("ritoes"),
        dictgen::InsensitiveStr::Ascii("ritto"),
        dictgen::InsensitiveStr::Ascii("rtio"),
        dictgen::InsensitiveStr::Ascii("rtios"),
        dictgen::InsensitiveStr::Ascii("ssels"),
        dictgen::InsensitiveStr::Ascii("tality"),
        dictgen::InsensitiveStr::Ascii("tally"),
        dictgen::InsensitiveStr::Ascii("tsing"),
        dictgen::InsensitiveStr::Ascii("ueacrats"),
    ],
    values: &[
        &["bureaucracy"],
        &["bureaucracy"],
        &["bureaucratic"],
        &["bureaucrats"],
        &["bureaucrats"],
        &["bureaucratic"],
        &["bureaucratic"],
        &["bureaucrats"],
        &["bureaucrats"],
        &["bureaucrats"],
        &["bureaucrats"],
        &["bureaucrats"],
        &["bureaucrats"],
        &["bureaucratic"],
        &["bureaucratic"],
        &["bureaucrats"],
        &["bureaucracy"],
        &["bureaucracy"],
        &["bureaucratic"],
        &["bureaucrats"],
        &["burgundy"],
        &["burgundy"],
        &["burgundy"],
        &["burying"],
        &["bruiser"],
        &["bruisers"],
        &["burglar"],
        &["burning"],
        &["buried"],
        &["burritos"],
        &["burrito"],
        &["burritos"],
        &["burrito"],
        &["burrito"],
        &["burritos"],
        &["brussels"],
        &["brutality"],
        &["brutally"],
        &["bursting"],
        &["bureaucrats"],
    ],
    range: 3..=12,
};

static WORD_BUO_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_BUO_CHILDREN),
    value: None,
};

pub static WORD_BUO_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("ancy")],
    values: &[&["buoyancy"]],
    range: 4..=4,
};

static WORD_BUL_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_BUL_CHILDREN),
    value: None,
};

pub static WORD_BUL_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("agria"),
        dictgen::InsensitiveStr::Ascii("gaira"),
        dictgen::InsensitiveStr::Ascii("gara"),
        dictgen::InsensitiveStr::Ascii("gariska"),
        dictgen::InsensitiveStr::Ascii("iders"),
        dictgen::InsensitiveStr::Ascii("iding"),
        dictgen::InsensitiveStr::Ascii("idings"),
        dictgen::InsensitiveStr::Ascii("lerproof"),
        dictgen::InsensitiveStr::Ascii("lest"),
        dictgen::InsensitiveStr::Ascii("letbroof"),
        dictgen::InsensitiveStr::Ascii("letpoof"),
        dictgen::InsensitiveStr::Ascii("letprof"),
        dictgen::InsensitiveStr::Ascii("letproff"),
        dictgen::InsensitiveStr::Ascii("letprooof"),
        dictgen::InsensitiveStr::Ascii("letprrof"),
        dictgen::InsensitiveStr::Ascii("letts"),
        dictgen::InsensitiveStr::Ascii("litproof"),
    ],
    values: &[
        &["bulgaria"],
        &["bulgaria"],
        &["bulgaria"],
        &["bulgaria"],
        &["builders"],
        &["building"],
        &["buildings"],
        &["bulletproof"],
        &["bullets"],
        &["bulletproof"],
        &["bulletproof"],
        &["bulletproof"],
        &["bulletproof"],
        &["bulletproof"],
        &["bulletproof"],
        &["bullets"],
        &["bulletproof"],
    ],
    range: 4..=9,
};

static WORD_BUI_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_BUI_CHILDREN),
    value: None,
};

pub static WORD_BUI_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("dlers"),
        dictgen::InsensitiveStr::Ascii("dling"),
        dictgen::InsensitiveStr::Ascii("dlings"),
        dictgen::InsensitiveStr::Ascii("ldes"),
        dictgen::InsensitiveStr::Ascii("ldins"),
        dictgen::InsensitiveStr::Ascii("sness"),
        dictgen::InsensitiveStr::Ascii("snesses"),
        dictgen::InsensitiveStr::Ascii("snessman"),
        dictgen::InsensitiveStr::Ascii("snessmen"),
    ],
    values: &[
        &["builders"],
        &["building"],
        &["buildings"],
        &["builders"],
        &["buildings"],
        &["business"],
        &["businesses"],
        &["businessman"],
        &["businessmen"],
    ],
    range: 4..=8,
};

static WORD_BUH_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_BUH_CHILDREN),
    value: None,
};

pub static WORD_BUH_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ddism"),
        dictgen::InsensitiveStr::Ascii("ddist"),
        dictgen::InsensitiveStr::Ascii("ddists"),
    ],
    values: &[&["buddhism"], &["buddhist"], &["buddhists"]],
    range: 5..=6,
};

static WORD_BUG_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_BUG_CHILDREN),
    value: None,
};

pub static WORD_BUG_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("dets"),
        dictgen::InsensitiveStr::Ascii("laria"),
    ],
    values: &[&["budgets"], &["bulgaria"]],
    range: 4..=5,
};

static WORD_BUE_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_BUE_CHILDREN),
    value: None,
};

pub static WORD_BUE_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("arucratic"),
        dictgen::InsensitiveStr::Ascii("arucrats"),
        dictgen::InsensitiveStr::Ascii("raucracy"),
        dictgen::InsensitiveStr::Ascii("raucratic"),
        dictgen::InsensitiveStr::Ascii("raucrats"),
    ],
    values: &[
        &["bureaucratic"],
        &["bureaucrats"],
        &["bureaucracy"],
        &["bureaucratic"],
        &["bureaucrats"],
    ],
    range: 8..=9,
};

static WORD_BUD_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_BUD_CHILDREN),
    value: None,
};

pub static WORD_BUD_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("dah"),
        dictgen::InsensitiveStr::Ascii("dhim"),
        dictgen::InsensitiveStr::Ascii("dhisim"),
        dictgen::InsensitiveStr::Ascii("dhistisk"),
        dictgen::InsensitiveStr::Ascii("dhit"),
        dictgen::InsensitiveStr::Ascii("dhits"),
        dictgen::InsensitiveStr::Ascii("dhsim"),
        dictgen::InsensitiveStr::Ascii("dihsts"),
        dictgen::InsensitiveStr::Ascii("dishm"),
        dictgen::InsensitiveStr::Ascii("disht"),
        dictgen::InsensitiveStr::Ascii("dishts"),
        dictgen::InsensitiveStr::Ascii("dist"),
        dictgen::InsensitiveStr::Ascii("gest"),
    ],
    values: &[
        &["buddha"],
        &["buddhism"],
        &["buddhism"],
        &["buddhists"],
        &["buddhist"],
        &["buddhist"],
        &["buddhism"],
        &["buddhists"],
        &["buddhism"],
        &["buddhist"],
        &["buddhists"],
        &["buddhist"],
        &["budgets"],
    ],
    range: 3..=8,
};

static WORD_BUB_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_BUB_CHILDREN),
    value: None,
};

pub static WORD_BUB_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("bels"),
        dictgen::InsensitiveStr::Ascii("blews"),
    ],
    values: &[&["bubbles"], &["bubbles"]],
    range: 4..=5,
};

static WORD_BT_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_BT_CHILDREN),
    value: None,
};

pub static WORD_BT_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("iched"),
        dictgen::InsensitiveStr::Ascii("iches"),
    ],
    values: &[&["bitched"], &["bitches"]],
    range: 5..=5,
};

static WORD_BR_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_BR_CHILDREN),
    value: None,
};

static WORD_BR_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    Some(&WORD_BRA_NODE),
    None,
    None,
    None,
    Some(&WORD_BRE_NODE),
    None,
    None,
    None,
    Some(&WORD_BRI_NODE),
    None,
    None,
    None,
    None,
    None,
    Some(&WORD_BRO_NODE),
    None,
    None,
    None,
    None,
    Some(&WORD_BRT_NODE),
    Some(&WORD_BRU_NODE),
    None,
    None,
    None,
    None,
    None,
];

static WORD_BRU_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_BRU_CHILDREN),
    value: None,
};

pub static WORD_BRU_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("glar"),
        dictgen::InsensitiveStr::Ascii("gundy"),
        dictgen::InsensitiveStr::Ascii("isend"),
        dictgen::InsensitiveStr::Ascii("iseres"),
        dictgen::InsensitiveStr::Ascii("nete"),
        dictgen::InsensitiveStr::Ascii("nettte"),
        dictgen::InsensitiveStr::Ascii("ning"),
        dictgen::InsensitiveStr::Ascii("sied"),
        dictgen::InsensitiveStr::Ascii("sies"),
        dictgen::InsensitiveStr::Ascii("sselers"),
        dictgen::InsensitiveStr::Ascii("sseles"),
        dictgen::InsensitiveStr::Ascii("ssells"),
        dictgen::InsensitiveStr::Ascii("sses"),
        dictgen::InsensitiveStr::Ascii("ssles"),
        dictgen::InsensitiveStr::Ascii("sting"),
        dictgen::InsensitiveStr::Ascii("tailty"),
        dictgen::InsensitiveStr::Ascii("tallity"),
        dictgen::InsensitiveStr::Ascii("tallly"),
        dictgen::InsensitiveStr::Ascii("taly"),
    ],
    values: &[
        &["burglar"],
        &["burgundy"],
        &["bruised"],
        &["bruisers"],
        &["brunette"],
        &["brunette"],
        &["burning"],
        &["bruised"],
        &["bruises"],
        &["brussels"],
        &["brussels"],
        &["brussels"],
        &["brussels"],
        &["brussels"],
        &["bursting"],
        &["brutality"],
        &["brutally"],
        &["brutally"],
        &["brutally"],
    ],
    range: 4..=7,
};

static WORD_BRT_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_BRT_CHILDREN),
    value: None,
};

pub static WORD_BRT_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("ually")],
    values: &[&["brutally"]],
    range: 5..=5,
};

static WORD_BRO_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_BRO_CHILDREN),
    value: None,
};

pub static WORD_BRO_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("acasted"),
        dictgen::InsensitiveStr::Ascii("adacasting"),
        dictgen::InsensitiveStr::Ascii("adbad"),
        dictgen::InsensitiveStr::Ascii("adcasing"),
        dictgen::InsensitiveStr::Ascii("adcastes"),
        dictgen::InsensitiveStr::Ascii("adcastors"),
        dictgen::InsensitiveStr::Ascii("adcat"),
        dictgen::InsensitiveStr::Ascii("adley"),
        dictgen::InsensitiveStr::Ascii("adwalk"),
        dictgen::InsensitiveStr::Ascii("ady"),
        dictgen::InsensitiveStr::Ascii("coli"),
        dictgen::InsensitiveStr::Ascii("colli"),
        dictgen::InsensitiveStr::Ascii("daway"),
        dictgen::InsensitiveStr::Ascii("derlands"),
        dictgen::InsensitiveStr::Ascii("ncoes"),
        dictgen::InsensitiveStr::Ascii("nocs"),
        dictgen::InsensitiveStr::Ascii("swing"),
        dictgen::InsensitiveStr::Ascii("therhod"),
        dictgen::InsensitiveStr::Ascii("therhoood"),
        dictgen::InsensitiveStr::Ascii("therood"),
        dictgen::InsensitiveStr::Ascii("therwood"),
        dictgen::InsensitiveStr::Ascii("wine"),
        dictgen::InsensitiveStr::Ascii("wines"),
        dictgen::InsensitiveStr::Ascii("wisng"),
        dictgen::InsensitiveStr::Ascii("wnei"),
        dictgen::InsensitiveStr::Ascii("wnis"),
    ],
    values: &[
        &["broadcast"],
        &["broadcasting"],
        &["broadband"],
        &["broadcasting"],
        &["broadcasts"],
        &["broadcasts"],
        &["broadcasts"],
        &["broadly"],
        &["boardwalk"],
        &["broadly"],
        &["broccoli"],
        &["broccoli"],
        &["broadway"],
        &["borderlands"],
        &["broncos"],
        &["broncos"],
        &["browsing"],
        &["brotherhood"],
        &["brotherhood"],
        &["brotherhood"],
        &["brotherhood"],
        &["brownie"],
        &["brownies"],
        &["browsing"],
        &["brownie"],
        &["brownies"],
    ],
    range: 3..=10,
};

static WORD_BRI_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_BRI_CHILDREN),
    value: None,
};

pub static WORD_BRI_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("agde"),
        dictgen::InsensitiveStr::Ascii("aner"),
        dictgen::InsensitiveStr::Ascii("anwashed"),
        dictgen::InsensitiveStr::Ascii("anwashing"),
        dictgen::InsensitiveStr::Ascii("daging"),
        dictgen::InsensitiveStr::Ascii("dman"),
        dictgen::InsensitiveStr::Ascii("elfy"),
        dictgen::InsensitiveStr::Ascii("gaged"),
        dictgen::InsensitiveStr::Ascii("gated"),
        dictgen::InsensitiveStr::Ascii("gdes"),
        dictgen::InsensitiveStr::Ascii("ghtern"),
        dictgen::InsensitiveStr::Ascii("ghtn"),
        dictgen::InsensitiveStr::Ascii("ghtoner"),
        dictgen::InsensitiveStr::Ascii("gthen"),
        dictgen::InsensitiveStr::Ascii("gthest"),
        dictgen::InsensitiveStr::Ascii("gthness"),
        dictgen::InsensitiveStr::Ascii("liant"),
        dictgen::InsensitiveStr::Ascii("llaince"),
        dictgen::InsensitiveStr::Ascii("llaintly"),
        dictgen::InsensitiveStr::Ascii("llant"),
        dictgen::InsensitiveStr::Ascii("lliante"),
        dictgen::InsensitiveStr::Ascii("llianty"),
        dictgen::InsensitiveStr::Ascii("lliany"),
        dictgen::InsensitiveStr::Ascii("mestone"),
        dictgen::InsensitiveStr::Ascii("mingham"),
        dictgen::InsensitiveStr::Ascii("sben"),
        dictgen::InsensitiveStr::Ascii("stool"),
        dictgen::InsensitiveStr::Ascii("thday"),
        dictgen::InsensitiveStr::Ascii("thdays"),
        dictgen::InsensitiveStr::Ascii("tian"),
        dictgen::InsensitiveStr::Ascii("tsol"),
        dictgen::InsensitiveStr::Ascii("ttish"),
        dictgen::InsensitiveStr::Ascii("used"),
        dictgen::InsensitiveStr::Ascii("user"),
        dictgen::InsensitiveStr::Ascii("users"),
        dictgen::InsensitiveStr::Ascii("uses"),
    ],
    values: &[
        &["brigade"],
        &["brainer"],
        &["brainwashed"],
        &["brainwashing"],
        &["brigading"],
        &["birdman"],
        &["briefly"],
        &["brigade"],
        &["brigade"],
        &["bridges"],
        &["brighten"],
        &["brighten"],
        &["brighten"],
        &["brighten"],
        &["brightest"],
        &["brightness"],
        &["brilliant"],
        &["brilliance"],
        &["brilliantly"],
        &["brilliant"],
        &["brilliance"],
        &["brilliantly"],
        &["brilliantly"],
        &["brimstone"],
        &["birmingham"],
        &["brisbane"],
        &["bristol"],
        &["birthday"],
        &["birthdays"],
        &["britain"],
        &["bristol"],
        &["british"],
        &["bruised"],
        &["bruiser"],
        &["bruisers"],
        &["bruises"],
    ],
    range: 4..=9,
};

static WORD_BRE_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_BRE_CHILDREN),
    value: None,
};

pub static WORD_BRE_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("adtfeeding"),
        dictgen::InsensitiveStr::Ascii("akdows"),
        dictgen::InsensitiveStr::Ascii("akthorugh"),
        dictgen::InsensitiveStr::Ascii("akthough"),
        dictgen::InsensitiveStr::Ascii("akthroughts"),
        dictgen::InsensitiveStr::Ascii("akthrouh"),
        dictgen::InsensitiveStr::Ascii("aktrhough"),
        dictgen::InsensitiveStr::Ascii("astfeading"),
        dictgen::InsensitiveStr::Ascii("astfeedig"),
        dictgen::InsensitiveStr::Ascii("astfeeing"),
        dictgen::InsensitiveStr::Ascii("asttaking"),
        dictgen::InsensitiveStr::Ascii("athis"),
        dictgen::InsensitiveStr::Ascii("athos"),
        dictgen::InsensitiveStr::Ascii("athtakng"),
        dictgen::InsensitiveStr::Ascii("atsfeeding"),
        dictgen::InsensitiveStr::Ascii("dnan"),
        dictgen::InsensitiveStr::Ascii("if"),
        dictgen::InsensitiveStr::Ascii("ifly"),
        dictgen::InsensitiveStr::Ascii("kaout"),
        dictgen::InsensitiveStr::Ascii("ndamn"),
        dictgen::InsensitiveStr::Ascii("serk"),
        dictgen::InsensitiveStr::Ascii("serker"),
        dictgen::InsensitiveStr::Ascii("then"),
        dictgen::InsensitiveStr::Ascii("theren"),
        dictgen::InsensitiveStr::Ascii("weres"),
        dictgen::InsensitiveStr::Ascii("werey"),
        dictgen::InsensitiveStr::Ascii("werks"),
        dictgen::InsensitiveStr::Ascii("werys"),
        dictgen::InsensitiveStr::Ascii("wrey"),
    ],
    values: &[
        &["breastfeeding"],
        &["breakdowns"],
        &["breakthrough"],
        &["breakthrough"],
        &["breakthroughs"],
        &["breakthrough"],
        &["breakthrough"],
        &["breastfeeding"],
        &["breastfeeding"],
        &["breastfeeding"],
        &["breathtaking"],
        &["breaths"],
        &["breaths"],
        &["breathtaking"],
        &["breastfeeding"],
        &["brendan"],
        &["brief"],
        &["briefly"],
        &["breakout"],
        &["brendan"],
        &["berserk"],
        &["berserker"],
        &["brethren"],
        &["brethren"],
        &["brewers"],
        &["brewery"],
        &["brewers"],
        &["brewers"],
        &["brewery"],
    ],
    range: 2..=11,
};

static WORD_BRA_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_BRA_CHILDREN),
    value: None,
};

pub static WORD_BRA_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("barian"),
        dictgen::InsensitiveStr::Ascii("celetes"),
        dictgen::InsensitiveStr::Ascii("celettes"),
        dictgen::InsensitiveStr::Ascii("celetts"),
        dictgen::InsensitiveStr::Ascii("celona"),
        dictgen::InsensitiveStr::Ascii("dcast"),
        dictgen::InsensitiveStr::Ascii("dfrod"),
        dictgen::InsensitiveStr::Ascii("evry"),
        dictgen::InsensitiveStr::Ascii("inwahsed"),
        dictgen::InsensitiveStr::Ascii("inwahsing"),
        dictgen::InsensitiveStr::Ascii("inwased"),
        dictgen::InsensitiveStr::Ascii("inwasing"),
        dictgen::InsensitiveStr::Ascii("ista"),
        dictgen::InsensitiveStr::Ascii("kedowns"),
        dictgen::InsensitiveStr::Ascii("keout"),
        dictgen::InsensitiveStr::Ascii("kethrough"),
        dictgen::InsensitiveStr::Ascii("kley"),
        dictgen::InsensitiveStr::Ascii("nier"),
        dictgen::InsensitiveStr::Ascii("odband"),
        dictgen::InsensitiveStr::Ascii("odcast"),
        dictgen::InsensitiveStr::Ascii("odcasting"),
        dictgen::InsensitiveStr::Ascii("odcasts"),
        dictgen::InsensitiveStr::Ascii("oden"),
        dictgen::InsensitiveStr::Ascii("oder"),
        dictgen::InsensitiveStr::Ascii("odly"),
        dictgen::InsensitiveStr::Ascii("odway"),
        dictgen::InsensitiveStr::Ascii("sillian"),
        dictgen::InsensitiveStr::Ascii("tenders"),
        dictgen::InsensitiveStr::Ascii("verly"),
        dictgen::InsensitiveStr::Ascii("zilains"),
        dictgen::InsensitiveStr::Ascii("zileans"),
        dictgen::InsensitiveStr::Ascii("ziliaan"),
        dictgen::InsensitiveStr::Ascii("zilianese"),
        dictgen::InsensitiveStr::Ascii("zilianess"),
        dictgen::InsensitiveStr::Ascii("zilias"),
        dictgen::InsensitiveStr::Ascii("ziliians"),
        dictgen::InsensitiveStr::Ascii("zilions"),
        dictgen::InsensitiveStr::Ascii("zillans"),
    ],
    values: &[
        &["barbarian"],
        &["bracelets"],
        &["bracelets"],
        &["bracelets"],
        &["barcelona"],
        &["broadcast"],
        &["bradford"],
        &["bravery"],
        &["brainwashed"],
        &["brainwashing"],
        &["brainwashed"],
        &["brainwashing"],
        &["barista"],
        &["breakdowns"],
        &["breakout"],
        &["breakthrough"],
        &["barkley"],
        &["brainer"],
        &["broadband"],
        &["broadcast"],
        &["broadcasting"],
        &["broadcasts"],
        &["broaden"],
        &["broader"],
        &["broadly"],
        &["broadway"],
        &["brazilian"],
        &["bartenders"],
        &["bravery"],
        &["brazilians"],
        &["brazilians"],
        &["brazilians"],
        &["brazilians"],
        &["brazilians"],
        &["brazilians"],
        &["brazilians"],
        &["brazilians"],
        &["brazilians"],
    ],
    range: 4..=9,
};

static WORD_BO_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_BO_CHILDREN),
    value: None,
};

static WORD_BO_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    Some(&WORD_BOA_NODE),
    Some(&WORD_BOB_NODE),
    None,
    Some(&WORD_BOD_NODE),
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    Some(&WORD_BOL_NODE),
    Some(&WORD_BOM_NODE),
    Some(&WORD_BON_NODE),
    Some(&WORD_BOO_NODE),
    None,
    None,
    Some(&WORD_BOR_NODE),
    Some(&WORD_BOS_NODE),
    Some(&WORD_BOT_NODE),
    Some(&WORD_BOU_NODE),
    None,
    None,
    None,
    Some(&WORD_BOY_NODE),
    None,
];

static WORD_BOY_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_BOY_CHILDREN),
    value: None,
};

pub static WORD_BOY_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ant"),
        dictgen::InsensitiveStr::Ascii("cottting"),
        dictgen::InsensitiveStr::Ascii("cutting"),
        dictgen::InsensitiveStr::Ascii("firend"),
        dictgen::InsensitiveStr::Ascii("firends"),
        dictgen::InsensitiveStr::Ascii("freind"),
        dictgen::InsensitiveStr::Ascii("freinds"),
        dictgen::InsensitiveStr::Ascii("fried"),
        dictgen::InsensitiveStr::Ascii("friens"),
        dictgen::InsensitiveStr::Ascii("frients"),
    ],
    values: &[
        &["buoyant"],
        &["boycotting"],
        &["boycotting"],
        &["boyfriend"],
        &["boyfriends"],
        &["boyfriend"],
        &["boyfriends"],
        &["boyfriend"],
        &["boyfriends"],
        &["boyfriends"],
    ],
    range: 3..=8,
};

static WORD_BOU_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_BOU_CHILDREN),
    value: None,
};

pub static WORD_BOU_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("dler"),
        dictgen::InsensitiveStr::Ascii("ldore"),
        dictgen::InsensitiveStr::Ascii("ndaires"),
        dictgen::InsensitiveStr::Ascii("nderies"),
        dictgen::InsensitiveStr::Ascii("ndry"),
        dictgen::InsensitiveStr::Ascii("nites"),
        dictgen::InsensitiveStr::Ascii("nses"),
        dictgen::InsensitiveStr::Ascii("regois"),
        dictgen::InsensitiveStr::Ascii("rgeios"),
        dictgen::InsensitiveStr::Ascii("rgeoius"),
        dictgen::InsensitiveStr::Ascii("rgeousie"),
        dictgen::InsensitiveStr::Ascii("rgoeis"),
        dictgen::InsensitiveStr::Ascii("tiqe"),
        dictgen::InsensitiveStr::Ascii("tnies"),
        dictgen::InsensitiveStr::Ascii("tqiue"),
        dictgen::InsensitiveStr::Ascii("yancy"),
        dictgen::InsensitiveStr::Ascii("yant"),
    ],
    values: &[
        &["boulder"],
        &["boulder"],
        &["boundaries"],
        &["boundaries"],
        &["boundary"],
        &["bounties"],
        &["bonuses"],
        &["bourgeois"],
        &["bourgeois"],
        &["bourgeois"],
        &["bourgeois"],
        &["bourgeois"],
        &["boutique"],
        &["bounties"],
        &["boutique"],
        &["buoyancy"],
        &["buoyant"],
    ],
    range: 4..=8,
};

static WORD_BOT_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_BOT_CHILDREN),
    value: None,
};

pub static WORD_BOT_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ivational"),
        dictgen::InsensitiveStr::Ascii("telneck"),
        dictgen::InsensitiveStr::Ascii("tlebeck"),
    ],
    values: &[&["motivational"], &["bottleneck"], &["bottleneck"]],
    range: 7..=9,
};

static WORD_BOS_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_BOS_CHILDREN),
    value: None,
};

pub static WORD_BOS_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("lter")],
    values: &[&["bolster"]],
    range: 4..=4,
};

static WORD_BOR_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_BOR_CHILDREN),
    value: None,
};

pub static WORD_BOR_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("adband"),
        dictgen::InsensitiveStr::Ascii("adcast"),
        dictgen::InsensitiveStr::Ascii("adcasting"),
        dictgen::InsensitiveStr::Ascii("adcasts"),
        dictgen::InsensitiveStr::Ascii("aden"),
        dictgen::InsensitiveStr::Ascii("ader"),
        dictgen::InsensitiveStr::Ascii("adly"),
        dictgen::InsensitiveStr::Ascii("adwalk"),
        dictgen::InsensitiveStr::Ascii("adway"),
        dictgen::InsensitiveStr::Ascii("delrands"),
        dictgen::InsensitiveStr::Ascii("deom"),
        dictgen::InsensitiveStr::Ascii("derlads"),
        dictgen::InsensitiveStr::Ascii("derlanders"),
        dictgen::InsensitiveStr::Ascii("derlans"),
        dictgen::InsensitiveStr::Ascii("dlerands"),
        dictgen::InsensitiveStr::Ascii("edoom"),
        dictgen::InsensitiveStr::Ascii("ke"),
        dictgen::InsensitiveStr::Ascii("therhood"),
    ],
    values: &[
        &["broadband"],
        &["broadcast"],
        &["broadcasting"],
        &["broadcasts"],
        &["broaden"],
        &["broader"],
        &["broadly"],
        &["boardwalk"],
        &["broadway"],
        &["borderlands"],
        &["boredom"],
        &["borderlands"],
        &["borderlands"],
        &["borderlands"],
        &["borderlands"],
        &["boredom"],
        &["broke"],
        &["brotherhood"],
    ],
    range: 2..=10,
};

static WORD_BOO_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_BOO_CHILDREN),
    value: None,
};

pub static WORD_BOO_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("kamrks"),
        dictgen::InsensitiveStr::Ascii("kmakred"),
        dictgen::InsensitiveStr::Ascii("kmakrs"),
        dictgen::InsensitiveStr::Ascii("kmarkd"),
        dictgen::InsensitiveStr::Ascii("kmars"),
        dictgen::InsensitiveStr::Ascii("ok"),
        dictgen::InsensitiveStr::Ascii("tlaoder"),
        dictgen::InsensitiveStr::Ascii("tleader"),
    ],
    values: &[
        &["bookmarks"],
        &["bookmarked"],
        &["bookmarks"],
        &["bookmarked"],
        &["bookmarks"],
        &["book"],
        &["bootloader"],
        &["bootloader"],
    ],
    range: 2..=7,
};

static WORD_BON_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_BON_CHILDREN),
    value: None,
};

pub static WORD_BON_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("dary"),
        dictgen::InsensitiveStr::Ascii("nano"),
        dictgen::InsensitiveStr::Ascii("sues"),
    ],
    values: &[&["boundary"], &["bonanno"], &["bonuses"]],
    range: 4..=4,
};

static WORD_BOM_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_BOM_CHILDREN),
    value: None,
};

pub static WORD_BOM_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("bardeada"),
        dictgen::InsensitiveStr::Ascii("bardeado"),
        dictgen::InsensitiveStr::Ascii("bardement"),
        dictgen::InsensitiveStr::Ascii("barderad"),
        dictgen::InsensitiveStr::Ascii("barment"),
        dictgen::InsensitiveStr::Ascii("beros"),
    ],
    values: &[
        &["bombarded"],
        &["bombarded"],
        &["bombardment"],
        &["bombarded"],
        &["bombardment"],
        &["bombers"],
    ],
    range: 5..=9,
};

static WORD_BOL_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_BOL_CHILDREN),
    value: None,
};

pub static WORD_BOL_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("lcoks"),
        dictgen::InsensitiveStr::Ascii("locs"),
    ],
    values: &[&["bollocks"], &["bollocks"]],
    range: 4..=5,
};

static WORD_BOD_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_BOD_CHILDREN),
    value: None,
};

pub static WORD_BOD_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ybuidling"),
        dictgen::InsensitiveStr::Ascii("ybuildig"),
        dictgen::InsensitiveStr::Ascii("ybuildng"),
        dictgen::InsensitiveStr::Ascii("ybuilidng"),
        dictgen::InsensitiveStr::Ascii("ybuiling"),
        dictgen::InsensitiveStr::Ascii("ybuliding"),
        dictgen::InsensitiveStr::Ascii("ydbuilder"),
        dictgen::InsensitiveStr::Ascii("yheight"),
        dictgen::InsensitiveStr::Ascii("yweigt"),
        dictgen::InsensitiveStr::Ascii("yweigth"),
        dictgen::InsensitiveStr::Ascii("ywieght"),
    ],
    values: &[
        &["bodybuilding"],
        &["bodybuilding"],
        &["bodybuilding"],
        &["bodybuilding"],
        &["bodybuilding"],
        &["bodybuilding"],
        &["bodybuilder"],
        &["bodyweight"],
        &["bodyweight"],
        &["bodyweight"],
        &["bodyweight"],
    ],
    range: 6..=9,
};

static WORD_BOB_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_BOB_CHILDREN),
    value: None,
};

pub static WORD_BOB_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("mers"),
        dictgen::InsensitiveStr::Ascii("ybuilding"),
    ],
    values: &[&["bombers"], &["bodybuilding"]],
    range: 4..=9,
};

static WORD_BOA_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_BOA_CHILDREN),
    value: None,
};

pub static WORD_BOA_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("rdband"),
        dictgen::InsensitiveStr::Ascii("rdcast"),
        dictgen::InsensitiveStr::Ascii("rdcasting"),
        dictgen::InsensitiveStr::Ascii("rdcasts"),
        dictgen::InsensitiveStr::Ascii("rdway"),
        dictgen::InsensitiveStr::Ascii("ut"),
    ],
    values: &[
        &["broadband"],
        &["broadcast"],
        &["broadcasting"],
        &["broadcasts"],
        &["broadway"],
        &["bout"],
    ],
    range: 2..=9,
};

static WORD_BL_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_BL_CHILDREN),
    value: None,
};

static WORD_BL_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    Some(&WORD_BLA_NODE),
    None,
    None,
    None,
    Some(&WORD_BLE_NODE),
    None,
    None,
    None,
    Some(&WORD_BLI_NODE),
    None,
    None,
    None,
    None,
    None,
    Some(&WORD_BLO_NODE),
    None,
    None,
    None,
    None,
    None,
    Some(&WORD_BLU_NODE),
    None,
    None,
    None,
    None,
    None,
];

static WORD_BLU_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_BLU_CHILDREN),
    value: None,
};

pub static WORD_BLU_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ebarries"),
        dictgen::InsensitiveStr::Ascii("eberies"),
        dictgen::InsensitiveStr::Ascii("eberris"),
        dictgen::InsensitiveStr::Ascii("eberrries"),
        dictgen::InsensitiveStr::Ascii("eberrry"),
        dictgen::InsensitiveStr::Ascii("ebery"),
        dictgen::InsensitiveStr::Ascii("ebrints"),
        dictgen::InsensitiveStr::Ascii("eburries"),
        dictgen::InsensitiveStr::Ascii("eprients"),
        dictgen::InsensitiveStr::Ascii("eprintcss"),
        dictgen::InsensitiveStr::Ascii("etooh"),
        dictgen::InsensitiveStr::Ascii("garia"),
        dictgen::InsensitiveStr::Ascii("lets"),
    ],
    values: &[
        &["blueberries"],
        &["blueberries"],
        &["blueberries"],
        &["blueberries"],
        &["blueberry"],
        &["blueberry"],
        &["blueprints"],
        &["blueberries"],
        &["blueprints"],
        &["blueprints"],
        &["bluetooth"],
        &["bulgaria"],
        &["bullets"],
    ],
    range: 4..=9,
};

static WORD_BLO_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_BLO_CHILDREN),
    value: None,
};

pub static WORD_BLO_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("chchain"),
        dictgen::InsensitiveStr::Ascii("ckcahin"),
        dictgen::InsensitiveStr::Ascii("ckchan"),
        dictgen::InsensitiveStr::Ascii("ckchian"),
        dictgen::InsensitiveStr::Ascii("ckeras"),
        dictgen::InsensitiveStr::Ascii("ckes"),
        dictgen::InsensitiveStr::Ascii("ggare"),
        dictgen::InsensitiveStr::Ascii("ggeur"),
        dictgen::InsensitiveStr::Ascii("odboner"),
        dictgen::InsensitiveStr::Ascii("odbonre"),
        dictgen::InsensitiveStr::Ascii("odboorne"),
        dictgen::InsensitiveStr::Ascii("odborbe"),
        dictgen::InsensitiveStr::Ascii("odbore"),
        dictgen::InsensitiveStr::Ascii("odbrone"),
        dictgen::InsensitiveStr::Ascii("odporne"),
        dictgen::InsensitiveStr::Ascii("orborne"),
        dictgen::InsensitiveStr::Ascii("ster"),
    ],
    values: &[
        &["blockchain"],
        &["blockchain"],
        &["blockchain"],
        &["blockchain"],
        &["blockers"],
        &["blockers"],
        &["blogger"],
        &["blogger"],
        &["bloodborne"],
        &["bloodborne"],
        &["bloodborne"],
        &["bloodborne"],
        &["bloodborne"],
        &["bloodborne"],
        &["bloodborne"],
        &["bloodborne"],
        &["bolster"],
    ],
    range: 4..=8,
};

static WORD_BLI_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_BLI_CHILDREN),
    value: None,
};

pub static WORD_BLI_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("steres"),
        dictgen::InsensitiveStr::Ascii("tzkreig"),
        dictgen::InsensitiveStr::Ascii("zzad"),
        dictgen::InsensitiveStr::Ascii("zzcoin"),
    ],
    values: &[&["blisters"], &["blitzkrieg"], &["blizzard"], &["blizzcon"]],
    range: 4..=7,
};

static WORD_BLE_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_BLE_CHILDREN),
    value: None,
};

pub static WORD_BLE_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("gian"),
        dictgen::InsensitiveStr::Ascii("gium"),
        dictgen::InsensitiveStr::Ascii("ssins"),
        dictgen::InsensitiveStr::Ascii("ssure"),
        dictgen::InsensitiveStr::Ascii("uberry"),
        dictgen::InsensitiveStr::Ascii("utooth"),
    ],
    values: &[
        &["belgian"],
        &["belgium"],
        &["blessings"],
        &["blessing"],
        &["blueberry"],
        &["bluetooth"],
    ],
    range: 4..=6,
};

static WORD_BLA_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_BLA_CHILDREN),
    value: None,
};

pub static WORD_BLA_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ckade"),
        dictgen::InsensitiveStr::Ascii("ckahwks"),
        dictgen::InsensitiveStr::Ascii("ckbarry"),
        dictgen::InsensitiveStr::Ascii("ckbeary"),
        dictgen::InsensitiveStr::Ascii("ckbeery"),
        dictgen::InsensitiveStr::Ascii("ckberrry"),
        dictgen::InsensitiveStr::Ascii("ckbery"),
        dictgen::InsensitiveStr::Ascii("ckcawks"),
        dictgen::InsensitiveStr::Ascii("ckend"),
        dictgen::InsensitiveStr::Ascii("ckhakws"),
        dictgen::InsensitiveStr::Ascii("ckhaws"),
        dictgen::InsensitiveStr::Ascii("ckhwaks"),
        dictgen::InsensitiveStr::Ascii("ckjak"),
        dictgen::InsensitiveStr::Ascii("cklit"),
        dictgen::InsensitiveStr::Ascii("ckmsith"),
        dictgen::InsensitiveStr::Ascii("ckshit"),
        dictgen::InsensitiveStr::Ascii("ckshits"),
        dictgen::InsensitiveStr::Ascii("cksmitch"),
        dictgen::InsensitiveStr::Ascii("cony"),
        dictgen::InsensitiveStr::Ascii("im"),
        dictgen::InsensitiveStr::Ascii("imed"),
        dictgen::InsensitiveStr::Ascii("methrower"),
        dictgen::InsensitiveStr::Ascii("nkes"),
        dictgen::InsensitiveStr::Ascii("nketts"),
        dictgen::InsensitiveStr::Ascii("pshemy"),
        dictgen::InsensitiveStr::Ascii("shpemy"),
        dictgen::InsensitiveStr::Ascii("spehmy"),
        dictgen::InsensitiveStr::Ascii("sphemey"),
        dictgen::InsensitiveStr::Ascii("sphmey"),
        dictgen::InsensitiveStr::Ascii("tanlty"),
        dictgen::InsensitiveStr::Ascii("tanty"),
        dictgen::InsensitiveStr::Ascii("timore"),
    ],
    values: &[
        &["blacked"],
        &["blackhawks"],
        &["blackberry"],
        &["blackberry"],
        &["blackberry"],
        &["blackberry"],
        &["blackberry"],
        &["blackhawks"],
        &["blacked"],
        &["blackhawks"],
        &["blackhawks"],
        &["blackhawks"],
        &["blackjack"],
        &["blacklist"],
        &["blacksmith"],
        &["blacksmith"],
        &["blacksmith"],
        &["blacksmith"],
        &["balcony"],
        &["blame"],
        &["blamed"],
        &["flamethrower"],
        &["blankets"],
        &["blankets"],
        &["blasphemy"],
        &["blasphemy"],
        &["blasphemy"],
        &["blasphemy"],
        &["blasphemy"],
        &["blatantly"],
        &["blatantly"],
        &["baltimore"],
    ],
    range: 2..=9,
};

static WORD_BI_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_BI_CHILDREN),
    value: None,
};

static WORD_BI_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    Some(&WORD_BIA_NODE),
    Some(&WORD_BIB_NODE),
    Some(&WORD_BIC_NODE),
    Some(&WORD_BID_NODE),
    Some(&WORD_BIE_NODE),
    Some(&WORD_BIF_NODE),
    Some(&WORD_BIG_NODE),
    None,
    None,
    None,
    None,
    Some(&WORD_BIL_NODE),
    None,
    Some(&WORD_BIN_NODE),
    Some(&WORD_BIO_NODE),
    Some(&WORD_BIP_NODE),
    None,
    Some(&WORD_BIR_NODE),
    Some(&WORD_BIS_NODE),
    Some(&WORD_BIT_NODE),
    None,
    None,
    None,
    None,
    None,
    Some(&WORD_BIZ_NODE),
];

static WORD_BIZ_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_BIZ_CHILDREN),
    value: None,
};

pub static WORD_BIZ_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("zare")],
    values: &[&["bizarre"]],
    range: 4..=4,
};

static WORD_BIT_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_BIT_CHILDREN),
    value: None,
};

pub static WORD_BIT_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("cion"),
        dictgen::InsensitiveStr::Ascii("cions"),
        dictgen::InsensitiveStr::Ascii("coints"),
        dictgen::InsensitiveStr::Ascii("hced"),
        dictgen::InsensitiveStr::Ascii("hces"),
        dictgen::InsensitiveStr::Ascii("ocin"),
        dictgen::InsensitiveStr::Ascii("ocins"),
        dictgen::InsensitiveStr::Ascii("terseet"),
        dictgen::InsensitiveStr::Ascii("tersweat"),
        dictgen::InsensitiveStr::Ascii("tersweeet"),
        dictgen::InsensitiveStr::Ascii("terswet"),
        dictgen::InsensitiveStr::Ascii("terwseet"),
    ],
    values: &[
        &["bitcoin"],
        &["bitcoins"],
        &["bitcoins"],
        &["bitched"],
        &["bitches"],
        &["bitcoin"],
        &["bitcoins"],
        &["bittersweet"],
        &["bittersweet"],
        &["bittersweet"],
        &["bittersweet"],
        &["bittersweet"],
    ],
    range: 4..=9,
};

static WORD_BIS_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_BIS_CHILDREN),
    value: None,
};

pub static WORD_BIS_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("euxal"),
        dictgen::InsensitiveStr::Ascii("exaul"),
        dictgen::InsensitiveStr::Ascii("exuella"),
    ],
    values: &[&["bisexual"], &["bisexual"], &["bisexual"]],
    range: 5..=7,
};

static WORD_BIR_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_BIR_CHILDREN),
    value: None,
};

pub static WORD_BIR_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("damn"),
        dictgen::InsensitiveStr::Ascii("dges"),
        dictgen::InsensitiveStr::Ascii("gade"),
        dictgen::InsensitiveStr::Ascii("gading"),
        dictgen::InsensitiveStr::Ascii("ghtest"),
        dictgen::InsensitiveStr::Ascii("ghtness"),
        dictgen::InsensitiveStr::Ascii("htday"),
        dictgen::InsensitiveStr::Ascii("htdays"),
        dictgen::InsensitiveStr::Ascii("mignham"),
        dictgen::InsensitiveStr::Ascii("mimgham"),
        dictgen::InsensitiveStr::Ascii("mingharam"),
        dictgen::InsensitiveStr::Ascii("sbane"),
        dictgen::InsensitiveStr::Ascii("thdayers"),
        dictgen::InsensitiveStr::Ascii("thdaymas"),
        dictgen::InsensitiveStr::Ascii("thdsy"),
    ],
    values: &[
        &["birdman"],
        &["bridges"],
        &["brigade"],
        &["brigading"],
        &["brightest"],
        &["brightness"],
        &["birthday"],
        &["birthdays"],
        &["birmingham"],
        &["birmingham"],
        &["birmingham"],
        &["brisbane"],
        &["birthdays"],
        &["birthdays"],
        &["birthdays"],
    ],
    range: 4..=9,
};

static WORD_BIP_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_BIP_CHILDREN),
    value: None,
};

pub static WORD_BIP_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("loar")],
    values: &[&["bipolar"]],
    range: 4..=4,
};

static WORD_BIO_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_BIO_CHILDREN),
    value: None,
};

pub static WORD_BIO_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("gted"),
        dictgen::InsensitiveStr::Ascii("gtry"),
        dictgen::InsensitiveStr::Ascii("ligical"),
        dictgen::InsensitiveStr::Ascii("ligically"),
        dictgen::InsensitiveStr::Ascii("logia"),
        dictgen::InsensitiveStr::Ascii("logicaly"),
        dictgen::InsensitiveStr::Ascii("logiset"),
        dictgen::InsensitiveStr::Ascii("logiskt"),
        dictgen::InsensitiveStr::Ascii("plar"),
    ],
    values: &[
        &["bigoted"],
        &["bigotry"],
        &["biological"],
        &["biologically"],
        &["biological"],
        &["biologically"],
        &["biologist"],
        &["biologist"],
        &["bipolar"],
    ],
    range: 4..=9,
};

static WORD_BIN_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_BIN_CHILDREN),
    value: None,
};

pub static WORD_BIN_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("ominal")],
    values: &[&["binomial"]],
    range: 6..=6,
};

static WORD_BIL_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_BIL_CHILDREN),
    value: None,
};

pub static WORD_BIL_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ateraly"),
        dictgen::InsensitiveStr::Ascii("bical"),
        dictgen::InsensitiveStr::Ascii("lbaord"),
        dictgen::InsensitiveStr::Ascii("lboad"),
        dictgen::InsensitiveStr::Ascii("lboars"),
        dictgen::InsensitiveStr::Ascii("lborads"),
        dictgen::InsensitiveStr::Ascii("legerent"),
        dictgen::InsensitiveStr::Ascii("lingualism"),
        dictgen::InsensitiveStr::Ascii("lionairre"),
        dictgen::InsensitiveStr::Ascii("lionairres"),
        dictgen::InsensitiveStr::Ascii("lionairs"),
        dictgen::InsensitiveStr::Ascii("lionarie"),
        dictgen::InsensitiveStr::Ascii("lionaries"),
        dictgen::InsensitiveStr::Ascii("lioniare"),
        dictgen::InsensitiveStr::Ascii("lioniares"),
        dictgen::InsensitiveStr::Ascii("sters"),
        dictgen::InsensitiveStr::Ascii("zzard"),
        dictgen::InsensitiveStr::Ascii("zzcon"),
    ],
    values: &[
        &["bilaterally"],
        &["biblical"],
        &["billboard"],
        &["billboard"],
        &["billboards"],
        &["billboards"],
        &["belligerent"],
        &["bilingualism"],
        &["billionaire"],
        &["billionaire"],
        &["billionaires"],
        &["billionaire"],
        &["billionaires"],
        &["billionaire"],
        &["billionaires"],
        &["blisters"],
        &["blizzard"],
        &["blizzcon"],
    ],
    range: 5..=10,
};

static WORD_BIG_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_BIG_CHILDREN),
    value: None,
};

pub static WORD_BIG_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("fooot"),
        dictgen::InsensitiveStr::Ascii("ining"),
        dictgen::InsensitiveStr::Ascii("inning"),
        dictgen::InsensitiveStr::Ascii("orty"),
        dictgen::InsensitiveStr::Ascii("rading"),
        dictgen::InsensitiveStr::Ascii("toed"),
        dictgen::InsensitiveStr::Ascii("tory"),
    ],
    values: &[
        &["bigfoot"],
        &["beginning"],
        &["beginning"],
        &["bigotry"],
        &["brigading"],
        &["bigoted"],
        &["bigotry"],
    ],
    range: 4..=6,
};

static WORD_BIF_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_BIF_CHILDREN),
    value: None,
};

pub static WORD_BIF_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("goot")],
    values: &[&["bigfoot"]],
    range: 4..=4,
};

static WORD_BIE_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_BIE_CHILDREN),
    value: None,
};

pub static WORD_BIE_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("jing")],
    values: &[&["beijing"]],
    range: 4..=4,
};

static WORD_BID_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_BID_CHILDREN),
    value: None,
};

pub static WORD_BID_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("rman")],
    values: &[&["birdman"]],
    range: 4..=4,
};

static WORD_BIC_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_BIC_CHILDREN),
    value: None,
};

pub static WORD_BIC_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("thes"),
        dictgen::InsensitiveStr::Ascii("ylces"),
    ],
    values: &[&["bitches"], &["bicycles"]],
    range: 4..=5,
};

static WORD_BIB_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_BIB_CHILDREN),
    value: None,
};

pub static WORD_BIB_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("ilcal")],
    values: &[&["biblical"]],
    range: 5..=5,
};

static WORD_BIA_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_BIA_CHILDREN),
    value: None,
};

pub static WORD_BIA_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("nry")],
    values: &[&["binary"]],
    range: 3..=3,
};

static WORD_BE_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_BE_CHILDREN),
    value: None,
};

static WORD_BE_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    Some(&WORD_BEA_NODE),
    None,
    Some(&WORD_BEC_NODE),
    Some(&WORD_BED_NODE),
    Some(&WORD_BEE_NODE),
    Some(&WORD_BEF_NODE),
    Some(&WORD_BEG_NODE),
    Some(&WORD_BEH_NODE),
    None,
    Some(&WORD_BEJ_NODE),
    None,
    Some(&WORD_BEL_NODE),
    Some(&WORD_BEM_NODE),
    Some(&WORD_BEN_NODE),
    Some(&WORD_BEO_NODE),
    None,
    None,
    Some(&WORD_BER_NODE),
    Some(&WORD_BES_NODE),
    Some(&WORD_BET_NODE),
    Some(&WORD_BEU_NODE),
    None,
    Some(&WORD_BEW_NODE),
    None,
    Some(&WORD_BEY_NODE),
    None,
];

static WORD_BEY_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_BEY_CHILDREN),
    value: None,
};

pub static WORD_BEY_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("oncye")],
    values: &[&["beyonce"]],
    range: 5..=5,
};

static WORD_BEW_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_BEW_CHILDREN),
    value: None,
};

pub static WORD_BEW_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("een"),
        dictgen::InsensitiveStr::Ascii("teen"),
    ],
    values: &[&["between"], &["between"]],
    range: 3..=4,
};

static WORD_BEU_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_BEU_CHILDREN),
    value: None,
};

pub static WORD_BEU_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("atiful"),
        dictgen::InsensitiveStr::Ascii("atifully"),
        dictgen::InsensitiveStr::Ascii("case"),
        dictgen::InsensitiveStr::Ascii("raucracy"),
        dictgen::InsensitiveStr::Ascii("raucratic"),
        dictgen::InsensitiveStr::Ascii("raucrats"),
    ],
    values: &[
        &["beautiful"],
        &["beautifully"],
        &["becuase"],
        &["bureaucracy"],
        &["bureaucratic"],
        &["bureaucrats"],
    ],
    range: 4..=9,
};

static WORD_BET_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_BET_CHILDREN),
    value: None,
};

pub static WORD_BET_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ales"),
        dictgen::InsensitiveStr::Ascii("een"),
        dictgen::InsensitiveStr::Ascii("ehsda"),
        dictgen::InsensitiveStr::Ascii("eshda"),
        dictgen::InsensitiveStr::Ascii("hdesa"),
        dictgen::InsensitiveStr::Ascii("hedsa"),
        dictgen::InsensitiveStr::Ascii("hesa"),
        dictgen::InsensitiveStr::Ascii("hseda"),
        dictgen::InsensitiveStr::Ascii("rayd"),
        dictgen::InsensitiveStr::Ascii("rayeado"),
        dictgen::InsensitiveStr::Ascii("wen"),
    ],
    values: &[
        &["beatles"],
        &["between"],
        &["bethesda"],
        &["bethesda"],
        &["bethesda"],
        &["bethesda"],
        &["bethesda"],
        &["bethesda"],
        &["betrayed"],
        &["betrayed"],
        &["between"],
    ],
    range: 3..=7,
};

static WORD_BES_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_BES_CHILDREN),
    value: None,
};

pub static WORD_BES_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("eige"),
        dictgen::InsensitiveStr::Ascii("eiged"),
        dictgen::InsensitiveStr::Ascii("eiging"),
        dictgen::InsensitiveStr::Ascii("itality"),
        dictgen::InsensitiveStr::Ascii("taility"),
        dictgen::InsensitiveStr::Ascii("teality"),
        dictgen::InsensitiveStr::Ascii("tialiy"),
        dictgen::InsensitiveStr::Ascii("tiallity"),
    ],
    values: &[
        &["besiege"],
        &["besieged"],
        &["besieging"],
        &["bestiality"],
        &["bestiality"],
        &["bestiality"],
        &["bestiality"],
        &["bestiality"],
    ],
    range: 4..=8,
};

static WORD_BER_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_BER_CHILDREN),
    value: None,
};

pub static WORD_BER_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("aded"),
        dictgen::InsensitiveStr::Ascii("ekley"),
        dictgen::InsensitiveStr::Ascii("gamont"),
        dictgen::InsensitiveStr::Ascii("kelely"),
        dictgen::InsensitiveStr::Ascii("nouilli"),
        dictgen::InsensitiveStr::Ascii("sekr"),
        dictgen::InsensitiveStr::Ascii("sekrer"),
        dictgen::InsensitiveStr::Ascii("serkr"),
        dictgen::InsensitiveStr::Ascii("skerer"),
    ],
    values: &[
        &["bearded"],
        &["berkeley"],
        &["bergamot"],
        &["berkeley"],
        &["bernoulli"],
        &["berserk"],
        &["berserker"],
        &["berserker"],
        &["berserker"],
    ],
    range: 4..=7,
};

static WORD_BEO_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_BEO_CHILDREN),
    value: None,
};

pub static WORD_BEO_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("ynce")],
    values: &[&["beyonce"]],
    range: 4..=4,
};

static WORD_BEN_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_BEN_CHILDREN),
    value: None,
};

pub static WORD_BEN_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("agls"),
        dictgen::InsensitiveStr::Ascii("chamrk"),
        dictgen::InsensitiveStr::Ascii("chamrks"),
        dictgen::InsensitiveStr::Ascii("chmakrs"),
        dictgen::InsensitiveStr::Ascii("chmars"),
        dictgen::InsensitiveStr::Ascii("ckmarks"),
        dictgen::InsensitiveStr::Ascii("edicat"),
        dictgen::InsensitiveStr::Ascii("edickt"),
        dictgen::InsensitiveStr::Ascii("edit"),
        dictgen::InsensitiveStr::Ascii("efecial"),
        dictgen::InsensitiveStr::Ascii("efica"),
        dictgen::InsensitiveStr::Ascii("eficary"),
        dictgen::InsensitiveStr::Ascii("eficiul"),
        dictgen::InsensitiveStr::Ascii("efitial"),
        dictgen::InsensitiveStr::Ascii("efitical"),
        dictgen::InsensitiveStr::Ascii("eifical"),
        dictgen::InsensitiveStr::Ascii("elovent"),
        dictgen::InsensitiveStr::Ascii("evalent"),
        dictgen::InsensitiveStr::Ascii("evelant"),
        dictgen::InsensitiveStr::Ascii("evelent"),
        dictgen::InsensitiveStr::Ascii("evelont"),
        dictgen::InsensitiveStr::Ascii("evloent"),
        dictgen::InsensitiveStr::Ascii("evolant"),
        dictgen::InsensitiveStr::Ascii("gahzi"),
        dictgen::InsensitiveStr::Ascii("galas"),
        dictgen::InsensitiveStr::Ascii("galos"),
        dictgen::InsensitiveStr::Ascii("gazhi"),
        dictgen::InsensitiveStr::Ascii("ghai"),
        dictgen::InsensitiveStr::Ascii("ghazhi"),
        dictgen::InsensitiveStr::Ascii("ghazzi"),
        dictgen::InsensitiveStr::Ascii("ghzai"),
        dictgen::InsensitiveStr::Ascii("glas"),
        dictgen::InsensitiveStr::Ascii("gzhai"),
        dictgen::InsensitiveStr::Ascii("hgazi"),
        dictgen::InsensitiveStr::Ascii("idect"),
        dictgen::InsensitiveStr::Ascii("ificial"),
        dictgen::InsensitiveStr::Ascii("ifit"),
        dictgen::InsensitiveStr::Ascii("ifits"),
        dictgen::InsensitiveStr::Ascii("ovelent"),
    ],
    values: &[
        &["bengals"],
        &["benchmark"],
        &["benchmarks"],
        &["benchmarks"],
        &["benchmarks"],
        &["benchmarks"],
        &["benedict"],
        &["benedict"],
        &["benedict"],
        &["beneficial"],
        &["beneficial"],
        &["beneficiary"],
        &["beneficial"],
        &["beneficial"],
        &["beneficial"],
        &["beneficial"],
        &["benevolent"],
        &["benevolent"],
        &["benevolent"],
        &["benevolent"],
        &["benevolent"],
        &["benevolent"],
        &["benevolent"],
        &["benghazi"],
        &["bengals"],
        &["bengals"],
        &["benghazi"],
        &["benghazi"],
        &["benghazi"],
        &["benghazi"],
        &["benghazi"],
        &["bengals"],
        &["benghazi"],
        &["benghazi"],
        &["benedict"],
        &["beneficial"],
        &["benefit"],
        &["benefits"],
        &["benevolent"],
    ],
    range: 4..=8,
};

static WORD_BEM_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_BEM_CHILDREN),
    value: None,
};

pub static WORD_BEM_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("usemnt")],
    values: &[&["bemusement"]],
    range: 6..=6,
};

static WORD_BEL_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_BEL_CHILDREN),
    value: None,
};

pub static WORD_BEL_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("eagured"),
        dictgen::InsensitiveStr::Ascii("eif"),
        dictgen::InsensitiveStr::Ascii("eifs"),
        dictgen::InsensitiveStr::Ascii("eivable"),
        dictgen::InsensitiveStr::Ascii("eive"),
        dictgen::InsensitiveStr::Ascii("eived"),
        dictgen::InsensitiveStr::Ascii("eiver"),
        dictgen::InsensitiveStr::Ascii("eives"),
        dictgen::InsensitiveStr::Ascii("eiving"),
        dictgen::InsensitiveStr::Ascii("gain"),
        dictgen::InsensitiveStr::Ascii("guim"),
        dictgen::InsensitiveStr::Ascii("iavable"),
        dictgen::InsensitiveStr::Ascii("iebable"),
        dictgen::InsensitiveStr::Ascii("iefes"),
        dictgen::InsensitiveStr::Ascii("ieveble"),
        dictgen::InsensitiveStr::Ascii("ievr"),
        dictgen::InsensitiveStr::Ascii("ievs"),
        dictgen::InsensitiveStr::Ascii("ifes"),
        dictgen::InsensitiveStr::Ascii("igan"),
        dictgen::InsensitiveStr::Ascii("igum"),
        dictgen::InsensitiveStr::Ascii("ittleing"),
        dictgen::InsensitiveStr::Ascii("ittlling"),
        dictgen::InsensitiveStr::Ascii("ive"),
        dictgen::InsensitiveStr::Ascii("iveable"),
        dictgen::InsensitiveStr::Ascii("ived"),
        dictgen::InsensitiveStr::Ascii("iveing"),
        dictgen::InsensitiveStr::Ascii("ives"),
        dictgen::InsensitiveStr::Ascii("ligerant"),
        dictgen::InsensitiveStr::Ascii("ligerante"),
        dictgen::InsensitiveStr::Ascii("ligirent"),
        dictgen::InsensitiveStr::Ascii("lweather"),
        dictgen::InsensitiveStr::Ascii("ssings"),
    ],
    values: &[
        &["beleaguered"],
        &["belief"],
        &["beliefs"],
        &["believable"],
        &["believe"],
        &["believed"],
        &["believer"],
        &["believes"],
        &["believing"],
        &["belgian"],
        &["belgium"],
        &["believable"],
        &["believable"],
        &["beliefs"],
        &["believable"],
        &["believer"],
        &["believes"],
        &["beliefs"],
        &["belgian"],
        &["belgium"],
        &["belittling"],
        &["belittling"],
        &["believe"],
        &["believable"],
        &["believed"],
        &["believing"],
        &["believes"],
        &["belligerent"],
        &["belligerent"],
        &["belligerent"],
        &["bellwether"],
        &["blessings"],
    ],
    range: 3..=9,
};

static WORD_BEJ_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_BEJ_CHILDREN),
    value: None,
};

pub static WORD_BEJ_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("iing")],
    values: &[&["beijing"]],
    range: 4..=4,
};

static WORD_BEH_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_BEH_CHILDREN),
    value: None,
};

pub static WORD_BEH_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("aivor"),
        dictgen::InsensitiveStr::Ascii("aivors"),
        dictgen::InsensitiveStr::Ascii("aivour"),
        dictgen::InsensitiveStr::Ascii("aivours"),
        dictgen::InsensitiveStr::Ascii("aviorial"),
        dictgen::InsensitiveStr::Ascii("aviorly"),
        dictgen::InsensitiveStr::Ascii("avios"),
        dictgen::InsensitiveStr::Ascii("avoir"),
        dictgen::InsensitiveStr::Ascii("avoiral"),
        dictgen::InsensitiveStr::Ascii("avoirs"),
        dictgen::InsensitiveStr::Ascii("avoiur"),
        dictgen::InsensitiveStr::Ascii("avoiurs"),
        dictgen::InsensitiveStr::Ascii("avorial"),
        dictgen::InsensitiveStr::Ascii("avour"),
        dictgen::InsensitiveStr::Ascii("avoural"),
        dictgen::InsensitiveStr::Ascii("ngazi"),
        dictgen::InsensitiveStr::Ascii("tesda"),
        dictgen::InsensitiveStr::Ascii("vaiour"),
        dictgen::InsensitiveStr::Ascii("vaiours"),
    ],
    values: &[
        &["behavior"],
        &["behaviors"],
        &["behaviour"],
        &["behaviours"],
        &["behavioral"],
        &["behavioral"],
        &["behaviors"],
        &["behavior"],
        &["behavioral"],
        &["behaviors"],
        &["behaviour"],
        &["behaviours"],
        &["behavioral"],
        &["behaviour"],
        &["behavioural"],
        &["benghazi"],
        &["bethesda"],
        &["behaviour"],
        &["behaviours"],
    ],
    range: 5..=8,
};

static WORD_BEG_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_BEG_CHILDREN),
    value: None,
};

pub static WORD_BEG_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("gin"),
        dictgen::InsensitiveStr::Ascii("giner"),
        dictgen::InsensitiveStr::Ascii("giners"),
        dictgen::InsensitiveStr::Ascii("ginig"),
        dictgen::InsensitiveStr::Ascii("gining"),
        dictgen::InsensitiveStr::Ascii("ginings"),
        dictgen::InsensitiveStr::Ascii("ginng"),
        dictgen::InsensitiveStr::Ascii("gins"),
        dictgen::InsensitiveStr::Ascii("ining"),
        dictgen::InsensitiveStr::Ascii("ininng"),
        dictgen::InsensitiveStr::Ascii("ininngs"),
        dictgen::InsensitiveStr::Ascii("innig"),
        dictgen::InsensitiveStr::Ascii("inninng"),
        dictgen::InsensitiveStr::Ascii("innins"),
        dictgen::InsensitiveStr::Ascii("lian"),
        dictgen::InsensitiveStr::Ascii("lium"),
        dictgen::InsensitiveStr::Ascii("nals"),
    ],
    values: &[
        &["begin"],
        &["beginner"],
        &["beginners"],
        &["begging"],
        &["beginning"],
        &["beginnings"],
        &["begging"],
        &["begins"],
        &["beginning"],
        &["beginning"],
        &["beginnings"],
        &["beginning"],
        &["beginnings"],
        &["beginnings"],
        &["belgian"],
        &["belgium"],
        &["bengals"],
    ],
    range: 3..=7,
};

static WORD_BEF_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_BEF_CHILDREN),
    value: None,
};

pub static WORD_BEF_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("irend"),
        dictgen::InsensitiveStr::Ascii("oer"),
        dictgen::InsensitiveStr::Ascii("reind"),
        dictgen::InsensitiveStr::Ascii("ried"),
    ],
    values: &[&["befriend"], &["before"], &["befriend"], &["befriend"]],
    range: 3..=5,
};

static WORD_BEE_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_BEE_CHILDREN),
    value: None,
};

pub static WORD_BEE_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("htoven"),
        dictgen::InsensitiveStr::Ascii("ing"),
        dictgen::InsensitiveStr::Ascii("thoveen"),
    ],
    values: &[&["beethoven"], &["being"], &["beethoven"]],
    range: 3..=7,
};

static WORD_BED_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_BED_CHILDREN),
    value: None,
};

pub static WORD_BED_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("ore")],
    values: &[&["before"]],
    range: 3..=3,
};

static WORD_BEC_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_BEC_CHILDREN),
    value: None,
};

pub static WORD_BEC_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("amae"),
        dictgen::InsensitiveStr::Ascii("ames"),
        dictgen::InsensitiveStr::Ascii("asue"),
        dictgen::InsensitiveStr::Ascii("cause"),
        dictgen::InsensitiveStr::Ascii("nhmark"),
        dictgen::InsensitiveStr::Ascii("nhmarks"),
        dictgen::InsensitiveStr::Ascii("omeing"),
        dictgen::InsensitiveStr::Ascii("omming"),
        dictgen::InsensitiveStr::Ascii("ouse"),
        dictgen::InsensitiveStr::Ascii("uaes"),
        dictgen::InsensitiveStr::Ascii("uase"),
        dictgen::InsensitiveStr::Ascii("uasse"),
        dictgen::InsensitiveStr::Ascii("usae"),
    ],
    values: &[
        &["became"],
        &["becomes"],
        &["because"],
        &["because"],
        &["benchmark"],
        &["benchmarks"],
        &["becoming"],
        &["becoming"],
        &["because"],
        &["becuase"],
        &["because"],
        &["becuase"],
        &["becuase"],
    ],
    range: 4..=7,
};

static WORD_BEA_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_BEA_CHILDREN),
    value: None,
};

pub static WORD_BEA_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("chead"),
        dictgen::InsensitiveStr::Ascii("cuoup"),
        dictgen::InsensitiveStr::Ascii("cuse"),
        dictgen::InsensitiveStr::Ascii("hviour"),
        dictgen::InsensitiveStr::Ascii("hviours"),
        dictgen::InsensitiveStr::Ascii("ltes"),
        dictgen::InsensitiveStr::Ascii("rdude"),
        dictgen::InsensitiveStr::Ascii("slty"),
        dictgen::InsensitiveStr::Ascii("stiality"),
        dictgen::InsensitiveStr::Ascii("stley"),
        dictgen::InsensitiveStr::Ascii("tels"),
        dictgen::InsensitiveStr::Ascii("tiful"),
        dictgen::InsensitiveStr::Ascii("ucop"),
        dictgen::InsensitiveStr::Ascii("uitful"),
        dictgen::InsensitiveStr::Ascii("urocracy"),
        dictgen::InsensitiveStr::Ascii("urocratic"),
        dictgen::InsensitiveStr::Ascii("utifullly"),
        dictgen::InsensitiveStr::Ascii("utifuly"),
        dictgen::InsensitiveStr::Ascii("utifyl"),
        dictgen::InsensitiveStr::Ascii("utilful"),
        dictgen::InsensitiveStr::Ascii("utyfull"),
        dictgen::InsensitiveStr::Ascii("utyfully"),
    ],
    values: &[
        &["beachhead"],
        &["beaucoup"],
        &["because"],
        &["behaviour"],
        &["behaviours"],
        &["beatles"],
        &["bearded"],
        &["beastly"],
        &["bestiality"],
        &["beastly"],
        &["beatles"],
        &["beautiful"],
        &["beaucoup"],
        &["beautiful"],
        &["bureaucracy"],
        &["bureaucratic"],
        &["beautifully"],
        &["beautifully"],
        &["beautifully"],
        &["beautifully"],
        &["beautiful"],
        &["beautifully"],
    ],
    range: 4..=9,
};

static WORD_BC_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_BC_CHILDREN),
    value: None,
};

pub static WORD_BC_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ak"),
        dictgen::InsensitiveStr::Ascii("euase"),
    ],
    values: &[&["back"], &["becuase"]],
    range: 2..=5,
};

static WORD_BA_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_BA_CHILDREN),
    value: None,
};

static WORD_BA_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    None,
    Some(&WORD_BAB_NODE),
    Some(&WORD_BAC_NODE),
    Some(&WORD_BAD_NODE),
    None,
    None,
    None,
    None,
    Some(&WORD_BAI_NODE),
    None,
    Some(&WORD_BAK_NODE),
    Some(&WORD_BAL_NODE),
    None,
    Some(&WORD_BAN_NODE),
    Some(&WORD_BAO_NODE),
    Some(&WORD_BAP_NODE),
    None,
    Some(&WORD_BAR_NODE),
    Some(&WORD_BAS_NODE),
    Some(&WORD_BAT_NODE),
    None,
    None,
    None,
    None,
    Some(&WORD_BAY_NODE),
    None,
];

static WORD_BAY_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_BAY_CHILDREN),
    value: None,
};

pub static WORD_BAY_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("blon"),
        dictgen::InsensitiveStr::Ascii("noet"),
        dictgen::InsensitiveStr::Ascii("oent"),
        dictgen::InsensitiveStr::Ascii("onent"),
    ],
    values: &[&["babylon"], &["bayonet"], &["bayonet"], &["bayonet"]],
    range: 4..=5,
};

static WORD_BAT_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_BAT_CHILDREN),
    value: None,
};

pub static WORD_BAT_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("hrom"),
        dictgen::InsensitiveStr::Ascii("hrooom"),
        dictgen::InsensitiveStr::Ascii("istia"),
        dictgen::InsensitiveStr::Ascii("itsa"),
        dictgen::InsensitiveStr::Ascii("limore"),
        dictgen::InsensitiveStr::Ascii("sita"),
        dictgen::InsensitiveStr::Ascii("tailon"),
        dictgen::InsensitiveStr::Ascii("talin"),
        dictgen::InsensitiveStr::Ascii("telfield"),
        dictgen::InsensitiveStr::Ascii("telfront"),
        dictgen::InsensitiveStr::Ascii("telship"),
        dictgen::InsensitiveStr::Ascii("telships"),
        dictgen::InsensitiveStr::Ascii("telstar"),
        dictgen::InsensitiveStr::Ascii("tlaion"),
        dictgen::InsensitiveStr::Ascii("tlearts"),
        dictgen::InsensitiveStr::Ascii("tlechip"),
        dictgen::InsensitiveStr::Ascii("tlefeild"),
        dictgen::InsensitiveStr::Ascii("tlefied"),
        dictgen::InsensitiveStr::Ascii("tlefiend"),
        dictgen::InsensitiveStr::Ascii("tlefiled"),
        dictgen::InsensitiveStr::Ascii("tlefont"),
        dictgen::InsensitiveStr::Ascii("tlefornt"),
        dictgen::InsensitiveStr::Ascii("tlehips"),
        dictgen::InsensitiveStr::Ascii("tlehsips"),
        dictgen::InsensitiveStr::Ascii("tlesaur"),
        dictgen::InsensitiveStr::Ascii("tlescar"),
        dictgen::InsensitiveStr::Ascii("tleshop"),
        dictgen::InsensitiveStr::Ascii("tlestsr"),
    ],
    values: &[
        &["bathroom"],
        &["bathroom"],
        &["batista"],
        &["batista"],
        &["baltimore"],
        &["batista"],
        &["battalion"],
        &["battalion"],
        &["battlefield"],
        &["battlefront"],
        &["battleship"],
        &["battleship"],
        &["battlestar"],
        &["battalion"],
        &["battlestar"],
        &["battleship"],
        &["battlefield"],
        &["battlefield"],
        &["battlefield"],
        &["battlefield"],
        &["battlefront"],
        &["battlefront"],
        &["battleship"],
        &["battleship"],
        &["battlestar"],
        &["battlestar"],
        &["battleship"],
        &["battlestar"],
    ],
    range: 4..=8,
};

static WORD_BAS_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_BAS_CHILDREN),
    value: None,
};

pub static WORD_BAS_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("cially"),
        dictgen::InsensitiveStr::Ascii("cily"),
        dictgen::InsensitiveStr::Ascii("ektball"),
        dictgen::InsensitiveStr::Ascii("icaly"),
        dictgen::InsensitiveStr::Ascii("iclay"),
        dictgen::InsensitiveStr::Ascii("icley"),
        dictgen::InsensitiveStr::Ascii("icliy"),
        dictgen::InsensitiveStr::Ascii("icly"),
        dictgen::InsensitiveStr::Ascii("ilcy"),
        dictgen::InsensitiveStr::Ascii("iton"),
        dictgen::InsensitiveStr::Ascii("kteball"),
        dictgen::InsensitiveStr::Ascii("nhee"),
        dictgen::InsensitiveStr::Ascii("tane"),
        dictgen::InsensitiveStr::Ascii("tardes"),
        dictgen::InsensitiveStr::Ascii("tardos"),
        dictgen::InsensitiveStr::Ascii("tardous"),
        dictgen::InsensitiveStr::Ascii("tardus"),
        dictgen::InsensitiveStr::Ascii("tars"),
        dictgen::InsensitiveStr::Ascii("tino"),
    ],
    values: &[
        &["basically"],
        &["basicly"],
        &["basketball"],
        &["basically"],
        &["basicly"],
        &["basicly"],
        &["basicly"],
        &["basically"],
        &["basicly"],
        &["bastion"],
        &["basketball"],
        &["banshee"],
        &["bastante"],
        &["bastards"],
        &["bastards"],
        &["bastards"],
        &["bastards"],
        &["bastards"],
        &["bastion"],
    ],
    range: 4..=7,
};

static WORD_BAR_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_BAR_CHILDREN),
    value: None,
};

pub static WORD_BAR_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("abrian"),
        dictgen::InsensitiveStr::Ascii("abrians"),
        dictgen::InsensitiveStr::Ascii("abric"),
        dictgen::InsensitiveStr::Ascii("agin"),
        dictgen::InsensitiveStr::Ascii("barain"),
        dictgen::InsensitiveStr::Ascii("bariens"),
        dictgen::InsensitiveStr::Ascii("barin"),
        dictgen::InsensitiveStr::Ascii("barina"),
        dictgen::InsensitiveStr::Ascii("barions"),
        dictgen::InsensitiveStr::Ascii("baris"),
        dictgen::InsensitiveStr::Ascii("barisch"),
        dictgen::InsensitiveStr::Ascii("berians"),
        dictgen::InsensitiveStr::Ascii("celets"),
        dictgen::InsensitiveStr::Ascii("celoneta"),
        dictgen::InsensitiveStr::Ascii("cleona"),
        dictgen::InsensitiveStr::Ascii("dford"),
        dictgen::InsensitiveStr::Ascii("eclona"),
        dictgen::InsensitiveStr::Ascii("gaing"),
        dictgen::InsensitiveStr::Ascii("gainning"),
        dictgen::InsensitiveStr::Ascii("gani"),
        dictgen::InsensitiveStr::Ascii("gian"),
        dictgen::InsensitiveStr::Ascii("gianing"),
        dictgen::InsensitiveStr::Ascii("iner"),
        dictgen::InsensitiveStr::Ascii("istia"),
        dictgen::InsensitiveStr::Ascii("lkey"),
        dictgen::InsensitiveStr::Ascii("rackus"),
        dictgen::InsensitiveStr::Ascii("racs"),
        dictgen::InsensitiveStr::Ascii("rakcs"),
        dictgen::InsensitiveStr::Ascii("rells"),
        dictgen::InsensitiveStr::Ascii("rles"),
        dictgen::InsensitiveStr::Ascii("sita"),
        dictgen::InsensitiveStr::Ascii("tendars"),
        dictgen::InsensitiveStr::Ascii("very"),
    ],
    values: &[
        &["barbarian"],
        &["barbarians"],
        &["barbaric"],
        &["bargain"],
        &["barbarian"],
        &["barbarians"],
        &["barbarian"],
        &["barbarian"],
        &["barbarians"],
        &["barbarians"],
        &["barbaric"],
        &["barbarians"],
        &["bracelets"],
        &["barcelona"],
        &["barcelona"],
        &["bradford"],
        &["barcelona"],
        &["bargaining"],
        &["bargaining"],
        &["bargain"],
        &["bargain"],
        &["bargaining"],
        &["brainer"],
        &["barista"],
        &["barkley"],
        &["barracks"],
        &["barracks"],
        &["barracks"],
        &["barrels"],
        &["barrels"],
        &["barista"],
        &["bartenders"],
        &["bravery"],
    ],
    range: 4..=8,
};

static WORD_BAP_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_BAP_CHILDREN),
    value: None,
};

pub static WORD_BAP_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("tims"),
        dictgen::InsensitiveStr::Ascii("tisim"),
        dictgen::InsensitiveStr::Ascii("tsim"),
    ],
    values: &[&["baptism"], &["baptism"], &["baptism"]],
    range: 4..=5,
};

static WORD_BAO_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_BAO_CHILDREN),
    value: None,
};

pub static WORD_BAO_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("rdwalk"),
        dictgen::InsensitiveStr::Ascii("ut"),
        dictgen::InsensitiveStr::Ascii("ynet"),
    ],
    values: &[&["boardwalk"], &["about"], &["bayonet"]],
    range: 2..=6,
};

static WORD_BAN_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_BAN_CHILDREN),
    value: None,
};

pub static WORD_BAN_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("annas"),
        dictgen::InsensitiveStr::Ascii("ditas"),
        dictgen::InsensitiveStr::Ascii("diwdth"),
        dictgen::InsensitiveStr::Ascii("dwagoon"),
        dictgen::InsensitiveStr::Ascii("dwdith"),
        dictgen::InsensitiveStr::Ascii("dwidht"),
        dictgen::InsensitiveStr::Ascii("dwitdh"),
        dictgen::InsensitiveStr::Ascii("dwith"),
        dictgen::InsensitiveStr::Ascii("galdesh"),
        dictgen::InsensitiveStr::Ascii("galdeshi"),
        dictgen::InsensitiveStr::Ascii("gkock"),
        dictgen::InsensitiveStr::Ascii("gladash"),
        dictgen::InsensitiveStr::Ascii("gladesch"),
        dictgen::InsensitiveStr::Ascii("gledash"),
        dictgen::InsensitiveStr::Ascii("gledesh"),
        dictgen::InsensitiveStr::Ascii("glidesh"),
        dictgen::InsensitiveStr::Ascii("hsee"),
        dictgen::InsensitiveStr::Ascii("kgok"),
        dictgen::InsensitiveStr::Ascii("krupcty"),
        dictgen::InsensitiveStr::Ascii("krupcy"),
        dictgen::InsensitiveStr::Ascii("kruptsy"),
        dictgen::InsensitiveStr::Ascii("krupty"),
        dictgen::InsensitiveStr::Ascii("krutpcy"),
        dictgen::InsensitiveStr::Ascii("ruptcy"),
    ],
    values: &[
        &["bananas"],
        &["bandits"],
        &["bandwidth"],
        &["bandwagon"],
        &["bandwidth"],
        &["bandwidth"],
        &["bandwidth"],
        &["bandwidth"],
        &["bangladesh"],
        &["bangladesh"],
        &["bangkok"],
        &["bangladesh"],
        &["bangladesh"],
        &["bangladesh"],
        &["bangladesh"],
        &["bangladesh"],
        &["banshee"],
        &["bangkok"],
        &["bankruptcy"],
        &["bankruptcy"],
        &["bankruptcy"],
        &["bankruptcy"],
        &["bankruptcy"],
        &["bankruptcy"],
    ],
    range: 4..=8,
};

static WORD_BAL_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_BAL_CHILDREN),
    value: None,
};

pub static WORD_BAL_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("anceada"),
        dictgen::InsensitiveStr::Ascii("anceado"),
        dictgen::InsensitiveStr::Ascii("anse"),
        dictgen::InsensitiveStr::Ascii("canes"),
        dictgen::InsensitiveStr::Ascii("ckberry"),
        dictgen::InsensitiveStr::Ascii("cked"),
        dictgen::InsensitiveStr::Ascii("ckhawks"),
        dictgen::InsensitiveStr::Ascii("ckjack"),
        dictgen::InsensitiveStr::Ascii("cklist"),
        dictgen::InsensitiveStr::Ascii("cksmith"),
        dictgen::InsensitiveStr::Ascii("coney"),
        dictgen::InsensitiveStr::Ascii("conny"),
        dictgen::InsensitiveStr::Ascii("itmore"),
        dictgen::InsensitiveStr::Ascii("lisitc"),
        dictgen::InsensitiveStr::Ascii("listc"),
        dictgen::InsensitiveStr::Ascii("lsitic"),
        dictgen::InsensitiveStr::Ascii("naced"),
        dictgen::InsensitiveStr::Ascii("sphemy"),
    ],
    values: &[
        &["balanced"],
        &["balanced"],
        &["balances"],
        &["balances"],
        &["blackberry"],
        &["blacked"],
        &["blackhawks"],
        &["blackjack"],
        &["blacklist"],
        &["blacksmith"],
        &["balcony"],
        &["balcony"],
        &["baltimore"],
        &["ballistic"],
        &["ballistic"],
        &["ballistic"],
        &["balanced"],
        &["blasphemy"],
    ],
    range: 4..=7,
};

static WORD_BAK_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_BAK_CHILDREN),
    value: None,
};

pub static WORD_BAK_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("c"),
        dictgen::InsensitiveStr::Ascii("cers"),
        dictgen::InsensitiveStr::Ascii("setball"),
    ],
    values: &[&["back"], &["backers"], &["basketball"]],
    range: 1..=7,
};

static WORD_BAI_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_BAI_CHILDREN),
    value: None,
};

pub static WORD_BAI_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("scly")],
    values: &[&["basicly"]],
    range: 4..=4,
};

static WORD_BAD_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_BAD_CHILDREN),
    value: None,
};

pub static WORD_BAD_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("nits"),
        dictgen::InsensitiveStr::Ascii("nwagon"),
        dictgen::InsensitiveStr::Ascii("nwidth"),
    ],
    values: &[&["bandits"], &["bandwagon"], &["bandwidth"]],
    range: 4..=6,
};

static WORD_BAC_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_BAC_CHILDREN),
    value: None,
};

pub static WORD_BAC_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("eause"),
        dictgen::InsensitiveStr::Ascii("ehlor"),
        dictgen::InsensitiveStr::Ascii("ehlors"),
        dictgen::InsensitiveStr::Ascii("helores"),
        dictgen::InsensitiveStr::Ascii("helour"),
        dictgen::InsensitiveStr::Ascii("hleor"),
        dictgen::InsensitiveStr::Ascii("hleors"),
        dictgen::InsensitiveStr::Ascii("holer"),
        dictgen::InsensitiveStr::Ascii("holers"),
        dictgen::InsensitiveStr::Ascii("kbacking"),
        dictgen::InsensitiveStr::Ascii("kdooor"),
        dictgen::InsensitiveStr::Ascii("kdor"),
        dictgen::InsensitiveStr::Ascii("keast"),
        dictgen::InsensitiveStr::Ascii("kerds"),
        dictgen::InsensitiveStr::Ascii("kfeild"),
        dictgen::InsensitiveStr::Ascii("kfied"),
        dictgen::InsensitiveStr::Ascii("kfiled"),
        dictgen::InsensitiveStr::Ascii("kgorund"),
        dictgen::InsensitiveStr::Ascii("kgorunds"),
        dictgen::InsensitiveStr::Ascii("kgroud"),
        dictgen::InsensitiveStr::Ascii("kgroudn"),
        dictgen::InsensitiveStr::Ascii("kgrouds"),
        dictgen::InsensitiveStr::Ascii("kgrouns"),
        dictgen::InsensitiveStr::Ascii("kgruond"),
        dictgen::InsensitiveStr::Ascii("khacking"),
        dictgen::InsensitiveStr::Ascii("kjacking"),
        dictgen::InsensitiveStr::Ascii("kpacing"),
        dictgen::InsensitiveStr::Ascii("kpackng"),
        dictgen::InsensitiveStr::Ascii("kpacs"),
        dictgen::InsensitiveStr::Ascii("kpakcs"),
        dictgen::InsensitiveStr::Ascii("krgound"),
        dictgen::InsensitiveStr::Ascii("krounds"),
        dictgen::InsensitiveStr::Ascii("ksta"),
        dictgen::InsensitiveStr::Ascii("ktacking"),
        dictgen::InsensitiveStr::Ascii("lony"),
    ],
    values: &[
        &["because"],
        &["bachelor"],
        &["bachelors"],
        &["bachelors"],
        &["bachelor"],
        &["bachelor"],
        &["bachelors"],
        &["bachelor"],
        &["bachelors"],
        &["backpacking"],
        &["backdoor"],
        &["backdoor"],
        &["backseat"],
        &["backers"],
        &["backfield"],
        &["backfield"],
        &["backfield"],
        &["background"],
        &["backgrounds"],
        &["background"],
        &["backgrounds"],
        &["backgrounds"],
        &["backgrounds"],
        &["backgrounds"],
        &["backpacking"],
        &["backpacking"],
        &["backpacking"],
        &["backpacking"],
        &["backpacks"],
        &["backpacks"],
        &["backgrounds"],
        &["backgrounds"],
        &["backseat"],
        &["backpacking"],
        &["balcony"],
    ],
    range: 4..=8,
};

static WORD_BAB_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_BAB_CHILDREN),
    value: None,
};

pub static WORD_BAB_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("lyon"),
        dictgen::InsensitiveStr::Ascii("ysister"),
        dictgen::InsensitiveStr::Ascii("ysite"),
        dictgen::InsensitiveStr::Ascii("ysiting"),
        dictgen::InsensitiveStr::Ascii("ysittng"),
        dictgen::InsensitiveStr::Ascii("ysittter"),
        dictgen::InsensitiveStr::Ascii("ysittting"),
    ],
    values: &[
        &["babylon"],
        &["babysitter"],
        &["babysitter"],
        &["babysitting"],
        &["babysitting"],
        &["babysitter"],
        &["babysitting"],
    ],
    range: 4..=9,
};

static WORD_A_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_A_CHILDREN),
    value: None,
};

static WORD_A_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    None,
    Some(&WORD_AB_NODE),
    Some(&WORD_AC_NODE),
    Some(&WORD_AD_NODE),
    Some(&WORD_AE_NODE),
    Some(&WORD_AF_NODE),
    Some(&WORD_AG_NODE),
    Some(&WORD_AH_NODE),
    Some(&WORD_AI_NODE),
    Some(&WORD_AJ_NODE),
    Some(&WORD_AK_NODE),
    Some(&WORD_AL_NODE),
    Some(&WORD_AM_NODE),
    Some(&WORD_AN_NODE),
    None,
    Some(&WORD_AP_NODE),
    Some(&WORD_AQ_NODE),
    Some(&WORD_AR_NODE),
    Some(&WORD_AS_NODE),
    Some(&WORD_AT_NODE),
    Some(&WORD_AU_NODE),
    Some(&WORD_AV_NODE),
    Some(&WORD_AW_NODE),
    None,
    None,
    None,
];

static WORD_AW_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_AW_CHILDREN),
    value: None,
};

pub static WORD_AW_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("akend"),
        dictgen::InsensitiveStr::Ascii("akenend"),
        dictgen::InsensitiveStr::Ascii("ared"),
        dictgen::InsensitiveStr::Ascii("ekened"),
        dictgen::InsensitiveStr::Ascii("esomeley"),
        dictgen::InsensitiveStr::Ascii("esomelly"),
        dictgen::InsensitiveStr::Ascii("esomenss"),
        dictgen::InsensitiveStr::Ascii("esomey"),
        dictgen::InsensitiveStr::Ascii("esomley"),
        dictgen::InsensitiveStr::Ascii("esoneness"),
        dictgen::InsensitiveStr::Ascii("fullly"),
        dictgen::InsensitiveStr::Ascii("kawrdly"),
        dictgen::InsensitiveStr::Ascii("knowledged"),
        dictgen::InsensitiveStr::Ascii("knowledgement"),
        dictgen::InsensitiveStr::Ascii("knowledges"),
        dictgen::InsensitiveStr::Ascii("knowledging"),
        dictgen::InsensitiveStr::Ascii("kwardess"),
        dictgen::InsensitiveStr::Ascii("kwardsness"),
        dictgen::InsensitiveStr::Ascii("kwardy"),
        dictgen::InsensitiveStr::Ascii("nsered"),
        dictgen::InsensitiveStr::Ascii("nsering"),
        dictgen::InsensitiveStr::Ascii("ya"),
    ],
    values: &[
        &["awakened"],
        &["awakened"],
        &["awarded"],
        &["weakened"],
        &["awesomely"],
        &["awesomely"],
        &["awesomeness"],
        &["awesomely"],
        &["awesomely"],
        &["awesomeness"],
        &["awfully"],
        &["awkwardly"],
        &["acknowledged"],
        &["acknowledgement"],
        &["acknowledges"],
        &["acknowledging"],
        &["awkwardness"],
        &["awkwardness"],
        &["awkwardly"],
        &["answered"],
        &["answering"],
        &["away"],
    ],
    range: 2..=13,
};

static WORD_AV_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_AV_CHILDREN),
    value: None,
};

pub static WORD_AV_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("acodos"),
        dictgen::InsensitiveStr::Ascii("aiable"),
        dictgen::InsensitiveStr::Ascii("aialble"),
        dictgen::InsensitiveStr::Ascii("ailabale"),
        dictgen::InsensitiveStr::Ascii("ailabe"),
        dictgen::InsensitiveStr::Ascii("ailabiliy"),
        dictgen::InsensitiveStr::Ascii("ailabillity"),
        dictgen::InsensitiveStr::Ascii("ailabilty"),
        dictgen::InsensitiveStr::Ascii("ailablity"),
        dictgen::InsensitiveStr::Ascii("ailaible"),
        dictgen::InsensitiveStr::Ascii("ailble"),
        dictgen::InsensitiveStr::Ascii("ailiable"),
        dictgen::InsensitiveStr::Ascii("ailible"),
        dictgen::InsensitiveStr::Ascii("aition"),
        dictgen::InsensitiveStr::Ascii("alable"),
        dictgen::InsensitiveStr::Ascii("alaible"),
        dictgen::InsensitiveStr::Ascii("alance"),
        dictgen::InsensitiveStr::Ascii("aliability"),
        dictgen::InsensitiveStr::Ascii("aliable"),
        dictgen::InsensitiveStr::Ascii("ataras"),
        dictgen::InsensitiveStr::Ascii("atards"),
        dictgen::InsensitiveStr::Ascii("atares"),
        dictgen::InsensitiveStr::Ascii("ation"),
        dictgen::InsensitiveStr::Ascii("eradge"),
        dictgen::InsensitiveStr::Ascii("erageadi"),
        dictgen::InsensitiveStr::Ascii("erageed"),
        dictgen::InsensitiveStr::Ascii("erageifs"),
        dictgen::InsensitiveStr::Ascii("ergaed"),
        dictgen::InsensitiveStr::Ascii("ergaes"),
        dictgen::InsensitiveStr::Ascii("iaiton"),
        dictgen::InsensitiveStr::Ascii("ialability"),
        dictgen::InsensitiveStr::Ascii("ialable"),
        dictgen::InsensitiveStr::Ascii("ilable"),
        dictgen::InsensitiveStr::Ascii("negers"),
        dictgen::InsensitiveStr::Ascii("odacos"),
        dictgen::InsensitiveStr::Ascii("taars"),
    ],
    values: &[
        &["avocados"],
        &["available"],
        &["available"],
        &["available"],
        &["available"],
        &["availability"],
        &["availability"],
        &["availability"],
        &["availability"],
        &["available"],
        &["available"],
        &["available"],
        &["available"],
        &["aviation"],
        &["available"],
        &["available"],
        &["avalanche"],
        &["availability"],
        &["available"],
        &["avatars"],
        &["avatars"],
        &["avatars"],
        &["aviation"],
        &["averaged"],
        &["averaged"],
        &["averaged"],
        &["averages"],
        &["averaged"],
        &["averages"],
        &["aviation"],
        &["availability"],
        &["available"],
        &["available"],
        &["avengers"],
        &["avocados"],
        &["avatars"],
    ],
    range: 5..=11,
};

static WORD_AU_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_AU_CHILDREN),
    value: None,
};

static WORD_AU_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    None,
    None,
    Some(&WORD_AUC_NODE),
    Some(&WORD_AUD_NODE),
    None,
    None,
    None,
    Some(&WORD_AUH_NODE),
    Some(&WORD_AUI_NODE),
    None,
    None,
    None,
    None,
    None,
    Some(&WORD_AUO_NODE),
    None,
    None,
    Some(&WORD_AUR_NODE),
    Some(&WORD_AUS_NODE),
    Some(&WORD_AUT_NODE),
    None,
    None,
    None,
    Some(&WORD_AUX_NODE),
    None,
    None,
];

static WORD_AUX_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_AUX_CHILDREN),
    value: None,
};

pub static WORD_AUX_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ilary"),
        dictgen::InsensitiveStr::Ascii("illaries"),
        dictgen::InsensitiveStr::Ascii("illary"),
        dictgen::InsensitiveStr::Ascii("illiaries"),
        dictgen::InsensitiveStr::Ascii("illiary"),
    ],
    values: &[
        &["auxiliary"],
        &["auxiliaries"],
        &["auxiliary"],
        &["auxiliaries"],
        &["auxiliary"],
    ],
    range: 5..=9,
};

static WORD_AUT_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_AUT_CHILDREN),
    value: None,
};

static WORD_AUT_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    Some(&WORD_AUTH_NODE),
    Some(&WORD_AUTI_NODE),
    None,
    None,
    None,
    None,
    None,
    Some(&WORD_AUTO_NODE),
    None,
    None,
    None,
    Some(&WORD_AUTS_NODE),
    Some(&WORD_AUTT_NODE),
    None,
    None,
    None,
    None,
    None,
    None,
];

static WORD_AUTT_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_AUTT_CHILDREN),
    value: None,
};

pub static WORD_AUTT_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("oatack")],
    values: &[&["autoattack"]],
    range: 6..=6,
};

static WORD_AUTS_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_AUTS_CHILDREN),
    value: None,
};

pub static WORD_AUTS_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("itic")],
    values: &[&["autistic"]],
    range: 4..=4,
};

static WORD_AUTO_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_AUTO_CHILDREN),
    value: None,
};

pub static WORD_AUTO_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("attak"),
        dictgen::InsensitiveStr::Ascii("attaks"),
        dictgen::InsensitiveStr::Ascii("attk"),
        dictgen::InsensitiveStr::Ascii("atttack"),
        dictgen::InsensitiveStr::Ascii("chtonous"),
        dictgen::InsensitiveStr::Ascii("corect"),
        dictgen::InsensitiveStr::Ascii("coreect"),
        dictgen::InsensitiveStr::Ascii("corrct"),
        dictgen::InsensitiveStr::Ascii("correkt"),
        dictgen::InsensitiveStr::Ascii("corrent"),
        dictgen::InsensitiveStr::Ascii("corret"),
        dictgen::InsensitiveStr::Ascii("corrext"),
        dictgen::InsensitiveStr::Ascii("corrrect"),
        dictgen::InsensitiveStr::Ascii("ctonous"),
        dictgen::InsensitiveStr::Ascii("grah"),
        dictgen::InsensitiveStr::Ascii("grapgh"),
        dictgen::InsensitiveStr::Ascii("grpah"),
        dictgen::InsensitiveStr::Ascii("korrect"),
        dictgen::InsensitiveStr::Ascii("matice"),
        dictgen::InsensitiveStr::Ascii("maticly"),
        dictgen::InsensitiveStr::Ascii("matico"),
        dictgen::InsensitiveStr::Ascii("matied"),
        dictgen::InsensitiveStr::Ascii("matiek"),
        dictgen::InsensitiveStr::Ascii("mato"),
        dictgen::InsensitiveStr::Ascii("matonic"),
        dictgen::InsensitiveStr::Ascii("matron"),
        dictgen::InsensitiveStr::Ascii("matted"),
        dictgen::InsensitiveStr::Ascii("mibile"),
        dictgen::InsensitiveStr::Ascii("mitive"),
        dictgen::InsensitiveStr::Ascii("mobilies"),
        dictgen::InsensitiveStr::Ascii("moblie"),
        dictgen::InsensitiveStr::Ascii("moblies"),
        dictgen::InsensitiveStr::Ascii("moderador"),
        dictgen::InsensitiveStr::Ascii("moderater"),
        dictgen::InsensitiveStr::Ascii("modertor"),
        dictgen::InsensitiveStr::Ascii("modorator"),
        dictgen::InsensitiveStr::Ascii("momous"),
        dictgen::InsensitiveStr::Ascii("monomous"),
        dictgen::InsensitiveStr::Ascii("monous"),
        dictgen::InsensitiveStr::Ascii("mony"),
        dictgen::InsensitiveStr::Ascii("moterator"),
        dictgen::InsensitiveStr::Ascii("motice"),
        dictgen::InsensitiveStr::Ascii("motion"),
        dictgen::InsensitiveStr::Ascii("motize"),
        dictgen::InsensitiveStr::Ascii("motove"),
        dictgen::InsensitiveStr::Ascii("namous"),
        dictgen::InsensitiveStr::Ascii("nation"),
        dictgen::InsensitiveStr::Ascii("nimous"),
        dictgen::InsensitiveStr::Ascii("nomity"),
        dictgen::InsensitiveStr::Ascii("nomos"),
        dictgen::InsensitiveStr::Ascii("nonous"),
        dictgen::InsensitiveStr::Ascii("r"),
        dictgen::InsensitiveStr::Ascii("ritharian"),
        dictgen::InsensitiveStr::Ascii("rity"),
    ],
    values: &[
        &["autoattack"],
        &["autoattack"],
        &["autoattack"],
        &["autoattack"],
        &["autochthonous"],
        &["autocorrect"],
        &["autocorrect"],
        &["autocorrect"],
        &["autocorrect"],
        &["autocorrect"],
        &["autocorrect"],
        &["autocorrect"],
        &["autocorrect"],
        &["autochthonous"],
        &["autograph"],
        &["autograph"],
        &["autograph"],
        &["autocorrect"],
        &["automate"],
        &["automatically"],
        &["automation"],
        &["automate"],
        &["automate"],
        &["automation"],
        &["automation"],
        &["automation"],
        &["automate"],
        &["automobile"],
        &["automotive"],
        &["automobile"],
        &["automobile"],
        &["automobile"],
        &["automoderator"],
        &["automoderator"],
        &["automoderator"],
        &["automoderator"],
        &["autonomous"],
        &["autonomous"],
        &["autonomous"],
        &["autonomy"],
        &["automoderator"],
        &["automotive"],
        &["automation"],
        &["automotive"],
        &["automotive"],
        &["autonomous"],
        &["automation"],
        &["autonomous"],
        &["autonomy"],
        &["autonomous"],
        &["autonomous"],
        &["author"],
        &["authoritarian"],
        &["authority"],
    ],
    range: 1..=9,
};

static WORD_AUTI_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_AUTI_CHILDREN),
    value: None,
};

pub static WORD_AUTI_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("sitc"),
        dictgen::InsensitiveStr::Ascii("stc"),
        dictgen::InsensitiveStr::Ascii("stisch"),
    ],
    values: &[&["autistic"], &["autistic"], &["autistic"]],
    range: 3..=6,
};

static WORD_AUTH_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_AUTH_CHILDREN),
    value: None,
};

pub static WORD_AUTH_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("enitcation"),
        dictgen::InsensitiveStr::Ascii("enticaion"),
        dictgen::InsensitiveStr::Ascii("enticaiton"),
        dictgen::InsensitiveStr::Ascii("enticaton"),
        dictgen::InsensitiveStr::Ascii("enticiy"),
        dictgen::InsensitiveStr::Ascii("enticor"),
        dictgen::InsensitiveStr::Ascii("enticty"),
        dictgen::InsensitiveStr::Ascii("enticy"),
        dictgen::InsensitiveStr::Ascii("entisity"),
        dictgen::InsensitiveStr::Ascii("er"),
        dictgen::InsensitiveStr::Ascii("erization"),
        dictgen::InsensitiveStr::Ascii("erized"),
        dictgen::InsensitiveStr::Ascii("obiographic"),
        dictgen::InsensitiveStr::Ascii("obiography"),
        dictgen::InsensitiveStr::Ascii("oratitive"),
        dictgen::InsensitiveStr::Ascii("orative"),
        dictgen::InsensitiveStr::Ascii("oritate"),
        dictgen::InsensitiveStr::Ascii("oritatian"),
        dictgen::InsensitiveStr::Ascii("oritation"),
        dictgen::InsensitiveStr::Ascii("oritay"),
        dictgen::InsensitiveStr::Ascii("orites"),
        dictgen::InsensitiveStr::Ascii("orithies"),
        dictgen::InsensitiveStr::Ascii("orithy"),
        dictgen::InsensitiveStr::Ascii("oritiers"),
        dictgen::InsensitiveStr::Ascii("orititive"),
        dictgen::InsensitiveStr::Ascii("oritorian"),
        dictgen::InsensitiveStr::Ascii("orizaton"),
        dictgen::InsensitiveStr::Ascii("orotative"),
        dictgen::InsensitiveStr::Ascii("oroties"),
        dictgen::InsensitiveStr::Ascii("roity"),
        dictgen::InsensitiveStr::Ascii("roization"),
        dictgen::InsensitiveStr::Ascii("roized"),
        dictgen::InsensitiveStr::Ascii("rorities"),
    ],
    values: &[
        &["authentication"],
        &["authentication"],
        &["authentication"],
        &["authentication"],
        &["authenticity"],
        &["authenticator"],
        &["authenticity"],
        &["authenticity"],
        &["authenticity"],
        &["author"],
        &["authorization"],
        &["authorized"],
        &["autobiographic"],
        &["autobiography"],
        &["authoritative"],
        &["authoritative"],
        &["authoritative"],
        &["authoritarian"],
        &["authorization"],
        &["authority"],
        &["authorities"],
        &["authorities"],
        &["authority"],
        &["authorities"],
        &["authoritative"],
        &["authoritarian"],
        &["authorization"],
        &["authoritative"],
        &["authorities"],
        &["authority"],
        &["authorization"],
        &["authorized"],
        &["authorities"],
    ],
    range: 2..=11,
};

static WORD_AUS_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_AUS_CHILDREN),
    value: None,
};

pub static WORD_AUS_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("teriy"),
        dictgen::InsensitiveStr::Ascii("tira"),
        dictgen::InsensitiveStr::Ascii("tiran"),
        dictgen::InsensitiveStr::Ascii("titic"),
        dictgen::InsensitiveStr::Ascii("trai"),
        dictgen::InsensitiveStr::Ascii("trailan"),
        dictgen::InsensitiveStr::Ascii("trailans"),
        dictgen::InsensitiveStr::Ascii("trailia"),
        dictgen::InsensitiveStr::Ascii("trailian"),
        dictgen::InsensitiveStr::Ascii("train"),
        dictgen::InsensitiveStr::Ascii("trala"),
        dictgen::InsensitiveStr::Ascii("tralain"),
        dictgen::InsensitiveStr::Ascii("traliaan"),
        dictgen::InsensitiveStr::Ascii("traliams"),
        dictgen::InsensitiveStr::Ascii("tralianas"),
        dictgen::InsensitiveStr::Ascii("tralianess"),
        dictgen::InsensitiveStr::Ascii("tralianos"),
        dictgen::InsensitiveStr::Ascii("tralien"),
        dictgen::InsensitiveStr::Ascii("traliens"),
        dictgen::InsensitiveStr::Ascii("tralin"),
        dictgen::InsensitiveStr::Ascii("tralina"),
        dictgen::InsensitiveStr::Ascii("trallian"),
        dictgen::InsensitiveStr::Ascii("trija"),
        dictgen::InsensitiveStr::Ascii("trila"),
        dictgen::InsensitiveStr::Ascii("trlaian"),
    ],
    values: &[
        &["austerity"],
        &["austria"],
        &["austrian"],
        &["autistic"],
        &["austria"],
        &["australian"],
        &["australians"],
        &["australia"],
        &["australian"],
        &["austrian"],
        &["australian"],
        &["australians"],
        &["australians"],
        &["australians"],
        &["australians"],
        &["australians"],
        &["australians"],
        &["australian"],
        &["australians"],
        &["australians"],
        &["australians"],
        &["australian"],
        &["austria"],
        &["austria"],
        &["australians"],
    ],
    range: 4..=10,
};

static WORD_AUR_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_AUR_CHILDREN),
    value: None,
};

pub static WORD_AUR_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("omated")],
    values: &[&["automated"]],
    range: 6..=6,
};

static WORD_AUO_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_AUO_CHILDREN),
    value: None,
};

pub static WORD_AUO_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("tattack"),
        dictgen::InsensitiveStr::Ascii("tcorrect"),
    ],
    values: &[&["autoattack"], &["autocorrect"]],
    range: 7..=8,
};

static WORD_AUI_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_AUI_CHILDREN),
    value: None,
};

pub static WORD_AUI_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("dobook"),
        dictgen::InsensitiveStr::Ascii("dobooks"),
    ],
    values: &[&["audiobook"], &["audiobooks"]],
    range: 6..=7,
};

static WORD_AUH_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_AUH_CHILDREN),
    value: None,
};

pub static WORD_AUH_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("tenticate")],
    values: &[&["authenticate"]],
    range: 9..=9,
};

static WORD_AUD_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_AUD_CHILDREN),
    value: None,
};

pub static WORD_AUD_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("actiy"),
        dictgen::InsensitiveStr::Ascii("bile"),
        dictgen::InsensitiveStr::Ascii("caity"),
        dictgen::InsensitiveStr::Ascii("eince"),
        dictgen::InsensitiveStr::Ascii("ibel"),
        dictgen::InsensitiveStr::Ascii("iobok"),
        dictgen::InsensitiveStr::Ascii("iobookas"),
        dictgen::InsensitiveStr::Ascii("iobookmrs"),
        dictgen::InsensitiveStr::Ascii("ioboook"),
        dictgen::InsensitiveStr::Ascii("ioboooks"),
        dictgen::InsensitiveStr::Ascii("ioboost"),
        dictgen::InsensitiveStr::Ascii("omoderator"),
    ],
    values: &[
        &["audacity"],
        &["audible"],
        &["audacity"],
        &["audience"],
        &["audible"],
        &["audiobook"],
        &["audiobooks"],
        &["audiobooks"],
        &["audiobook"],
        &["audiobook"],
        &["audiobooks"],
        &["automoderator"],
    ],
    range: 4..=10,
};

static WORD_AUC_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_AUC_CHILDREN),
    value: None,
};

pub static WORD_AUC_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("itons"),
        dictgen::InsensitiveStr::Ascii("tioners"),
        dictgen::InsensitiveStr::Ascii("tionrs"),
    ],
    values: &[&["auctions"], &["auctions"], &["auctions"]],
    range: 5..=7,
};

static WORD_AT_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_AT_CHILDREN),
    value: None,
};

static WORD_AT_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    Some(&WORD_ATA_NODE),
    None,
    Some(&WORD_ATC_NODE),
    None,
    Some(&WORD_ATE_NODE),
    None,
    None,
    Some(&WORD_ATH_NODE),
    Some(&WORD_ATI_NODE),
    None,
    None,
    Some(&WORD_ATL_NODE),
    Some(&WORD_ATM_NODE),
    None,
    Some(&WORD_ATO_NODE),
    None,
    None,
    Some(&WORD_ATR_NODE),
    None,
    Some(&WORD_ATT_NODE),
    None,
    None,
    None,
    None,
    None,
    None,
];

static WORD_ATT_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_ATT_CHILDREN),
    value: None,
};

pub static WORD_ATT_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("achemnt"),
        dictgen::InsensitiveStr::Ascii("achemnts"),
        dictgen::InsensitiveStr::Ascii("achmet"),
        dictgen::InsensitiveStr::Ascii("ackeras"),
        dictgen::InsensitiveStr::Ascii("ackerasu"),
        dictgen::InsensitiveStr::Ascii("ackerats"),
        dictgen::InsensitiveStr::Ascii("ackes"),
        dictgen::InsensitiveStr::Ascii("actment"),
        dictgen::InsensitiveStr::Ascii("actments"),
        dictgen::InsensitiveStr::Ascii("aindre"),
        dictgen::InsensitiveStr::Ascii("emp"),
        dictgen::InsensitiveStr::Ascii("emped"),
        dictgen::InsensitiveStr::Ascii("emps"),
        dictgen::InsensitiveStr::Ascii("emt"),
        dictgen::InsensitiveStr::Ascii("emted"),
        dictgen::InsensitiveStr::Ascii("emting"),
        dictgen::InsensitiveStr::Ascii("emtped"),
        dictgen::InsensitiveStr::Ascii("emtping"),
        dictgen::InsensitiveStr::Ascii("emtps"),
        dictgen::InsensitiveStr::Ascii("emts"),
        dictgen::InsensitiveStr::Ascii("endence"),
        dictgen::InsensitiveStr::Ascii("endent"),
        dictgen::InsensitiveStr::Ascii("endents"),
        dictgen::InsensitiveStr::Ascii("ened"),
        dictgen::InsensitiveStr::Ascii("ension"),
        dictgen::InsensitiveStr::Ascii("idute"),
        dictgen::InsensitiveStr::Ascii("irbute"),
        dictgen::InsensitiveStr::Ascii("irbutes"),
        dictgen::InsensitiveStr::Ascii("irtion"),
        dictgen::InsensitiveStr::Ascii("itide"),
        dictgen::InsensitiveStr::Ascii("mepted"),
        dictgen::InsensitiveStr::Ascii("mepting"),
        dictgen::InsensitiveStr::Ascii("racs"),
        dictgen::InsensitiveStr::Ascii("racters"),
        dictgen::InsensitiveStr::Ascii("ractes"),
        dictgen::InsensitiveStr::Ascii("ractice"),
        dictgen::InsensitiveStr::Ascii("racties"),
        dictgen::InsensitiveStr::Ascii("ractifs"),
        dictgen::InsensitiveStr::Ascii("ractin"),
        dictgen::InsensitiveStr::Ascii("raktion"),
        dictgen::InsensitiveStr::Ascii("raktive"),
        dictgen::InsensitiveStr::Ascii("ribue"),
        dictgen::InsensitiveStr::Ascii("ribuito"),
        dictgen::InsensitiveStr::Ascii("ributo"),
        dictgen::InsensitiveStr::Ascii("ributred"),
        dictgen::InsensitiveStr::Ascii("ributs"),
        dictgen::InsensitiveStr::Ascii("ributted"),
        dictgen::InsensitiveStr::Ascii("ritube"),
        dictgen::InsensitiveStr::Ascii("ritubes"),
        dictgen::InsensitiveStr::Ascii("rocities"),
    ],
    values: &[
        &["attachment"],
        &["attachments"],
        &["attachments"],
        &["attackers"],
        &["attackers"],
        &["attackers"],
        &["attackers"],
        &["attachment"],
        &["attachments"],
        &["attainder"],
        &["attempt"],
        &["attempted"],
        &["attempts"],
        &["attempt"],
        &["attempted"],
        &["attempting"],
        &["attempted"],
        &["attempting"],
        &["attempts"],
        &["attempts"],
        &["attendance"],
        &["attendant"],
        &["attendants"],
        &["attended"],
        &["attention"],
        &["attitude"],
        &["attribute"],
        &["attributes"],
        &["attrition"],
        &["attitude"],
        &["attempted"],
        &["attempting"],
        &["attracts"],
        &["attracts"],
        &["attracts"],
        &["attractive"],
        &["attracts"],
        &["attracts"],
        &["attraction"],
        &["attraction"],
        &["attractive"],
        &["attribute"],
        &["attribution"],
        &["attribution"],
        &["attributed"],
        &["attributes"],
        &["attribute"],
        &["attribute"],
        &["attributes"],
        &["atrocities"],
    ],
    range: 3..=8,
};

static WORD_ATR_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_ATR_CHILDREN),
    value: None,
};

pub static WORD_ATR_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("emis"),
        dictgen::InsensitiveStr::Ascii("ibute"),
        dictgen::InsensitiveStr::Ascii("ibuted"),
        dictgen::InsensitiveStr::Ascii("ibutes"),
        dictgen::InsensitiveStr::Ascii("iculate"),
        dictgen::InsensitiveStr::Ascii("ifact"),
        dictgen::InsensitiveStr::Ascii("ifacts"),
        dictgen::InsensitiveStr::Ascii("illery"),
        dictgen::InsensitiveStr::Ascii("ittion"),
        dictgen::InsensitiveStr::Ascii("ocitites"),
        dictgen::InsensitiveStr::Ascii("ocoties"),
        dictgen::InsensitiveStr::Ascii("osities"),
    ],
    values: &[
        &["artemis"],
        &["attribute"],
        &["attributed"],
        &["attributes"],
        &["articulate"],
        &["artifact"],
        &["artifacts"],
        &["artillery"],
        &["attrition"],
        &["atrocities"],
        &["atrocities"],
        &["atrocities"],
    ],
    range: 4..=8,
};

static WORD_ATO_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_ATO_CHILDREN),
    value: None,
};

pub static WORD_ATO_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("msphere"),
        dictgen::InsensitiveStr::Ascii("mspheric"),
        dictgen::InsensitiveStr::Ascii("mzier"),
        dictgen::InsensitiveStr::Ascii("rney"),
    ],
    values: &[
        &["atmosphere"],
        &["atmospheric"],
        &["atomizer"],
        &["attorney"],
    ],
    range: 4..=8,
};

static WORD_ATM_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_ATM_CHILDREN),
    value: None,
};

pub static WORD_ATM_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("oizer"),
        dictgen::InsensitiveStr::Ascii("opshere"),
        dictgen::InsensitiveStr::Ascii("opsheric"),
        dictgen::InsensitiveStr::Ascii("oshpere"),
        dictgen::InsensitiveStr::Ascii("oshperic"),
        dictgen::InsensitiveStr::Ascii("osoheric"),
        dictgen::InsensitiveStr::Ascii("osphereic"),
        dictgen::InsensitiveStr::Ascii("osphir"),
    ],
    values: &[
        &["atomizer"],
        &["atmosphere"],
        &["atmospheric"],
        &["atmosphere"],
        &["atmospheric"],
        &["atmospheric"],
        &["atmospheric"],
        &["atmospheric"],
    ],
    range: 5..=9,
};

static WORD_ATL_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_ATL_CHILDREN),
    value: None,
};

pub static WORD_ATL_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("antc"),
        dictgen::InsensitiveStr::Ascii("antia"),
        dictgen::InsensitiveStr::Ascii("eats"),
        dictgen::InsensitiveStr::Ascii("esat"),
    ],
    values: &[&["atlantic"], &["atlanta"], &["atleast"], &["atleast"]],
    range: 4..=5,
};

static WORD_ATI_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_ATI_CHILDREN),
    value: None,
};

pub static WORD_ATI_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("ttude")],
    values: &[&["attitude"]],
    range: 5..=5,
};

static WORD_ATH_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_ATH_CHILDREN),
    value: None,
};

pub static WORD_ATH_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("eisim"),
        dictgen::InsensitiveStr::Ascii("eistc"),
        dictgen::InsensitiveStr::Ascii("eistisch"),
        dictgen::InsensitiveStr::Ascii("eltes"),
        dictgen::InsensitiveStr::Ascii("eltic"),
        dictgen::InsensitiveStr::Ascii("elticism"),
        dictgen::InsensitiveStr::Ascii("eltics"),
        dictgen::InsensitiveStr::Ascii("enean"),
        dictgen::InsensitiveStr::Ascii("eneans"),
        dictgen::InsensitiveStr::Ascii("esim"),
        dictgen::InsensitiveStr::Ascii("esitic"),
        dictgen::InsensitiveStr::Ascii("esits"),
        dictgen::InsensitiveStr::Ascii("etlic"),
        dictgen::InsensitiveStr::Ascii("etlics"),
        dictgen::InsensitiveStr::Ascii("ients"),
        dictgen::InsensitiveStr::Ascii("iesm"),
        dictgen::InsensitiveStr::Ascii("iest"),
        dictgen::InsensitiveStr::Ascii("iestic"),
        dictgen::InsensitiveStr::Ascii("iets"),
        dictgen::InsensitiveStr::Ascii("letecism"),
        dictgen::InsensitiveStr::Ascii("leticisim"),
        dictgen::InsensitiveStr::Ascii("leticm"),
        dictgen::InsensitiveStr::Ascii("leticos"),
        dictgen::InsensitiveStr::Ascii("leticsim"),
        dictgen::InsensitiveStr::Ascii("leticsm"),
        dictgen::InsensitiveStr::Ascii("letiscm"),
        dictgen::InsensitiveStr::Ascii("letisicm"),
        dictgen::InsensitiveStr::Ascii("letisim"),
        dictgen::InsensitiveStr::Ascii("letisism"),
        dictgen::InsensitiveStr::Ascii("lets"),
    ],
    values: &[
        &["atheism"],
        &["atheistic"],
        &["atheistic"],
        &["athletes"],
        &["athletic"],
        &["athleticism"],
        &["athletics"],
        &["athenian"],
        &["athenians"],
        &["atheism"],
        &["atheistic"],
        &["atheists"],
        &["athletic"],
        &["athletics"],
        &["athiest"],
        &["atheism"],
        &["atheist"],
        &["atheistic"],
        &["athiest"],
        &["athleticism"],
        &["athleticism"],
        &["athleticism"],
        &["athletics"],
        &["athleticism"],
        &["athleticism"],
        &["athleticism"],
        &["athleticism"],
        &["athleticism"],
        &["athleticism"],
        &["athletes"],
    ],
    range: 4..=9,
};

static WORD_ATE_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_ATE_CHILDREN),
    value: None,
};

pub static WORD_ATE_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("last"),
        dictgen::InsensitiveStr::Ascii("mpting"),
    ],
    values: &[&["atleast"], &["attempting"]],
    range: 4..=6,
};

static WORD_ATC_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_ATC_CHILDREN),
    value: None,
};

pub static WORD_ATC_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("ualy")],
    values: &[&["actualy"]],
    range: 4..=4,
};

static WORD_ATA_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_ATA_CHILDREN),
    value: None,
};

pub static WORD_ATA_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("in"),
        dictgen::InsensitiveStr::Ascii("tchment"),
        dictgen::InsensitiveStr::Ascii("tchments"),
    ],
    values: &[&["attain"], &["attachment"], &["attachments"]],
    range: 2..=8,
};

static WORD_AS_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_AS_CHILDREN),
    value: None,
};

static WORD_AS_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    Some(&WORD_ASA_NODE),
    Some(&WORD_ASB_NODE),
    Some(&WORD_ASC_NODE),
    None,
    Some(&WORD_ASE_NODE),
    None,
    None,
    Some(&WORD_ASH_NODE),
    Some(&WORD_ASI_NODE),
    None,
    Some(&WORD_ASK_NODE),
    Some(&WORD_ASL_NODE),
    None,
    Some(&WORD_ASN_NODE),
    Some(&WORD_ASO_NODE),
    Some(&WORD_ASP_NODE),
    None,
    None,
    Some(&WORD_ASS_NODE),
    Some(&WORD_AST_NODE),
    Some(&WORD_ASU_NODE),
    None,
    None,
    None,
    Some(&WORD_ASY_NODE),
    None,
];

static WORD_ASY_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_ASY_CHILDREN),
    value: None,
};

pub static WORD_ASY_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("chronous"),
        dictgen::InsensitiveStr::Ascii("ncronous"),
    ],
    values: &[&["asynchronous"], &["asynchronous"]],
    range: 8..=8,
};

static WORD_ASU_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_ASU_CHILDREN),
    value: None,
};

pub static WORD_ASU_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("me"),
        dictgen::InsensitiveStr::Ascii("terity"),
        dictgen::InsensitiveStr::Ascii("tralian"),
        dictgen::InsensitiveStr::Ascii("tria"),
        dictgen::InsensitiveStr::Ascii("trian"),
    ],
    values: &[
        &["assume"],
        &["austerity"],
        &["australian"],
        &["austria"],
        &["austrian"],
    ],
    range: 2..=7,
};

static WORD_AST_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_AST_CHILDREN),
    value: None,
};

pub static WORD_AST_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("eorid"),
        dictgen::InsensitiveStr::Ascii("eorids"),
        dictgen::InsensitiveStr::Ascii("ericks"),
        dictgen::InsensitiveStr::Ascii("erik"),
        dictgen::InsensitiveStr::Ascii("eriks"),
        dictgen::InsensitiveStr::Ascii("eriod"),
        dictgen::InsensitiveStr::Ascii("eriods"),
        dictgen::InsensitiveStr::Ascii("eroides"),
        dictgen::InsensitiveStr::Ascii("erois"),
        dictgen::InsensitiveStr::Ascii("ersik"),
        dictgen::InsensitiveStr::Ascii("hetic"),
        dictgen::InsensitiveStr::Ascii("hetical"),
        dictgen::InsensitiveStr::Ascii("hetically"),
        dictgen::InsensitiveStr::Ascii("onashing"),
        dictgen::InsensitiveStr::Ascii("onising"),
        dictgen::InsensitiveStr::Ascii("onoshing"),
        dictgen::InsensitiveStr::Ascii("ornauts"),
        dictgen::InsensitiveStr::Ascii("ranauts"),
        dictgen::InsensitiveStr::Ascii("ranomical"),
        dictgen::InsensitiveStr::Ascii("roanut"),
        dictgen::InsensitiveStr::Ascii("romonical"),
        dictgen::InsensitiveStr::Ascii("ronat"),
        dictgen::InsensitiveStr::Ascii("ronatus"),
        dictgen::InsensitiveStr::Ascii("ronaught"),
        dictgen::InsensitiveStr::Ascii("ronaunt"),
        dictgen::InsensitiveStr::Ascii("ronaunts"),
        dictgen::InsensitiveStr::Ascii("ronautas"),
        dictgen::InsensitiveStr::Ascii("ronautes"),
        dictgen::InsensitiveStr::Ascii("ronautlis"),
        dictgen::InsensitiveStr::Ascii("ronimical"),
        dictgen::InsensitiveStr::Ascii("ronomia"),
        dictgen::InsensitiveStr::Ascii("ronomicly"),
        dictgen::InsensitiveStr::Ascii("ronouts"),
        dictgen::InsensitiveStr::Ascii("ronuat"),
        dictgen::InsensitiveStr::Ascii("ronuats"),
        dictgen::InsensitiveStr::Ascii("rounat"),
    ],
    values: &[
        &["asteroid"],
        &["asteroids"],
        &["asterisk"],
        &["asterisk"],
        &["asterisk"],
        &["asteroid"],
        &["asteroids"],
        &["asteroids"],
        &["asteroids"],
        &["asterisk"],
        &["aesthetic"],
        &["aesthetical"],
        &["aesthetically"],
        &["astonishing"],
        &["astonishing"],
        &["astonishing"],
        &["astronauts"],
        &["astronauts"],
        &["astronomical"],
        &["astronaut"],
        &["astronomical"],
        &["astronaut"],
        &["astronauts"],
        &["astronaut"],
        &["astronaut"],
        &["astronaut"],
        &["astronauts"],
        &["astronauts"],
        &["astronauts"],
        &["astronomical"],
        &["astronomical"],
        &["astronomical"],
        &["astronauts"],
        &["astronaut"],
        &["astronauts"],
        &["astronaut"],
    ],
    range: 4..=9,
};

static WORD_ASS_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_ASS_CHILDREN),
    value: None,
};

static WORD_ASS_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    Some(&WORD_ASSA_NODE),
    None,
    None,
    None,
    Some(&WORD_ASSE_NODE),
    None,
    None,
    Some(&WORD_ASSH_NODE),
    Some(&WORD_ASSI_NODE),
    None,
    None,
    None,
    Some(&WORD_ASSM_NODE),
    Some(&WORD_ASSN_NODE),
    Some(&WORD_ASSO_NODE),
    None,
    None,
    None,
    Some(&WORD_ASSS_NODE),
    None,
    Some(&WORD_ASSU_NODE),
    None,
    None,
    None,
    Some(&WORD_ASSY_NODE),
    None,
];

static WORD_ASSY_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_ASSY_CHILDREN),
    value: None,
};

pub static WORD_ASSY_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("metric"),
        dictgen::InsensitiveStr::Ascii("metrical"),
    ],
    values: &[&["asymmetric"], &["asymmetrical"]],
    range: 6..=8,
};

static WORD_ASSU_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_ASSU_CHILDREN),
    value: None,
};

pub static WORD_ASSU_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("alt"),
        dictgen::InsensitiveStr::Ascii("alted"),
        dictgen::InsensitiveStr::Ascii("alts"),
        dictgen::InsensitiveStr::Ascii("lated"),
        dictgen::InsensitiveStr::Ascii("mptious"),
        dictgen::InsensitiveStr::Ascii("pmtion"),
    ],
    values: &[
        &["assault"],
        &["assaulted"],
        &["assaults"],
        &["assaulted"],
        &["assumptions"],
        &["assumptions"],
    ],
    range: 3..=7,
};

static WORD_ASSS_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_ASSS_CHILDREN),
    value: None,
};

pub static WORD_ASSS_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("asin"),
        dictgen::InsensitiveStr::Ascii("asins"),
        dictgen::InsensitiveStr::Ascii("assans"),
        dictgen::InsensitiveStr::Ascii("its"),
    ],
    values: &[&["assassin"], &["assassins"], &["assassins"], &["assists"]],
    range: 3..=6,
};

static WORD_ASSO_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_ASSO_CHILDREN),
    value: None,
};

pub static WORD_ASSO_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("caited"),
        dictgen::InsensitiveStr::Ascii("caites"),
        dictgen::InsensitiveStr::Ascii("caition"),
        dictgen::InsensitiveStr::Ascii("cation"),
        dictgen::InsensitiveStr::Ascii("ciaiton"),
        dictgen::InsensitiveStr::Ascii("ciatie"),
        dictgen::InsensitiveStr::Ascii("ciaties"),
        dictgen::InsensitiveStr::Ascii("ciatin"),
        dictgen::InsensitiveStr::Ascii("ciationg"),
        dictgen::InsensitiveStr::Ascii("ciationthis"),
        dictgen::InsensitiveStr::Ascii("ciato"),
        dictgen::InsensitiveStr::Ascii("ciaton"),
        dictgen::InsensitiveStr::Ascii("ciatons"),
        dictgen::InsensitiveStr::Ascii("cisted"),
        dictgen::InsensitiveStr::Ascii("icate"),
        dictgen::InsensitiveStr::Ascii("icated"),
        dictgen::InsensitiveStr::Ascii("icates"),
        dictgen::InsensitiveStr::Ascii("ication"),
        dictgen::InsensitiveStr::Ascii("ications"),
        dictgen::InsensitiveStr::Ascii("siated"),
        dictgen::InsensitiveStr::Ascii("siates"),
        dictgen::InsensitiveStr::Ascii("siating"),
        dictgen::InsensitiveStr::Ascii("siation"),
        dictgen::InsensitiveStr::Ascii("siations"),
        dictgen::InsensitiveStr::Ascii("sication"),
        dictgen::InsensitiveStr::Ascii("tiations"),
        dictgen::InsensitiveStr::Ascii("ziation"),
    ],
    values: &[
        &["associated"],
        &["associates"],
        &["associations"],
        &["association"],
        &["associations"],
        &["associated"],
        &["associates"],
        &["associations"],
        &["associating"],
        &["associations"],
        &["association"],
        &["association"],
        &["associations"],
        &["associates"],
        &["associate"],
        &["associated"],
        &["associates"],
        &["association"],
        &["associations"],
        &["associated"],
        &["associates"],
        &["associating"],
        &["association"],
        &["associations"],
        &["assassination"],
        &["associations"],
        &["association"],
    ],
    range: 5..=11,
};

static WORD_ASSN_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_ASSN_CHILDREN),
    value: None,
};

pub static WORD_ASSN_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("age")],
    values: &[&["assange"]],
    range: 3..=3,
};

static WORD_ASSM_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_ASSM_CHILDREN),
    value: None,
};

pub static WORD_ASSM_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("eble"),
        dictgen::InsensitiveStr::Ascii("ebled"),
        dictgen::InsensitiveStr::Ascii("ebling"),
        dictgen::InsensitiveStr::Ascii("ebly"),
    ],
    values: &[
        &["assemble"],
        &["assembled"],
        &["assembling"],
        &["assembly"],
    ],
    range: 4..=6,
};

static WORD_ASSI_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_ASSI_CHILDREN),
    value: None,
};

pub static WORD_ASSI_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("de"),
        dictgen::InsensitiveStr::Ascii("gnemnt"),
        dictgen::InsensitiveStr::Ascii("gnemnts"),
        dictgen::InsensitiveStr::Ascii("malate"),
        dictgen::InsensitiveStr::Ascii("mialted"),
        dictgen::InsensitiveStr::Ascii("milant"),
        dictgen::InsensitiveStr::Ascii("milare"),
        dictgen::InsensitiveStr::Ascii("milatie"),
        dictgen::InsensitiveStr::Ascii("mile"),
        dictgen::InsensitiveStr::Ascii("milerat"),
        dictgen::InsensitiveStr::Ascii("miliate"),
        dictgen::InsensitiveStr::Ascii("mliate"),
        dictgen::InsensitiveStr::Ascii("mliated"),
        dictgen::InsensitiveStr::Ascii("mulate"),
        dictgen::InsensitiveStr::Ascii("ngment"),
        dictgen::InsensitiveStr::Ascii("ngments"),
        dictgen::InsensitiveStr::Ascii("snate"),
        dictgen::InsensitiveStr::Ascii("ssinated"),
        dictgen::InsensitiveStr::Ascii("sst"),
        dictgen::InsensitiveStr::Ascii("stanat"),
        dictgen::InsensitiveStr::Ascii("stans"),
        dictgen::InsensitiveStr::Ascii("stanse"),
        dictgen::InsensitiveStr::Ascii("stante"),
        dictgen::InsensitiveStr::Ascii("stantes"),
        dictgen::InsensitiveStr::Ascii("stat"),
        dictgen::InsensitiveStr::Ascii("stence"),
        dictgen::InsensitiveStr::Ascii("stendo"),
        dictgen::InsensitiveStr::Ascii("stents"),
        dictgen::InsensitiveStr::Ascii("stsnt"),
        dictgen::InsensitiveStr::Ascii("t"),
        dictgen::InsensitiveStr::Ascii("tant"),
    ],
    values: &[
        &["aside"],
        &["assignment"],
        &["assignments"],
        &["assimilate"],
        &["assimilate"],
        &["assimilate"],
        &["assimilate"],
        &["assimilate"],
        &["assimilate"],
        &["assimilate"],
        &["assimilate"],
        &["assimilate"],
        &["assimilate"],
        &["assimilate"],
        &["assignment"],
        &["assignments"],
        &["assassinate"],
        &["assassinated"],
        &["assists"],
        &["assistants"],
        &["assistants"],
        &["assistants"],
        &["assistance"],
        &["assistants"],
        &["assistants"],
        &["assistance"],
        &["assisted"],
        &["assistants"],
        &["assistants"],
        &["assist"],
        &["assistant"],
    ],
    range: 1..=8,
};

static WORD_ASSH_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_ASSH_CHILDREN),
    value: None,
};

pub static WORD_ASSH_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ates"),
        dictgen::InsensitiveStr::Ascii("atts"),
    ],
    values: &[&["asshats"], &["asshats"]],
    range: 4..=4,
};

static WORD_ASSE_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_ASSE_CHILDREN),
    value: None,
};

pub static WORD_ASSE_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("mbe"),
        dictgen::InsensitiveStr::Ascii("mbeld"),
        dictgen::InsensitiveStr::Ascii("mblare"),
        dictgen::InsensitiveStr::Ascii("mbleing"),
        dictgen::InsensitiveStr::Ascii("mbley"),
        dictgen::InsensitiveStr::Ascii("mblie"),
        dictgen::InsensitiveStr::Ascii("mblying"),
        dictgen::InsensitiveStr::Ascii("mby"),
        dictgen::InsensitiveStr::Ascii("mple"),
        dictgen::InsensitiveStr::Ascii("mpling"),
        dictgen::InsensitiveStr::Ascii("rsions"),
        dictgen::InsensitiveStr::Ascii("rtation"),
        dictgen::InsensitiveStr::Ascii("rtin"),
        dictgen::InsensitiveStr::Ascii("sement"),
        dictgen::InsensitiveStr::Ascii("stment"),
    ],
    values: &[
        &["assemble"],
        &["assembled"],
        &["assemble"],
        &["assembling"],
        &["assembly"],
        &["assemble"],
        &["assembling"],
        &["assembly"],
        &["assemble"],
        &["assembling"],
        &["assertions"],
        &["assertion"],
        &["assertions"],
        &["assessment"],
        &["assessment"],
    ],
    range: 3..=7,
};

static WORD_ASSA_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_ASSA_CHILDREN),
    value: None,
};

pub static WORD_ASSA_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("gne"),
        dictgen::InsensitiveStr::Ascii("sin"),
        dictgen::InsensitiveStr::Ascii("sinate"),
        dictgen::InsensitiveStr::Ascii("sinated"),
        dictgen::InsensitiveStr::Ascii("sinates"),
        dictgen::InsensitiveStr::Ascii("sination"),
        dictgen::InsensitiveStr::Ascii("sinations"),
        dictgen::InsensitiveStr::Ascii("sined"),
        dictgen::InsensitiveStr::Ascii("sins"),
        dictgen::InsensitiveStr::Ascii("ssian"),
        dictgen::InsensitiveStr::Ascii("ssians"),
        dictgen::InsensitiveStr::Ascii("ssiante"),
        dictgen::InsensitiveStr::Ascii("ssinare"),
        dictgen::InsensitiveStr::Ascii("ssinas"),
        dictgen::InsensitiveStr::Ascii("ssinatd"),
        dictgen::InsensitiveStr::Ascii("ssinatin"),
        dictgen::InsensitiveStr::Ascii("ssinato"),
        dictgen::InsensitiveStr::Ascii("ssinats"),
        dictgen::InsensitiveStr::Ascii("ssine"),
        dictgen::InsensitiveStr::Ascii("ssines"),
        dictgen::InsensitiveStr::Ascii("ssinos"),
        dictgen::InsensitiveStr::Ascii("ssintation"),
        dictgen::InsensitiveStr::Ascii("ssinted"),
        dictgen::InsensitiveStr::Ascii("sssin"),
        dictgen::InsensitiveStr::Ascii("ultes"),
    ],
    values: &[
        &["assange"],
        &["assassin"],
        &["assassinate"],
        &["assassinated"],
        &["assassinates"],
        &["assassination"],
        &["assassinations"],
        &["assassinated"],
        &["assassins"],
        &["assassin"],
        &["assassin"],
        &["assassinate"],
        &["assassinate"],
        &["assassins"],
        &["assassinated"],
        &["assassination"],
        &["assassination"],
        &["assassins"],
        &["assassinate"],
        &["assassins"],
        &["assassins"],
        &["assassination"],
        &["assassinated"],
        &["assassins"],
        &["assaults"],
    ],
    range: 3..=10,
};

static WORD_ASP_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_ASP_CHILDREN),
    value: None,
};

pub static WORD_ASP_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ahlt"),
        dictgen::InsensitiveStr::Ascii("ectos"),
        dictgen::InsensitiveStr::Ascii("ergerers"),
        dictgen::InsensitiveStr::Ascii("erges"),
        dictgen::InsensitiveStr::Ascii("hlat"),
        dictgen::InsensitiveStr::Ascii("hyxation"),
        dictgen::InsensitiveStr::Ascii("iratons"),
        dictgen::InsensitiveStr::Ascii("riations"),
        dictgen::InsensitiveStr::Ascii("riin"),
    ],
    values: &[
        &["asphalt"],
        &["aspects"],
        &["aspergers"],
        &["aspergers"],
        &["asphalt"],
        &["asphyxiation"],
        &["aspirations"],
        &["aspirations"],
        &["aspirin"],
    ],
    range: 4..=8,
};

static WORD_ASO_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_ASO_CHILDREN),
    value: None,
};

pub static WORD_ASO_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ciated"),
        dictgen::InsensitiveStr::Ascii("rbed"),
    ],
    values: &[&["associated"], &["absorbed"]],
    range: 4..=6,
};

static WORD_ASN_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_ASN_CHILDREN),
    value: None,
};

pub static WORD_ASN_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("wered"),
        dictgen::InsensitiveStr::Ascii("wering"),
        dictgen::InsensitiveStr::Ascii("wers"),
    ],
    values: &[&["answered"], &["answering"], &["answers"]],
    range: 4..=6,
};

static WORD_ASL_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_ASL_CHILDREN),
    value: None,
};

pub static WORD_ASL_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("o")],
    values: &[&["also"]],
    range: 1..=1,
};

static WORD_ASK_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_ASK_CHILDREN),
    value: None,
};

pub static WORD_ASK_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("reddt")],
    values: &[&["askreddit"]],
    range: 5..=5,
};

static WORD_ASI_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_ASI_CHILDREN),
    value: None,
};

pub static WORD_ASI_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("gn"),
        dictgen::InsensitiveStr::Ascii("prin"),
        dictgen::InsensitiveStr::Ascii("sstants"),
        dictgen::InsensitiveStr::Ascii("ssted"),
        dictgen::InsensitiveStr::Ascii("ssts"),
    ],
    values: &[
        &["assign"],
        &["aspirin"],
        &["assistants"],
        &["assisted"],
        &["assists"],
    ],
    range: 2..=7,
};

static WORD_ASH_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_ASH_CHILDREN),
    value: None,
};

pub static WORD_ASH_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("palt")],
    values: &[&["asphalt"]],
    range: 4..=4,
};

static WORD_ASE_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_ASE_CHILDREN),
    value: None,
};

pub static WORD_ASE_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("thetic"),
        dictgen::InsensitiveStr::Ascii("thetically"),
        dictgen::InsensitiveStr::Ascii("thetics"),
        dictgen::InsensitiveStr::Ascii("tic"),
        dictgen::InsensitiveStr::Ascii("uxal"),
        dictgen::InsensitiveStr::Ascii("xaul"),
    ],
    values: &[
        &["aesthetic"],
        &["aesthetically"],
        &["aesthetics"],
        &["ascetic"],
        &["asexual"],
        &["asexual"],
    ],
    range: 3..=10,
};

static WORD_ASC_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_ASC_CHILDREN),
    value: None,
};

pub static WORD_ASC_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("endend"),
        dictgen::InsensitiveStr::Ascii("neded"),
        dictgen::InsensitiveStr::Ascii("neding"),
        dictgen::InsensitiveStr::Ascii("nesion"),
    ],
    values: &[&["ascended"], &["ascended"], &["ascending"], &["ascension"]],
    range: 5..=6,
};

static WORD_ASB_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_ASB_CHILDREN),
    value: None,
};

pub static WORD_ASB_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("estoast"),
        dictgen::InsensitiveStr::Ascii("estoes"),
        dictgen::InsensitiveStr::Ascii("orbed"),
        dictgen::InsensitiveStr::Ascii("orbing"),
        dictgen::InsensitiveStr::Ascii("urdity"),
        dictgen::InsensitiveStr::Ascii("urdly"),
    ],
    values: &[
        &["asbestos"],
        &["asbestos"],
        &["absorbed"],
        &["absorbing"],
        &["absurdity"],
        &["absurdly"],
    ],
    range: 5..=7,
};

static WORD_ASA_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_ASA_CHILDREN),
    value: None,
};

pub static WORD_ASA_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("pragus")],
    values: &[&["asparagus"]],
    range: 6..=6,
};

static WORD_AR_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_AR_CHILDREN),
    value: None,
};

static WORD_AR_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    Some(&WORD_ARA_NODE),
    Some(&WORD_ARB_NODE),
    Some(&WORD_ARC_NODE),
    None,
    Some(&WORD_ARE_NODE),
    None,
    Some(&WORD_ARG_NODE),
    Some(&WORD_ARH_NODE),
    Some(&WORD_ARI_NODE),
    None,
    Some(&WORD_ARK_NODE),
    Some(&WORD_ARL_NODE),
    Some(&WORD_ARM_NODE),
    None,
    Some(&WORD_ARO_NODE),
    Some(&WORD_ARP_NODE),
    None,
    Some(&WORD_ARR_NODE),
    Some(&WORD_ARS_NODE),
    Some(&WORD_ART_NODE),
    Some(&WORD_ARU_NODE),
    None,
    None,
    None,
    None,
    None,
];

static WORD_ARU_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_ARU_CHILDREN),
    value: None,
};

pub static WORD_ARU_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("gable"),
        dictgen::InsensitiveStr::Ascii("gably"),
        dictgen::InsensitiveStr::Ascii("gement"),
        dictgen::InsensitiveStr::Ascii("ging"),
        dictgen::InsensitiveStr::Ascii("gment"),
        dictgen::InsensitiveStr::Ascii("gmentative"),
        dictgen::InsensitiveStr::Ascii("gments"),
        dictgen::InsensitiveStr::Ascii("nd"),
    ],
    values: &[
        &["arguable"],
        &["arguably"],
        &["arguement"],
        &["arguing"],
        &["argument"],
        &["argumentative"],
        &["arguments"],
        &["around"],
    ],
    range: 2..=10,
};

static WORD_ART_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_ART_CHILDREN),
    value: None,
};

pub static WORD_ART_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("cile"),
        dictgen::InsensitiveStr::Ascii("emios"),
        dictgen::InsensitiveStr::Ascii("emius"),
        dictgen::InsensitiveStr::Ascii("himetic"),
        dictgen::InsensitiveStr::Ascii("hirtis"),
        dictgen::InsensitiveStr::Ascii("hrits"),
        dictgen::InsensitiveStr::Ascii("ical"),
        dictgen::InsensitiveStr::Ascii("ice"),
        dictgen::InsensitiveStr::Ascii("icel"),
        dictgen::InsensitiveStr::Ascii("icifial"),
        dictgen::InsensitiveStr::Ascii("icifially"),
        dictgen::InsensitiveStr::Ascii("icluate"),
        dictgen::InsensitiveStr::Ascii("icluated"),
        dictgen::InsensitiveStr::Ascii("icualte"),
        dictgen::InsensitiveStr::Ascii("icualted"),
        dictgen::InsensitiveStr::Ascii("icule"),
        dictgen::InsensitiveStr::Ascii("iculted"),
        dictgen::InsensitiveStr::Ascii("ifacs"),
        dictgen::InsensitiveStr::Ascii("ifactos"),
        dictgen::InsensitiveStr::Ascii("ifcat"),
        dictgen::InsensitiveStr::Ascii("ifcats"),
        dictgen::InsensitiveStr::Ascii("ificailly"),
        dictgen::InsensitiveStr::Ascii("ifical"),
        dictgen::InsensitiveStr::Ascii("ifically"),
        dictgen::InsensitiveStr::Ascii("ificialy"),
        dictgen::InsensitiveStr::Ascii("ificiel"),
        dictgen::InsensitiveStr::Ascii("ificiella"),
        dictgen::InsensitiveStr::Ascii("ificually"),
        dictgen::InsensitiveStr::Ascii("ifiically"),
        dictgen::InsensitiveStr::Ascii("ihmetic"),
        dictgen::InsensitiveStr::Ascii("illary"),
        dictgen::InsensitiveStr::Ascii("illerly"),
        dictgen::InsensitiveStr::Ascii("illey"),
        dictgen::InsensitiveStr::Ascii("isitc"),
        dictgen::InsensitiveStr::Ascii("istas"),
        dictgen::InsensitiveStr::Ascii("istc"),
        dictgen::InsensitiveStr::Ascii("meis"),
        dictgen::InsensitiveStr::Ascii("sits"),
    ],
    values: &[
        &["article"],
        &["artemis"],
        &["artemis"],
        &["arithmetic"],
        &["arthritis"],
        &["arthritis"],
        &["article"],
        &["article"],
        &["article"],
        &["artificial"],
        &["artificially"],
        &["articulate"],
        &["articulated"],
        &["articulate"],
        &["articulated"],
        &["articulate"],
        &["articulated"],
        &["artifacts"],
        &["artifacts"],
        &["artifact"],
        &["artifacts"],
        &["artificially"],
        &["artificial"],
        &["artificially"],
        &["artificially"],
        &["artificial"],
        &["artificial"],
        &["artificially"],
        &["artificially"],
        &["arithmetic"],
        &["artillery"],
        &["artillery"],
        &["artillery"],
        &["artistic"],
        &["artists"],
        &["artistic"],
        &["artemis"],
        &["artists"],
    ],
    range: 3..=9,
};

static WORD_ARS_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_ARS_CHILDREN),
    value: None,
};

pub static WORD_ARS_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("enaal"),
        dictgen::InsensitiveStr::Ascii("neal"),
    ],
    values: &[&["arsenal"], &["arsenal"]],
    range: 4..=5,
};

static WORD_ARR_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_ARR_CHILDREN),
    value: None,
};

pub static WORD_ARR_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("agned"),
        dictgen::InsensitiveStr::Ascii("angerad"),
        dictgen::InsensitiveStr::Ascii("angment"),
        dictgen::InsensitiveStr::Ascii("angments"),
        dictgen::InsensitiveStr::Ascii("ary"),
        dictgen::InsensitiveStr::Ascii("engement"),
        dictgen::InsensitiveStr::Ascii("engements"),
        dictgen::InsensitiveStr::Ascii("esst"),
        dictgen::InsensitiveStr::Ascii("estes"),
        dictgen::InsensitiveStr::Ascii("estos"),
        dictgen::InsensitiveStr::Ascii("ound"),
    ],
    values: &[
        &["arranged"],
        &["arranged"],
        &["arrangement"],
        &["arrangements"],
        &["array"],
        &["arrangement"],
        &["arrangements"],
        &["arrests"],
        &["arrests"],
        &["arrests"],
        &["around"],
    ],
    range: 3..=9,
};

static WORD_ARP_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_ARP_CHILDREN),
    value: None,
};

pub static WORD_ARP_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("anoid"),
        dictgen::InsensitiveStr::Ascii("atheid"),
        dictgen::InsensitiveStr::Ascii("eture"),
    ],
    values: &[&["paranoid"], &["apartheid"], &["aperture"]],
    range: 5..=6,
};

static WORD_ARO_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_ARO_CHILDREN),
    value: None,
};

pub static WORD_ARO_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("gant"),
        dictgen::InsensitiveStr::Ascii("gent"),
        dictgen::InsensitiveStr::Ascii("ud"),
    ],
    values: &[&["arrogant"], &["arrogant"], &["around"]],
    range: 2..=4,
};

static WORD_ARM_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_ARM_CHILDREN),
    value: None,
};

pub static WORD_ARM_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("agaddon"),
        dictgen::InsensitiveStr::Ascii("ageddan"),
        dictgen::InsensitiveStr::Ascii("agedddon"),
        dictgen::InsensitiveStr::Ascii("agedden"),
        dictgen::InsensitiveStr::Ascii("ageddeon"),
        dictgen::InsensitiveStr::Ascii("ageddin"),
        dictgen::InsensitiveStr::Ascii("ageddomon"),
        dictgen::InsensitiveStr::Ascii("agedeon"),
        dictgen::InsensitiveStr::Ascii("ageedon"),
        dictgen::InsensitiveStr::Ascii("agideon"),
        dictgen::InsensitiveStr::Ascii("amant"),
        dictgen::InsensitiveStr::Ascii("char"),
        dictgen::InsensitiveStr::Ascii("egaddon"),
        dictgen::InsensitiveStr::Ascii("enain"),
        dictgen::InsensitiveStr::Ascii("enina"),
        dictgen::InsensitiveStr::Ascii("istace"),
        dictgen::InsensitiveStr::Ascii("pitts"),
        dictgen::InsensitiveStr::Ascii("storng"),
        dictgen::InsensitiveStr::Ascii("strog"),
    ],
    values: &[
        &["armageddon"],
        &["armageddon"],
        &["armageddon"],
        &["armageddon"],
        &["armageddon"],
        &["armageddon"],
        &["armageddon"],
        &["armageddon"],
        &["armageddon"],
        &["armageddon"],
        &["armament"],
        &["armchair"],
        &["armageddon"],
        &["armenian"],
        &["armenian"],
        &["armistice"],
        &["armpits"],
        &["armstrong"],
        &["armstrong"],
    ],
    range: 4..=9,
};

static WORD_ARL_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_ARL_CHILDREN),
    value: None,
};

pub static WORD_ARL_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ighty"),
        dictgen::InsensitiveStr::Ascii("ignton"),
        dictgen::InsensitiveStr::Ascii("ingotn"),
    ],
    values: &[&["alrighty"], &["arlington"], &["arlington"]],
    range: 5..=6,
};

static WORD_ARK_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_ARK_CHILDREN),
    value: None,
};

pub static WORD_ARK_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("asnas")],
    values: &[&["arkansas"]],
    range: 5..=5,
};

static WORD_ARI_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_ARI_CHILDREN),
    value: None,
};

pub static WORD_ARI_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("borne"),
        dictgen::InsensitiveStr::Ascii("bter"),
        dictgen::InsensitiveStr::Ascii("btrarily"),
        dictgen::InsensitiveStr::Ascii("btrary"),
        dictgen::InsensitiveStr::Ascii("btration"),
        dictgen::InsensitiveStr::Ascii("craft"),
        dictgen::InsensitiveStr::Ascii("flow"),
        dictgen::InsensitiveStr::Ascii("plane"),
        dictgen::InsensitiveStr::Ascii("planes"),
        dictgen::InsensitiveStr::Ascii("ports"),
        dictgen::InsensitiveStr::Ascii("sed"),
        dictgen::InsensitiveStr::Ascii("soft"),
        dictgen::InsensitiveStr::Ascii("space"),
        dictgen::InsensitiveStr::Ascii("stolte"),
        dictgen::InsensitiveStr::Ascii("stote"),
        dictgen::InsensitiveStr::Ascii("stotel"),
        dictgen::InsensitiveStr::Ascii("tfact"),
        dictgen::InsensitiveStr::Ascii("tfacts"),
        dictgen::InsensitiveStr::Ascii("themtic"),
        dictgen::InsensitiveStr::Ascii("thmentic"),
        dictgen::InsensitiveStr::Ascii("thmethic"),
        dictgen::InsensitiveStr::Ascii("thmetisch"),
        dictgen::InsensitiveStr::Ascii("thmetric"),
        dictgen::InsensitiveStr::Ascii("thmitic"),
        dictgen::InsensitiveStr::Ascii("tmethic"),
        dictgen::InsensitiveStr::Ascii("tsts"),
        dictgen::InsensitiveStr::Ascii("val"),
        dictgen::InsensitiveStr::Ascii("zonia"),
    ],
    values: &[
        &["airborne"],
        &["arbiter"],
        &["arbitrarily"],
        &["arbitrary"],
        &["arbitration"],
        &["aircraft"],
        &["airflow"],
        &["airplane"],
        &["airplanes"],
        &["airports"],
        &["arose"],
        &["airsoft"],
        &["airspace"],
        &["aristotle"],
        &["aristotle"],
        &["aristotle"],
        &["artifact"],
        &["artifacts"],
        &["arithmetic"],
        &["arithmetic"],
        &["arithmetic"],
        &["arithmetic"],
        &["arithmetic"],
        &["arithmetic"],
        &["arithmetic"],
        &["artists"],
        &["arrival"],
        &["arizona"],
    ],
    range: 3..=9,
};

static WORD_ARH_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_ARH_CHILDREN),
    value: None,
};

pub static WORD_ARH_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("tritis")],
    values: &[&["arthritis"]],
    range: 6..=6,
};

static WORD_ARG_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_ARG_CHILDREN),
    value: None,
};

pub static WORD_ARG_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("entia"),
        dictgen::InsensitiveStr::Ascii("entinia"),
        dictgen::InsensitiveStr::Ascii("essive"),
        dictgen::InsensitiveStr::Ascii("eument"),
        dictgen::InsensitiveStr::Ascii("icultural"),
        dictgen::InsensitiveStr::Ascii("iculture"),
        dictgen::InsensitiveStr::Ascii("uabley"),
        dictgen::InsensitiveStr::Ascii("uablly"),
        dictgen::InsensitiveStr::Ascii("ubaly"),
        dictgen::InsensitiveStr::Ascii("ubly"),
        dictgen::InsensitiveStr::Ascii("uement"),
        dictgen::InsensitiveStr::Ascii("uements"),
        dictgen::InsensitiveStr::Ascii("uemet"),
        dictgen::InsensitiveStr::Ascii("uemnet"),
        dictgen::InsensitiveStr::Ascii("uemnts"),
        dictgen::InsensitiveStr::Ascii("uemtn"),
        dictgen::InsensitiveStr::Ascii("umeent"),
        dictgen::InsensitiveStr::Ascii("umentas"),
        dictgen::InsensitiveStr::Ascii("umentate"),
        dictgen::InsensitiveStr::Ascii("umentatie"),
        dictgen::InsensitiveStr::Ascii("umentitive"),
        dictgen::InsensitiveStr::Ascii("umentos"),
    ],
    values: &[
        &["argentina"],
        &["argentina"],
        &["agressive"],
        &["arguement"],
        &["agricultural"],
        &["agriculture"],
        &["arguably"],
        &["arguably"],
        &["arguably"],
        &["arguably"],
        &["argument"],
        &["arguments"],
        &["arguement"],
        &["arguement"],
        &["arguments"],
        &["arguement"],
        &["arguement"],
        &["arguments"],
        &["argumentative"],
        &["argumentative"],
        &["argumentative"],
        &["arguments"],
    ],
    range: 4..=10,
};

static WORD_ARE_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_ARE_CHILDREN),
    value: None,
};

pub static WORD_ARE_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ady"),
        dictgen::InsensitiveStr::Ascii("gument"),
        dictgen::InsensitiveStr::Ascii("mnian"),
        dictgen::InsensitiveStr::Ascii("odynamics"),
        dictgen::InsensitiveStr::Ascii("ospace"),
        dictgen::InsensitiveStr::Ascii("snal"),
        dictgen::InsensitiveStr::Ascii("tmis"),
    ],
    values: &[
        &["already"],
        &["arguement"],
        &["armenian"],
        &["aerodynamics"],
        &["aerospace"],
        &["arsenal"],
        &["artemis"],
    ],
    range: 3..=9,
};

static WORD_ARC_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_ARC_CHILDREN),
    value: None,
};

pub static WORD_ARC_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("aheology"),
        dictgen::InsensitiveStr::Ascii("ahic"),
        dictgen::InsensitiveStr::Ascii("ehtype"),
        dictgen::InsensitiveStr::Ascii("ehtypes"),
        dictgen::InsensitiveStr::Ascii("haelogical"),
        dictgen::InsensitiveStr::Ascii("haelogists"),
        dictgen::InsensitiveStr::Ascii("haelogy"),
        dictgen::InsensitiveStr::Ascii("haeolgy"),
        dictgen::InsensitiveStr::Ascii("haoelogy"),
        dictgen::InsensitiveStr::Ascii("haology"),
        dictgen::InsensitiveStr::Ascii("hatypes"),
        dictgen::InsensitiveStr::Ascii("heaologist"),
        dictgen::InsensitiveStr::Ascii("heaologists"),
        dictgen::InsensitiveStr::Ascii("heaology"),
        dictgen::InsensitiveStr::Ascii("hetect"),
        dictgen::InsensitiveStr::Ascii("hetects"),
        dictgen::InsensitiveStr::Ascii("hetectural"),
        dictgen::InsensitiveStr::Ascii("hetecturally"),
        dictgen::InsensitiveStr::Ascii("hetecture"),
        dictgen::InsensitiveStr::Ascii("hetipes"),
        dictgen::InsensitiveStr::Ascii("hetpye"),
        dictgen::InsensitiveStr::Ascii("hetpyes"),
        dictgen::InsensitiveStr::Ascii("hetyps"),
        dictgen::InsensitiveStr::Ascii("hetypus"),
        dictgen::InsensitiveStr::Ascii("heytpes"),
        dictgen::InsensitiveStr::Ascii("hiac"),
        dictgen::InsensitiveStr::Ascii("hictect"),
        dictgen::InsensitiveStr::Ascii("himedian"),
        dictgen::InsensitiveStr::Ascii("hitechs"),
        dictgen::InsensitiveStr::Ascii("hitecht"),
        dictgen::InsensitiveStr::Ascii("hitechts"),
        dictgen::InsensitiveStr::Ascii("hitechturally"),
        dictgen::InsensitiveStr::Ascii("hitechture"),
        dictgen::InsensitiveStr::Ascii("hitechtures"),
        dictgen::InsensitiveStr::Ascii("hitechural"),
        dictgen::InsensitiveStr::Ascii("hitechure"),
        dictgen::InsensitiveStr::Ascii("hitecs"),
        dictgen::InsensitiveStr::Ascii("hitecte"),
        dictgen::InsensitiveStr::Ascii("hitectes"),
        dictgen::InsensitiveStr::Ascii("hitectrual"),
        dictgen::InsensitiveStr::Ascii("hitectual"),
        dictgen::InsensitiveStr::Ascii("hitectureal"),
        dictgen::InsensitiveStr::Ascii("hitecturial"),
        dictgen::InsensitiveStr::Ascii("hitectuur"),
        dictgen::InsensitiveStr::Ascii("hitecure"),
        dictgen::InsensitiveStr::Ascii("hitecutral"),
        dictgen::InsensitiveStr::Ascii("hitecutre"),
        dictgen::InsensitiveStr::Ascii("hitet"),
        dictgen::InsensitiveStr::Ascii("hitexts"),
        dictgen::InsensitiveStr::Ascii("hitexture"),
        dictgen::InsensitiveStr::Ascii("hitypes"),
        dictgen::InsensitiveStr::Ascii("htiects"),
        dictgen::InsensitiveStr::Ascii("htype"),
        dictgen::InsensitiveStr::Ascii("htypes"),
        dictgen::InsensitiveStr::Ascii("hytypes"),
        dictgen::InsensitiveStr::Ascii("itechture"),
        dictgen::InsensitiveStr::Ascii("ylic"),
    ],
    values: &[
        &["archeology"],
        &["archaic"],
        &["archetype"],
        &["archetypes"],
        &["archaeological"],
        &["archaeologists"],
        &["archaeology"],
        &["archaeology"],
        &["archeology"],
        &["archeology"],
        &["archetypes"],
        &["archeologist"],
        &["archeologists"],
        &["archeology"],
        &["architect"],
        &["architects"],
        &["architectural"],
        &["architecturally"],
        &["architecture"],
        &["archetypes"],
        &["archetype"],
        &["archetypes"],
        &["archetypes"],
        &["archetypes"],
        &["archetypes"],
        &["archaic"],
        &["architect"],
        &["archimedean"],
        &["architects"],
        &["architect"],
        &["architect"],
        &["architecturally"],
        &["architecture"],
        &["architectures"],
        &["architectural"],
        &["architecture"],
        &["architects"],
        &["architecture"],
        &["architects"],
        &["architectural"],
        &["architectural"],
        &["architectural"],
        &["architectural"],
        &["architecture"],
        &["architecture"],
        &["architectural"],
        &["architecture"],
        &["architect"],
        &["architects"],
        &["architecture"],
        &["archetypes"],
        &["architects"],
        &["archetype"],
        &["archetypes"],
        &["archetypes"],
        &["architecture"],
        &["acrylic"],
    ],
    range: 4..=13,
};

static WORD_ARB_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_ARB_CHILDREN),
    value: None,
};

pub static WORD_ARB_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("irtary"),
        dictgen::InsensitiveStr::Ascii("itarily"),
        dictgen::InsensitiveStr::Ascii("itary"),
        dictgen::InsensitiveStr::Ascii("itraily"),
        dictgen::InsensitiveStr::Ascii("itraion"),
        dictgen::InsensitiveStr::Ascii("itrairly"),
        dictgen::InsensitiveStr::Ascii("itrairy"),
        dictgen::InsensitiveStr::Ascii("itralily"),
        dictgen::InsensitiveStr::Ascii("itrarely"),
        dictgen::InsensitiveStr::Ascii("itrariliy"),
        dictgen::InsensitiveStr::Ascii("itrarilly"),
        dictgen::InsensitiveStr::Ascii("itrarion"),
        dictgen::InsensitiveStr::Ascii("itrarly"),
        dictgen::InsensitiveStr::Ascii("itratily"),
        dictgen::InsensitiveStr::Ascii("itraton"),
        dictgen::InsensitiveStr::Ascii("itray"),
        dictgen::InsensitiveStr::Ascii("itre"),
        dictgen::InsensitiveStr::Ascii("iture"),
        dictgen::InsensitiveStr::Ascii("ritarily"),
        dictgen::InsensitiveStr::Ascii("ritary"),
        dictgen::InsensitiveStr::Ascii("ritation"),
    ],
    values: &[
        &["arbitrary"],
        &["arbitrarily"],
        &["arbitrary"],
        &["arbitrarily"],
        &["arbitration"],
        &["arbitrarily"],
        &["arbitrarily"],
        &["arbitrarily"],
        &["arbitrarily"],
        &["arbitrarily"],
        &["arbitrarily"],
        &["arbitration"],
        &["arbitrary"],
        &["arbitrarily"],
        &["arbitration"],
        &["arbitrary"],
        &["arbiter"],
        &["arbiter"],
        &["arbitrarily"],
        &["arbitrary"],
        &["arbitration"],
    ],
    range: 4..=9,
};

static WORD_ARA_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_ARA_CHILDREN),
    value: None,
};

pub static WORD_ARA_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("mgeddon"),
        dictgen::InsensitiveStr::Ascii("nged"),
        dictgen::InsensitiveStr::Ascii("ngement"),
    ],
    values: &[&["armageddon"], &["arranged"], &["arrangement"]],
    range: 4..=7,
};

static WORD_AQ_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_AQ_CHILDREN),
    value: None,
};

pub static WORD_AQ_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("aurium"),
        dictgen::InsensitiveStr::Ascii("cuaintance"),
        dictgen::InsensitiveStr::Ascii("cuaintances"),
        dictgen::InsensitiveStr::Ascii("cuainted"),
        dictgen::InsensitiveStr::Ascii("cuire"),
        dictgen::InsensitiveStr::Ascii("cuired"),
        dictgen::InsensitiveStr::Ascii("cuisition"),
        dictgen::InsensitiveStr::Ascii("quaintance"),
        dictgen::InsensitiveStr::Ascii("quaintances"),
        dictgen::InsensitiveStr::Ascii("uaduct"),
        dictgen::InsensitiveStr::Ascii("uaintance"),
        dictgen::InsensitiveStr::Ascii("uainted"),
        dictgen::InsensitiveStr::Ascii("uairum"),
        dictgen::InsensitiveStr::Ascii("uarim"),
        dictgen::InsensitiveStr::Ascii("uaruim"),
        dictgen::InsensitiveStr::Ascii("uiantance"),
        dictgen::InsensitiveStr::Ascii("uire"),
        dictgen::InsensitiveStr::Ascii("uired"),
        dictgen::InsensitiveStr::Ascii("uiring"),
        dictgen::InsensitiveStr::Ascii("uisition"),
        dictgen::InsensitiveStr::Ascii("uitted"),
    ],
    values: &[
        &["aquarium"],
        &["acquaintance"],
        &["acquaintances"],
        &["acquainted"],
        &["acquire"],
        &["acquired"],
        &["acquisition"],
        &["acquaintance"],
        &["acquaintances"],
        &["aqueduct"],
        &["acquaintance"],
        &["acquainted"],
        &["aquarium"],
        &["aquarium"],
        &["aquarium"],
        &["acquaintance"],
        &["acquire"],
        &["acquired"],
        &["acquiring"],
        &["acquisition"],
        &["acquitted"],
    ],
    range: 4..=11,
};

static WORD_AP_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_AP_CHILDREN),
    value: None,
};

static WORD_AP_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    Some(&WORD_APA_NODE),
    None,
    None,
    None,
    Some(&WORD_APE_NODE),
    None,
    None,
    None,
    None,
    None,
    None,
    Some(&WORD_APL_NODE),
    None,
    None,
    Some(&WORD_APO_NODE),
    Some(&WORD_APP_NODE),
    None,
    Some(&WORD_APR_NODE),
    Some(&WORD_APS_NODE),
    Some(&WORD_APT_NODE),
    None,
    None,
    None,
    None,
    None,
    None,
];

static WORD_APT_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_APT_CHILDREN),
    value: None,
};

pub static WORD_APT_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("itudine")],
    values: &[&["aptitude"]],
    range: 7..=7,
};

static WORD_APS_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_APS_CHILDREN),
    value: None,
};

pub static WORD_APS_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("aragus"),
        dictgen::InsensitiveStr::Ascii("ects"),
        dictgen::InsensitiveStr::Ascii("ergers"),
        dictgen::InsensitiveStr::Ascii("halt"),
        dictgen::InsensitiveStr::Ascii("irations"),
        dictgen::InsensitiveStr::Ascii("irin"),
        dictgen::InsensitiveStr::Ascii("otles"),
        dictgen::InsensitiveStr::Ascii("otrophe"),
    ],
    values: &[
        &["asparagus"],
        &["aspects"],
        &["aspergers"],
        &["asphalt"],
        &["aspirations"],
        &["aspirin"],
        &["apostles"],
        &["apostrophe"],
    ],
    range: 4..=8,
};

static WORD_APR_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_APR_CHILDREN),
    value: None,
};

pub static WORD_APR_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("atheid"),
        dictgen::InsensitiveStr::Ascii("ehensive"),
        dictgen::InsensitiveStr::Ascii("eture"),
        dictgen::InsensitiveStr::Ascii("opriate"),
        dictgen::InsensitiveStr::Ascii("oval"),
        dictgen::InsensitiveStr::Ascii("oximate"),
        dictgen::InsensitiveStr::Ascii("oximately"),
    ],
    values: &[
        &["apartheid"],
        &["apprehensive"],
        &["aperture"],
        &["appropriate"],
        &["approval"],
        &["approximate"],
        &["approximately"],
    ],
    range: 4..=9,
};

static WORD_APP_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_APP_CHILDREN),
    value: None,
};

static WORD_APP_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    Some(&WORD_APPA_NODE),
    None,
    None,
    None,
    Some(&WORD_APPE_NODE),
    None,
    None,
    None,
    Some(&WORD_APPI_NODE),
    None,
    None,
    Some(&WORD_APPL_NODE),
    None,
    None,
    Some(&WORD_APPO_NODE),
    None,
    None,
    Some(&WORD_APPR_NODE),
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
];

static WORD_APPR_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_APPR_CHILDREN),
    value: None,
};

static WORD_APPR_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    Some(&WORD_APPRA_NODE),
    None,
    None,
    None,
    Some(&WORD_APPRE_NODE),
    None,
    None,
    None,
    Some(&WORD_APPRI_NODE),
    None,
    None,
    None,
    None,
    None,
    Some(&WORD_APPRO_NODE),
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
];

static WORD_APPRO_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_APPRO_CHILDREN),
    value: None,
};

pub static WORD_APPRO_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("achs"),
        dictgen::InsensitiveStr::Ascii("acing"),
        dictgen::InsensitiveStr::Ascii("piate"),
        dictgen::InsensitiveStr::Ascii("pirate"),
        dictgen::InsensitiveStr::Ascii("pirately"),
        dictgen::InsensitiveStr::Ascii("piration"),
        dictgen::InsensitiveStr::Ascii("praite"),
        dictgen::InsensitiveStr::Ascii("praitely"),
        dictgen::InsensitiveStr::Ascii("prate"),
        dictgen::InsensitiveStr::Ascii("preation"),
        dictgen::InsensitiveStr::Ascii("priatin"),
        dictgen::InsensitiveStr::Ascii("priatley"),
        dictgen::InsensitiveStr::Ascii("priatly"),
        dictgen::InsensitiveStr::Ascii("priato"),
        dictgen::InsensitiveStr::Ascii("priaton"),
        dictgen::InsensitiveStr::Ascii("prietly"),
        dictgen::InsensitiveStr::Ascii("propiate"),
        dictgen::InsensitiveStr::Ascii("proximate"),
        dictgen::InsensitiveStr::Ascii("rpiation"),
        dictgen::InsensitiveStr::Ascii("straphe"),
        dictgen::InsensitiveStr::Ascii("xamate"),
        dictgen::InsensitiveStr::Ascii("xamately"),
        dictgen::InsensitiveStr::Ascii("xiamte"),
        dictgen::InsensitiveStr::Ascii("xiamtely"),
        dictgen::InsensitiveStr::Ascii("xiately"),
        dictgen::InsensitiveStr::Ascii("ximatelly"),
        dictgen::InsensitiveStr::Ascii("ximatley"),
        dictgen::InsensitiveStr::Ascii("ximatly"),
        dictgen::InsensitiveStr::Ascii("ximetly"),
        dictgen::InsensitiveStr::Ascii("ximitely"),
        dictgen::InsensitiveStr::Ascii("xmiate"),
    ],
    values: &[
        &["approaches"],
        &["approaching"],
        &["appropriate"],
        &["appropriate"],
        &["appropriately"],
        &["appropriation"],
        &["appropriate"],
        &["appropriately"],
        &["appropriate"],
        &["appropriation"],
        &["appropriation"],
        &["appropriately"],
        &["appropriately"],
        &["appropriation"],
        &["appropriation"],
        &["appropriately"],
        &["appropriate"],
        &["approximate"],
        &["appropriation"],
        &["apostrophe"],
        &["approximate"],
        &["approximately"],
        &["approximate"],
        &["approximately"],
        &["approximately"],
        &["approximately"],
        &["approximately"],
        &["approximately"],
        &["approximately"],
        &["approximately"],
        &["approximate"],
    ],
    range: 4..=9,
};

static WORD_APPRI_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_APPRI_CHILDREN),
    value: None,
};

pub static WORD_APPRI_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ceate"),
        dictgen::InsensitiveStr::Ascii("ciate"),
        dictgen::InsensitiveStr::Ascii("ciated"),
        dictgen::InsensitiveStr::Ascii("ciates"),
        dictgen::InsensitiveStr::Ascii("ecate"),
        dictgen::InsensitiveStr::Ascii("eciate"),
    ],
    values: &[
        &["appreciates"],
        &["appreciate"],
        &["appreciated"],
        &["appreciates"],
        &["appreciates"],
        &["appreciate"],
    ],
    range: 5..=6,
};

static WORD_APPRE_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_APPRE_CHILDREN),
    value: None,
};

pub static WORD_APPRE_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("arance"),
        dictgen::InsensitiveStr::Ascii("caite"),
        dictgen::InsensitiveStr::Ascii("caited"),
        dictgen::InsensitiveStr::Ascii("caites"),
        dictgen::InsensitiveStr::Ascii("ceating"),
        dictgen::InsensitiveStr::Ascii("ciae"),
        dictgen::InsensitiveStr::Ascii("ciaite"),
        dictgen::InsensitiveStr::Ascii("ciateing"),
        dictgen::InsensitiveStr::Ascii("ciateive"),
        dictgen::InsensitiveStr::Ascii("ciaters"),
        dictgen::InsensitiveStr::Ascii("ciatie"),
        dictgen::InsensitiveStr::Ascii("ciatied"),
        dictgen::InsensitiveStr::Ascii("ciatin"),
        dictgen::InsensitiveStr::Ascii("ciationg"),
        dictgen::InsensitiveStr::Ascii("ciato"),
        dictgen::InsensitiveStr::Ascii("ciaton"),
        dictgen::InsensitiveStr::Ascii("ciatve"),
        dictgen::InsensitiveStr::Ascii("ciste"),
        dictgen::InsensitiveStr::Ascii("citae"),
        dictgen::InsensitiveStr::Ascii("cited"),
        dictgen::InsensitiveStr::Ascii("ctice"),
        dictgen::InsensitiveStr::Ascii("icate"),
        dictgen::InsensitiveStr::Ascii("icated"),
        dictgen::InsensitiveStr::Ascii("icates"),
        dictgen::InsensitiveStr::Ascii("icating"),
        dictgen::InsensitiveStr::Ascii("ication"),
        dictgen::InsensitiveStr::Ascii("ndice"),
        dictgen::InsensitiveStr::Ascii("ntace"),
        dictgen::InsensitiveStr::Ascii("ntie"),
        dictgen::InsensitiveStr::Ascii("ntince"),
        dictgen::InsensitiveStr::Ascii("ntise"),
        dictgen::InsensitiveStr::Ascii("tiate"),
        dictgen::InsensitiveStr::Ascii("tiation"),
        dictgen::InsensitiveStr::Ascii("tince"),
    ],
    values: &[
        &["appearance"],
        &["appreciate"],
        &["appreciated"],
        &["appreciates"],
        &["appreciating"],
        &["appreciates"],
        &["appreciative"],
        &["appreciating"],
        &["appreciative"],
        &["appreciates"],
        &["appreciative"],
        &["appreciative"],
        &["appreciation"],
        &["appreciating"],
        &["appreciation"],
        &["appreciation"],
        &["appreciative"],
        &["appreciates"],
        &["appreciates"],
        &["appreciated"],
        &["apprentice"],
        &["appreciate"],
        &["appreciated"],
        &["appreciates"],
        &["appreciating"],
        &["appreciation"],
        &["apprentice"],
        &["apprentice"],
        &["apprentice"],
        &["apprentice"],
        &["apprentice"],
        &["appreciate"],
        &["appreciation"],
        &["apprentice"],
    ],
    range: 4..=8,
};

static WORD_APPRA_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_APPRA_CHILDREN),
    value: None,
};

pub static WORD_APPRA_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("och"),
        dictgen::InsensitiveStr::Ascii("ochable"),
        dictgen::InsensitiveStr::Ascii("oched"),
        dictgen::InsensitiveStr::Ascii("oches"),
        dictgen::InsensitiveStr::Ascii("oching"),
    ],
    values: &[
        &["approach"],
        &["approachable"],
        &["approached"],
        &["approaches"],
        &["approaching"],
    ],
    range: 3..=7,
};

static WORD_APPO_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_APPO_CHILDREN),
    value: None,
};

pub static WORD_APPO_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("intmet"),
        dictgen::InsensitiveStr::Ascii("itnment"),
        dictgen::InsensitiveStr::Ascii("itnments"),
        dictgen::InsensitiveStr::Ascii("logies"),
        dictgen::InsensitiveStr::Ascii("logy"),
        dictgen::InsensitiveStr::Ascii("rach"),
        dictgen::InsensitiveStr::Ascii("rachable"),
        dictgen::InsensitiveStr::Ascii("rached"),
        dictgen::InsensitiveStr::Ascii("raches"),
        dictgen::InsensitiveStr::Ascii("raching"),
        dictgen::InsensitiveStr::Ascii("rpriate"),
        dictgen::InsensitiveStr::Ascii("rpriately"),
        dictgen::InsensitiveStr::Ascii("rpriation"),
        dictgen::InsensitiveStr::Ascii("rximate"),
        dictgen::InsensitiveStr::Ascii("rximately"),
    ],
    values: &[
        &["appointments"],
        &["appointments"],
        &["appointments"],
        &["apologies"],
        &["apology"],
        &["approach"],
        &["approachable"],
        &["approached"],
        &["approaches"],
        &["approaching"],
        &["appropriate"],
        &["appropriately"],
        &["appropriation"],
        &["approximate"],
        &["approximately"],
    ],
    range: 4..=9,
};

static WORD_APPL_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_APPL_CHILDREN),
    value: None,
};

pub static WORD_APPL_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ainces"),
        dictgen::InsensitiveStr::Ascii("audes"),
        dictgen::InsensitiveStr::Ascii("aued"),
        dictgen::InsensitiveStr::Ascii("icabile"),
        dictgen::InsensitiveStr::Ascii("icaiton"),
        dictgen::InsensitiveStr::Ascii("icaitons"),
        dictgen::InsensitiveStr::Ascii("icaple"),
        dictgen::InsensitiveStr::Ascii("icates"),
        dictgen::InsensitiveStr::Ascii("icatins"),
        dictgen::InsensitiveStr::Ascii("icato"),
        dictgen::InsensitiveStr::Ascii("icaton"),
        dictgen::InsensitiveStr::Ascii("icatons"),
        dictgen::InsensitiveStr::Ascii("icible"),
        dictgen::InsensitiveStr::Ascii("iences"),
        dictgen::InsensitiveStr::Ascii("uad"),
        dictgen::InsensitiveStr::Ascii("uase"),
    ],
    values: &[
        &["appliances"],
        &["applause"],
        &["applaud"],
        &["applicable"],
        &["application"],
        &["applications"],
        &["applicable"],
        &["applicants"],
        &["applicants"],
        &["application"],
        &["application"],
        &["applications"],
        &["applicable"],
        &["appliances"],
        &["applaud"],
        &["applause"],
    ],
    range: 3..=8,
};

static WORD_APPI_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_APPI_CHILDREN),
    value: None,
};

pub static WORD_APPI_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("cation")],
    values: &[&["application"]],
    range: 6..=6,
};

static WORD_APPE_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_APPE_CHILDREN),
    value: None,
};

pub static WORD_APPE_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("alling"),
        dictgen::InsensitiveStr::Ascii("arane"),
        dictgen::InsensitiveStr::Ascii("ard"),
        dictgen::InsensitiveStr::Ascii("areance"),
        dictgen::InsensitiveStr::Ascii("arence"),
        dictgen::InsensitiveStr::Ascii("arences"),
        dictgen::InsensitiveStr::Ascii("arnace"),
        dictgen::InsensitiveStr::Ascii("nines"),
        dictgen::InsensitiveStr::Ascii("rance"),
        dictgen::InsensitiveStr::Ascii("rances"),
        dictgen::InsensitiveStr::Ascii("rantly"),
        dictgen::InsensitiveStr::Ascii("rciate"),
        dictgen::InsensitiveStr::Ascii("rciated"),
        dictgen::InsensitiveStr::Ascii("rciates"),
        dictgen::InsensitiveStr::Ascii("rciation"),
        dictgen::InsensitiveStr::Ascii("read"),
        dictgen::InsensitiveStr::Ascii("reance"),
        dictgen::InsensitiveStr::Ascii("reances"),
        dictgen::InsensitiveStr::Ascii("titie"),
        dictgen::InsensitiveStr::Ascii("tities"),
        dictgen::InsensitiveStr::Ascii("titite"),
    ],
    values: &[
        &["appealing"],
        &["appearances"],
        &["appeared"],
        &["appearance"],
        &["appearance"],
        &["appearances"],
        &["appearances"],
        &["apennines"],
        &["appearance"],
        &["appearances"],
        &["apparently"],
        &["appreciate"],
        &["appreciated"],
        &["appreciates"],
        &["appreciation"],
        &["appeared"],
        &["appearance"],
        &["appearances"],
        &["appetite"],
        &["appetite"],
        &["appetite"],
    ],
    range: 3..=8,
};

static WORD_APPA_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_APPA_CHILDREN),
    value: None,
};

pub static WORD_APPA_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("luse"),
        dictgen::InsensitiveStr::Ascii("rant"),
        dictgen::InsensitiveStr::Ascii("rantely"),
        dictgen::InsensitiveStr::Ascii("rantly"),
        dictgen::InsensitiveStr::Ascii("real"),
        dictgen::InsensitiveStr::Ascii("reance"),
        dictgen::InsensitiveStr::Ascii("reances"),
        dictgen::InsensitiveStr::Ascii("reil"),
        dictgen::InsensitiveStr::Ascii("renlty"),
        dictgen::InsensitiveStr::Ascii("rentely"),
        dictgen::InsensitiveStr::Ascii("renty"),
        dictgen::InsensitiveStr::Ascii("rt"),
        dictgen::InsensitiveStr::Ascii("rtment"),
        dictgen::InsensitiveStr::Ascii("rtments"),
    ],
    values: &[
        &["applause"],
        &["apparent"],
        &["apparently"],
        &["apparently"],
        &["apparel"],
        &["appearance"],
        &["appearances"],
        &["apparel"],
        &["apparently"],
        &["apparently"],
        &["apparently"],
        &["apart"],
        &["apartment"],
        &["apartments"],
    ],
    range: 2..=7,
};

static WORD_APO_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_APO_CHILDREN),
    value: None,
};

pub static WORD_APO_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("calipse"),
        dictgen::InsensitiveStr::Ascii("caliptic"),
        dictgen::InsensitiveStr::Ascii("calpyse"),
        dictgen::InsensitiveStr::Ascii("calpytic"),
        dictgen::InsensitiveStr::Ascii("calype"),
        dictgen::InsensitiveStr::Ascii("calypes"),
        dictgen::InsensitiveStr::Ascii("calypic"),
        dictgen::InsensitiveStr::Ascii("calypitic"),
        dictgen::InsensitiveStr::Ascii("calyspe"),
        dictgen::InsensitiveStr::Ascii("calytic"),
        dictgen::InsensitiveStr::Ascii("calytpic"),
        dictgen::InsensitiveStr::Ascii("caplyse"),
        dictgen::InsensitiveStr::Ascii("colapse"),
        dictgen::InsensitiveStr::Ascii("lagetic"),
        dictgen::InsensitiveStr::Ascii("lagized"),
        dictgen::InsensitiveStr::Ascii("lagizing"),
        dictgen::InsensitiveStr::Ascii("legetic"),
        dictgen::InsensitiveStr::Ascii("legetics"),
        dictgen::InsensitiveStr::Ascii("ligetic"),
        dictgen::InsensitiveStr::Ascii("ligists"),
        dictgen::InsensitiveStr::Ascii("ligized"),
        dictgen::InsensitiveStr::Ascii("loges"),
        dictgen::InsensitiveStr::Ascii("logisms"),
        dictgen::InsensitiveStr::Ascii("logistas"),
        dictgen::InsensitiveStr::Ascii("logiste"),
        dictgen::InsensitiveStr::Ascii("logistes"),
        dictgen::InsensitiveStr::Ascii("logistics"),
        dictgen::InsensitiveStr::Ascii("logitic"),
        dictgen::InsensitiveStr::Ascii("logizeing"),
        dictgen::InsensitiveStr::Ascii("n"),
        dictgen::InsensitiveStr::Ascii("sltes"),
        dictgen::InsensitiveStr::Ascii("stels"),
        dictgen::InsensitiveStr::Ascii("straphe"),
        dictgen::InsensitiveStr::Ascii("strephe"),
        dictgen::InsensitiveStr::Ascii("strohpe"),
        dictgen::InsensitiveStr::Ascii("strope"),
        dictgen::InsensitiveStr::Ascii("stropes"),
        dictgen::InsensitiveStr::Ascii("strophie"),
        dictgen::InsensitiveStr::Ascii("strophied"),
        dictgen::InsensitiveStr::Ascii("strophies"),
    ],
    values: &[
        &["apocalypse"],
        &["apocalyptic"],
        &["apocalypse"],
        &["apocalyptic"],
        &["apocalypse"],
        &["apocalypse"],
        &["apocalyptic"],
        &["apocalyptic"],
        &["apocalypse"],
        &["apocalyptic"],
        &["apocalyptic"],
        &["apocalypse"],
        &["apocalypse"],
        &["apologetic"],
        &["apologized"],
        &["apologizing"],
        &["apologetic"],
        &["apologetics"],
        &["apologetic"],
        &["apologists"],
        &["apologized"],
        &["apologise"],
        &["apologists"],
        &["apologists"],
        &["apologise"],
        &["apologists"],
        &["apologists"],
        &["apologetic"],
        &["apologizing"],
        &["upon"],
        &["apostles"],
        &["apostles"],
        &["apostrophe"],
        &["apostrophe"],
        &["apostrophe"],
        &["apostrophe"],
        &["apostrophe"],
        &["apostrophe"],
        &["apostrophe"],
        &["apostrophe"],
    ],
    range: 1..=9,
};

static WORD_APL_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_APL_CHILDREN),
    value: None,
};

pub static WORD_APL_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("habet"),
        dictgen::InsensitiveStr::Ascii("ication"),
        dictgen::InsensitiveStr::Ascii("ied"),
        dictgen::InsensitiveStr::Ascii("lications"),
    ],
    values: &[
        &["alphabet"],
        &["application"],
        &["applied"],
        &["applications"],
    ],
    range: 3..=9,
};

static WORD_APE_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_APE_CHILDREN),
    value: None,
};

pub static WORD_APE_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("nines"),
        dictgen::InsensitiveStr::Ascii("rutre"),
    ],
    values: &[&["apennines"], &["aperture"]],
    range: 5..=5,
};

static WORD_APA_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_APA_CHILDREN),
    value: None,
};

pub static WORD_APA_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("colypse"),
        dictgen::InsensitiveStr::Ascii("colyptic"),
        dictgen::InsensitiveStr::Ascii("rent"),
        dictgen::InsensitiveStr::Ascii("rment"),
        dictgen::InsensitiveStr::Ascii("rtheied"),
        dictgen::InsensitiveStr::Ascii("rthide"),
        dictgen::InsensitiveStr::Ascii("rthied"),
        dictgen::InsensitiveStr::Ascii("rtmens"),
        dictgen::InsensitiveStr::Ascii("rtmet"),
    ],
    values: &[
        &["apocalypse"],
        &["apocalyptic"],
        &["apparent"],
        &["apartment"],
        &["apartheid"],
        &["apartheid"],
        &["apartheid"],
        &["apartments"],
        &["apartments"],
    ],
    range: 4..=8,
};

static WORD_AN_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_AN_CHILDREN),
    value: None,
};

static WORD_AN_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    Some(&WORD_ANA_NODE),
    Some(&WORD_ANB_NODE),
    Some(&WORD_ANC_NODE),
    Some(&WORD_AND_NODE),
    Some(&WORD_ANE_NODE),
    None,
    Some(&WORD_ANG_NODE),
    None,
    Some(&WORD_ANI_NODE),
    None,
    None,
    Some(&WORD_ANL_NODE),
    Some(&WORD_ANM_NODE),
    Some(&WORD_ANN_NODE),
    Some(&WORD_ANO_NODE),
    Some(&WORD_ANP_NODE),
    None,
    Some(&WORD_ANR_NODE),
    Some(&WORD_ANS_NODE),
    Some(&WORD_ANT_NODE),
    Some(&WORD_ANU_NODE),
    None,
    Some(&WORD_ANW_NODE),
    Some(&WORD_ANX_NODE),
    Some(&WORD_ANY_NODE),
    None,
];

static WORD_ANY_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_ANY_CHILDREN),
    value: None,
};

pub static WORD_ANY_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("hting"),
        dictgen::InsensitiveStr::Ascii("hwere"),
        dictgen::InsensitiveStr::Ascii("nomity"),
        dictgen::InsensitiveStr::Ascii("nomous"),
        dictgen::InsensitiveStr::Ascii("oens"),
        dictgen::InsensitiveStr::Ascii("oneis"),
        dictgen::InsensitiveStr::Ascii("onse"),
        dictgen::InsensitiveStr::Ascii("thign"),
        dictgen::InsensitiveStr::Ascii("tying"),
        dictgen::InsensitiveStr::Ascii("wyas"),
    ],
    values: &[
        &["anything"],
        &["anywhere"],
        &["anonymity"],
        &["anonymous"],
        &["anyones"],
        &["anyones"],
        &["anyones"],
        &["anything"],
        &["anything"],
        &["anyways"],
    ],
    range: 4..=6,
};

static WORD_ANX_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_ANX_CHILDREN),
    value: None,
};

pub static WORD_ANX_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("eity")],
    values: &[&["anxiety"]],
    range: 4..=4,
};

static WORD_ANW_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_ANW_CHILDREN),
    value: None,
};

pub static WORD_ANW_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("sered"),
        dictgen::InsensitiveStr::Ascii("sering"),
        dictgen::InsensitiveStr::Ascii("sers"),
        dictgen::InsensitiveStr::Ascii("yays"),
    ],
    values: &[&["answered"], &["answering"], &["answers"], &["anyways"]],
    range: 4..=6,
};

static WORD_ANU_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_ANU_CHILDREN),
    value: None,
};

pub static WORD_ANU_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("al"),
        dictgen::InsensitiveStr::Ascii("glar"),
        dictgen::InsensitiveStr::Ascii("lled"),
    ],
    values: &[&["annual"], &["angular"], &["annulled"]],
    range: 2..=4,
};

static WORD_ANT_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_ANT_CHILDREN),
    value: None,
};

pub static WORD_ANT_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("aganist"),
        dictgen::InsensitiveStr::Ascii("aganistic"),
        dictgen::InsensitiveStr::Ascii("agnoist"),
        dictgen::InsensitiveStr::Ascii("agonisic"),
        dictgen::InsensitiveStr::Ascii("agonisitc"),
        dictgen::InsensitiveStr::Ascii("agonisitic"),
        dictgen::InsensitiveStr::Ascii("agonistc"),
        dictgen::InsensitiveStr::Ascii("agonostic"),
        dictgen::InsensitiveStr::Ascii("agonstic"),
        dictgen::InsensitiveStr::Ascii("arcitca"),
        dictgen::InsensitiveStr::Ascii("arctia"),
        dictgen::InsensitiveStr::Ascii("arctida"),
        dictgen::InsensitiveStr::Ascii("artic"),
        dictgen::InsensitiveStr::Ascii("ennaes"),
        dictgen::InsensitiveStr::Ascii("ennea"),
        dictgen::InsensitiveStr::Ascii("ennna"),
        dictgen::InsensitiveStr::Ascii("hromorphization"),
        dictgen::InsensitiveStr::Ascii("hropolgist"),
        dictgen::InsensitiveStr::Ascii("hropolgy"),
        dictgen::InsensitiveStr::Ascii("hropoloy"),
        dictgen::InsensitiveStr::Ascii("hropoly"),
        dictgen::InsensitiveStr::Ascii("ibiodic"),
        dictgen::InsensitiveStr::Ascii("ibiodics"),
        dictgen::InsensitiveStr::Ascii("ibioitcs"),
        dictgen::InsensitiveStr::Ascii("ibioitic"),
        dictgen::InsensitiveStr::Ascii("ibiotcs"),
        dictgen::InsensitiveStr::Ascii("ibioticos"),
        dictgen::InsensitiveStr::Ascii("ibitoic"),
        dictgen::InsensitiveStr::Ascii("ibitoics"),
        dictgen::InsensitiveStr::Ascii("iboitic"),
        dictgen::InsensitiveStr::Ascii("iboitics"),
        dictgen::InsensitiveStr::Ascii("icapate"),
        dictgen::InsensitiveStr::Ascii("icapated"),
        dictgen::InsensitiveStr::Ascii("iciapte"),
        dictgen::InsensitiveStr::Ascii("iciapted"),
        dictgen::InsensitiveStr::Ascii("iciaption"),
        dictgen::InsensitiveStr::Ascii("icipacion"),
        dictgen::InsensitiveStr::Ascii("icipare"),
        dictgen::InsensitiveStr::Ascii("icipatin"),
        dictgen::InsensitiveStr::Ascii("icipato"),
        dictgen::InsensitiveStr::Ascii("icipe"),
        dictgen::InsensitiveStr::Ascii("icuated"),
        dictgen::InsensitiveStr::Ascii("idepressents"),
        dictgen::InsensitiveStr::Ascii("idepresssants"),
        dictgen::InsensitiveStr::Ascii("iobitics"),
        dictgen::InsensitiveStr::Ascii("iquae"),
        dictgen::InsensitiveStr::Ascii("iquaited"),
        dictgen::InsensitiveStr::Ascii("iquited"),
        dictgen::InsensitiveStr::Ascii("iqvated"),
        dictgen::InsensitiveStr::Ascii("isipate"),
        dictgen::InsensitiveStr::Ascii("isipated"),
        dictgen::InsensitiveStr::Ascii("isipation"),
        dictgen::InsensitiveStr::Ascii("isocail"),
        dictgen::InsensitiveStr::Ascii("isosial"),
        dictgen::InsensitiveStr::Ascii("ivirs"),
        dictgen::InsensitiveStr::Ascii("iviurs"),
        dictgen::InsensitiveStr::Ascii("ivrius"),
        dictgen::InsensitiveStr::Ascii("ivuris"),
        dictgen::InsensitiveStr::Ascii("oganist"),
        dictgen::InsensitiveStr::Ascii("ogonistic"),
        dictgen::InsensitiveStr::Ascii("ractica"),
        dictgen::InsensitiveStr::Ascii("rhopology"),
        dictgen::InsensitiveStr::Ascii("rophology"),
    ],
    values: &[
        &["antagonist"],
        &["antagonistic"],
        &["antagonist"],
        &["antagonistic"],
        &["antagonistic"],
        &["antagonistic"],
        &["antagonistic"],
        &["antagonist"],
        &["antagonist"],
        &["antarctica"],
        &["antarctica"],
        &["antarctica"],
        &["antarctic"],
        &["antennas"],
        &["antenna"],
        &["antenna"],
        &["anthropomorphization"],
        &["anthropologist"],
        &["anthropology"],
        &["anthropology"],
        &["anthropology"],
        &["antibiotic"],
        &["antibiotics"],
        &["antibiotic"],
        &["antibiotic"],
        &["antibiotics"],
        &["antibiotics"],
        &["antibiotic"],
        &["antibiotics"],
        &["antibiotics"],
        &["antibiotics"],
        &["anticipate"],
        &["anticipated"],
        &["anticipate"],
        &["anticipated"],
        &["anticipation"],
        &["anticipation"],
        &["anticipate"],
        &["anticipation"],
        &["anticipation"],
        &["anticipate"],
        &["antiquated"],
        &["antidepressants"],
        &["antidepressants"],
        &["antibiotic"],
        &["antique"],
        &["antiquated"],
        &["antiquated"],
        &["antiquated"],
        &["anticipate"],
        &["anticipated"],
        &["anticipation"],
        &["antisocial"],
        &["antisocial"],
        &["antivirus"],
        &["antivirus"],
        &["antivirus"],
        &["antivirus"],
        &["antagonist"],
        &["antagonistic"],
        &["antarctica"],
        &["anthropology"],
        &["anthropology"],
    ],
    range: 5..=15,
};

static WORD_ANS_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_ANS_CHILDREN),
    value: None,
};

pub static WORD_ANS_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("alisation"),
        dictgen::InsensitiveStr::Ascii("alization"),
        dictgen::InsensitiveStr::Ascii("estors"),
        dictgen::InsensitiveStr::Ascii("werd"),
        dictgen::InsensitiveStr::Ascii("weres"),
    ],
    values: &[
        &["nasalisation"],
        &["nasalization"],
        &["ancestors"],
        &["answered"],
        &["answers"],
    ],
    range: 4..=9,
};

static WORD_ANR_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_ANR_CHILDREN),
    value: None,
};

pub static WORD_ANR_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("achist")],
    values: &[&["anarchist"]],
    range: 6..=6,
};

static WORD_ANP_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_ANP_CHILDREN),
    value: None,
};

pub static WORD_ANP_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("hetamines")],
    values: &[&["amphetamines"]],
    range: 9..=9,
};

static WORD_ANO_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_ANO_CHILDREN),
    value: None,
};

pub static WORD_ANO_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("erxia"),
        dictgen::InsensitiveStr::Ascii("erxic"),
        dictgen::InsensitiveStr::Ascii("hter"),
        dictgen::InsensitiveStr::Ascii("misity"),
        dictgen::InsensitiveStr::Ascii("molies"),
        dictgen::InsensitiveStr::Ascii("molous"),
        dictgen::InsensitiveStr::Ascii("moly"),
        dictgen::InsensitiveStr::Ascii("mynity"),
        dictgen::InsensitiveStr::Ascii("mynous"),
        dictgen::InsensitiveStr::Ascii("namously"),
        dictgen::InsensitiveStr::Ascii("nimity"),
        dictgen::InsensitiveStr::Ascii("nimously"),
        dictgen::InsensitiveStr::Ascii("nmyous"),
        dictgen::InsensitiveStr::Ascii("nmyously"),
        dictgen::InsensitiveStr::Ascii("nomously"),
        dictgen::InsensitiveStr::Ascii("nymos"),
        dictgen::InsensitiveStr::Ascii("nymosly"),
        dictgen::InsensitiveStr::Ascii("nymousny"),
        dictgen::InsensitiveStr::Ascii("nymousy"),
        dictgen::InsensitiveStr::Ascii("nymoys"),
        dictgen::InsensitiveStr::Ascii("reixa"),
        dictgen::InsensitiveStr::Ascii("rexiac"),
        dictgen::InsensitiveStr::Ascii("rexica"),
        dictgen::InsensitiveStr::Ascii("unced"),
        dictgen::InsensitiveStr::Ascii("uncement"),
        dictgen::InsensitiveStr::Ascii("xeria"),
        dictgen::InsensitiveStr::Ascii("xeric"),
    ],
    values: &[
        &["anorexia"],
        &["anorexic"],
        &["another"],
        &["animosity"],
        &["anomalies"],
        &["anomalous"],
        &["anomaly"],
        &["anonymity"],
        &["anonymous"],
        &["anonymously"],
        &["anonymity"],
        &["anonymously"],
        &["anonymous"],
        &["anonymously"],
        &["anonymously"],
        &["anonymous"],
        &["anonymously"],
        &["anonymously"],
        &["anonymously"],
        &["anonymously"],
        &["anorexia"],
        &["anorexic"],
        &["anorexia"],
        &["announced"],
        &["announcement"],
        &["anorexia"],
        &["anorexic"],
    ],
    range: 4..=8,
};

static WORD_ANN_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_ANN_CHILDREN),
    value: None,
};

pub static WORD_ANN_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("hiliation"),
        dictgen::InsensitiveStr::Ascii("ihalated"),
        dictgen::InsensitiveStr::Ascii("ihalition"),
        dictgen::InsensitiveStr::Ascii("ihilaton"),
        dictgen::InsensitiveStr::Ascii("ihilatron"),
        dictgen::InsensitiveStr::Ascii("ihilited"),
        dictgen::InsensitiveStr::Ascii("ihliated"),
        dictgen::InsensitiveStr::Ascii("ihliation"),
        dictgen::InsensitiveStr::Ascii("ilihate"),
        dictgen::InsensitiveStr::Ascii("ilihated"),
        dictgen::InsensitiveStr::Ascii("ilihation"),
        dictgen::InsensitiveStr::Ascii("iverary"),
        dictgen::InsensitiveStr::Ascii("iversairy"),
        dictgen::InsensitiveStr::Ascii("iversarry"),
        dictgen::InsensitiveStr::Ascii("iversay"),
        dictgen::InsensitiveStr::Ascii("iversery"),
        dictgen::InsensitiveStr::Ascii("iversiary"),
        dictgen::InsensitiveStr::Ascii("iversry"),
        dictgen::InsensitiveStr::Ascii("iversy"),
        dictgen::InsensitiveStr::Ascii("oint"),
        dictgen::InsensitiveStr::Ascii("ointed"),
        dictgen::InsensitiveStr::Ascii("ointing"),
        dictgen::InsensitiveStr::Ascii("oints"),
        dictgen::InsensitiveStr::Ascii("onceurs"),
        dictgen::InsensitiveStr::Ascii("onymouse"),
        dictgen::InsensitiveStr::Ascii("ouced"),
        dictgen::InsensitiveStr::Ascii("oucenment"),
        dictgen::InsensitiveStr::Ascii("oucne"),
        dictgen::InsensitiveStr::Ascii("oucnement"),
        dictgen::InsensitiveStr::Ascii("oucnements"),
        dictgen::InsensitiveStr::Ascii("oucners"),
        dictgen::InsensitiveStr::Ascii("oucnes"),
        dictgen::InsensitiveStr::Ascii("oucning"),
        dictgen::InsensitiveStr::Ascii("ounceing"),
        dictgen::InsensitiveStr::Ascii("ouncemet"),
        dictgen::InsensitiveStr::Ascii("ouncemnet"),
        dictgen::InsensitiveStr::Ascii("ouncemnt"),
        dictgen::InsensitiveStr::Ascii("ouncemnts"),
        dictgen::InsensitiveStr::Ascii("ouncents"),
        dictgen::InsensitiveStr::Ascii("ounched"),
        dictgen::InsensitiveStr::Ascii("oyingy"),
        dictgen::InsensitiveStr::Ascii("oymous"),
        dictgen::InsensitiveStr::Ascii("oymously"),
        dictgen::InsensitiveStr::Ascii("oynace"),
        dictgen::InsensitiveStr::Ascii("tenas"),
        dictgen::InsensitiveStr::Ascii("ualy"),
        dictgen::InsensitiveStr::Ascii("uled"),
        dictgen::InsensitiveStr::Ascii("yoance"),
        dictgen::InsensitiveStr::Ascii("yoingly"),
    ],
    values: &[
        &["annihilation"],
        &["annihilated"],
        &["annihilation"],
        &["annihilation"],
        &["annihilation"],
        &["annihilated"],
        &["annihilated"],
        &["annihilation"],
        &["annihilated"],
        &["annihilated"],
        &["annihilation"],
        &["anniversary"],
        &["anniversary"],
        &["anniversary"],
        &["anniversary"],
        &["anniversary"],
        &["anniversary"],
        &["anniversary"],
        &["anniversary"],
        &["anoint"],
        &["anointed"],
        &["anointing"],
        &["anoints"],
        &["announcers"],
        &["anonymous"],
        &["announced"],
        &["announcements"],
        &["announce"],
        &["announcement"],
        &["announcements"],
        &["announcers"],
        &["announces"],
        &["announcing"],
        &["announcing"],
        &["announcements"],
        &["announcements"],
        &["announcement"],
        &["announcements"],
        &["announces"],
        &["announce"],
        &["annoyingly"],
        &["anonymous"],
        &["anonymously"],
        &["annoyance"],
        &["antennas"],
        &["annually"],
        &["annulled"],
        &["annoyance"],
        &["annoyingly"],
    ],
    range: 4..=10,
};

static WORD_ANM_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_ANM_CHILDREN),
    value: None,
};

pub static WORD_ANM_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("esia"),
        dictgen::InsensitiveStr::Ascii("esty"),
    ],
    values: &[&["amnesia"], &["amnesty"]],
    range: 4..=4,
};

static WORD_ANL_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_ANL_CHILDREN),
    value: None,
};

pub static WORD_ANL_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ayses"),
        dictgen::InsensitiveStr::Ascii("aytics"),
    ],
    values: &[&["analyses"], &["analytics"]],
    range: 5..=6,
};

static WORD_ANI_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_ANI_CHILDREN),
    value: None,
};

pub static WORD_ANI_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("cent"),
        dictgen::InsensitiveStr::Ascii("cents"),
        dictgen::InsensitiveStr::Ascii("hilation"),
        dictgen::InsensitiveStr::Ascii("matie"),
        dictgen::InsensitiveStr::Ascii("matte"),
        dictgen::InsensitiveStr::Ascii("mostiy"),
        dictgen::InsensitiveStr::Ascii("nteresting"),
        dictgen::InsensitiveStr::Ascii("tbiotic"),
        dictgen::InsensitiveStr::Ascii("tbiotics"),
        dictgen::InsensitiveStr::Ascii("tdepressant"),
        dictgen::InsensitiveStr::Ascii("tdepressants"),
        dictgen::InsensitiveStr::Ascii("tquated"),
        dictgen::InsensitiveStr::Ascii("tque"),
        dictgen::InsensitiveStr::Ascii("tsocial"),
        dictgen::InsensitiveStr::Ascii("tvirus"),
        dictgen::InsensitiveStr::Ascii("versary"),
        dictgen::InsensitiveStr::Ascii("xety"),
    ],
    values: &[
        &["ancient"],
        &["ancients"],
        &["annihilation"],
        &["animate"],
        &["animate"],
        &["animosity"],
        &["uninteresting"],
        &["antibiotic"],
        &["antibiotics"],
        &["antidepressants"],
        &["antidepressants"],
        &["antiquated"],
        &["antique"],
        &["antisocial"],
        &["antivirus"],
        &["anniversary"],
        &["anxiety"],
    ],
    range: 4..=12,
};

static WORD_ANG_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_ANG_CHILDREN),
    value: None,
};

pub static WORD_ANG_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("irly"),
        dictgen::InsensitiveStr::Ascii("luar"),
        dictgen::InsensitiveStr::Ascii("ostic"),
        dictgen::InsensitiveStr::Ascii("osticism"),
        dictgen::InsensitiveStr::Ascii("rilly"),
        dictgen::InsensitiveStr::Ascii("ualr"),
    ],
    values: &[
        &["angrily"],
        &["angular"],
        &["agnostic"],
        &["agnosticism"],
        &["angrily"],
        &["angular"],
    ],
    range: 4..=8,
};

static WORD_ANE_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_ANE_CHILDREN),
    value: None,
};

pub static WORD_ANE_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("cdatally"),
        dictgen::InsensitiveStr::Ascii("cdotale"),
        dictgen::InsensitiveStr::Ascii("cdotallly"),
        dictgen::InsensitiveStr::Ascii("cdotelly"),
        dictgen::InsensitiveStr::Ascii("cdotice"),
        dictgen::InsensitiveStr::Ascii("cdotle"),
        dictgen::InsensitiveStr::Ascii("cdots"),
        dictgen::InsensitiveStr::Ascii("codtal"),
        dictgen::InsensitiveStr::Ascii("codtally"),
        dictgen::InsensitiveStr::Ascii("codtes"),
        dictgen::InsensitiveStr::Ascii("ctodal"),
        dictgen::InsensitiveStr::Ascii("ctodally"),
        dictgen::InsensitiveStr::Ascii("ctode"),
        dictgen::InsensitiveStr::Ascii("ctodes"),
        dictgen::InsensitiveStr::Ascii("ctotally"),
        dictgen::InsensitiveStr::Ascii("doctal"),
        dictgen::InsensitiveStr::Ascii("doctally"),
        dictgen::InsensitiveStr::Ascii("docte"),
        dictgen::InsensitiveStr::Ascii("doctes"),
        dictgen::InsensitiveStr::Ascii("roxia"),
        dictgen::InsensitiveStr::Ascii("roxic"),
        dictgen::InsensitiveStr::Ascii("stheisa"),
        dictgen::InsensitiveStr::Ascii("sthetia"),
        dictgen::InsensitiveStr::Ascii("sthisia"),
    ],
    values: &[
        &["anecdotally"],
        &["anecdote"],
        &["anecdotally"],
        &["anecdotally"],
        &["anecdote"],
        &["anecdote"],
        &["anecdotes"],
        &["anecdotal"],
        &["anecdotally"],
        &["anecdotes"],
        &["anecdotal"],
        &["anecdotally"],
        &["anecdote"],
        &["anecdotes"],
        &["anecdotally"],
        &["anecdotal"],
        &["anecdotally"],
        &["anecdote"],
        &["anecdotes"],
        &["anorexia"],
        &["anorexic"],
        &["anesthesia"],
        &["anesthesia"],
        &["anesthesia"],
    ],
    range: 5..=9,
};

static WORD_AND_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_AND_CHILDREN),
    value: None,
};

pub static WORD_AND_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("d"),
        dictgen::InsensitiveStr::Ascii("oirds"),
        dictgen::InsensitiveStr::Ascii("orid"),
        dictgen::InsensitiveStr::Ascii("orids"),
        dictgen::InsensitiveStr::Ascii("riod"),
        dictgen::InsensitiveStr::Ascii("riods"),
        dictgen::InsensitiveStr::Ascii("rogenous"),
        dictgen::InsensitiveStr::Ascii("rogeny"),
        dictgen::InsensitiveStr::Ascii("roiders"),
        dictgen::InsensitiveStr::Ascii("roides"),
        dictgen::InsensitiveStr::Ascii("roidos"),
        dictgen::InsensitiveStr::Ascii("roidtvs"),
        dictgen::InsensitiveStr::Ascii("rois"),
    ],
    values: &[
        &["and"],
        &["androids"],
        &["android"],
        &["androids"],
        &["android"],
        &["androids"],
        &["androgynous"],
        &["androgyny"],
        &["androids"],
        &["androids"],
        &["androids"],
        &["androids"],
        &["androids"],
    ],
    range: 1..=8,
};

static WORD_ANC_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_ANC_CHILDREN),
    value: None,
};

pub static WORD_ANC_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("edotal"),
        dictgen::InsensitiveStr::Ascii("edotally"),
        dictgen::InsensitiveStr::Ascii("edote"),
        dictgen::InsensitiveStr::Ascii("edotes"),
        dictgen::InsensitiveStr::Ascii("eint"),
        dictgen::InsensitiveStr::Ascii("eints"),
        dictgen::InsensitiveStr::Ascii("estory"),
        dictgen::InsensitiveStr::Ascii("illiary"),
        dictgen::InsensitiveStr::Ascii("inets"),
    ],
    values: &[
        &["anecdotal"],
        &["anecdotally"],
        &["anecdote"],
        &["anecdotes"],
        &["ancient"],
        &["ancients"],
        &["ancestry"],
        &["ancillary"],
        &["ancients"],
    ],
    range: 4..=8,
};

static WORD_ANB_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_ANB_CHILDREN),
    value: None,
};

pub static WORD_ANB_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("d")],
    values: &[&["and"]],
    range: 1..=1,
};

static WORD_ANA_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_ANA_CHILDREN),
    value: None,
};

pub static WORD_ANA_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("christ"),
        dictgen::InsensitiveStr::Ascii("lagous"),
        dictgen::InsensitiveStr::Ascii("lgoue"),
        dictgen::InsensitiveStr::Ascii("lisys"),
        dictgen::InsensitiveStr::Ascii("litic"),
        dictgen::InsensitiveStr::Ascii("litical"),
        dictgen::InsensitiveStr::Ascii("litycal"),
        dictgen::InsensitiveStr::Ascii("litycs"),
        dictgen::InsensitiveStr::Ascii("loge"),
        dictgen::InsensitiveStr::Ascii("logeous"),
        dictgen::InsensitiveStr::Ascii("louge"),
        dictgen::InsensitiveStr::Ascii("lsyt"),
        dictgen::InsensitiveStr::Ascii("ltyics"),
        dictgen::InsensitiveStr::Ascii("lyes"),
        dictgen::InsensitiveStr::Ascii("lyitcal"),
        dictgen::InsensitiveStr::Ascii("lyitcs"),
        dictgen::InsensitiveStr::Ascii("lyseas"),
        dictgen::InsensitiveStr::Ascii("lysees"),
        dictgen::InsensitiveStr::Ascii("lyseles"),
        dictgen::InsensitiveStr::Ascii("lysens"),
        dictgen::InsensitiveStr::Ascii("lyseras"),
        dictgen::InsensitiveStr::Ascii("lyseres"),
        dictgen::InsensitiveStr::Ascii("lysie"),
        dictgen::InsensitiveStr::Ascii("lysise"),
        dictgen::InsensitiveStr::Ascii("lysised"),
        dictgen::InsensitiveStr::Ascii("lysises"),
        dictgen::InsensitiveStr::Ascii("lysisto"),
        dictgen::InsensitiveStr::Ascii("lysit"),
        dictgen::InsensitiveStr::Ascii("lyste"),
        dictgen::InsensitiveStr::Ascii("lystes"),
        dictgen::InsensitiveStr::Ascii("lystics"),
        dictgen::InsensitiveStr::Ascii("lysze"),
        dictgen::InsensitiveStr::Ascii("lyticals"),
        dictgen::InsensitiveStr::Ascii("lyts"),
        dictgen::InsensitiveStr::Ascii("lzye"),
        dictgen::InsensitiveStr::Ascii("lzyed"),
        dictgen::InsensitiveStr::Ascii("lzying"),
        dictgen::InsensitiveStr::Ascii("olgue"),
        dictgen::InsensitiveStr::Ascii("rchim"),
        dictgen::InsensitiveStr::Ascii("rchisim"),
        dictgen::InsensitiveStr::Ascii("rchistes"),
        dictgen::InsensitiveStr::Ascii("rchistm"),
        dictgen::InsensitiveStr::Ascii("rchiszm"),
        dictgen::InsensitiveStr::Ascii("rchsim"),
        dictgen::InsensitiveStr::Ascii("rchsits"),
        dictgen::InsensitiveStr::Ascii("ylse"),
        dictgen::InsensitiveStr::Ascii("ylses"),
        dictgen::InsensitiveStr::Ascii("ylsis"),
        dictgen::InsensitiveStr::Ascii("ylst"),
        dictgen::InsensitiveStr::Ascii("ylsts"),
        dictgen::InsensitiveStr::Ascii("yltical"),
        dictgen::InsensitiveStr::Ascii("yltics"),
        dictgen::InsensitiveStr::Ascii("ylze"),
        dictgen::InsensitiveStr::Ascii("ylzed"),
        dictgen::InsensitiveStr::Ascii("ylzing"),
    ],
    values: &[
        &["anarchist"],
        &["analogous"],
        &["analogue"],
        &["analysis"],
        &["analytic"],
        &["analytical"],
        &["analytical"],
        &["analytics"],
        &["analogue"],
        &["analogous"],
        &["analogue"],
        &["analyst"],
        &["analytics"],
        &["analyse"],
        &["analytical"],
        &["analytics"],
        &["analyses"],
        &["analyses"],
        &["analyses"],
        &["analyses"],
        &["analyses"],
        &["analyses"],
        &["analyse"],
        &["analyses"],
        &["analyses"],
        &["analyses"],
        &["analysts"],
        &["analyst"],
        &["analyse"],
        &["analysts"],
        &["analysts"],
        &["analyse"],
        &["analytics"],
        &["analyst"],
        &["analyze"],
        &["analyzed"],
        &["analyzing"],
        &["analogue"],
        &["anarchism"],
        &["anarchism"],
        &["anarchists"],
        &["anarchism"],
        &["anarchism"],
        &["anarchism"],
        &["anarchists"],
        &["analyse"],
        &["analyses"],
        &["analysis"],
        &["analyst"],
        &["analysts"],
        &["analytical"],
        &["analytics"],
        &["analyze"],
        &["analyzed"],
        &["analyzing"],
    ],
    range: 4..=8,
};

static WORD_AM_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_AM_CHILDREN),
    value: None,
};

static WORD_AM_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    Some(&WORD_AMA_NODE),
    Some(&WORD_AMB_NODE),
    None,
    None,
    Some(&WORD_AME_NODE),
    None,
    None,
    None,
    Some(&WORD_AMI_NODE),
    None,
    Some(&WORD_AMK_NODE),
    None,
    Some(&WORD_AMM_NODE),
    Some(&WORD_AMN_NODE),
    Some(&WORD_AMO_NODE),
    Some(&WORD_AMP_NODE),
    None,
    Some(&WORD_AMR_NODE),
    None,
    Some(&WORD_AMT_NODE),
    Some(&WORD_AMU_NODE),
    None,
    None,
    None,
    None,
    None,
];

static WORD_AMU_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_AMU_CHILDREN),
    value: None,
};

pub static WORD_AMU_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("blance"),
        dictgen::InsensitiveStr::Ascii("ng"),
        dictgen::InsensitiveStr::Ascii("nition"),
    ],
    values: &[&["ambulance"], &["among"], &["ammunition"]],
    range: 2..=6,
};

static WORD_AMT_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_AMT_CHILDREN),
    value: None,
};

pub static WORD_AMT_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("heyst")],
    values: &[&["amethyst"]],
    range: 5..=5,
};

static WORD_AMR_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_AMR_CHILDREN),
    value: None,
};

pub static WORD_AMR_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ageddon"),
        dictgen::InsensitiveStr::Ascii("chair"),
        dictgen::InsensitiveStr::Ascii("enian"),
        dictgen::InsensitiveStr::Ascii("pits"),
        dictgen::InsensitiveStr::Ascii("strong"),
    ],
    values: &[
        &["armageddon"],
        &["armchair"],
        &["armenian"],
        &["armpits"],
        &["armstrong"],
    ],
    range: 4..=7,
};

static WORD_AMP_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_AMP_CHILDREN),
    value: None,
};

pub static WORD_AMP_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ehtamine"),
        dictgen::InsensitiveStr::Ascii("ehtamines"),
        dictgen::InsensitiveStr::Ascii("ethamine"),
        dictgen::InsensitiveStr::Ascii("ethamines"),
        dictgen::InsensitiveStr::Ascii("hatamines"),
        dictgen::InsensitiveStr::Ascii("hedamines"),
        dictgen::InsensitiveStr::Ascii("hetamenes"),
        dictgen::InsensitiveStr::Ascii("hetamies"),
        dictgen::InsensitiveStr::Ascii("hetamins"),
        dictgen::InsensitiveStr::Ascii("hetemine"),
        dictgen::InsensitiveStr::Ascii("hetemines"),
        dictgen::InsensitiveStr::Ascii("hetimine"),
        dictgen::InsensitiveStr::Ascii("hetimines"),
        dictgen::InsensitiveStr::Ascii("hetmaine"),
        dictgen::InsensitiveStr::Ascii("hetmaines"),
        dictgen::InsensitiveStr::Ascii("ilfy"),
        dictgen::InsensitiveStr::Ascii("lifiy"),
        dictgen::InsensitiveStr::Ascii("lifly"),
    ],
    values: &[
        &["amphetamine"],
        &["amphetamines"],
        &["amphetamine"],
        &["amphetamines"],
        &["amphetamines"],
        &["amphetamines"],
        &["amphetamines"],
        &["amphetamines"],
        &["amphetamines"],
        &["amphetamine"],
        &["amphetamines"],
        &["amphetamine"],
        &["amphetamines"],
        &["amphetamines"],
        &["amphetamines"],
        &["amplify"],
        &["amplify"],
        &["amplify"],
    ],
    range: 4..=9,
};

static WORD_AMO_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_AMO_CHILDREN),
    value: None,
};

pub static WORD_AMO_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("gnst"),
        dictgen::InsensitiveStr::Ascii("hetamines"),
        dictgen::InsensitiveStr::Ascii("ngts"),
        dictgen::InsensitiveStr::Ascii("nsgt"),
        dictgen::InsensitiveStr::Ascii("ung"),
        dictgen::InsensitiveStr::Ascii("ungst"),
    ],
    values: &[
        &["amongst"],
        &["amphetamines"],
        &["amongst"],
        &["amongst"],
        &["among"],
        &["amongst"],
    ],
    range: 3..=9,
};

static WORD_AMN_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_AMN_CHILDREN),
    value: None,
};

pub static WORD_AMN_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("eisa"),
        dictgen::InsensitiveStr::Ascii("estry"),
        dictgen::InsensitiveStr::Ascii("sety"),
    ],
    values: &[&["amnesia"], &["amnesty"], &["amnesty"]],
    range: 4..=5,
};

static WORD_AMM_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_AMM_CHILDREN),
    value: None,
};

pub static WORD_AMM_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("end"),
        dictgen::InsensitiveStr::Ascii("ended"),
        dictgen::InsensitiveStr::Ascii("endment"),
        dictgen::InsensitiveStr::Ascii("endments"),
        dictgen::InsensitiveStr::Ascii("inistrative"),
        dictgen::InsensitiveStr::Ascii("ount"),
        dictgen::InsensitiveStr::Ascii("used"),
    ],
    values: &[
        &["amend"],
        &["amended"],
        &["amendment"],
        &["amendments"],
        &["administrative"],
        &["amount"],
        &["amused"],
    ],
    range: 3..=11,
};

static WORD_AMK_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_AMK_CHILDREN),
    value: None,
};

pub static WORD_AMK_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("e"),
        dictgen::InsensitiveStr::Ascii("ing"),
    ],
    values: &[&["make"], &["making"]],
    range: 1..=3,
};

static WORD_AMI_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_AMI_CHILDREN),
    value: None,
};

pub static WORD_AMI_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("bguity"),
        dictgen::InsensitiveStr::Ascii("nosity"),
    ],
    values: &[&["ambiguity"], &["animosity"]],
    range: 6..=6,
};

static WORD_AME_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_AME_CHILDREN),
    value: None,
};

pub static WORD_AME_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ndmant"),
        dictgen::InsensitiveStr::Ascii("ndmants"),
        dictgen::InsensitiveStr::Ascii("ndmends"),
        dictgen::InsensitiveStr::Ascii("ndmenters"),
        dictgen::InsensitiveStr::Ascii("ndmet"),
        dictgen::InsensitiveStr::Ascii("nsia"),
        dictgen::InsensitiveStr::Ascii("nsty"),
        dictgen::InsensitiveStr::Ascii("rcia"),
        dictgen::InsensitiveStr::Ascii("rcian"),
        dictgen::InsensitiveStr::Ascii("rcians"),
        dictgen::InsensitiveStr::Ascii("rcias"),
        dictgen::InsensitiveStr::Ascii("ricain"),
        dictgen::InsensitiveStr::Ascii("ricains"),
        dictgen::InsensitiveStr::Ascii("ricams"),
        dictgen::InsensitiveStr::Ascii("ricanas"),
        dictgen::InsensitiveStr::Ascii("ricanis"),
        dictgen::InsensitiveStr::Ascii("ricanss"),
        dictgen::InsensitiveStr::Ascii("ricants"),
        dictgen::InsensitiveStr::Ascii("ricanus"),
        dictgen::InsensitiveStr::Ascii("ricaps"),
        dictgen::InsensitiveStr::Ascii("ricares"),
        dictgen::InsensitiveStr::Ascii("ricats"),
        dictgen::InsensitiveStr::Ascii("rics"),
        dictgen::InsensitiveStr::Ascii("rliorate"),
        dictgen::InsensitiveStr::Ascii("rnian"),
        dictgen::InsensitiveStr::Ascii("thsyt"),
        dictgen::InsensitiveStr::Ascii("ythst"),
    ],
    values: &[
        &["amendment"],
        &["amendments"],
        &["amendments"],
        &["amendments"],
        &["amendments"],
        &["amnesia"],
        &["amnesty"],
        &["america"],
        &["american"],
        &["americans"],
        &["americas"],
        &["american"],
        &["americas"],
        &["americas"],
        &["americans"],
        &["americas"],
        &["americas"],
        &["americas"],
        &["americans"],
        &["americas"],
        &["americas"],
        &["americas"],
        &["americas"],
        &["ameliorate"],
        &["armenian"],
        &["amethyst"],
        &["amethyst"],
    ],
    range: 4..=9,
};

static WORD_AMB_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_AMB_CHILDREN),
    value: None,
};

pub static WORD_AMB_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("assabor"),
        dictgen::InsensitiveStr::Ascii("assader"),
        dictgen::InsensitiveStr::Ascii("assator"),
        dictgen::InsensitiveStr::Ascii("assedor"),
        dictgen::InsensitiveStr::Ascii("assidor"),
        dictgen::InsensitiveStr::Ascii("assodor"),
        dictgen::InsensitiveStr::Ascii("iguitiy"),
        dictgen::InsensitiveStr::Ascii("luance"),
        dictgen::InsensitiveStr::Ascii("uigity"),
        dictgen::InsensitiveStr::Ascii("ulancier"),
    ],
    values: &[
        &["ambassador"],
        &["ambassador"],
        &["ambassador"],
        &["ambassador"],
        &["ambassador"],
        &["ambassador"],
        &["ambiguity"],
        &["ambulance"],
        &["ambiguity"],
        &["ambulance"],
    ],
    range: 6..=8,
};

static WORD_AMA_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_AMA_CHILDREN),
    value: None,
};

pub static WORD_AMA_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("lgomated"),
        dictgen::InsensitiveStr::Ascii("rgeddon"),
        dictgen::InsensitiveStr::Ascii("tersu"),
        dictgen::InsensitiveStr::Ascii("terus"),
        dictgen::InsensitiveStr::Ascii("teures"),
        dictgen::InsensitiveStr::Ascii("teurest"),
        dictgen::InsensitiveStr::Ascii("teus"),
        dictgen::InsensitiveStr::Ascii("tuer"),
        dictgen::InsensitiveStr::Ascii("ture"),
    ],
    values: &[
        &["amalgamated"],
        &["armageddon"],
        &["amateurs"],
        &["amateurs"],
        &["amateurs"],
        &["amateurs"],
        &["amateurs"],
        &["amateur"],
        &["armature"],
    ],
    range: 4..=8,
};

static WORD_AL_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_AL_CHILDREN),
    value: None,
};

static WORD_AL_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    None,
    Some(&WORD_ALB_NODE),
    Some(&WORD_ALC_NODE),
    Some(&WORD_ALD_NODE),
    Some(&WORD_ALE_NODE),
    None,
    Some(&WORD_ALG_NODE),
    None,
    Some(&WORD_ALI_NODE),
    None,
    None,
    Some(&WORD_ALL_NODE),
    Some(&WORD_ALM_NODE),
    None,
    Some(&WORD_ALO_NODE),
    Some(&WORD_ALP_NODE),
    None,
    Some(&WORD_ALR_NODE),
    Some(&WORD_ALS_NODE),
    Some(&WORD_ALT_NODE),
    Some(&WORD_ALU_NODE),
    None,
    Some(&WORD_ALW_NODE),
    None,
    None,
    None,
];

static WORD_ALW_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_ALW_CHILDREN),
    value: None,
};

pub static WORD_ALW_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("asy"),
        dictgen::InsensitiveStr::Ascii("yas"),
    ],
    values: &[&["always"], &["always"]],
    range: 3..=3,
};

static WORD_ALU_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_ALU_CHILDREN),
    value: None,
};

pub static WORD_ALU_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("minim"),
        dictgen::InsensitiveStr::Ascii("minimum"),
        dictgen::InsensitiveStr::Ascii("mnium"),
        dictgen::InsensitiveStr::Ascii("nimum"),
        dictgen::InsensitiveStr::Ascii("sion"),
    ],
    values: &[
        &["aluminium"],
        &["aluminium"],
        &["aluminium"],
        &["aluminum"],
        &["allusion"],
    ],
    range: 4..=7,
};

static WORD_ALT_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_ALT_CHILDREN),
    value: None,
};

pub static WORD_ALT_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("anta"),
        dictgen::InsensitiveStr::Ascii("antic"),
        dictgen::InsensitiveStr::Ascii("east"),
        dictgen::InsensitiveStr::Ascii("eracion"),
        dictgen::InsensitiveStr::Ascii("erante"),
        dictgen::InsensitiveStr::Ascii("erantive"),
        dictgen::InsensitiveStr::Ascii("erantively"),
        dictgen::InsensitiveStr::Ascii("erantives"),
        dictgen::InsensitiveStr::Ascii("erarion"),
        dictgen::InsensitiveStr::Ascii("erating"),
        dictgen::InsensitiveStr::Ascii("erato"),
        dictgen::InsensitiveStr::Ascii("ernador"),
        dictgen::InsensitiveStr::Ascii("ernar"),
        dictgen::InsensitiveStr::Ascii("ernater"),
        dictgen::InsensitiveStr::Ascii("ernatevly"),
        dictgen::InsensitiveStr::Ascii("ernatie"),
        dictgen::InsensitiveStr::Ascii("ernatiely"),
        dictgen::InsensitiveStr::Ascii("ernatieve"),
        dictgen::InsensitiveStr::Ascii("ernativelly"),
        dictgen::InsensitiveStr::Ascii("ernativets"),
        dictgen::InsensitiveStr::Ascii("ernativley"),
        dictgen::InsensitiveStr::Ascii("ernativly"),
        dictgen::InsensitiveStr::Ascii("ernativos"),
        dictgen::InsensitiveStr::Ascii("ernatley"),
        dictgen::InsensitiveStr::Ascii("ernatly"),
        dictgen::InsensitiveStr::Ascii("ernatr"),
        dictgen::InsensitiveStr::Ascii("ernatve"),
        dictgen::InsensitiveStr::Ascii("ernatvely"),
        dictgen::InsensitiveStr::Ascii("ernetly"),
        dictgen::InsensitiveStr::Ascii("ernitavely"),
        dictgen::InsensitiveStr::Ascii("ernitive"),
        dictgen::InsensitiveStr::Ascii("ernitively"),
        dictgen::InsensitiveStr::Ascii("ernitives"),
        dictgen::InsensitiveStr::Ascii("hetes"),
        dictgen::InsensitiveStr::Ascii("hetic"),
        dictgen::InsensitiveStr::Ascii("heticism"),
        dictgen::InsensitiveStr::Ascii("hetics"),
        dictgen::InsensitiveStr::Ascii("hought"),
        dictgen::InsensitiveStr::Ascii("nerately"),
        dictgen::InsensitiveStr::Ascii("ogehter"),
        dictgen::InsensitiveStr::Ascii("ogheter"),
        dictgen::InsensitiveStr::Ascii("ough"),
        dictgen::InsensitiveStr::Ascii("riusm"),
        dictgen::InsensitiveStr::Ascii("riustic"),
        dictgen::InsensitiveStr::Ascii("ruisim"),
        dictgen::InsensitiveStr::Ascii("ruisitc"),
        dictgen::InsensitiveStr::Ascii("ruisitic"),
        dictgen::InsensitiveStr::Ascii("ruistisch"),
        dictgen::InsensitiveStr::Ascii("ruistric"),
        dictgen::InsensitiveStr::Ascii("rusim"),
        dictgen::InsensitiveStr::Ascii("rusitic"),
        dictgen::InsensitiveStr::Ascii("urism"),
        dictgen::InsensitiveStr::Ascii("uristic"),
    ],
    values: &[
        &["atlanta"],
        &["atlantic"],
        &["atleast"],
        &["alteration"],
        &["alternate"],
        &["alternative"],
        &["alternatively"],
        &["alternatives"],
        &["alteration"],
        &["alteration"],
        &["alteration"],
        &["alternator"],
        &["alternator"],
        &["alternator"],
        &["alternately"],
        &["alternatives"],
        &["alternately"],
        &["alternative"],
        &["alternatively"],
        &["alternatives"],
        &["alternatively"],
        &["alternatively"],
        &["alternatives"],
        &["alternately"],
        &["alternately"],
        &["alternator"],
        &["alternate"],
        &["alternately"],
        &["alternately"],
        &["alternatively"],
        &["alternative"],
        &["alternatively"],
        &["alternatives"],
        &["athletes"],
        &["athletic"],
        &["athleticism"],
        &["athletics"],
        &["although"],
        &["alternately"],
        &["altogether"],
        &["altogether"],
        &["although"],
        &["altruism"],
        &["altruistic"],
        &["altruism"],
        &["altruistic"],
        &["altruistic"],
        &["altruistic"],
        &["altruistic"],
        &["altruism"],
        &["altruistic"],
        &["altruism"],
        &["altruistic"],
    ],
    range: 4..=11,
};

static WORD_ALS_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_ALS_CHILDREN),
    value: None,
};

pub static WORD_ALS_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("e"),
        dictgen::InsensitiveStr::Ascii("ot"),
    ],
    values: &[&["else"], &["also"]],
    range: 1..=2,
};

static WORD_ALR_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_ALR_CHILDREN),
    value: None,
};

pub static WORD_ALR_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("eayd"),
        dictgen::InsensitiveStr::Ascii("ightey"),
        dictgen::InsensitiveStr::Ascii("ightly"),
        dictgen::InsensitiveStr::Ascii("ightty"),
        dictgen::InsensitiveStr::Ascii("ighy"),
        dictgen::InsensitiveStr::Ascii("igthy"),
        dictgen::InsensitiveStr::Ascii("ington"),
        dictgen::InsensitiveStr::Ascii("orythm"),
    ],
    values: &[
        &["already"],
        &["alrighty"],
        &["alrighty"],
        &["alrighty"],
        &["alrighty"],
        &["alrighty"],
        &["arlington"],
        &["algorithm"],
    ],
    range: 4..=6,
};

static WORD_ALP_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_ALP_CHILDREN),
    value: None,
};

pub static WORD_ALP_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ahbet"),
        dictgen::InsensitiveStr::Ascii("habeast"),
        dictgen::InsensitiveStr::Ascii("habeat"),
        dictgen::InsensitiveStr::Ascii("habt"),
    ],
    values: &[&["alphabet"], &["alphabet"], &["alphabet"], &["alphabet"]],
    range: 4..=7,
};

static WORD_ALO_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_ALO_CHILDREN),
    value: None,
};

pub static WORD_ALO_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("chol"),
        dictgen::InsensitiveStr::Ascii("cholic"),
        dictgen::InsensitiveStr::Ascii("cholics"),
        dictgen::InsensitiveStr::Ascii("cholism"),
        dictgen::InsensitiveStr::Ascii("grithm"),
        dictgen::InsensitiveStr::Ascii("grithms"),
        dictgen::InsensitiveStr::Ascii("mst"),
        dictgen::InsensitiveStr::Ascii("tted"),
        dictgen::InsensitiveStr::Ascii("wed"),
        dictgen::InsensitiveStr::Ascii("wing"),
    ],
    values: &[
        &["alcohol"],
        &["alcoholic"],
        &["alcoholics"],
        &["alcoholism"],
        &["algorithm"],
        &["algorithms"],
        &["almost"],
        &["allotted"],
        &["allowed"],
        &["allowing"],
    ],
    range: 3..=7,
};

static WORD_ALM_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_ALM_CHILDREN),
    value: None,
};

pub static WORD_ALM_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ightly"),
        dictgen::InsensitiveStr::Ascii("ighy"),
        dictgen::InsensitiveStr::Ascii("igthy"),
        dictgen::InsensitiveStr::Ascii("sot"),
    ],
    values: &[&["almighty"], &["almighty"], &["almighty"], &["almost"]],
    range: 3..=6,
};

static WORD_ALL_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_ALL_CHILDREN),
    value: None,
};

pub static WORD_ALL_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("aince"),
        dictgen::InsensitiveStr::Ascii("ainces"),
        dictgen::InsensitiveStr::Ascii("edge"),
        dictgen::InsensitiveStr::Ascii("edged"),
        dictgen::InsensitiveStr::Ascii("edgedly"),
        dictgen::InsensitiveStr::Ascii("edgely"),
        dictgen::InsensitiveStr::Ascii("edges"),
        dictgen::InsensitiveStr::Ascii("egeance"),
        dictgen::InsensitiveStr::Ascii("egedely"),
        dictgen::InsensitiveStr::Ascii("egedley"),
        dictgen::InsensitiveStr::Ascii("egedy"),
        dictgen::InsensitiveStr::Ascii("egely"),
        dictgen::InsensitiveStr::Ascii("egence"),
        dictgen::InsensitiveStr::Ascii("egiancies"),
        dictgen::InsensitiveStr::Ascii("egience"),
        dictgen::InsensitiveStr::Ascii("egric"),
        dictgen::InsensitiveStr::Ascii("egry"),
        dictgen::InsensitiveStr::Ascii("eigance"),
        dictgen::InsensitiveStr::Ascii("eigances"),
        dictgen::InsensitiveStr::Ascii("eivate"),
        dictgen::InsensitiveStr::Ascii("ergey"),
        dictgen::InsensitiveStr::Ascii("ergisch"),
        dictgen::InsensitiveStr::Ascii("ianse"),
        dictgen::InsensitiveStr::Ascii("iegance"),
        dictgen::InsensitiveStr::Ascii("ievate"),
        dictgen::InsensitiveStr::Ascii("igeance"),
        dictgen::InsensitiveStr::Ascii("ign"),
        dictgen::InsensitiveStr::Ascii("igned"),
        dictgen::InsensitiveStr::Ascii("inace"),
        dictgen::InsensitiveStr::Ascii("iviate"),
        dictgen::InsensitiveStr::Ascii("opone"),
        dictgen::InsensitiveStr::Ascii("opones"),
        dictgen::InsensitiveStr::Ascii("ready"),
        dictgen::InsensitiveStr::Ascii("though"),
        dictgen::InsensitiveStr::Ascii("time"),
        dictgen::InsensitiveStr::Ascii("together"),
    ],
    values: &[
        &["alliance"],
        &["alliances"],
        &["allege"],
        &["alleged"],
        &["allegedly"],
        &["allegedly"],
        &["alleges"],
        &["allegiance"],
        &["allegedly"],
        &["allegedly"],
        &["allegedly"],
        &["allegedly"],
        &["allegiance"],
        &["allegiance"],
        &["allegiance"],
        &["allergic"],
        &["allergy"],
        &["allegiance"],
        &["allegiance"],
        &["alleviate"],
        &["allergy"],
        &["allergic"],
        &["alliances"],
        &["allegiance"],
        &["alleviate"],
        &["allegiance"],
        &["align"],
        &["aligned"],
        &["alliance"],
        &["alleviate"],
        &["allophone"],
        &["allophones"],
        &["already"],
        &["although"],
        &["all-time"],
        &["altogether"],
    ],
    range: 3..=9,
};

static WORD_ALI_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_ALI_CHILDREN),
    value: None,
};

pub static WORD_ALI_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("enet"),
        dictgen::InsensitiveStr::Ascii("entating"),
        dictgen::InsensitiveStr::Ascii("evating"),
        dictgen::InsensitiveStr::Ascii("gnemnt"),
        dictgen::InsensitiveStr::Ascii("money"),
        dictgen::InsensitiveStr::Ascii("munium"),
        dictgen::InsensitiveStr::Ascii("ngment"),
        dictgen::InsensitiveStr::Ascii("rghty"),
    ],
    values: &[
        &["alienate"],
        &["alienating"],
        &["alienating"],
        &["alignment"],
        &["alimony"],
        &["aluminium"],
        &["alinement"],
        &["alrighty"],
    ],
    range: 4..=8,
};

static WORD_ALG_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_ALG_CHILDREN),
    value: None,
};

pub static WORD_ALG_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("erba"),
        dictgen::InsensitiveStr::Ascii("orhitms"),
        dictgen::InsensitiveStr::Ascii("orithem"),
        dictgen::InsensitiveStr::Ascii("orithems"),
        dictgen::InsensitiveStr::Ascii("orithim"),
        dictgen::InsensitiveStr::Ascii("orithims"),
        dictgen::InsensitiveStr::Ascii("orithmes"),
        dictgen::InsensitiveStr::Ascii("orithmns"),
        dictgen::InsensitiveStr::Ascii("orithmus"),
        dictgen::InsensitiveStr::Ascii("oriths"),
        dictgen::InsensitiveStr::Ascii("orithsm"),
        dictgen::InsensitiveStr::Ascii("orithum"),
        dictgen::InsensitiveStr::Ascii("orithym"),
        dictgen::InsensitiveStr::Ascii("orithyms"),
        dictgen::InsensitiveStr::Ascii("oritm"),
        dictgen::InsensitiveStr::Ascii("oritmes"),
        dictgen::InsensitiveStr::Ascii("oritmos"),
        dictgen::InsensitiveStr::Ascii("oritms"),
        dictgen::InsensitiveStr::Ascii("orthim"),
        dictgen::InsensitiveStr::Ascii("orthims"),
        dictgen::InsensitiveStr::Ascii("ortihm"),
        dictgen::InsensitiveStr::Ascii("ortihms"),
        dictgen::InsensitiveStr::Ascii("orythims"),
        dictgen::InsensitiveStr::Ascii("orythms"),
    ],
    values: &[
        &["algebra"],
        &["algorithms"],
        &["algorithm"],
        &["algorithm"],
        &["algorithm"],
        &["algorithm"],
        &["algorithms"],
        &["algorithms"],
        &["algorithms"],
        &["algorithms"],
        &["algorithms"],
        &["algorithm"],
        &["algorithm"],
        &["algorithm"],
        &["algorithm"],
        &["algorithms"],
        &["algorithms"],
        &["algorithms"],
        &["algorithm"],
        &["algorithms"],
        &["algorithm"],
        &["algorithms"],
        &["algorithms"],
        &["algorithms"],
    ],
    range: 4..=8,
};

static WORD_ALE_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_ALE_CHILDREN),
    value: None,
};

pub static WORD_ALE_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("chmist"),
        dictgen::InsensitiveStr::Ascii("dge"),
        dictgen::InsensitiveStr::Ascii("dged"),
        dictgen::InsensitiveStr::Ascii("dges"),
        dictgen::InsensitiveStr::Ascii("gbra"),
        dictgen::InsensitiveStr::Ascii("ge"),
        dictgen::InsensitiveStr::Ascii("ged"),
        dictgen::InsensitiveStr::Ascii("gience"),
        dictgen::InsensitiveStr::Ascii("inated"),
        dictgen::InsensitiveStr::Ascii("inating"),
        dictgen::InsensitiveStr::Ascii("niate"),
    ],
    values: &[
        &["alchemist"],
        &["allege"],
        &["alleged"],
        &["alleges"],
        &["algebra"],
        &["allege"],
        &["alleged"],
        &["allegiance"],
        &["alienated"],
        &["alienating"],
        &["alienate"],
    ],
    range: 2..=7,
};

static WORD_ALD_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_ALD_CHILDREN),
    value: None,
};

pub static WORD_ALD_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("utery")],
    values: &[&["adultery"]],
    range: 5..=5,
};

static WORD_ALC_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_ALC_CHILDREN),
    value: None,
};

pub static WORD_ALC_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ehmist"),
        dictgen::InsensitiveStr::Ascii("hemey"),
        dictgen::InsensitiveStr::Ascii("hemsit"),
        dictgen::InsensitiveStr::Ascii("himest"),
        dictgen::InsensitiveStr::Ascii("hmeist"),
        dictgen::InsensitiveStr::Ascii("hmey"),
        dictgen::InsensitiveStr::Ascii("hohol"),
        dictgen::InsensitiveStr::Ascii("hoholic"),
        dictgen::InsensitiveStr::Ascii("hol"),
        dictgen::InsensitiveStr::Ascii("holic"),
        dictgen::InsensitiveStr::Ascii("hool"),
        dictgen::InsensitiveStr::Ascii("hoolic"),
        dictgen::InsensitiveStr::Ascii("hoolism"),
        dictgen::InsensitiveStr::Ascii("ohal"),
        dictgen::InsensitiveStr::Ascii("ohalics"),
        dictgen::InsensitiveStr::Ascii("ohalism"),
        dictgen::InsensitiveStr::Ascii("oholc"),
        dictgen::InsensitiveStr::Ascii("oholicas"),
        dictgen::InsensitiveStr::Ascii("oholicos"),
        dictgen::InsensitiveStr::Ascii("oholis"),
        dictgen::InsensitiveStr::Ascii("oholisim"),
        dictgen::InsensitiveStr::Ascii("oholsim"),
    ],
    values: &[
        &["alchemist"],
        &["alchemy"],
        &["alchemist"],
        &["alchemist"],
        &["alchemist"],
        &["alchemy"],
        &["alcohol"],
        &["alcoholic"],
        &["alcohol"],
        &["alcoholic"],
        &["alcohol"],
        &["alcoholic"],
        &["alcoholism"],
        &["alcohol"],
        &["alcoholics"],
        &["alcoholism"],
        &["alcoholics"],
        &["alcoholics"],
        &["alcoholics"],
        &["alcoholics"],
        &["alcoholism"],
        &["alcoholism"],
    ],
    range: 3..=8,
};

static WORD_ALB_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_ALB_CHILDREN),
    value: None,
};

pub static WORD_ALB_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("iet")],
    values: &[&["albeit"]],
    range: 3..=3,
};

static WORD_AK_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_AK_CHILDREN),
    value: None,
};

pub static WORD_AK_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ransas"),
        dictgen::InsensitiveStr::Ascii("sreddit"),
    ],
    values: &[&["arkansas"], &["askreddit"]],
    range: 6..=7,
};

static WORD_AJ_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_AJ_CHILDREN),
    value: None,
};

pub static WORD_AJ_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("dectives")],
    values: &[&["adjectives"]],
    range: 8..=8,
};

static WORD_AI_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_AI_CHILDREN),
    value: None,
};

pub static WORD_AI_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("craft"),
        dictgen::InsensitiveStr::Ascii("lenated"),
        dictgen::InsensitiveStr::Ascii("lenating"),
        dictgen::InsensitiveStr::Ascii("lmony"),
        dictgen::InsensitiveStr::Ascii("ncents"),
        dictgen::InsensitiveStr::Ascii("port"),
        dictgen::InsensitiveStr::Ascii("rboner"),
        dictgen::InsensitiveStr::Ascii("rbore"),
        dictgen::InsensitiveStr::Ascii("rbourne"),
        dictgen::InsensitiveStr::Ascii("rbrone"),
        dictgen::InsensitiveStr::Ascii("rcaft"),
        dictgen::InsensitiveStr::Ascii("rcarft"),
        dictgen::InsensitiveStr::Ascii("rcrafts"),
        dictgen::InsensitiveStr::Ascii("rlfow"),
        dictgen::InsensitiveStr::Ascii("rosft"),
        dictgen::InsensitiveStr::Ascii("rplance"),
        dictgen::InsensitiveStr::Ascii("rplans"),
        dictgen::InsensitiveStr::Ascii("rporta"),
        dictgen::InsensitiveStr::Ascii("rpost"),
        dictgen::InsensitiveStr::Ascii("rpsace"),
        dictgen::InsensitiveStr::Ascii("rrcraft"),
        dictgen::InsensitiveStr::Ascii("rscape"),
        dictgen::InsensitiveStr::Ascii("rsfot"),
        dictgen::InsensitiveStr::Ascii("rzona"),
        dictgen::InsensitiveStr::Ascii("sian"),
    ],
    values: &[
        &["aircraft"],
        &["alienated"],
        &["alienating"],
        &["alimony"],
        &["ancients"],
        &["airport"],
        &["airborne"],
        &["airborne"],
        &["airborne"],
        &["airborne"],
        &["aircraft"],
        &["aircraft"],
        &["aircraft"],
        &["airflow"],
        &["airsoft"],
        &["airplane"],
        &["airplanes"],
        &["airports"],
        &["airports"],
        &["airspace"],
        &["aircraft"],
        &["airspace"],
        &["airsoft"],
        &["arizona"],
        &["asian"],
    ],
    range: 4..=8,
};

static WORD_AH_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_AH_CHILDREN),
    value: None,
};

pub static WORD_AH_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ev"),
        dictgen::InsensitiveStr::Ascii("ppen"),
        dictgen::InsensitiveStr::Ascii("tiest"),
        dictgen::InsensitiveStr::Ascii("tletes"),
        dictgen::InsensitiveStr::Ascii("tleticism"),
        dictgen::InsensitiveStr::Ascii("ve"),
    ],
    values: &[
        &["have"],
        &["happen"],
        &["athiest"],
        &["athletes"],
        &["athleticism"],
        &["have"],
    ],
    range: 2..=9,
};

static WORD_AG_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_AG_CHILDREN),
    value: None,
};

static WORD_AG_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    Some(&WORD_AGA_NODE),
    None,
    None,
    None,
    None,
    None,
    Some(&WORD_AGG_NODE),
    None,
    Some(&WORD_AGI_NODE),
    None,
    Some(&WORD_AGK_NODE),
    None,
    None,
    Some(&WORD_AGN_NODE),
    Some(&WORD_AGO_NODE),
    None,
    None,
    Some(&WORD_AGR_NODE),
    None,
    None,
    Some(&WORD_AGU_NODE),
    None,
    None,
    None,
    None,
    None,
];

static WORD_AGU_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_AGU_CHILDREN),
    value: None,
};

pub static WORD_AGU_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("rement")],
    values: &[&["arguement"]],
    range: 6..=6,
};

static WORD_AGR_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_AGR_CHILDREN),
    value: None,
};

pub static WORD_AGR_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("acultural"),
        dictgen::InsensitiveStr::Ascii("avate"),
        dictgen::InsensitiveStr::Ascii("ed"),
        dictgen::InsensitiveStr::Ascii("eeement"),
        dictgen::InsensitiveStr::Ascii("eemnt"),
        dictgen::InsensitiveStr::Ascii("egate"),
        dictgen::InsensitiveStr::Ascii("egates"),
        dictgen::InsensitiveStr::Ascii("eggate"),
        dictgen::InsensitiveStr::Ascii("eing"),
        dictgen::InsensitiveStr::Ascii("entina"),
        dictgen::InsensitiveStr::Ascii("essie"),
        dictgen::InsensitiveStr::Ascii("ession"),
        dictgen::InsensitiveStr::Ascii("essive"),
        dictgen::InsensitiveStr::Ascii("essively"),
        dictgen::InsensitiveStr::Ascii("essivley"),
        dictgen::InsensitiveStr::Ascii("essivnes"),
        dictgen::InsensitiveStr::Ascii("essor"),
        dictgen::InsensitiveStr::Ascii("essvie"),
        dictgen::InsensitiveStr::Ascii("icolture"),
        dictgen::InsensitiveStr::Ascii("iculteral"),
        dictgen::InsensitiveStr::Ascii("iculteur"),
        dictgen::InsensitiveStr::Ascii("iculteurs"),
        dictgen::InsensitiveStr::Ascii("icultral"),
        dictgen::InsensitiveStr::Ascii("icultre"),
        dictgen::InsensitiveStr::Ascii("icultrual"),
        dictgen::InsensitiveStr::Ascii("icultual"),
        dictgen::InsensitiveStr::Ascii("icultue"),
        dictgen::InsensitiveStr::Ascii("iculturual"),
        dictgen::InsensitiveStr::Ascii("iculure"),
        dictgen::InsensitiveStr::Ascii("iculutral"),
        dictgen::InsensitiveStr::Ascii("icutlure"),
        dictgen::InsensitiveStr::Ascii("icuture"),
        dictgen::InsensitiveStr::Ascii("ieved"),
        dictgen::InsensitiveStr::Ascii("igultural"),
        dictgen::InsensitiveStr::Ascii("ocultural"),
        dictgen::InsensitiveStr::Ascii("uable"),
        dictgen::InsensitiveStr::Ascii("uably"),
        dictgen::InsensitiveStr::Ascii("uement"),
        dictgen::InsensitiveStr::Ascii("uing"),
        dictgen::InsensitiveStr::Ascii("ument"),
        dictgen::InsensitiveStr::Ascii("umentative"),
        dictgen::InsensitiveStr::Ascii("uments"),
    ],
    values: &[
        &["agricultural"],
        &["aggravate"],
        &["agreed"],
        &["agreement"],
        &["agreement"],
        &["aggregate"],
        &["aggregates"],
        &["aggregate"],
        &["agreeing"],
        &["argentina"],
        &["agressive"],
        &["aggression"],
        &["aggressive"],
        &["aggressively"],
        &["agressive"],
        &["agressive"],
        &["aggressor"],
        &["agressive"],
        &["agriculture"],
        &["agricultural"],
        &["agriculture"],
        &["agriculture"],
        &["agricultural"],
        &["agriculture"],
        &["agricultural"],
        &["agricultural"],
        &["agriculture"],
        &["agricultural"],
        &["agriculture"],
        &["agricultural"],
        &["agriculture"],
        &["agriculture"],
        &["aggrieved"],
        &["agricultural"],
        &["agricultural"],
        &["arguable"],
        &["arguably"],
        &["arguement"],
        &["arguing"],
        &["argument"],
        &["argumentative"],
        &["arguments"],
    ],
    range: 2..=10,
};

static WORD_AGO_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_AGO_CHILDREN),
    value: None,
};

pub static WORD_AGO_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("nstic"),
        dictgen::InsensitiveStr::Ascii("nsticism"),
    ],
    values: &[&["agnostic"], &["agnosticism"]],
    range: 5..=8,
};

static WORD_AGN_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_AGN_CHILDREN),
    value: None,
};

pub static WORD_AGN_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ositc"),
        dictgen::InsensitiveStr::Ascii("ostacism"),
        dictgen::InsensitiveStr::Ascii("osticim"),
        dictgen::InsensitiveStr::Ascii("osticisim"),
        dictgen::InsensitiveStr::Ascii("osticm"),
        dictgen::InsensitiveStr::Ascii("osticsm"),
        dictgen::InsensitiveStr::Ascii("ostisch"),
        dictgen::InsensitiveStr::Ascii("ostiscm"),
        dictgen::InsensitiveStr::Ascii("ostisicm"),
        dictgen::InsensitiveStr::Ascii("ostisim"),
        dictgen::InsensitiveStr::Ascii("ostisism"),
        dictgen::InsensitiveStr::Ascii("ostocism"),
        dictgen::InsensitiveStr::Ascii("soticism"),
    ],
    values: &[
        &["agnostic"],
        &["agnosticism"],
        &["agnosticism"],
        &["agnosticism"],
        &["agnosticism"],
        &["agnosticism"],
        &["agnostic"],
        &["agnosticism"],
        &["agnosticism"],
        &["agnosticism"],
        &["agnosticism"],
        &["agnosticism"],
        &["agnosticism"],
    ],
    range: 5..=9,
};

static WORD_AGK_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_AGK_CHILDREN),
    value: None,
};

pub static WORD_AGK_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("nowledged")],
    values: &[&["acknowledged"]],
    range: 9..=9,
};

static WORD_AGI_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_AGI_CHILDREN),
    value: None,
};

pub static WORD_AGI_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("an"),
        dictgen::InsensitiveStr::Ascii("anst"),
        dictgen::InsensitiveStr::Ascii("n"),
        dictgen::InsensitiveStr::Ascii("na"),
        dictgen::InsensitiveStr::Ascii("nst"),
        dictgen::InsensitiveStr::Ascii("rcultural"),
    ],
    values: &[
        &["again"],
        &["against"],
        &["again"],
        &["again"],
        &["against"],
        &["agricultural"],
    ],
    range: 1..=9,
};

static WORD_AGG_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_AGG_CHILDREN),
    value: None,
};

pub static WORD_AGG_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("aravates"),
        dictgen::InsensitiveStr::Ascii("egrate"),
        dictgen::InsensitiveStr::Ascii("ragating"),
        dictgen::InsensitiveStr::Ascii("ravanti"),
        dictgen::InsensitiveStr::Ascii("raveted"),
        dictgen::InsensitiveStr::Ascii("reed"),
        dictgen::InsensitiveStr::Ascii("reement"),
        dictgen::InsensitiveStr::Ascii("regatore"),
        dictgen::InsensitiveStr::Ascii("regious"),
        dictgen::InsensitiveStr::Ascii("resions"),
        dictgen::InsensitiveStr::Ascii("resive"),
        dictgen::InsensitiveStr::Ascii("ressivley"),
        dictgen::InsensitiveStr::Ascii("ressivly"),
        dictgen::InsensitiveStr::Ascii("ressivo"),
        dictgen::InsensitiveStr::Ascii("resssion"),
        dictgen::InsensitiveStr::Ascii("rovated"),
        dictgen::InsensitiveStr::Ascii("rovating"),
    ],
    values: &[
        &["aggravates"],
        &["aggregate"],
        &["aggravating"],
        &["aggravating"],
        &["aggravated"],
        &["agreed"],
        &["agreement"],
        &["aggregate"],
        &["egregious"],
        &["aggression"],
        &["aggressive"],
        &["aggressively"],
        &["aggressively"],
        &["aggression"],
        &["aggression"],
        &["aggravated"],
        &["aggravating"],
    ],
    range: 4..=9,
};

static WORD_AGA_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_AGA_CHILDREN),
    value: None,
};

pub static WORD_AGA_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("innst"),
        dictgen::InsensitiveStr::Ascii("ins"),
        dictgen::InsensitiveStr::Ascii("ints"),
        dictgen::InsensitiveStr::Ascii("isnt"),
        dictgen::InsensitiveStr::Ascii("nist"),
    ],
    values: &[
        &["against"],
        &["against"],
        &["against"],
        &["against"],
        &["against"],
    ],
    range: 3..=5,
};

static WORD_AF_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_AF_CHILDREN),
    value: None,
};

pub static WORD_AF_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("air"),
        dictgen::InsensitiveStr::Ascii("faires"),
        dictgen::InsensitiveStr::Ascii("faris"),
        dictgen::InsensitiveStr::Ascii("fectionatley"),
        dictgen::InsensitiveStr::Ascii("fectionnate"),
        dictgen::InsensitiveStr::Ascii("fiars"),
        dictgen::InsensitiveStr::Ascii("ficianados"),
        dictgen::InsensitiveStr::Ascii("ficionado"),
        dictgen::InsensitiveStr::Ascii("ficionados"),
        dictgen::InsensitiveStr::Ascii("filate"),
        dictgen::InsensitiveStr::Ascii("filiato"),
        dictgen::InsensitiveStr::Ascii("filiaton"),
        dictgen::InsensitiveStr::Ascii("filiction"),
        dictgen::InsensitiveStr::Ascii("filliate"),
        dictgen::InsensitiveStr::Ascii("finitiy"),
        dictgen::InsensitiveStr::Ascii("fintiy"),
        dictgen::InsensitiveStr::Ascii("firmate"),
        dictgen::InsensitiveStr::Ascii("firmitave"),
        dictgen::InsensitiveStr::Ascii("firmitive"),
        dictgen::InsensitiveStr::Ascii("firmitve"),
        dictgen::InsensitiveStr::Ascii("fixiation"),
        dictgen::InsensitiveStr::Ascii("flcition"),
        dictgen::InsensitiveStr::Ascii("flection"),
        dictgen::InsensitiveStr::Ascii("fleunt"),
        dictgen::InsensitiveStr::Ascii("fliated"),
        dictgen::InsensitiveStr::Ascii("fliation"),
        dictgen::InsensitiveStr::Ascii("fliciton"),
        dictgen::InsensitiveStr::Ascii("foradble"),
        dictgen::InsensitiveStr::Ascii("fordible"),
        dictgen::InsensitiveStr::Ascii("fort"),
        dictgen::InsensitiveStr::Ascii("fortable"),
        dictgen::InsensitiveStr::Ascii("frimative"),
        dictgen::InsensitiveStr::Ascii("fulent"),
        dictgen::InsensitiveStr::Ascii("gahnistan"),
        dictgen::InsensitiveStr::Ascii("ganhistan"),
        dictgen::InsensitiveStr::Ascii("ghanastan"),
        dictgen::InsensitiveStr::Ascii("ghanisthan"),
        dictgen::InsensitiveStr::Ascii("ghansitan"),
        dictgen::InsensitiveStr::Ascii("hganistan"),
        dictgen::InsensitiveStr::Ascii("ircan"),
        dictgen::InsensitiveStr::Ascii("ircans"),
        dictgen::InsensitiveStr::Ascii("orememtioned"),
        dictgen::InsensitiveStr::Ascii("orementioend"),
        dictgen::InsensitiveStr::Ascii("orementiond"),
        dictgen::InsensitiveStr::Ascii("orementionned"),
        dictgen::InsensitiveStr::Ascii("ricain"),
        dictgen::InsensitiveStr::Ascii("ricanas"),
        dictgen::InsensitiveStr::Ascii("ricaners"),
        dictgen::InsensitiveStr::Ascii("ricaness"),
        dictgen::InsensitiveStr::Ascii("ricanos"),
        dictgen::InsensitiveStr::Ascii("ricas"),
        dictgen::InsensitiveStr::Ascii("terhtought"),
        dictgen::InsensitiveStr::Ascii("termaket"),
        dictgen::InsensitiveStr::Ascii("ternarket"),
        dictgen::InsensitiveStr::Ascii("ternon"),
        dictgen::InsensitiveStr::Ascii("ternooon"),
        dictgen::InsensitiveStr::Ascii("terthougt"),
        dictgen::InsensitiveStr::Ascii("terthougth"),
        dictgen::InsensitiveStr::Ascii("wully"),
    ],
    values: &[
        &["affair"],
        &["affairs"],
        &["affairs"],
        &["affectionate"],
        &["affectionate"],
        &["affairs"],
        &["aficionados"],
        &["aficionado"],
        &["aficionados"],
        &["affiliate"],
        &["affiliation"],
        &["affiliation"],
        &["affiliation"],
        &["affiliate"],
        &["affinity"],
        &["affinity"],
        &["affirmative"],
        &["affirmative"],
        &["affirmative"],
        &["affirmative"],
        &["affiliation"],
        &["affliction"],
        &["affliction"],
        &["affluent"],
        &["affiliated"],
        &["affliction"],
        &["affliction"],
        &["affordable"],
        &["affordable"],
        &["afford"],
        &["affordable"],
        &["affirmative"],
        &["affluent"],
        &["afghanistan"],
        &["afghanistan"],
        &["afghanistan"],
        &["afghanistan"],
        &["afghanistan"],
        &["afghanistan"],
        &["african"],
        &["africans"],
        &["aforementioned"],
        &["aforementioned"],
        &["aforementioned"],
        &["aforementioned"],
        &["african"],
        &["africans"],
        &["africans"],
        &["africans"],
        &["africans"],
        &["africans"],
        &["afterthought"],
        &["aftermarket"],
        &["aftermarket"],
        &["afternoon"],
        &["afternoon"],
        &["afterthought"],
        &["afterthought"],
        &["awfully"],
    ],
    range: 3..=13,
};

static WORD_AE_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_AE_CHILDREN),
    value: None,
};

pub static WORD_AE_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("orspace"),
        dictgen::InsensitiveStr::Ascii("riel"),
        dictgen::InsensitiveStr::Ascii("riels"),
        dictgen::InsensitiveStr::Ascii("ropsace"),
        dictgen::InsensitiveStr::Ascii("rosapce"),
        dictgen::InsensitiveStr::Ascii("rsopace"),
        dictgen::InsensitiveStr::Ascii("stethic"),
        dictgen::InsensitiveStr::Ascii("stethically"),
        dictgen::InsensitiveStr::Ascii("stethics"),
        dictgen::InsensitiveStr::Ascii("sthatically"),
        dictgen::InsensitiveStr::Ascii("sthatics"),
        dictgen::InsensitiveStr::Ascii("sthestic"),
        dictgen::InsensitiveStr::Ascii("sthethics"),
        dictgen::InsensitiveStr::Ascii("stheticaly"),
        dictgen::InsensitiveStr::Ascii("stheticlly"),
        dictgen::InsensitiveStr::Ascii("sthitically"),
        dictgen::InsensitiveStr::Ascii("thistic"),
        dictgen::InsensitiveStr::Ascii("thists"),
    ],
    values: &[
        &["aerospace"],
        &["aerial"],
        &["aerials"],
        &["aerospace"],
        &["aerospace"],
        &["aerospace"],
        &["aesthetic"],
        &["aesthetically"],
        &["aesthetics"],
        &["aesthetically"],
        &["aesthetics"],
        &["aesthetics"],
        &["aesthetics"],
        &["aesthetically"],
        &["aesthetically"],
        &["aesthetically"],
        &["atheistic"],
        &["atheists"],
    ],
    range: 4..=11,
};

static WORD_AD_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_AD_CHILDREN),
    value: None,
};

static WORD_AD_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    Some(&WORD_ADA_NODE),
    Some(&WORD_ADB_NODE),
    None,
    Some(&WORD_ADD_NODE),
    Some(&WORD_ADE_NODE),
    None,
    None,
    Some(&WORD_ADH_NODE),
    Some(&WORD_ADI_NODE),
    Some(&WORD_ADJ_NODE),
    Some(&WORD_ADK_NODE),
    None,
    Some(&WORD_ADM_NODE),
    Some(&WORD_ADN_NODE),
    Some(&WORD_ADO_NODE),
    Some(&WORD_ADP_NODE),
    Some(&WORD_ADQ_NODE),
    Some(&WORD_ADR_NODE),
    None,
    None,
    Some(&WORD_ADU_NODE),
    Some(&WORD_ADV_NODE),
    None,
    None,
    None,
    None,
];

static WORD_ADV_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_ADV_CHILDREN),
    value: None,
};

pub static WORD_ADV_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("antadges"),
        dictgen::InsensitiveStr::Ascii("antageos"),
        dictgen::InsensitiveStr::Ascii("antageus"),
        dictgen::InsensitiveStr::Ascii("antagious"),
        dictgen::InsensitiveStr::Ascii("antagous"),
        dictgen::InsensitiveStr::Ascii("antegeous"),
        dictgen::InsensitiveStr::Ascii("anteges"),
        dictgen::InsensitiveStr::Ascii("atange"),
        dictgen::InsensitiveStr::Ascii("atanges"),
        dictgen::InsensitiveStr::Ascii("entageous"),
        dictgen::InsensitiveStr::Ascii("enterous"),
        dictgen::InsensitiveStr::Ascii("entourus"),
        dictgen::InsensitiveStr::Ascii("entrous"),
        dictgen::InsensitiveStr::Ascii("entrues"),
        dictgen::InsensitiveStr::Ascii("entue"),
        dictgen::InsensitiveStr::Ascii("entuers"),
        dictgen::InsensitiveStr::Ascii("entuous"),
        dictgen::InsensitiveStr::Ascii("entureous"),
        dictgen::InsensitiveStr::Ascii("entureres"),
        dictgen::InsensitiveStr::Ascii("enturious"),
        dictgen::InsensitiveStr::Ascii("enturos"),
        dictgen::InsensitiveStr::Ascii("enturs"),
        dictgen::InsensitiveStr::Ascii("enturuous"),
        dictgen::InsensitiveStr::Ascii("enturus"),
        dictgen::InsensitiveStr::Ascii("entus"),
        dictgen::InsensitiveStr::Ascii("eristy"),
        dictgen::InsensitiveStr::Ascii("ersiting"),
        dictgen::InsensitiveStr::Ascii("erst"),
        dictgen::InsensitiveStr::Ascii("erticed"),
        dictgen::InsensitiveStr::Ascii("erticement"),
        dictgen::InsensitiveStr::Ascii("ertis"),
        dictgen::InsensitiveStr::Ascii("ertisiers"),
        dictgen::InsensitiveStr::Ascii("ertisiment"),
        dictgen::InsensitiveStr::Ascii("ertisment"),
        dictgen::InsensitiveStr::Ascii("ertisments"),
        dictgen::InsensitiveStr::Ascii("ertisors"),
        dictgen::InsensitiveStr::Ascii("ertisted"),
        dictgen::InsensitiveStr::Ascii("ertisters"),
        dictgen::InsensitiveStr::Ascii("ertisting"),
        dictgen::InsensitiveStr::Ascii("ertisy"),
        dictgen::InsensitiveStr::Ascii("esary"),
        dictgen::InsensitiveStr::Ascii("iced"),
        dictgen::InsensitiveStr::Ascii("irtisement"),
        dictgen::InsensitiveStr::Ascii("iseer"),
        dictgen::InsensitiveStr::Ascii("iseur"),
        dictgen::InsensitiveStr::Ascii("isorys"),
        dictgen::InsensitiveStr::Ascii("ocade"),
        dictgen::InsensitiveStr::Ascii("ocats"),
        dictgen::InsensitiveStr::Ascii("ocay"),
        dictgen::InsensitiveStr::Ascii("sior"),
        dictgen::InsensitiveStr::Ascii("siors"),
    ],
    values: &[
        &["advantages"],
        &["advantageous"],
        &["advantageous"],
        &["advantageous"],
        &["advantageous"],
        &["advantageous"],
        &["advantages"],
        &["advantage"],
        &["advantages"],
        &["advantageous"],
        &["adventures"],
        &["adventurous"],
        &["adventurous"],
        &["adventures"],
        &["adventures"],
        &["adventures"],
        &["adventurous"],
        &["adventures"],
        &["adventures"],
        &["adventurous"],
        &["adventurous"],
        &["adventures"],
        &["adventurous"],
        &["adventurous"],
        &["adventures"],
        &["adversity"],
        &["advertising"],
        &["adverts"],
        &["advertised"],
        &["advertisement"],
        &["adverts"],
        &["advertisers"],
        &["advertisement"],
        &["advertisement"],
        &["advertisements"],
        &["advertisers"],
        &["advertised"],
        &["advertisers"],
        &["advertising"],
        &["adversity"],
        &["adversary"],
        &["advised"],
        &["advertisement"],
        &["adviser"],
        &["adviser"],
        &["advisors"],
        &["advocated"],
        &["advocates"],
        &["advocacy"],
        &["advisor"],
        &["advisors"],
    ],
    range: 4..=10,
};

static WORD_ADU_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_ADU_CHILDREN),
    value: None,
};

pub static WORD_ADU_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("iobook"),
        dictgen::InsensitiveStr::Ascii("ltey"),
        dictgen::InsensitiveStr::Ascii("ltrey"),
    ],
    values: &[&["audiobook"], &["adultery"], &["adultery"]],
    range: 4..=6,
};

static WORD_ADR_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_ADR_CHILDREN),
    value: None,
};

pub static WORD_ADR_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("eanline"),
        dictgen::InsensitiveStr::Ascii("elanine"),
        dictgen::InsensitiveStr::Ascii("eneline"),
        dictgen::InsensitiveStr::Ascii("eniline"),
        dictgen::InsensitiveStr::Ascii("es"),
        dictgen::InsensitiveStr::Ascii("esable"),
        dictgen::InsensitiveStr::Ascii("esing"),
        dictgen::InsensitiveStr::Ascii("ess"),
        dictgen::InsensitiveStr::Ascii("essable"),
        dictgen::InsensitiveStr::Ascii("essed"),
        dictgen::InsensitiveStr::Ascii("essing"),
        dictgen::InsensitiveStr::Ascii("oable"),
    ],
    values: &[
        &["adrenaline"],
        &["adrenaline"],
        &["adrenaline"],
        &["adrenaline"],
        &["address"],
        &["addressable"],
        &["addressing"],
        &["address"],
        &["addressable"],
        &["addressed"],
        &["addressing"],
        &["adorable"],
    ],
    range: 2..=7,
};

static WORD_ADQ_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_ADQ_CHILDREN),
    value: None,
};

pub static WORD_ADQ_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("uire"),
        dictgen::InsensitiveStr::Ascii("uired"),
        dictgen::InsensitiveStr::Ascii("uires"),
        dictgen::InsensitiveStr::Ascii("uiring"),
    ],
    values: &[&["acquire"], &["acquired"], &["acquires"], &["acquiring"]],
    range: 4..=6,
};

static WORD_ADP_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_ADP_CHILDREN),
    value: None,
};

pub static WORD_ADP_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("atation"),
        dictgen::InsensitiveStr::Ascii("ater"),
        dictgen::InsensitiveStr::Ascii("aters"),
    ],
    values: &[&["adaptation"], &["adapter"], &["adapters"]],
    range: 4..=7,
};

static WORD_ADO_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_ADO_CHILDREN),
    value: None,
};

pub static WORD_ADO_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("lecent"),
        dictgen::InsensitiveStr::Ascii("lence"),
        dictgen::InsensitiveStr::Ascii("lencence"),
        dictgen::InsensitiveStr::Ascii("lencent"),
        dictgen::InsensitiveStr::Ascii("lescance"),
        dictgen::InsensitiveStr::Ascii("lescant"),
        dictgen::InsensitiveStr::Ascii("lescene"),
        dictgen::InsensitiveStr::Ascii("lescense"),
        dictgen::InsensitiveStr::Ascii("loscent"),
        dictgen::InsensitiveStr::Ascii("lsecent"),
        dictgen::InsensitiveStr::Ascii("rbale"),
        dictgen::InsensitiveStr::Ascii("vcacy"),
        dictgen::InsensitiveStr::Ascii("vcated"),
        dictgen::InsensitiveStr::Ascii("vcates"),
    ],
    values: &[
        &["adolescent"],
        &["adolescent"],
        &["adolescence"],
        &["adolescent"],
        &["adolescence"],
        &["adolescent"],
        &["adolescence"],
        &["adolescence"],
        &["adolescent"],
        &["adolescent"],
        &["adorable"],
        &["advocacy"],
        &["advocated"],
        &["advocates"],
    ],
    range: 5..=8,
};

static WORD_ADN_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_ADN_CHILDREN),
    value: Some(&["and"]),
};

pub static WORD_ADN_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("imistrator")],
    values: &[&["administrators"]],
    range: 10..=10,
};

static WORD_ADM_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_ADM_CHILDREN),
    value: None,
};

pub static WORD_ADM_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("endment"),
        dictgen::InsensitiveStr::Ascii("inastrator"),
        dictgen::InsensitiveStr::Ascii("ininistrative"),
        dictgen::InsensitiveStr::Ascii("inistartion"),
        dictgen::InsensitiveStr::Ascii("inistartor"),
        dictgen::InsensitiveStr::Ascii("inistartors"),
        dictgen::InsensitiveStr::Ascii("inisted"),
        dictgen::InsensitiveStr::Ascii("inisterd"),
        dictgen::InsensitiveStr::Ascii("inistor"),
        dictgen::InsensitiveStr::Ascii("inistored"),
        dictgen::InsensitiveStr::Ascii("inistr"),
        dictgen::InsensitiveStr::Ascii("inistraion"),
        dictgen::InsensitiveStr::Ascii("inistrar"),
        dictgen::InsensitiveStr::Ascii("inistraron"),
        dictgen::InsensitiveStr::Ascii("inistrater"),
        dictgen::InsensitiveStr::Ascii("inistraters"),
        dictgen::InsensitiveStr::Ascii("inistratief"),
        dictgen::InsensitiveStr::Ascii("inistratiei"),
        dictgen::InsensitiveStr::Ascii("inistratieve"),
        dictgen::InsensitiveStr::Ascii("inistratio"),
        dictgen::InsensitiveStr::Ascii("inistratior"),
        dictgen::InsensitiveStr::Ascii("inistratiors"),
        dictgen::InsensitiveStr::Ascii("inistrativne"),
        dictgen::InsensitiveStr::Ascii("inistrativo"),
        dictgen::InsensitiveStr::Ascii("inistraton"),
        dictgen::InsensitiveStr::Ascii("inistre"),
        dictgen::InsensitiveStr::Ascii("inistren"),
        dictgen::InsensitiveStr::Ascii("inistrer"),
        dictgen::InsensitiveStr::Ascii("inistres"),
        dictgen::InsensitiveStr::Ascii("inistrez"),
        dictgen::InsensitiveStr::Ascii("inistro"),
        dictgen::InsensitiveStr::Ascii("insiter"),
        dictgen::InsensitiveStr::Ascii("insitered"),
        dictgen::InsensitiveStr::Ascii("insitration"),
        dictgen::InsensitiveStr::Ascii("insitrative"),
        dictgen::InsensitiveStr::Ascii("insitrator"),
        dictgen::InsensitiveStr::Ascii("insitrators"),
        dictgen::InsensitiveStr::Ascii("instered"),
        dictgen::InsensitiveStr::Ascii("instrate"),
        dictgen::InsensitiveStr::Ascii("instration"),
        dictgen::InsensitiveStr::Ascii("instrative"),
        dictgen::InsensitiveStr::Ascii("instrator"),
        dictgen::InsensitiveStr::Ascii("iraal"),
        dictgen::InsensitiveStr::Ascii("issability"),
        dictgen::InsensitiveStr::Ascii("issable"),
        dictgen::InsensitiveStr::Ascii("ited"),
        dictgen::InsensitiveStr::Ascii("itedly"),
        dictgen::InsensitiveStr::Ascii("ittadely"),
        dictgen::InsensitiveStr::Ascii("ittadly"),
        dictgen::InsensitiveStr::Ascii("ittetly"),
        dictgen::InsensitiveStr::Ascii("ittidly"),
        dictgen::InsensitiveStr::Ascii("rial"),
    ],
    values: &[
        &["amendment"],
        &["administrator"],
        &["administrative"],
        &["administration"],
        &["administrator"],
        &["administrators"],
        &["administered"],
        &["administered"],
        &["administer"],
        &["administer"],
        &["administer"],
        &["administration"],
        &["administrator"],
        &["administrator"],
        &["administrator"],
        &["administrators"],
        &["administrative"],
        &["administrative"],
        &["administrative"],
        &["administrator"],
        &["administrator"],
        &["administrators"],
        &["administrative"],
        &["administration"],
        &["administration"],
        &["administer"],
        &["administer"],
        &["administer"],
        &["administer"],
        &["administer"],
        &["administer"],
        &["administer"],
        &["administered"],
        &["administration"],
        &["administrative"],
        &["administrator"],
        &["administrators"],
        &["administered"],
        &["administrate"],
        &["administration"],
        &["administrative"],
        &["administrator"],
        &["admiral"],
        &["admissibility"],
        &["admissible"],
        &["admitted"],
        &["admittedly"],
        &["admittedly"],
        &["admittedly"],
        &["admittedly"],
        &["admittedly"],
        &["admiral"],
    ],
    range: 4..=13,
};

static WORD_ADK_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_ADK_CHILDREN),
    value: None,
};

pub static WORD_ADK_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("nowledged"),
        dictgen::InsensitiveStr::Ascii("nowledges"),
    ],
    values: &[&["acknowledged"], &["acknowledges"]],
    range: 9..=9,
};

static WORD_ADJ_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_ADJ_CHILDREN),
    value: None,
};

pub static WORD_ADJ_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ectiveus"),
        dictgen::InsensitiveStr::Ascii("ectivos"),
        dictgen::InsensitiveStr::Ascii("ectivs"),
        dictgen::InsensitiveStr::Ascii("ustabe"),
        dictgen::InsensitiveStr::Ascii("ustible"),
    ],
    values: &[
        &["adjectives"],
        &["adjectives"],
        &["adjectives"],
        &["adjustable"],
        &["adjustable"],
    ],
    range: 6..=8,
};

static WORD_ADI_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_ADI_CHILDREN),
    value: None,
};

pub static WORD_ADI_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("vser"),
        dictgen::InsensitiveStr::Ascii("vsor"),
        dictgen::InsensitiveStr::Ascii("vsors"),
    ],
    values: &[&["adviser"], &["advisor"], &["advisors"]],
    range: 4..=5,
};

static WORD_ADH_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_ADH_CHILDREN),
    value: None,
};

pub static WORD_ADH_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("earing"),
        dictgen::InsensitiveStr::Ascii("eisve"),
        dictgen::InsensitiveStr::Ascii("erance"),
        dictgen::InsensitiveStr::Ascii("evise"),
    ],
    values: &[&["adhering"], &["adhesive"], &["adherence"], &["adhesive"]],
    range: 5..=6,
};

static WORD_ADE_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_ADE_CHILDREN),
    value: None,
};

pub static WORD_ADE_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("alide"),
        dictgen::InsensitiveStr::Ascii("cuate"),
        dictgen::InsensitiveStr::Ascii("ilade"),
        dictgen::InsensitiveStr::Ascii("ladie"),
        dictgen::InsensitiveStr::Ascii("liade"),
        dictgen::InsensitiveStr::Ascii("qaute"),
        dictgen::InsensitiveStr::Ascii("quatedly"),
        dictgen::InsensitiveStr::Ascii("quatley"),
        dictgen::InsensitiveStr::Ascii("quet"),
        dictgen::InsensitiveStr::Ascii("quetely"),
        dictgen::InsensitiveStr::Ascii("quit"),
        dictgen::InsensitiveStr::Ascii("quitely"),
        dictgen::InsensitiveStr::Ascii("rnaline"),
    ],
    values: &[
        &["adelaide"],
        &["adequate"],
        &["adelaide"],
        &["adelaide"],
        &["adelaide"],
        &["adequate"],
        &["adequately"],
        &["adequately"],
        &["adequate"],
        &["adequately"],
        &["adequate"],
        &["adequately"],
        &["adrenaline"],
    ],
    range: 4..=8,
};

static WORD_ADD_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_ADD_CHILDREN),
    value: None,
};

pub static WORD_ADD_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("cits"),
        dictgen::InsensitiveStr::Ascii("erss"),
        dictgen::InsensitiveStr::Ascii("icitons"),
        dictgen::InsensitiveStr::Ascii("ictes"),
        dictgen::InsensitiveStr::Ascii("ictin"),
        dictgen::InsensitiveStr::Ascii("ictis"),
        dictgen::InsensitiveStr::Ascii("ional"),
        dictgen::InsensitiveStr::Ascii("ionally"),
        dictgen::InsensitiveStr::Ascii("itinally"),
        dictgen::InsensitiveStr::Ascii("itionaly"),
        dictgen::InsensitiveStr::Ascii("itivies"),
        dictgen::InsensitiveStr::Ascii("itivley"),
        dictgen::InsensitiveStr::Ascii("itonal"),
        dictgen::InsensitiveStr::Ascii("itonally"),
        dictgen::InsensitiveStr::Ascii("ittions"),
        dictgen::InsensitiveStr::Ascii("mission"),
        dictgen::InsensitiveStr::Ascii("opt"),
        dictgen::InsensitiveStr::Ascii("opted"),
        dictgen::InsensitiveStr::Ascii("optive"),
        dictgen::InsensitiveStr::Ascii("res"),
        dictgen::InsensitiveStr::Ascii("resable"),
        dictgen::InsensitiveStr::Ascii("resed"),
        dictgen::InsensitiveStr::Ascii("resing"),
        dictgen::InsensitiveStr::Ascii("ressess"),
        dictgen::InsensitiveStr::Ascii("tion"),
        dictgen::InsensitiveStr::Ascii("tional"),
    ],
    values: &[
        &["addicts"],
        &["address"],
        &["addictions"],
        &["addicts"],
        &["addictions"],
        &["addictions"],
        &["additional"],
        &["additionally"],
        &["additionally"],
        &["additionally"],
        &["additive"],
        &["additive"],
        &["additional"],
        &["additionally"],
        &["addictions"],
        &["admission"],
        &["adopt"],
        &["adopted"],
        &["adoptive"],
        &["address"],
        &["addressable"],
        &["addressed"],
        &["addressing"],
        &["addresses"],
        &["addition"],
        &["additional"],
    ],
    range: 3..=8,
};

static WORD_ADB_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_ADB_CHILDREN),
    value: None,
};

pub static WORD_ADB_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("andon"),
        dictgen::InsensitiveStr::Ascii("omen"),
        dictgen::InsensitiveStr::Ascii("ominal"),
        dictgen::InsensitiveStr::Ascii("ucted"),
    ],
    values: &[&["abandon"], &["abdomen"], &["abdominal"], &["abducted"]],
    range: 4..=6,
};

static WORD_ADA_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_ADA_CHILDREN),
    value: None,
};

pub static WORD_ADA_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ptacion"),
        dictgen::InsensitiveStr::Ascii("ptare"),
        dictgen::InsensitiveStr::Ascii("ptating"),
        dictgen::InsensitiveStr::Ascii("ptes"),
        dictgen::InsensitiveStr::Ascii("quetely"),
        dictgen::InsensitiveStr::Ascii("tper"),
        dictgen::InsensitiveStr::Ascii("vanced"),
    ],
    values: &[
        &["adaptation"],
        &["adapter"],
        &["adaptation"],
        &["adapters"],
        &["adequately"],
        &["adapter"],
        &["advanced"],
    ],
    range: 4..=7,
};

static WORD_AC_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_AC_CHILDREN),
    value: None,
};

static WORD_AC_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    Some(&WORD_ACA_NODE),
    None,
    Some(&WORD_ACC_NODE),
    None,
    Some(&WORD_ACE_NODE),
    Some(&WORD_ACF_NODE),
    None,
    Some(&WORD_ACH_NODE),
    Some(&WORD_ACI_NODE),
    None,
    Some(&WORD_ACK_NODE),
    Some(&WORD_ACL_NODE),
    None,
    Some(&WORD_ACN_NODE),
    Some(&WORD_ACO_NODE),
    None,
    Some(&WORD_ACQ_NODE),
    Some(&WORD_ACR_NODE),
    Some(&WORD_ACS_NODE),
    Some(&WORD_ACT_NODE),
    Some(&WORD_ACU_NODE),
    None,
    None,
    None,
    Some(&WORD_ACY_NODE),
    None,
];

static WORD_ACY_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_ACY_CHILDREN),
    value: None,
};

pub static WORD_ACY_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("rlic")],
    values: &[&["acrylic"]],
    range: 4..=4,
};

static WORD_ACU_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_ACU_CHILDREN),
    value: None,
};

pub static WORD_ACU_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("racy"),
        dictgen::InsensitiveStr::Ascii("sation"),
        dictgen::InsensitiveStr::Ascii("sed"),
        dictgen::InsensitiveStr::Ascii("sing"),
        dictgen::InsensitiveStr::Ascii("stom"),
        dictgen::InsensitiveStr::Ascii("stommed"),
        dictgen::InsensitiveStr::Ascii("tality"),
        dictgen::InsensitiveStr::Ascii("tally"),
        dictgen::InsensitiveStr::Ascii("taly"),
        dictgen::InsensitiveStr::Ascii("tions"),
    ],
    values: &[
        &["accuracy"],
        &["causation"],
        &["accused"],
        &["causing"],
        &["accustom"],
        &["accustomed"],
        &["actuality"],
        &["actually"],
        &["actualy"],
        &["auctions"],
    ],
    range: 3..=7,
};

static WORD_ACT_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_ACT_CHILDREN),
    value: None,
};

pub static WORD_ACT_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("aully"),
        dictgen::InsensitiveStr::Ascii("auly"),
        dictgen::InsensitiveStr::Ascii("icating"),
        dictgen::InsensitiveStr::Ascii("ication"),
        dictgen::InsensitiveStr::Ascii("ivacion"),
        dictgen::InsensitiveStr::Ascii("ivaste"),
        dictgen::InsensitiveStr::Ascii("ivateing"),
        dictgen::InsensitiveStr::Ascii("ivaters"),
        dictgen::InsensitiveStr::Ascii("ivatin"),
        dictgen::InsensitiveStr::Ascii("ivationg"),
        dictgen::InsensitiveStr::Ascii("ivelly"),
        dictgen::InsensitiveStr::Ascii("iviates"),
        dictgen::InsensitiveStr::Ascii("iviites"),
        dictgen::InsensitiveStr::Ascii("ivisim"),
        dictgen::InsensitiveStr::Ascii("ivisiom"),
        dictgen::InsensitiveStr::Ascii("ivisit"),
        dictgen::InsensitiveStr::Ascii("ivisits"),
        dictgen::InsensitiveStr::Ascii("ivistas"),
        dictgen::InsensitiveStr::Ascii("ivistes"),
        dictgen::InsensitiveStr::Ascii("ivistion"),
        dictgen::InsensitiveStr::Ascii("ivit"),
        dictgen::InsensitiveStr::Ascii("ivite"),
        dictgen::InsensitiveStr::Ascii("ivites"),
        dictgen::InsensitiveStr::Ascii("iviting"),
        dictgen::InsensitiveStr::Ascii("ivits"),
        dictgen::InsensitiveStr::Ascii("ivizion"),
        dictgen::InsensitiveStr::Ascii("ivley"),
        dictgen::InsensitiveStr::Ascii("ivly"),
        dictgen::InsensitiveStr::Ascii("resess"),
        dictgen::InsensitiveStr::Ascii("resss"),
        dictgen::InsensitiveStr::Ascii("ualey"),
        dictgen::InsensitiveStr::Ascii("ualiy"),
        dictgen::InsensitiveStr::Ascii("ualky"),
        dictgen::InsensitiveStr::Ascii("ualmy"),
        dictgen::InsensitiveStr::Ascii("ualoy"),
        dictgen::InsensitiveStr::Ascii("ualpy"),
        dictgen::InsensitiveStr::Ascii("ualty"),
        dictgen::InsensitiveStr::Ascii("ualy"),
        dictgen::InsensitiveStr::Ascii("ulay"),
    ],
    values: &[
        &["actually"],
        &["actualy"],
        &["activating"],
        &["activation"],
        &["activation"],
        &["activates"],
        &["activating"],
        &["activates"],
        &["activation"],
        &["activating"],
        &["actively"],
        &["activist"],
        &["activist"],
        &["activism"],
        &["activism"],
        &["activist"],
        &["activist"],
        &["activists"],
        &["activists"],
        &["activision"],
        &["activist"],
        &["activities"],
        &["activities"],
        &["activating"],
        &["activities"],
        &["activision"],
        &["actively"],
        &["actively"],
        &["actresses"],
        &["actresses"],
        &["actualy"],
        &["actuality"],
        &["actualy"],
        &["actualy"],
        &["actualy"],
        &["actualy"],
        &["actualy"],
        &["actually"],
        &["actualy"],
    ],
    range: 4..=8,
};

static WORD_ACS_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_ACS_CHILDREN),
    value: None,
};

pub static WORD_ACS_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ended"),
        dictgen::InsensitiveStr::Ascii("ending"),
        dictgen::InsensitiveStr::Ascii("ension"),
    ],
    values: &[&["ascended"], &["ascending"], &["ascension"]],
    range: 5..=6,
};

static WORD_ACR_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_ACR_CHILDREN),
    value: None,
};

pub static WORD_ACR_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("lyic"),
        dictgen::InsensitiveStr::Ascii("onmys"),
        dictgen::InsensitiveStr::Ascii("onymes"),
        dictgen::InsensitiveStr::Ascii("onymns"),
        dictgen::InsensitiveStr::Ascii("onysm"),
        dictgen::InsensitiveStr::Ascii("oynms"),
        dictgen::InsensitiveStr::Ascii("ynoms"),
    ],
    values: &[
        &["acrylic"],
        &["acronyms"],
        &["acronyms"],
        &["acronyms"],
        &["acronyms"],
        &["acronyms"],
        &["acronyms"],
    ],
    range: 4..=6,
};

static WORD_ACQ_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_ACQ_CHILDREN),
    value: None,
};

pub static WORD_ACQ_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("auinted"),
        dictgen::InsensitiveStr::Ascii("uaintace"),
        dictgen::InsensitiveStr::Ascii("uaintaces"),
        dictgen::InsensitiveStr::Ascii("uaintaince"),
        dictgen::InsensitiveStr::Ascii("uaintence"),
        dictgen::InsensitiveStr::Ascii("uaintences"),
        dictgen::InsensitiveStr::Ascii("uaintinces"),
        dictgen::InsensitiveStr::Ascii("uanitances"),
        dictgen::InsensitiveStr::Ascii("uanited"),
        dictgen::InsensitiveStr::Ascii("uantaince"),
        dictgen::InsensitiveStr::Ascii("uantainces"),
        dictgen::InsensitiveStr::Ascii("uantiance"),
        dictgen::InsensitiveStr::Ascii("uantiances"),
        dictgen::InsensitiveStr::Ascii("uiantance"),
        dictgen::InsensitiveStr::Ascii("uiantances"),
        dictgen::InsensitiveStr::Ascii("uianted"),
        dictgen::InsensitiveStr::Ascii("uiantence"),
        dictgen::InsensitiveStr::Ascii("uiantences"),
        dictgen::InsensitiveStr::Ascii("uifer"),
        dictgen::InsensitiveStr::Ascii("uinated"),
        dictgen::InsensitiveStr::Ascii("uisation"),
        dictgen::InsensitiveStr::Ascii("uisito"),
        dictgen::InsensitiveStr::Ascii("uisiton"),
        dictgen::InsensitiveStr::Ascii("uited"),
        dictgen::InsensitiveStr::Ascii("uried"),
    ],
    values: &[
        &["acquainted"],
        &["acquaintance"],
        &["acquaintances"],
        &["acquaintance"],
        &["acquaintance"],
        &["acquaintances"],
        &["acquaintances"],
        &["acquaintance"],
        &["acquainted"],
        &["acquaintance"],
        &["acquaintances"],
        &["acquaintances"],
        &["acquaintances"],
        &["acquaintances"],
        &["acquaintances"],
        &["acquainted"],
        &["acquaintance"],
        &["acquaintances"],
        &["acquire"],
        &["acquainted"],
        &["acquisition"],
        &["acquisition"],
        &["acquisition"],
        &["acquitted"],
        &["acquired"],
    ],
    range: 5..=10,
};

static WORD_ACO_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_ACO_CHILDREN),
    value: None,
};

pub static WORD_ACO_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("mmodate"),
        dictgen::InsensitiveStr::Ascii("mplish"),
        dictgen::InsensitiveStr::Ascii("mplished"),
        dictgen::InsensitiveStr::Ascii("mplishment"),
        dictgen::InsensitiveStr::Ascii("mplishments"),
        dictgen::InsensitiveStr::Ascii("palypse"),
        dictgen::InsensitiveStr::Ascii("palyptic"),
        dictgen::InsensitiveStr::Ascii("rding"),
        dictgen::InsensitiveStr::Ascii("rdingly"),
        dictgen::InsensitiveStr::Ascii("rnyms"),
        dictgen::InsensitiveStr::Ascii("usitc"),
        dictgen::InsensitiveStr::Ascii("utsic"),
        dictgen::InsensitiveStr::Ascii("vados"),
    ],
    values: &[
        &["accommodate"],
        &["accomplish"],
        &["accomplished"],
        &["accomplishment"],
        &["accomplishments"],
        &["apocalypse"],
        &["apocalyptic"],
        &["according"],
        &["accordingly"],
        &["acronyms"],
        &["acoustic"],
        &["acoustic"],
        &["avocados"],
    ],
    range: 5..=11,
};

static WORD_ACN_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_ACN_CHILDREN),
    value: None,
};

pub static WORD_ACN_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("edote")],
    values: &[&["anecdote"]],
    range: 5..=5,
};

static WORD_ACL_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_ACL_CHILDREN),
    value: None,
};

pub static WORD_ACL_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("hemist")],
    values: &[&["alchemist"]],
    range: 6..=6,
};

static WORD_ACK_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_ACK_CHILDREN),
    value: None,
};

pub static WORD_ACK_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("nolwedge"),
        dictgen::InsensitiveStr::Ascii("nolwedged"),
        dictgen::InsensitiveStr::Ascii("nolwedgement"),
        dictgen::InsensitiveStr::Ascii("nolwedges"),
        dictgen::InsensitiveStr::Ascii("nolwedging"),
        dictgen::InsensitiveStr::Ascii("noweldge"),
        dictgen::InsensitiveStr::Ascii("noweldged"),
        dictgen::InsensitiveStr::Ascii("noweldgement"),
        dictgen::InsensitiveStr::Ascii("noweldges"),
        dictgen::InsensitiveStr::Ascii("nowiedged"),
        dictgen::InsensitiveStr::Ascii("nowladges"),
        dictgen::InsensitiveStr::Ascii("nowldeged"),
        dictgen::InsensitiveStr::Ascii("nowldegement"),
        dictgen::InsensitiveStr::Ascii("nowldge"),
        dictgen::InsensitiveStr::Ascii("nowlede"),
        dictgen::InsensitiveStr::Ascii("nowleded"),
        dictgen::InsensitiveStr::Ascii("nowledgeing"),
        dictgen::InsensitiveStr::Ascii("nowledgemnt"),
        dictgen::InsensitiveStr::Ascii("nowledget"),
        dictgen::InsensitiveStr::Ascii("nowleding"),
        dictgen::InsensitiveStr::Ascii("nowlegde"),
        dictgen::InsensitiveStr::Ascii("nowlegded"),
        dictgen::InsensitiveStr::Ascii("nowlegdement"),
        dictgen::InsensitiveStr::Ascii("nowlegdes"),
        dictgen::InsensitiveStr::Ascii("nowlegding"),
        dictgen::InsensitiveStr::Ascii("nowlege"),
        dictgen::InsensitiveStr::Ascii("nowleged"),
        dictgen::InsensitiveStr::Ascii("nowleges"),
        dictgen::InsensitiveStr::Ascii("nwoledge"),
        dictgen::InsensitiveStr::Ascii("umulation"),
        dictgen::InsensitiveStr::Ascii("ward"),
    ],
    values: &[
        &["acknowledge"],
        &["acknowledged"],
        &["acknowledgement"],
        &["acknowledges"],
        &["acknowledging"],
        &["acknowledge"],
        &["acknowledged"],
        &["acknowledgement"],
        &["acknowledges"],
        &["acknowledged"],
        &["acknowledges"],
        &["acknowledged"],
        &["acknowledgement"],
        &["acknowledge"],
        &["acknowledge"],
        &["acknowledged"],
        &["acknowledging"],
        &["acknowledgement"],
        &["acknowledgment"],
        &["acknowledging"],
        &["acknowledge"],
        &["acknowledged"],
        &["acknowledgement"],
        &["acknowledges"],
        &["acknowledging"],
        &["acknowledge"],
        &["acknowledge"],
        &["acknowledges"],
        &["acknowledges"],
        &["accumulation"],
        &["awkward"],
    ],
    range: 4..=12,
};

static WORD_ACI_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_ACI_CHILDREN),
    value: None,
};

pub static WORD_ACI_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("dent"),
        dictgen::InsensitiveStr::Ascii("tvates"),
        dictgen::InsensitiveStr::Ascii("tvating"),
        dictgen::InsensitiveStr::Ascii("tvision"),
    ],
    values: &[
        &["accident"],
        &["activates"],
        &["activating"],
        &["activision"],
    ],
    range: 4..=7,
};

static WORD_ACH_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_ACH_CHILDREN),
    value: None,
};

pub static WORD_ACH_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("eivable"),
        dictgen::InsensitiveStr::Ascii("eive"),
        dictgen::InsensitiveStr::Ascii("eived"),
        dictgen::InsensitiveStr::Ascii("eivement"),
        dictgen::InsensitiveStr::Ascii("eivements"),
        dictgen::InsensitiveStr::Ascii("eives"),
        dictgen::InsensitiveStr::Ascii("eiving"),
        dictgen::InsensitiveStr::Ascii("eivment"),
        dictgen::InsensitiveStr::Ascii("eivments"),
        dictgen::InsensitiveStr::Ascii("eviable"),
        dictgen::InsensitiveStr::Ascii("iavable"),
        dictgen::InsensitiveStr::Ascii("ieval"),
        dictgen::InsensitiveStr::Ascii("ieveble"),
        dictgen::InsensitiveStr::Ascii("ieveds"),
        dictgen::InsensitiveStr::Ascii("ievemint"),
        dictgen::InsensitiveStr::Ascii("ievemnt"),
        dictgen::InsensitiveStr::Ascii("ievemnts"),
        dictgen::InsensitiveStr::Ascii("ievemts"),
        dictgen::InsensitiveStr::Ascii("ievents"),
        dictgen::InsensitiveStr::Ascii("ievment"),
        dictgen::InsensitiveStr::Ascii("ievments"),
        dictgen::InsensitiveStr::Ascii("illees"),
        dictgen::InsensitiveStr::Ascii("illeos"),
        dictgen::InsensitiveStr::Ascii("illeous"),
        dictgen::InsensitiveStr::Ascii("illeus"),
        dictgen::InsensitiveStr::Ascii("ive"),
        dictgen::InsensitiveStr::Ascii("iveable"),
        dictgen::InsensitiveStr::Ascii("ived"),
        dictgen::InsensitiveStr::Ascii("iveing"),
        dictgen::InsensitiveStr::Ascii("ivement"),
        dictgen::InsensitiveStr::Ascii("ivements"),
    ],
    values: &[
        &["achievable"],
        &["achieve"],
        &["achieved"],
        &["achievement"],
        &["achievements"],
        &["achieves"],
        &["achieving"],
        &["achievement"],
        &["achievements"],
        &["achievable"],
        &["achievable"],
        &["achievable"],
        &["achievable"],
        &["achieves"],
        &["achievement"],
        &["achievement"],
        &["achievements"],
        &["achieves"],
        &["achieves"],
        &["achievement"],
        &["achievements"],
        &["achilles"],
        &["achilles"],
        &["achilles"],
        &["achilles"],
        &["achieve"],
        &["achievable"],
        &["achieved"],
        &["achieving"],
        &["achievement"],
        &["achievements"],
    ],
    range: 3..=9,
};

static WORD_ACF_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_ACF_CHILDREN),
    value: None,
};

pub static WORD_ACF_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("tually")],
    values: &[&["factually"]],
    range: 6..=6,
};

static WORD_ACE_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_ACE_CHILDREN),
    value: None,
};

pub static WORD_ACE_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("damia"),
        dictgen::InsensitiveStr::Ascii("demic"),
        dictgen::InsensitiveStr::Ascii("demically"),
    ],
    values: &[&["academia"], &["academic"], &["academically"]],
    range: 5..=9,
};

static WORD_ACC_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_ACC_CHILDREN),
    value: None,
};

static WORD_ACC_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    Some(&WORD_ACCA_NODE),
    None,
    Some(&WORD_ACCC_NODE),
    Some(&WORD_ACCD_NODE),
    Some(&WORD_ACCE_NODE),
    None,
    None,
    None,
    Some(&WORD_ACCI_NODE),
    None,
    None,
    Some(&WORD_ACCL_NODE),
    None,
    None,
    Some(&WORD_ACCO_NODE),
    Some(&WORD_ACCP_NODE),
    Some(&WORD_ACCQ_NODE),
    Some(&WORD_ACCR_NODE),
    None,
    None,
    Some(&WORD_ACCU_NODE),
    None,
    None,
    None,
    None,
    None,
];

static WORD_ACCU_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_ACCU_CHILDREN),
    value: None,
};

pub static WORD_ACCU_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("arcy"),
        dictgen::InsensitiveStr::Ascii("astion"),
        dictgen::InsensitiveStr::Ascii("lumate"),
        dictgen::InsensitiveStr::Ascii("lumated"),
        dictgen::InsensitiveStr::Ascii("lumation"),
        dictgen::InsensitiveStr::Ascii("malate"),
        dictgen::InsensitiveStr::Ascii("malated"),
        dictgen::InsensitiveStr::Ascii("malation"),
        dictgen::InsensitiveStr::Ascii("melate"),
        dictgen::InsensitiveStr::Ascii("melated"),
        dictgen::InsensitiveStr::Ascii("milate"),
        dictgen::InsensitiveStr::Ascii("milated"),
        dictgen::InsensitiveStr::Ascii("milation"),
        dictgen::InsensitiveStr::Ascii("mulare"),
        dictgen::InsensitiveStr::Ascii("mulatin"),
        dictgen::InsensitiveStr::Ascii("mulato"),
        dictgen::InsensitiveStr::Ascii("mulaton"),
        dictgen::InsensitiveStr::Ascii("mule"),
        dictgen::InsensitiveStr::Ascii("multed"),
        dictgen::InsensitiveStr::Ascii("raccy"),
        dictgen::InsensitiveStr::Ascii("ratelly"),
        dictgen::InsensitiveStr::Ascii("ratley"),
        dictgen::InsensitiveStr::Ascii("ray"),
        dictgen::InsensitiveStr::Ascii("sating"),
        dictgen::InsensitiveStr::Ascii("sato"),
        dictgen::InsensitiveStr::Ascii("sition"),
        dictgen::InsensitiveStr::Ascii("ssed"),
        dictgen::InsensitiveStr::Ascii("stommed"),
        dictgen::InsensitiveStr::Ascii("stumed"),
    ],
    values: &[
        &["accuracy"],
        &["accusation"],
        &["accumulate"],
        &["accumulated"],
        &["accumulation"],
        &["accumulate"],
        &["accumulated"],
        &["accumulation"],
        &["accumulate"],
        &["accumulated"],
        &["accumulate"],
        &["accumulated"],
        &["accumulation"],
        &["accumulate"],
        &["accumulation"],
        &["accumulation"],
        &["accumulation"],
        &["accumulate"],
        &["accumulated"],
        &["accuracy"],
        &["accurately"],
        &["accurately"],
        &["accuracy"],
        &["accusation"],
        &["accusation"],
        &["accusation"],
        &["accused"],
        &["accustomed"],
        &["accustomed"],
    ],
    range: 3..=8,
};

static WORD_ACCR_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_ACCR_CHILDREN),
    value: None,
};

pub static WORD_ACCR_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ediated"),
        dictgen::InsensitiveStr::Ascii("ediation"),
        dictgen::InsensitiveStr::Ascii("edidation"),
        dictgen::InsensitiveStr::Ascii("editied"),
        dictgen::InsensitiveStr::Ascii("editted"),
        dictgen::InsensitiveStr::Ascii("oding"),
        dictgen::InsensitiveStr::Ascii("oss"),
    ],
    values: &[
        &["accredited"],
        &["accreditation"],
        &["accreditation"],
        &["accredited"],
        &["accredited"],
        &["according"],
        &["across"],
    ],
    range: 3..=9,
};

static WORD_ACCQ_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_ACCQ_CHILDREN),
    value: None,
};

pub static WORD_ACCQ_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("uainted")],
    values: &[&["acquainted"]],
    range: 7..=7,
};

static WORD_ACCP_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_ACCP_CHILDREN),
    value: None,
};

pub static WORD_ACCP_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("etable"),
        dictgen::InsensitiveStr::Ascii("etance"),
        dictgen::InsensitiveStr::Ascii("eted"),
        dictgen::InsensitiveStr::Ascii("ets"),
    ],
    values: &[
        &["acceptable"],
        &["acceptance"],
        &["accepted"],
        &["accepts"],
    ],
    range: 3..=6,
};

static WORD_ACCO_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_ACCO_CHILDREN),
    value: None,
};

pub static WORD_ACCO_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("madate"),
        dictgen::InsensitiveStr::Ascii("madated"),
        dictgen::InsensitiveStr::Ascii("madates"),
        dictgen::InsensitiveStr::Ascii("madating"),
        dictgen::InsensitiveStr::Ascii("madation"),
        dictgen::InsensitiveStr::Ascii("madations"),
        dictgen::InsensitiveStr::Ascii("mdate"),
        dictgen::InsensitiveStr::Ascii("mmadate"),
        dictgen::InsensitiveStr::Ascii("mmadating"),
        dictgen::InsensitiveStr::Ascii("mmadation"),
        dictgen::InsensitiveStr::Ascii("mmidate"),
        dictgen::InsensitiveStr::Ascii("mmidation"),
        dictgen::InsensitiveStr::Ascii("modate"),
        dictgen::InsensitiveStr::Ascii("modated"),
        dictgen::InsensitiveStr::Ascii("modates"),
        dictgen::InsensitiveStr::Ascii("modating"),
        dictgen::InsensitiveStr::Ascii("modation"),
        dictgen::InsensitiveStr::Ascii("modations"),
        dictgen::InsensitiveStr::Ascii("mondate"),
        dictgen::InsensitiveStr::Ascii("mondating"),
        dictgen::InsensitiveStr::Ascii("mondation"),
        dictgen::InsensitiveStr::Ascii("mpained"),
        dictgen::InsensitiveStr::Ascii("mpanyed"),
        dictgen::InsensitiveStr::Ascii("mpianed"),
        dictgen::InsensitiveStr::Ascii("mpined"),
        dictgen::InsensitiveStr::Ascii("mpinied"),
        dictgen::InsensitiveStr::Ascii("mplise"),
        dictgen::InsensitiveStr::Ascii("mplises"),
        dictgen::InsensitiveStr::Ascii("mplishements"),
        dictgen::InsensitiveStr::Ascii("mplishemnt"),
        dictgen::InsensitiveStr::Ascii("mplishemnts"),
        dictgen::InsensitiveStr::Ascii("mplishent"),
        dictgen::InsensitiveStr::Ascii("mplishents"),
        dictgen::InsensitiveStr::Ascii("mplishs"),
        dictgen::InsensitiveStr::Ascii("mpliss"),
        dictgen::InsensitiveStr::Ascii("mponied"),
        dictgen::InsensitiveStr::Ascii("nplishment"),
        dictgen::InsensitiveStr::Ascii("rdeon"),
        dictgen::InsensitiveStr::Ascii("rdian"),
        dictgen::InsensitiveStr::Ascii("ridng"),
        dictgen::InsensitiveStr::Ascii("ring"),
        dictgen::InsensitiveStr::Ascii("stumed"),
        dictgen::InsensitiveStr::Ascii("untabillity"),
        dictgen::InsensitiveStr::Ascii("untabilty"),
        dictgen::InsensitiveStr::Ascii("untas"),
        dictgen::InsensitiveStr::Ascii("untat"),
        dictgen::InsensitiveStr::Ascii("untatns"),
        dictgen::InsensitiveStr::Ascii("untent"),
        dictgen::InsensitiveStr::Ascii("untents"),
        dictgen::InsensitiveStr::Ascii("untt"),
        dictgen::InsensitiveStr::Ascii("ustic"),
    ],
    values: &[
        &["accommodate"],
        &["accommodated"],
        &["accommodates"],
        &["accommodating"],
        &["accommodation"],
        &["accommodations"],
        &["accommodate"],
        &["accommodate"],
        &["accommodating"],
        &["accommodation"],
        &["accommodate"],
        &["accommodation"],
        &["accommodate"],
        &["accommodated"],
        &["accommodates"],
        &["accommodating"],
        &["accommodation"],
        &["accommodations"],
        &["accommodate"],
        &["accommodating"],
        &["accommodation"],
        &["accompanied"],
        &["accompanied"],
        &["accompanied"],
        &["accompanied"],
        &["accompanied"],
        &["accomplishes"],
        &["accomplishes"],
        &["accomplishments"],
        &["accomplishment"],
        &["accomplishments"],
        &["accomplishment"],
        &["accomplishes"],
        &["accomplishes"],
        &["accomplishes"],
        &["accompanied"],
        &["accomplishment"],
        &["accordion"],
        &["accordion"],
        &["according"],
        &["according"],
        &["accustomed"],
        &["accountability"],
        &["accountability"],
        &["accountants"],
        &["accountants"],
        &["accountants"],
        &["accountant"],
        &["accountants"],
        &["accountant"],
        &["acoustic"],
    ],
    range: 4..=12,
};

static WORD_ACCL_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_ACCL_CHILDREN),
    value: None,
};

pub static WORD_ACCL_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("amied"),
        dictgen::InsensitiveStr::Ascii("iamed"),
        dictgen::InsensitiveStr::Ascii("imitization"),
    ],
    values: &[&["acclaimed"], &["acclaimed"], &["acclimatization"]],
    range: 5..=11,
};

static WORD_ACCI_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_ACCI_CHILDREN),
    value: None,
};

pub static WORD_ACCI_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("cently"),
        dictgen::InsensitiveStr::Ascii("dantely"),
        dictgen::InsensitiveStr::Ascii("dantly"),
        dictgen::InsensitiveStr::Ascii("debtly"),
        dictgen::InsensitiveStr::Ascii("denlty"),
        dictgen::InsensitiveStr::Ascii("dens"),
        dictgen::InsensitiveStr::Ascii("dentaly"),
        dictgen::InsensitiveStr::Ascii("dentely"),
        dictgen::InsensitiveStr::Ascii("dentes"),
        dictgen::InsensitiveStr::Ascii("dential"),
        dictgen::InsensitiveStr::Ascii("dentily"),
        dictgen::InsensitiveStr::Ascii("dentky"),
        dictgen::InsensitiveStr::Ascii("dentlaly"),
        dictgen::InsensitiveStr::Ascii("dentlay"),
        dictgen::InsensitiveStr::Ascii("dentley"),
        dictgen::InsensitiveStr::Ascii("dentlly"),
        dictgen::InsensitiveStr::Ascii("dently"),
        dictgen::InsensitiveStr::Ascii("denty"),
        dictgen::InsensitiveStr::Ascii("deny"),
        dictgen::InsensitiveStr::Ascii("dnetly"),
    ],
    values: &[
        &["accidently"],
        &["accidently"],
        &["accidently"],
        &["accidently"],
        &["accidently"],
        &["accidents"],
        &["accidentally"],
        &["accidently"],
        &["accidents"],
        &["accidental"],
        &["accidently"],
        &["accidently"],
        &["accidently"],
        &["accidently"],
        &["accidently"],
        &["accidently"],
        &["accidentally"],
        &["accidently"],
        &["accidently"],
        &["accidently"],
    ],
    range: 4..=8,
};

static WORD_ACCE_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_ACCE_CHILDREN),
    value: None,
};

pub static WORD_ACCE_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("dentally"),
        dictgen::InsensitiveStr::Ascii("larate"),
        dictgen::InsensitiveStr::Ascii("larated"),
        dictgen::InsensitiveStr::Ascii("larating"),
        dictgen::InsensitiveStr::Ascii("laration"),
        dictgen::InsensitiveStr::Ascii("larator"),
        dictgen::InsensitiveStr::Ascii("leartion"),
        dictgen::InsensitiveStr::Ascii("lerade"),
        dictgen::InsensitiveStr::Ascii("leraptor"),
        dictgen::InsensitiveStr::Ascii("lerar"),
        dictgen::InsensitiveStr::Ascii("lerare"),
        dictgen::InsensitiveStr::Ascii("lerater"),
        dictgen::InsensitiveStr::Ascii("leratie"),
        dictgen::InsensitiveStr::Ascii("leratio"),
        dictgen::InsensitiveStr::Ascii("lerato"),
        dictgen::InsensitiveStr::Ascii("leraton"),
        dictgen::InsensitiveStr::Ascii("leread"),
        dictgen::InsensitiveStr::Ascii("lertor"),
        dictgen::InsensitiveStr::Ascii("lleration"),
        dictgen::InsensitiveStr::Ascii("lorate"),
        dictgen::InsensitiveStr::Ascii("lorated"),
        dictgen::InsensitiveStr::Ascii("lorating"),
        dictgen::InsensitiveStr::Ascii("lorator"),
        dictgen::InsensitiveStr::Ascii("nding"),
        dictgen::InsensitiveStr::Ascii("nsion"),
        dictgen::InsensitiveStr::Ascii("ptabel"),
        dictgen::InsensitiveStr::Ascii("ptabelt"),
        dictgen::InsensitiveStr::Ascii("ptabil"),
        dictgen::InsensitiveStr::Ascii("ptence"),
        dictgen::InsensitiveStr::Ascii("pterad"),
        dictgen::InsensitiveStr::Ascii("ptes"),
        dictgen::InsensitiveStr::Ascii("ptible"),
        dictgen::InsensitiveStr::Ascii("relate"),
        dictgen::InsensitiveStr::Ascii("sories"),
        dictgen::InsensitiveStr::Ascii("ssable"),
        dictgen::InsensitiveStr::Ascii("ssbile"),
        dictgen::InsensitiveStr::Ascii("sseries"),
        dictgen::InsensitiveStr::Ascii("ssibile"),
        dictgen::InsensitiveStr::Ascii("ssibilty"),
        dictgen::InsensitiveStr::Ascii("ssibily"),
        dictgen::InsensitiveStr::Ascii("ssoire"),
        dictgen::InsensitiveStr::Ascii("ssoires"),
        dictgen::InsensitiveStr::Ascii("ssoirs"),
        dictgen::InsensitiveStr::Ascii("sss"),
    ],
    values: &[
        &["accidentally"],
        &["accelerate"],
        &["accelerated"],
        &["accelerating"],
        &["acceleration"],
        &["accelerator"],
        &["acceleration"],
        &["accelerated"],
        &["accelerator"],
        &["accelerator"],
        &["accelerate"],
        &["accelerator"],
        &["accelerate"],
        &["accelerator"],
        &["acceleration"],
        &["acceleration"],
        &["accelerated"],
        &["accelerator"],
        &["acceleration"],
        &["accelerate"],
        &["accelerated"],
        &["accelerating"],
        &["accelerator"],
        &["ascending"],
        &["accession"],
        &["acceptable"],
        &["acceptable"],
        &["acceptable"],
        &["acceptance"],
        &["accepted"],
        &["accepts"],
        &["acceptable"],
        &["accelerated"],
        &["accessories"],
        &["accessible"],
        &["accessible"],
        &["accessories"],
        &["accessible"],
        &["accessibility"],
        &["accessibility"],
        &["accessories"],
        &["accessories"],
        &["accessories"],
        &["access"],
    ],
    range: 3..=9,
};

static WORD_ACCD_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_ACCD_CHILDREN),
    value: None,
};

pub static WORD_ACCD_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("iently")],
    values: &[&["accidently"]],
    range: 6..=6,
};

static WORD_ACCC_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_ACCC_CHILDREN),
    value: None,
};

pub static WORD_ACCC_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("used")],
    values: &[&["accused"]],
    range: 4..=4,
};

static WORD_ACCA_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_ACCA_CHILDREN),
    value: None,
};

pub static WORD_ACCA_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("demic"),
        dictgen::InsensitiveStr::Ascii("demy"),
        dictgen::InsensitiveStr::Ascii("limed"),
    ],
    values: &[&["academic"], &["academy"], &["acclaimed"]],
    range: 4..=5,
};

static WORD_ACA_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_ACA_CHILDREN),
    value: None,
};

pub static WORD_ACA_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("damy"),
        dictgen::InsensitiveStr::Ascii("demcially"),
        dictgen::InsensitiveStr::Ascii("demica"),
        dictgen::InsensitiveStr::Ascii("demicaly"),
        dictgen::InsensitiveStr::Ascii("demicas"),
        dictgen::InsensitiveStr::Ascii("demicese"),
        dictgen::InsensitiveStr::Ascii("demicos"),
        dictgen::InsensitiveStr::Ascii("demicus"),
        dictgen::InsensitiveStr::Ascii("demis"),
        dictgen::InsensitiveStr::Ascii("dmic"),
    ],
    values: &[
        &["academy"],
        &["academically"],
        &["academia"],
        &["academically"],
        &["academics"],
        &["academics"],
        &["academics"],
        &["academics"],
        &["academics"],
        &["academic"],
    ],
    range: 4..=9,
};

static WORD_AB_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Nested(&WORD_AB_CHILDREN),
    value: None,
};

static WORD_AB_CHILDREN: [Option<&dictgen::DictTrieNode<&'static [&'static str]>>; 26] = [
    Some(&WORD_ABA_NODE),
    Some(&WORD_ABB_NODE),
    None,
    Some(&WORD_ABD_NODE),
    Some(&WORD_ABE_NODE),
    None,
    None,
    None,
    Some(&WORD_ABI_NODE),
    None,
    None,
    None,
    None,
    Some(&WORD_ABN_NODE),
    Some(&WORD_ABO_NODE),
    None,
    None,
    Some(&WORD_ABR_NODE),
    Some(&WORD_ABS_NODE),
    None,
    Some(&WORD_ABU_NODE),
    None,
    None,
    None,
    Some(&WORD_ABY_NODE),
    None,
];

static WORD_ABY_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_ABY_CHILDREN),
    value: None,
};

pub static WORD_ABY_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("msal")],
    values: &[&["abysmal"]],
    range: 4..=4,
};

static WORD_ABU_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_ABU_CHILDREN),
    value: None,
};

pub static WORD_ABU_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("dance"),
        dictgen::InsensitiveStr::Ascii("dcted"),
        dictgen::InsensitiveStr::Ascii("ndacies"),
        dictgen::InsensitiveStr::Ascii("ndancies"),
        dictgen::InsensitiveStr::Ascii("ndunt"),
        dictgen::InsensitiveStr::Ascii("rptly"),
        dictgen::InsensitiveStr::Ascii("seres"),
        dictgen::InsensitiveStr::Ascii("srdity"),
        dictgen::InsensitiveStr::Ascii("srdly"),
        dictgen::InsensitiveStr::Ascii("tts"),
    ],
    values: &[
        &["abundance"],
        &["abducted"],
        &["abundances"],
        &["abundances"],
        &["abundant"],
        &["abruptly"],
        &["abusers"],
        &["absurdity"],
        &["absurdly"],
        &["abuts"],
    ],
    range: 3..=8,
};

static WORD_ABS_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_ABS_CHILDREN),
    value: None,
};

pub static WORD_ABS_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ail"),
        dictgen::InsensitiveStr::Ascii("ailing"),
        dictgen::InsensitiveStr::Ascii("cence"),
        dictgen::InsensitiveStr::Ascii("ense"),
        dictgen::InsensitiveStr::Ascii("estos"),
        dictgen::InsensitiveStr::Ascii("intence"),
        dictgen::InsensitiveStr::Ascii("itnence"),
        dictgen::InsensitiveStr::Ascii("loutes"),
        dictgen::InsensitiveStr::Ascii("olue"),
        dictgen::InsensitiveStr::Ascii("olument"),
        dictgen::InsensitiveStr::Ascii("olutelly"),
        dictgen::InsensitiveStr::Ascii("olutelys"),
        dictgen::InsensitiveStr::Ascii("olutey"),
        dictgen::InsensitiveStr::Ascii("olutisme"),
        dictgen::InsensitiveStr::Ascii("olutiste"),
        dictgen::InsensitiveStr::Ascii("olutley"),
        dictgen::InsensitiveStr::Ascii("olutly"),
        dictgen::InsensitiveStr::Ascii("oluts"),
        dictgen::InsensitiveStr::Ascii("olvte"),
        dictgen::InsensitiveStr::Ascii("oprtion"),
        dictgen::InsensitiveStr::Ascii("orbes"),
        dictgen::InsensitiveStr::Ascii("orbsion"),
        dictgen::InsensitiveStr::Ascii("orbtion"),
        dictgen::InsensitiveStr::Ascii("orpsion"),
        dictgen::InsensitiveStr::Ascii("oulte"),
        dictgen::InsensitiveStr::Ascii("oultely"),
        dictgen::InsensitiveStr::Ascii("oultes"),
        dictgen::InsensitiveStr::Ascii("ovle"),
        dictgen::InsensitiveStr::Ascii("robs"),
        dictgen::InsensitiveStr::Ascii("tanence"),
        dictgen::InsensitiveStr::Ascii("tante"),
        dictgen::InsensitiveStr::Ascii("tenance"),
        dictgen::InsensitiveStr::Ascii("tenince"),
        dictgen::InsensitiveStr::Ascii("tinense"),
        dictgen::InsensitiveStr::Ascii("tinince"),
        dictgen::InsensitiveStr::Ascii("traccion"),
        dictgen::InsensitiveStr::Ascii("tracto"),
        dictgen::InsensitiveStr::Ascii("traktion"),
        dictgen::InsensitiveStr::Ascii("truction"),
        dictgen::InsensitiveStr::Ascii("uers"),
        dictgen::InsensitiveStr::Ascii("urditiy"),
        dictgen::InsensitiveStr::Ascii("urdley"),
        dictgen::InsensitiveStr::Ascii("urdy"),
        dictgen::InsensitiveStr::Ascii("uridty"),
        dictgen::InsensitiveStr::Ascii("ymal"),
    ],
    values: &[
        &["abseil"],
        &["abseiling"],
        &["absence"],
        &["absence"],
        &["asbestos"],
        &["abstinence"],
        &["abstinence"],
        &["absolutes"],
        &["absolute"],
        &["absolute"],
        &["absolutely"],
        &["absolutes"],
        &["absolutely"],
        &["absolutes"],
        &["absolutes"],
        &["absolutely"],
        &["absolutely"],
        &["absolutes"],
        &["absolve"],
        &["absorption"],
        &["absorbs"],
        &["absorption"],
        &["absorption"],
        &["absorption"],
        &["absolute"],
        &["absolutely"],
        &["absolutes"],
        &["absolve"],
        &["absorbs"],
        &["abstinence"],
        &["bastante"],
        &["abstinence"],
        &["abstinence"],
        &["abstinence"],
        &["abstinence"],
        &["abstraction"],
        &["abstraction"],
        &["abstraction"],
        &["abstraction"],
        &["abusers"],
        &["absurdity"],
        &["absurdly"],
        &["absurdly"],
        &["absurdity"],
        &["abysmal"],
    ],
    range: 3..=8,
};

static WORD_ABR_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_ABR_CHILDREN),
    value: None,
};

pub static WORD_ABR_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("eviate"),
        dictgen::InsensitiveStr::Ascii("eviated"),
        dictgen::InsensitiveStr::Ascii("eviation"),
        dictgen::InsensitiveStr::Ascii("iter"),
        dictgen::InsensitiveStr::Ascii("itrarily"),
        dictgen::InsensitiveStr::Ascii("itrary"),
        dictgen::InsensitiveStr::Ascii("itration"),
        dictgen::InsensitiveStr::Ascii("reviation"),
        dictgen::InsensitiveStr::Ascii("uplty"),
        dictgen::InsensitiveStr::Ascii("uptley"),
        dictgen::InsensitiveStr::Ascii("upty"),
        dictgen::InsensitiveStr::Ascii("utply"),
    ],
    values: &[
        &["abbreviate"],
        &["abbreviated"],
        &["abbreviation"],
        &["arbiter"],
        &["arbitrarily"],
        &["arbitrary"],
        &["arbitration"],
        &["abbreviation"],
        &["abruptly"],
        &["abruptly"],
        &["abruptly"],
        &["abruptly"],
    ],
    range: 4..=9,
};

static WORD_ABO_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_ABO_CHILDREN),
    value: None,
};

pub static WORD_ABO_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("dmen"),
        dictgen::InsensitiveStr::Ascii("dminal"),
        dictgen::InsensitiveStr::Ascii("manation"),
        dictgen::InsensitiveStr::Ascii("minacion"),
        dictgen::InsensitiveStr::Ascii("minaton"),
        dictgen::InsensitiveStr::Ascii("monation"),
        dictgen::InsensitiveStr::Ascii("ndon"),
        dictgen::InsensitiveStr::Ascii("ndoned"),
        dictgen::InsensitiveStr::Ascii("ndoning"),
        dictgen::InsensitiveStr::Ascii("ndons"),
        dictgen::InsensitiveStr::Ascii("nimation"),
        dictgen::InsensitiveStr::Ascii("rginial"),
        dictgen::InsensitiveStr::Ascii("riganal"),
        dictgen::InsensitiveStr::Ascii("rigenal"),
        dictgen::InsensitiveStr::Ascii("rigene"),
        dictgen::InsensitiveStr::Ascii("riginial"),
        dictgen::InsensitiveStr::Ascii("rigional"),
        dictgen::InsensitiveStr::Ascii("rignial"),
        dictgen::InsensitiveStr::Ascii("rigonal"),
        dictgen::InsensitiveStr::Ascii("roginal"),
        dictgen::InsensitiveStr::Ascii("rtificant"),
        dictgen::InsensitiveStr::Ascii("slute"),
        dictgen::InsensitiveStr::Ascii("slutely"),
        dictgen::InsensitiveStr::Ascii("slutes"),
        dictgen::InsensitiveStr::Ascii("slve"),
        dictgen::InsensitiveStr::Ascii("srbed"),
        dictgen::InsensitiveStr::Ascii("srbing"),
        dictgen::InsensitiveStr::Ascii("srbs"),
        dictgen::InsensitiveStr::Ascii("srption"),
        dictgen::InsensitiveStr::Ascii("tu"),
    ],
    values: &[
        &["abdomen"],
        &["abdominal"],
        &["abomination"],
        &["abomination"],
        &["abomination"],
        &["abomination"],
        &["abandon"],
        &["abandoned"],
        &["abandoning"],
        &["abandons"],
        &["abomination"],
        &["aboriginal"],
        &["aboriginal"],
        &["aboriginal"],
        &["aborigine"],
        &["aboriginal"],
        &["aboriginal"],
        &["aboriginal"],
        &["aboriginal"],
        &["aboriginal"],
        &["abortifacient"],
        &["absolute"],
        &["absolutely"],
        &["absolutes"],
        &["absolve"],
        &["absorbed"],
        &["absorbing"],
        &["absorbs"],
        &["absorption"],
        &["about"],
    ],
    range: 2..=9,
};

static WORD_ABN_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_ABN_CHILDREN),
    value: None,
};

pub static WORD_ABN_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("oramlly"),
        dictgen::InsensitiveStr::Ascii("ormalty"),
        dictgen::InsensitiveStr::Ascii("ormaly"),
        dictgen::InsensitiveStr::Ascii("ornally"),
    ],
    values: &[
        &["abnormally"],
        &["abnormally"],
        &["abnormally"],
        &["abnormally"],
    ],
    range: 6..=7,
};

static WORD_ABI_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_ABI_CHILDREN),
    value: None,
};

pub static WORD_ABI_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("litiy"),
        dictgen::InsensitiveStr::Ascii("lties"),
        dictgen::InsensitiveStr::Ascii("ltiy"),
        dictgen::InsensitiveStr::Ascii("lty"),
    ],
    values: &[&["ability"], &["abilities"], &["ability"], &["ability"]],
    range: 3..=5,
};

static WORD_ABE_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_ABE_CHILDREN),
    value: None,
};

pub static WORD_ABE_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[dictgen::InsensitiveStr::Ascii("ration")],
    values: &[&["aberration"]],
    range: 6..=6,
};

static WORD_ABD_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_ABD_CHILDREN),
    value: None,
};

pub static WORD_ABD_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ominable"),
        dictgen::InsensitiveStr::Ascii("omine"),
        dictgen::InsensitiveStr::Ascii("omnial"),
        dictgen::InsensitiveStr::Ascii("onimal"),
    ],
    values: &[&["abdominal"], &["abdomen"], &["abdominal"], &["abdominal"]],
    range: 5..=8,
};

static WORD_ABB_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_ABB_CHILDREN),
    value: None,
};

pub static WORD_ABB_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("erivation"),
        dictgen::InsensitiveStr::Ascii("erviation"),
        dictgen::InsensitiveStr::Ascii("out"),
        dictgen::InsensitiveStr::Ascii("reivation"),
        dictgen::InsensitiveStr::Ascii("reveation"),
        dictgen::InsensitiveStr::Ascii("reviatin"),
        dictgen::InsensitiveStr::Ascii("reviato"),
        dictgen::InsensitiveStr::Ascii("reviaton"),
        dictgen::InsensitiveStr::Ascii("rievation"),
        dictgen::InsensitiveStr::Ascii("rievations"),
    ],
    values: &[
        &["abbreviation"],
        &["abbreviation"],
        &["about"],
        &["abbreviation"],
        &["abbreviation"],
        &["abbreviation"],
        &["abbreviation"],
        &["abbreviation"],
        &["abbreviation"],
        &["abbreviation"],
    ],
    range: 3..=10,
};

static WORD_ABA_NODE: dictgen::DictTrieNode<&'static [&'static str]> = dictgen::DictTrieNode {
    children: dictgen::DictTrieChild::Flat(&WORD_ABA_CHILDREN),
    value: None,
};

pub static WORD_ABA_CHILDREN: dictgen::DictTable<&'static [&'static str]> = dictgen::DictTable {
    keys: &[
        dictgen::InsensitiveStr::Ascii("ndenment"),
        dictgen::InsensitiveStr::Ascii("ndining"),
        dictgen::InsensitiveStr::Ascii("ndomnent"),
        dictgen::InsensitiveStr::Ascii("ndond"),
        dictgen::InsensitiveStr::Ascii("ndonding"),
        dictgen::InsensitiveStr::Ascii("ndonig"),
        dictgen::InsensitiveStr::Ascii("ndonne"),
        dictgen::InsensitiveStr::Ascii("ndonned"),
        dictgen::InsensitiveStr::Ascii("ndonnent"),
        dictgen::InsensitiveStr::Ascii("ndonning"),
        dictgen::InsensitiveStr::Ascii("nonded"),
    ],
    values: &[
        &["abandonment"],
        &["abandoning"],
        &["abandonment"],
        &["abandoned"],
        &["abandoning"],
        &["abandoning"],
        &["abandonment"],
        &["abandoned"],
        &["abandonment"],
        &["abandoning"],
        &["abandoned"],
    ],
    range: 5..=8,
};
